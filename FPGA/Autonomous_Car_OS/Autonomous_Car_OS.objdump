
Autonomous_Car_OS.elf:     file format elf32-littlenios2
Autonomous_Car_OS.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000001bc

Program Header:
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0001cfa8 memsz 0x00026394 flags rwx
    LOAD off    0x0001e000 vaddr 0x02009000 paddr 0x02009000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  02009000  02009000  0001e000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001a8b0  000001bc  000001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000504  0001aa6c  0001aa6c  0001ba6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00002058  0001af70  0001af70  0001bf70  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000093ec  0001cfc8  0001cfc8  0001dfc8  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  000263b4  000263b4  0001e000  2**0
                  CONTENTS
  7 .onchip_memory2_0 00000000  02004000  02004000  0001e000  2**0
                  CONTENTS
  8 .epcs_flash_controller_0 00000000  02009020  02009020  0001e000  2**0
                  CONTENTS
  9 .comment      00000023  00000000  00000000  0001e000  2**0
                  CONTENTS, READONLY
 10 .debug_aranges 00001178  00000000  00000000  0001e028  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   0002f9c1  00000000  00000000  0001f1a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000b794  00000000  00000000  0004eb61  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000eb3f  00000000  00000000  0005a2f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000039bc  00000000  00000000  00068e34  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00004cbe  00000000  00000000  0006c7f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    00016c5c  00000000  00000000  000714ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_alt_sim_info 00000010  00000000  00000000  0008810c  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 000017d8  00000000  00000000  00088120  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .thread_model 00000006  00000000  00000000  0008eb6f  2**0
                  CONTENTS, READONLY
 20 .cpu          0000000c  00000000  00000000  0008eb75  2**0
                  CONTENTS, READONLY
 21 .qsys         00000001  00000000  00000000  0008eb81  2**0
                  CONTENTS, READONLY
 22 .simulation_enabled 00000001  00000000  00000000  0008eb82  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   0000000b  00000000  00000000  0008eb83  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    0000000b  00000000  00000000  0008eb8e  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   0000000b  00000000  00000000  0008eb99  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000008  00000000  00000000  0008eba4  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 0000002f  00000000  00000000  0008ebac  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     000e0f1e  00000000  00000000  0008ebdb  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
02009000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000001bc l    d  .text	00000000 .text
0001aa6c l    d  .rodata	00000000 .rodata
0001af70 l    d  .rwdata	00000000 .rwdata
0001cfc8 l    d  .bss	00000000 .bss
000263b4 l    d  .sdram	00000000 .sdram
02004000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
02009020 l    d  .epcs_flash_controller_0	00000000 .epcs_flash_controller_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Autonomous_Car_OS_bsp//obj/HAL/src/crt0.o
000001f0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 communication.c
00000000 l    df *ABS*	00000000 gps.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 motor.c
00000000 l    df *ABS*	00000000 uart.c
00000000 l    df *ABS*	00000000 ultrasound.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
000030fc l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 vfprintf.c
0001ac06 l     O .rodata	00000010 zeroes.4255
000054b8 l     F .text	000000bc __sbprintf
0001ac16 l     O .rodata	00000010 blanks.4254
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
000056c8 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
000072ac l     F .text	00000008 __fp_lock
000072b4 l     F .text	00000008 __fp_unlock
000072c8 l     F .text	0000019c __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0001af70 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
0001b3b4 l     O .rwdata	00000020 lc_ctype_charset
0001b394 l     O .rwdata	00000020 lc_message_charset
0001b3d4 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0001ac48 l     O .rodata	0000000c p05.2710
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00009d18 l     F .text	000000fc __sprint_r.part.0
0001ad6c l     O .rodata	00000010 zeroes.4200
0001ad7c l     O .rodata	00000010 blanks.4199
0000b140 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
0000dcb8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000dde0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000de0c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0000e1e4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
0000e2e0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
0000e4e0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0001cf38 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0000e764 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
0001cf3c l     O .rwdata	00000004 lockid
0001d000 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
0001cf40 l     O .rwdata	00000004 lockid
0001d008 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
000101a0 l     F .text	00000044 OS_InitMisc
000101e4 l     F .text	00000068 OS_InitRdyList
00010344 l     F .text	000000e0 OS_InitTCBList
000100c4 l     F .text	000000dc OS_InitEventList
0001024c l     F .text	0000007c OS_InitTaskIdle
000102c8 l     F .text	0000007c OS_InitTaskStat
000105a4 l     F .text	00000070 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
00012398 l     F .text	00000110 OS_FlagTaskRdy
000120f0 l     F .text	000001c4 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00016930 l     F .text	00000038 alt_dev_reg
0001b9bc l     O .rwdata	000000cc epcs_flash_controller_0
0001ba88 l     O .rwdata	0000106c jtag_uart_0
0001caf4 l     O .rwdata	000000d0 New_UltraSound0
0001cbc4 l     O .rwdata	000000d0 New_UltraSound1
0001cc94 l     O .rwdata	000000d0 New_UltraSound2
0001cd64 l     O .rwdata	000000d0 New_UltraSound3
0001ce34 l     O .rwdata	000000d0 uart_0
00000000 l    df *ABS*	00000000 altera_avalon_epcs_flash_controller.c
00016ab4 l     F .text	00000038 alt_flash_device_register
00016b40 l     F .text	000003f8 alt_epcs_flash_query
00016f38 l     F .text	000000e8 alt_epcs_flash_memcmp
0001730c l     F .text	00000094 alt_epcs_test_address
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0001785c l     F .text	000002a4 altera_avalon_jtag_uart_irq
00017b00 l     F .text	00000110 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
000182d8 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
00018640 l     F .text	00000098 altera_avalon_uart_irq
000186d8 l     F .text	00000138 altera_avalon_uart_rxirq
00018810 l     F .text	000001a4 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
00018a08 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00018cc0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 epcs_commands.c
00018fa4 l     F .text	00000038 epcs_test_wip
00018fdc l     F .text	00000038 epcs_await_wip_released
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000196b4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_flash_dev.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00019918 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00019a70 l     F .text	00000050 alt_get_errno
00019ac0 l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00009860 g     F .text	00000074 _mprec_log10
0001cf8e g     O .rwdata	00000002 OSTaskNameSize
00017280 g     F .text	0000008c alt_epcs_flash_get_info
0000994c g     F .text	0000008c __any_on
0000bb8c g     F .text	00000054 _isatty_r
0001ac54 g     O .rodata	00000028 __mprec_tinytens
0000e40c g     F .text	000000d4 alt_main
00023090 g     O .bss	00000100 alt_irq
0000bbe0 g     F .text	0000005c _lseek_r
00012bfc g     F .text	000000dc OS_MemInit
000168cc g     F .text	00000064 OSTimeSet
0000db90 g     F .text	00000084 .hidden __eqdf2
0000ee1c g     F .text	00000610 OSEventPendMulti
000263b4 g       *ABS*	00000000 __alt_heap_start
0001a0fc g     F .text	00000020 OSTaskCreateHook
0001d090 g     O .bss	00002000 task1_stk
00003254 g     F .text	0000003c printf
0001cf66 g     O .rwdata	00000002 OSMboxEn
0000f480 g     F .text	0000007c OSIntEnter
0000c4b0 g     F .text	0000009c _wcrtomb_r
0001cfc8 g     O .bss	00000004 isr_signal
00009b78 g     F .text	0000005c __sseek
0000760c g     F .text	00000010 __sinit
0000c35c g     F .text	00000138 __swbuf_r
0001cf76 g     O .rwdata	00000002 OSQEn
00007bf8 g     F .text	0000007c _setlocale_r
00007464 g     F .text	00000078 __sfmoreglue
0000eaf0 g     F .text	000000d0 __malloc_unlock
0001a158 g     F .text	0000001c OSTaskStatHook
0001d010 g     O .bss	00000001 OSLockNesting
0001cfb4 g     O .rwdata	00000002 OSDataSize
0001d011 g     O .bss	00000001 OSRunning
000010d0 g     F .text	00000044 ultrasound_init
0000bc3c g     F .text	0000015c memmove
0001a190 g     F .text	0000001c OSInitHookBegin
0001cfac g     O .rwdata	00000002 OSTmrSize
000075f4 g     F .text	00000018 _cleanup
0000897c g     F .text	000000a8 _Balloc
0001d014 g     O .bss	00000004 OSIdleCtr
00001c44 g     F .text	000000e0 .hidden __gtdf2
00019f7c g       .text	00000000 OSStartTsk
00000000  w      *UND*	00000000 __errno
000108cc g     F .text	000002d4 OS_TCBInit
00019014 g     F .text	000000f8 epcs_sector_erase
02009000 g     F .entry	00000000 __reset
0001cfb2 g     O .rwdata	00000002 OSTmrWheelTblSize
0001cf52 g     O .rwdata	00000002 OSEventSize
0001d018 g     O .bss	00000001 OSPrioHighRdy
0000b668 g     F .text	00000058 _fstat_r
0001a11c g     F .text	00000020 OSTaskDelHook
0001cfe8 g     O .bss	00000004 errno
00009af4 g     F .text	00000008 __seofread
00019f5c g       .text	00000000 OSStartHighRdy
000150ec g     F .text	000001ec OSTaskCreateExt
00011c3c g     F .text	00000068 OSFlagPendGetFlagsRdy
0001cf92 g     O .rwdata	00000002 OSTaskStatStkSize
00010d2c g     F .text	00000308 OSFlagAccept
000132dc g     F .text	000000b8 OSQFlush
00012cd8 g     F .text	00000140 OSQAccept
0001cff8 g     O .bss	00000004 alt_argv
00024f04 g       *ABS*	00000000 _gp
00014f30 g     F .text	000001bc OSTaskCreate
000149f0 g     F .text	00000540 OSTaskChangePrio
0001d00c g     O .bss	00000004 alt_heapsem
00010ba0 g     F .text	0000018c OSDebugInit
000152d8 g     F .text	000003e0 OSTaskDel
0001b83c g     O .rwdata	00000180 alt_fd_list
00023190 g     O .bss	00000370 OSFlagTbl
0000feb0 g     F .text	000000b4 OS_EventTaskRemove
00019250 g     F .text	00000068 epcs_write_status_register
0001a408 g     F .text	00000090 alt_find_dev
00008720 g     F .text	00000138 memcpy
0001cf7c g     O .rwdata	00000002 OSRdyTblSize
000072bc g     F .text	0000000c _cleanup_r
00002fc8 g     F .text	000000d0 .hidden __floatsidf
000199f8 g     F .text	00000078 alt_io_redirect
00001d24 g     F .text	000000e0 .hidden __ltdf2
0001aa6c g       *ABS*	00000000 __DTOR_END__
0000ebc0 g     F .text	00000120 OSEventNameGet
0001cf60 g     O .rwdata	00000002 OSFlagMax
00017414 g     F .text	00000100 alt_epcs_flash_write_block
000099d8 g     F .text	00000074 __fpclassifyd
000097bc g     F .text	000000a4 __ratio
0000f4fc g     F .text	000000f4 OSIntExit
0000b11c g     F .text	00000024 __vfiprintf_internal
0001cf9a g     O .rwdata	00000002 OSTCBSize
0001d019 g     O .bss	00000001 OSPrioCur
00017d64 g     F .text	000002b4 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00003228 g     F .text	0000002c _printf_r
02004000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00003218 g     F .text	00000008 .hidden __udivsi3
0000e234 g     F .text	000000ac isatty
0001cf80 g     O .rwdata	00000002 OSStkWidth
0001aca4 g     O .rodata	000000c8 __mprec_tens
0001cf74 g     O .rwdata	00000002 OSPtrSize
00007c74 g     F .text	0000000c __locale_charset
0001cf54 g     O .rwdata	00000002 OSEventTblSize
00001228 g     F .text	00000074 .hidden __fixunsdfsi
00019ed0 g       .text	00000000 OSCtxSw
0001cfe4 g     O .bss	00000004 __malloc_top_pad
0001d01c g     O .bss	00000004 OSTCBList
0001cfec g     O .bss	00000004 alt_fd_list_lock
0001cf0c g     O .rwdata	00000004 __mb_cur_max
00007ca4 g     F .text	0000000c _localeconv_r
0000b6c0 g     F .text	000004cc __sfvwrite_r
00008db0 g     F .text	0000003c __i2b
00023500 g     O .bss	00000c30 OSMemTbl
0001d020 g     O .bss	00000001 OSTickStepState
00009a4c g     F .text	00000054 _sbrk_r
000001f4 g     F .text	00000034 communication_init
0001cf78 g     O .rwdata	00000002 OSQMax
00024130 g     O .bss	00000800 OSTaskStatStk
0001282c g     F .text	000000f8 OSMemNameGet
0001cf58 g     O .rwdata	00000002 OSFlagEn
0000bd98 g     F .text	0000005c _read_r
0001cf9e g     O .rwdata	00000002 OSTimeTickHookEn
000137fc g     F .text	00000168 OSQPost
000124a8 g     F .text	000000a0 OS_FlagUnlink
0001cf2c g     O .rwdata	00000004 alt_max_fd
00010474 g     F .text	00000064 OS_MemCopy
000104d8 g     F .text	000000cc OS_Sched
0000b384 g     F .text	000000f0 _fclose_r
0001273c g     F .text	000000f0 OSMemGet
000159b8 g     F .text	000001c0 OSTaskNameSet
0000727c g     F .text	00000030 fflush
0001cfe0 g     O .bss	00000004 __malloc_max_sbrked_mem
0001d024 g     O .bss	00000004 OSCtxSwCtr
0001a174 g     F .text	0000001c OSTimeTickHook
0001cf62 g     O .rwdata	00000002 OSFlagNameSize
0000ff64 g     F .text	000000fc OS_EventTaskRemoveMulti
0000d2f4 g     F .text	0000089c .hidden __adddf3
0000fd64 g     F .text	0000014c OS_EventTaskWaitMulti
000173a0 g     F .text	00000074 alt_epcs_flash_erase_block
00009564 g     F .text	0000011c __b2d
0001cf7a g     O .rwdata	00000002 OSQSize
0000ccd8 g     F .text	0000061c .hidden __umoddi3
0000e330 g     F .text	000000dc lseek
00014300 g     F .text	00000268 OSSemPend
0001cf04 g     O .rwdata	00000004 _global_impure_ptr
00019518 g     F .text	0000005c epcs_exit_4_bytes_mode
000002cc g     F .text	000002bc GPS
0000bdf4 g     F .text	00000568 _realloc_r
0001cf64 g     O .rwdata	00000002 OSLowestPrio
000263b4 g       *ABS*	00000000 __bss_end
0000e0f4 g     F .text	000000f0 alt_iic_isr_register
0001a1e4 g     F .text	00000020 OSTCBInitHook
0001cfaa g     O .rwdata	00000002 OSTmrCfgTicksPerSec
00019dac g     F .text	00000104 alt_tick
0000c698 g     F .text	00000640 .hidden __udivdi3
00000b94 g     F .text	000000bc motor_setting
0000b488 g     F .text	00000184 _fputwc_r
0001cf4c g     O .rwdata	00000002 OSEventEn
0001ac7c g     O .rodata	00000028 __mprec_bigtens
00008b94 g     F .text	00000104 __s2b
0001cfa6 g     O .rwdata	00000002 OSTmrCfgNameSize
0000dc14 g     F .text	000000a4 .hidden __floatunsidf
0000930c g     F .text	00000060 __mcmp
000184e4 g     F .text	0000015c altera_avalon_uart_init
0000762c g     F .text	00000018 __fp_lock_all
0000e0a8 g     F .text	0000004c alt_ic_irq_enabled
00000960 g     F .text	00000044 nUART_ISR
000122b4 g     F .text	000000e4 OS_FlagInit
00019d14 g     F .text	00000098 alt_alarm_stop
00000268 g     F .text	00000030 receiveFromBoard
0001cf88 g     O .rwdata	00000002 OSTaskIdleStkSize
0001cff0 g     O .bss	00000004 alt_irq_active
00013ee8 g     F .text	000000b0 OSSemAccept
00012a3c g     F .text	000000d8 OSMemPut
00012548 g     F .text	000001f4 OSMemCreate
0001d028 g     O .bss	00000004 OSIdleCtrMax
000000ec g     F .exceptions	000000d0 alt_irq_handler
0001b814 g     O .rwdata	00000028 alt_dev_null
0001cf9c g     O .rwdata	00000002 OSTicksPerSec
00019ed0 g       .text	00000000 OSIntCtxSw
00008c98 g     F .text	00000068 __hi0bits
00002f40 g     F .text	00000088 .hidden __fixdfsi
0001d02c g     O .bss	00000004 OSTCBFreeList
00014568 g     F .text	0000016c OSSemPendAbort
0001cf24 g     O .rwdata	00000008 alt_dev_list
0000e7b4 g     F .text	00000100 write
00000c50 g     F .text	00000150 setSpeedPerc
0001cfa0 g     O .rwdata	00000002 OSVersionNbr
0000de5c g     F .text	000000b8 fstat
00001d24 g     F .text	000000e0 .hidden __ledf2
000006b4 g     F .text	000000bc char_to_int
0001cf48 g     O .rwdata	00000004 OSEndiannessTest
0000907c g     F .text	00000140 __pow5mult
00009e2c g     F .text	000012f0 ___vfiprintf_internal_r
0001cfd8 g     O .bss	00000004 __nlocale_changed
00003220 g     F .text	00000008 .hidden __umodsi3
00000588 g     F .text	0000012c dataValid
000193d4 g     F .text	00000068 epcs_read_electronic_signature
0001cf5a g     O .rwdata	00000002 OSFlagGrpSize
000263b4 g       *ABS*	00000000 end
00001034 g     F .text	0000009c uart_send_string
00018d10 g     F .text	00000238 altera_avalon_uart_write
00017710 g     F .text	0000014c altera_avalon_jtag_uart_init
00010738 g     F .text	000000cc OS_TaskStat
0001aa6c g       *ABS*	00000000 __CTOR_LIST__
02000000 g       *ABS*	00000000 __alt_stack_pointer
0001834c g     F .text	00000088 alt_avalon_timer_sc_init
00018434 g     F .text	00000060 altera_avalon_uart_write_fd
00003098 g     F .text	00000064 .hidden __clzsi2
00000fd4 g     F .text	00000060 uart_receive_byte
00018494 g     F .text	00000050 altera_avalon_uart_close_fd
00018018 g     F .text	000002c0 altera_avalon_jtag_uart_write
00000f1c g     F .text	0000004c uart_init
0000761c g     F .text	00000004 __sfp_lock_acquire
00008638 g     F .text	000000e8 memchr
00010424 g     F .text	00000050 OS_MemClr
0000343c g     F .text	00002058 ___vfprintf_internal_r
00019fa0 g     F .text	0000015c OSTaskStkInit
00000770 g     F .text	00000198 task1
00007780 g     F .text	000002f0 _free_r
00007c80 g     F .text	00000010 __locale_mb_cur_max
0000fac0 g     F .text	00000198 OS_EventTaskRdy
0001a89c g     F .text	00000194 __call_exitprocs
0001d030 g     O .bss	00000001 OSCPUUsage
0001cfd4 g     O .bss	00000004 __mlocale_changed
0001cf10 g     O .rwdata	00000004 __malloc_sbrk_base
000001bc g     F .text	00000038 _start
00000908 g     F .text	0000002c task2
0001d060 g     O .bss	00000004 _alt_tick_rate
00000298 g     F .text	00000034 gps_init
00013394 g     F .text	000002fc OSQPend
000162e4 g     F .text	00000148 OSTimeDly
000091bc g     F .text	00000150 __lshift
0001a204 g     F .text	00000204 alt_avalon_spi_command
0001d064 g     O .bss	00000004 _alt_nticks
0000e530 g     F .text	00000104 read
0001699c g     F .text	00000118 alt_sys_init
0001a788 g     F .text	00000114 __register_exitproc
0001d031 g     O .bss	00000001 OSTaskCtr
00003290 g     F .text	000000c0 strncmp
0001642c g     F .text	0000024c OSTimeDlyHMSM
00008dec g     F .text	00000290 __multiply
00017c10 g     F .text	00000068 altera_avalon_jtag_uart_close
0000129c g     F .text	00000028 .hidden __mulsi3
00003350 g     F .text	000000ec strncpy
0001d068 g     O .bss	00000028 __malloc_current_mallinfo
0001cf4e g     O .rwdata	00000002 OSEventMax
00009680 g     F .text	0000013c __d2b
000146d4 g     F .text	00000110 OSSemPost
00018f48 g     F .text	0000005c epcs_read_status_register
0000f678 g     F .text	000000d8 OSSchedUnlock
000175ac g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0001a5ac g     F .text	00000114 alt_get_fd
0001d034 g     O .bss	00000004 OSMemFreeList
0000f7bc g     F .text	000000ac OSStatInit
0001202c g     F .text	000000c4 OSFlagQuery
0001cf84 g     O .rwdata	00000002 OSTaskCreateExtEn
0000b258 g     F .text	00000054 _close_r
0001943c g     F .text	00000080 epcs_read_device_id
0001a70c g     F .text	0000007c memcmp
0000faa4 g     F .text	0000001c OS_Dummy
0001766c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
000263b4 g       *ABS*	00000000 __alt_stack_base
000176bc g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
02009000 g       *ABS*	00000000 __alt_mem_epcs_flash_controller_0
00001114 g     F .text	00000114 ultrasound_read
00005574 g     F .text	00000154 __swsetup_r
00024930 g     O .bss	000001e0 OSQTbl
000012c4 g     F .text	00000980 .hidden __divdf3
000074dc g     F .text	00000118 __sfp
000098d4 g     F .text	00000078 __copybits
0001b40c g     O .rwdata	00000408 __malloc_av_
00007628 g     F .text	00000004 __sinit_lock_release
0001d038 g     O .bss	00000004 OSTCBHighRdy
00001e04 g     F .text	0000086c .hidden __muldf3
00009aa0 g     F .text	00000054 __sread
0001d03c g     O .bss	00000004 OSQFreeList
0001a498 g     F .text	00000114 alt_find_file
00019704 g     F .text	000000a4 alt_dev_llist_insert
0000e9d0 g     F .text	00000120 __malloc_lock
0000e6b4 g     F .text	000000b0 sbrk
0000ece0 g     F .text	0000013c OSEventNameSet
00007220 g     F .text	0000005c _fflush_r
0000b2ac g     F .text	000000d8 _calloc_r
0001d040 g     O .bss	00000001 OSRdyGrp
0001cfb8 g     O .rwdata	00000008 alt_flash_dev_list
0001cfc8 g       *ABS*	00000000 __bss_start
00008858 g     F .text	00000124 memset
000009a4 g     F .text	00000134 main
0001cffc g     O .bss	00000004 alt_envp
0001cfdc g     O .bss	00000004 __malloc_max_total_mem
0001760c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000c494 g     F .text	0000001c __swbuf
0001adac g     O .rodata	00000100 OSUnMapTbl
0001cf7e g     O .rwdata	00000002 OSSemEn
00011ca4 g     F .text	00000388 OSFlagPost
00009bd4 g     F .text	00000008 __sclose
02000000 g       *ABS*	00000000 __alt_heap_limit
0000b474 g     F .text	00000014 fclose
0000fc58 g     F .text	0000010c OS_EventTaskWait
0001f090 g     O .bss	00002000 task2_stk
00010804 g     F .text	000000c8 OS_TaskStatStkChk
000156b8 g     F .text	00000158 OSTaskDelReq
000058f0 g     F .text	00001728 _dtoa_r
00007e90 g     F .text	000007a8 _malloc_r
0000c60c g     F .text	00000030 __ascii_wctomb
0001cf30 g     O .rwdata	00000004 alt_errno
0000f750 g     F .text	0000006c OSStart
00021090 g     O .bss	00002000 task3_stk
0000e974 g     F .text	0000005c __env_unlock
00007a70 g     F .text	000000c4 _fwalk
00015b78 g     F .text	000001f8 OSTaskResume
00012b14 g     F .text	000000e8 OSMemQuery
0001cf90 g     O .rwdata	00000002 OSTaskStatEn
0001cf6a g     O .rwdata	00000002 OSMemMax
00013964 g     F .text	00000170 OSQPostFront
00003168 g     F .text	00000054 .hidden __divsi3
0001d041 g     O .bss	00000003 OSRdyTbl
0001cf44 g     O .rwdata	00000002 OSDebugEn
0000765c g     F .text	00000124 _malloc_trim_r
0001aa6c g       *ABS*	00000000 __CTOR_END__
0001cf5c g     O .rwdata	00000002 OSFlagNodeSize
0001cfa4 g     O .rwdata	00000002 OSTmrCfgMax
00017020 g     F .text	00000260 alt_epcs_flash_write
00009bdc g     F .text	000000a4 strcmp
00012e18 g     F .text	000001fc OSQCreate
00015810 g     F .text	000001a8 OSTaskNameGet
00013ad4 g     F .text	0000020c OSQPostOpt
0000f868 g     F .text	0000021c OSTimeTick
0001cf8c g     O .rwdata	00000002 OSTaskMax
0001aa6c g       *ABS*	00000000 __DTOR_LIST__
00013f98 g     F .text	00000100 OSSemCreate
0001cfb0 g     O .rwdata	00000002 OSTmrWheelSize
0000db90 g     F .text	00000084 .hidden __nedf2
0001cf86 g     O .rwdata	00000002 OSTaskDelEn
000147e4 g     F .text	00000110 OSSemQuery
00013014 g     F .text	000002c8 OSQDel
00013690 g     F .text	0000016c OSQPendAbort
00016968 g     F .text	00000034 alt_irq_init
0000e634 g     F .text	00000080 alt_release_fd
0001aac4 g     O .rodata	00000100 .hidden __clz_tab
0001cfd0 g     O .bss	00000004 _PathLocale
0001a6c0 g     F .text	00000014 atexit
0000b1fc g     F .text	0000005c _write_r
0000f5f0 g     F .text	00000088 OSSchedLock
00007cb0 g     F .text	0000001c setlocale
00011034 g     F .text	00000128 OSFlagCreate
0001cf08 g     O .rwdata	00000004 _impure_ptr
0001cff4 g     O .bss	00000004 alt_argc
00007018 g     F .text	00000208 __sflush_r
00019804 g     F .text	0000005c _do_dtors
00007c9c g     F .text	00000008 __locale_cjk_lang
0001cf56 g     O .rwdata	00000002 OSEventMultiEn
0001115c g     F .text	00000270 OSFlagDel
0001d044 g     O .bss	00000004 OSEventFreeList
00000020 g       .exceptions	00000000 alt_irq_entry
00009504 g     F .text	00000060 __ulp
0001164c g     F .text	000005f0 OSFlagPend
0001cfa2 g     O .rwdata	00000002 OSTmrEn
00007644 g     F .text	00000018 __fp_unlock_all
00000ad8 g     F .text	000000bc servo_setting
0001cf1c g     O .rwdata	00000008 alt_fs_list
00000f68 g     F .text	0000006c uart_send_byte
00000228 g     F .text	00000040 sendToBoard
00010614 g     F .text	00000074 OS_StrCopy
0001cf6c g     O .rwdata	00000002 OSMemNameSize
0001a1ac g     F .text	0000001c OSInitHookEnd
0001cf98 g     O .rwdata	00000002 OSTCBPrioTblMax
00007ccc g     F .text	0000000c localeconv
0001910c g     F .text	000000f4 epcs_read_buffer
0001cf94 g     O .rwdata	00000002 OSTaskStatStkChkEn
00016aec g     F .text	00000054 alt_epcs_flash_init
0000df14 g     F .text	00000050 alt_ic_isr_register
0001cf68 g     O .rwdata	00000002 OSMemEn
0001cf72 g     O .rwdata	00000002 OSMutexEn
0001cfc8 g       *ABS*	00000000 _edata
000183d4 g     F .text	00000060 altera_avalon_uart_read_fd
000263b4 g       *ABS*	00000000 _end
00019860 g     F .text	00000068 alt_flash_open_dev
0001d048 g     O .bss	00000001 OSIntNesting
0001cfcc g     O .bss	00000004 isr_signal2
00017c78 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
00016678 g     F .text	000001f0 OSTimeDlyResume
000114fc g     F .text	00000150 OSFlagNameSet
00000eb4 g     F .text	00000068 setSteering
00015d70 g     F .text	000001c8 OSTaskStkChk
0000e004 g     F .text	000000a4 alt_ic_irq_disable
000194bc g     F .text	0000005c epcs_enter_4_bytes_mode
0001cf6e g     O .rwdata	00000002 OSMemSize
00009afc g     F .text	0000007c __swrite
0001cf14 g     O .rwdata	00000004 __malloc_trim_threshold
00019eb0 g     F .text	00000020 altera_nios2_qsys_irq_init
00007c90 g     F .text	0000000c __locale_msgcharset
0001d04c g     O .bss	00000004 OSTCBCur
0001a6d4 g     F .text	00000038 exit
0001cf70 g     O .rwdata	00000002 OSMemTblSize
00007b34 g     F .text	000000c4 _fwalk_reent
0000936c g     F .text	00000198 __mdiff
000198c8 g     F .text	00000050 alt_flash_close_dev
000031bc g     F .text	0000005c .hidden __modsi3
02000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00007620 g     F .text	00000004 __sfp_lock_release
0000f42c g     F .text	00000054 OSInit
00000000 g       *ABS*	00000000 __alt_mem_sdram
0001614c g     F .text	0000012c OSTaskQuery
00013e3c g     F .text	000000ac OS_QInit
00010688 g     F .text	00000054 OS_StrLen
00012924 g     F .text	00000118 OSMemNameSet
0001cf8a g     O .rwdata	00000002 OSTaskProfileEn
0001d050 g     O .bss	00000004 OSTime
000189b4 g     F .text	00000054 altera_avalon_uart_close
00000da0 g     F .text	00000114 setSteeringPerc
00024b10 g     O .bss	00000800 OSTaskIdleStk
0001aa30 g     F .text	0000003c _exit
00019574 g     F .text	00000140 alt_alarm_start
000113cc g     F .text	00000130 OSFlagNameGet
00016868 g     F .text	00000064 OSTimeGet
00007cd8 g     F .text	000001b8 __smakebuf_r
00009c80 g     F .text	00000098 strlen
00019200 g     F .text	00000050 epcs_write_enable
0001a13c g     F .text	0000001c OSTaskSwHook
00019bb4 g     F .text	00000160 open
00025310 g     O .bss	00000b40 OSEventTbl
00001c44 g     F .text	000000e0 .hidden __gedf2
00025e50 g     O .bss	00000510 OSTCBTbl
000148f4 g     F .text	000000fc OSSemSet
0001cf18 g     O .rwdata	00000004 __wctomb
00009e14 g     F .text	00000018 __sprint_r
0001cf34 g     O .rwdata	00000004 alt_priority_mask
00014098 g     F .text	00000268 OSSemDel
0001d054 g     O .bss	00000004 OSFlagFreeList
00000934 g     F .text	0000002c task3
0000df64 g     F .text	000000a0 alt_ic_irq_enable
0001cf50 g     O .rwdata	00000002 OSEventNameSize
00005494 g     F .text	00000024 __vfprintf_internal
0001d058 g     O .bss	00000001 OSStatRdy
00026360 g     O .bss	00000054 OSTCBPrioTbl
00018a58 g     F .text	00000268 altera_avalon_uart_read
0000c63c g     F .text	0000005c _wctomb_r
0000e8b4 g     F .text	000000c0 __env_lock
0001cf96 g     O .rwdata	00000002 OSTaskSwHookEn
00002670 g     F .text	000008d0 .hidden __subdf3
00017514 g     F .text	00000098 alt_epcs_flash_read
00008d00 g     F .text	000000b0 __lo0bits
0001cfc0 g     O .rwdata	00000008 alt_alarm_list
0001cf5e g     O .rwdata	00000002 OSFlagWidth
000197a8 g     F .text	0000005c _do_ctors
0000c54c g     F .text	000000c0 wcrtomb
0000dd08 g     F .text	000000d8 close
0001d004 g     O .bss	00000004 alt_envsem
0001d05c g     O .bss	00000004 OSIdleCtrRun
0000fa84 g     F .text	00000020 OSVersion
0001cfa8 g     O .rwdata	00000002 OSTmrCfgWheelSize
00016278 g     F .text	0000006c OS_TaskStkClr
0001cf82 g     O .rwdata	00000002 OSTaskCreateEn
00010060 g     F .text	00000064 OS_EventWaitListInit
0000b60c g     F .text	0000005c fputwc
0001a1c8 g     F .text	0000001c OSTaskIdleHook
00000000  w      *UND*	00000000 free
00007624 g     F .text	00000004 __sinit_lock_acquire
000192b8 g     F .text	0000011c epcs_write_buffer
00008a4c g     F .text	00000148 __multadd
00015f38 g     F .text	00000214 OSTaskSuspend
00008a24 g     F .text	00000028 _Bfree
000106dc g     F .text	0000005c OS_TaskIdle
0001cfae g     O .rwdata	00000002 OSTmrTblSize
00013ce0 g     F .text	0000015c OSQQuery



Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)

00000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defff904 	addi	sp,sp,-28
  f0:	dfc00615 	stw	ra,24(sp)
  f4:	df000515 	stw	fp,20(sp)
  f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  fc:	000f4800 	call	f480 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 100:	0005313a 	rdctl	r2,ipending
 104:	e0bffe15 	stw	r2,-8(fp)

  return active;
 108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 10c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 114:	00800044 	movi	r2,1
 118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 11c:	e0fffb17 	ldw	r3,-20(fp)
 120:	e0bffc17 	ldw	r2,-16(fp)
 124:	1884703a 	and	r2,r3,r2
 128:	10001426 	beq	r2,zero,17c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 12c:	008000b4 	movhi	r2,2
 130:	108c2404 	addi	r2,r2,12432
 134:	e0fffd17 	ldw	r3,-12(fp)
 138:	180690fa 	slli	r3,r3,3
 13c:	10c5883a 	add	r2,r2,r3
 140:	10c00017 	ldw	r3,0(r2)
 144:	008000b4 	movhi	r2,2
 148:	108c2404 	addi	r2,r2,12432
 14c:	e13ffd17 	ldw	r4,-12(fp)
 150:	200890fa 	slli	r4,r4,3
 154:	21000104 	addi	r4,r4,4
 158:	1105883a 	add	r2,r2,r4
 15c:	10800017 	ldw	r2,0(r2)
 160:	1009883a 	mov	r4,r2
 164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 16c:	0005313a 	rdctl	r2,ipending
 170:	e0bfff15 	stw	r2,-4(fp)

  return active;
 174:	e0bfff17 	ldw	r2,-4(fp)
 178:	00000706 	br	198 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 17c:	e0bffc17 	ldw	r2,-16(fp)
 180:	1085883a 	add	r2,r2,r2
 184:	e0bffc15 	stw	r2,-16(fp)
      i++;
 188:	e0bffd17 	ldw	r2,-12(fp)
 18c:	10800044 	addi	r2,r2,1
 190:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 194:	003fe106 	br	11c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
 198:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 19c:	e0bffb17 	ldw	r2,-20(fp)
 1a0:	103fdb1e 	bne	r2,zero,110 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1a4:	000f4fc0 	call	f4fc <OSIntExit>
}
 1a8:	e037883a 	mov	sp,fp
 1ac:	dfc00117 	ldw	ra,4(sp)
 1b0:	df000017 	ldw	fp,0(sp)
 1b4:	dec00204 	addi	sp,sp,8
 1b8:	f800283a 	ret

Disassembly of section .text:

000001bc <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     1bc:	06c08034 	movhi	sp,512
    ori sp, sp, %lo(__alt_stack_pointer)
     1c0:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     1c4:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
     1c8:	d693c114 	ori	gp,gp,20228
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1cc:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     1d0:	10b3f214 	ori	r2,r2,53192

    movhi r3, %hi(__bss_end)
     1d4:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
     1d8:	18d8ed14 	ori	r3,r3,25524

    beq r2, r3, 1f
     1dc:	10c00326 	beq	r2,r3,1ec <_start+0x30>

0:
    stw zero, (r2)
     1e0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1e4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1e8:	10fffd36 	bltu	r2,r3,1e0 <_start+0x24>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1ec:	000e40c0 	call	e40c <alt_main>

000001f0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1f0:	003fff06 	br	1f0 <alt_after_alt_main>

000001f4 <communication_init>:

  Remarks:
    communication is realized via UART3
  ***************************************************************************/
void communication_init()
{
     1f4:	defffe04 	addi	sp,sp,-8
     1f8:	dfc00115 	stw	ra,4(sp)
     1fc:	df000015 	stw	fp,0(sp)
     200:	d839883a 	mov	fp,sp
	uart_init(NEW_ULTRASOUND3_BASE, ALTERA_AVALON_UART_CONTROL_RRDY_MSK);
     204:	01008074 	movhi	r4,513
     208:	21287004 	addi	r4,r4,-24128
     20c:	01402004 	movi	r5,128
     210:	0000f1c0 	call	f1c <uart_init>
}
     214:	e037883a 	mov	sp,fp
     218:	dfc00117 	ldw	ra,4(sp)
     21c:	df000017 	ldw	fp,0(sp)
     220:	dec00204 	addi	sp,sp,8
     224:	f800283a 	ret

00000228 <sendToBoard>:

  Remarks:
    communication is realized via UART3
  ***************************************************************************/
void sendToBoard(unsigned char data)
{
     228:	defffd04 	addi	sp,sp,-12
     22c:	dfc00215 	stw	ra,8(sp)
     230:	df000115 	stw	fp,4(sp)
     234:	df000104 	addi	fp,sp,4
     238:	2005883a 	mov	r2,r4
     23c:	e0bfff05 	stb	r2,-4(fp)
	uart_send_byte(NEW_ULTRASOUND3_BASE, data);
     240:	e0bfff03 	ldbu	r2,-4(fp)
     244:	01008074 	movhi	r4,513
     248:	21287004 	addi	r4,r4,-24128
     24c:	100b883a 	mov	r5,r2
     250:	0000f680 	call	f68 <uart_send_byte>
}
     254:	e037883a 	mov	sp,fp
     258:	dfc00117 	ldw	ra,4(sp)
     25c:	df000017 	ldw	fp,0(sp)
     260:	dec00204 	addi	sp,sp,8
     264:	f800283a 	ret

00000268 <receiveFromBoard>:

  Remarks:
    communication is realized via UART3
  ***************************************************************************/
unsigned char receiveFromBoard()
{
     268:	defffe04 	addi	sp,sp,-8
     26c:	dfc00115 	stw	ra,4(sp)
     270:	df000015 	stw	fp,0(sp)
     274:	d839883a 	mov	fp,sp
	return uart_receive_byte(NEW_ULTRASOUND3_BASE);
     278:	01008074 	movhi	r4,513
     27c:	21287004 	addi	r4,r4,-24128
     280:	0000fd40 	call	fd4 <uart_receive_byte>
}
     284:	e037883a 	mov	sp,fp
     288:	dfc00117 	ldw	ra,4(sp)
     28c:	df000017 	ldw	fp,0(sp)
     290:	dec00204 	addi	sp,sp,8
     294:	f800283a 	ret

00000298 <gps_init>:

int dataValid(char *String);
int char_to_int(char a);

void gps_init()
{
     298:	defffe04 	addi	sp,sp,-8
     29c:	dfc00115 	stw	ra,4(sp)
     2a0:	df000015 	stw	fp,0(sp)
     2a4:	d839883a 	mov	fp,sp
	uart_init(NEW_ULTRASOUND2_BASE, ALTERA_AVALON_UART_CONTROL_RRDY_MSK);
     2a8:	01008074 	movhi	r4,513
     2ac:	21287804 	addi	r4,r4,-24096
     2b0:	01402004 	movi	r5,128
     2b4:	0000f1c0 	call	f1c <uart_init>
}
     2b8:	e037883a 	mov	sp,fp
     2bc:	dfc00117 	ldw	ra,4(sp)
     2c0:	df000017 	ldw	fp,0(sp)
     2c4:	dec00204 	addi	sp,sp,8
     2c8:	f800283a 	ret

000002cc <GPS>:

Remarks:
	None
***************************************************************************/
void GPS(char *String)
{
     2cc:	deffed04 	addi	sp,sp,-76
     2d0:	dfc01215 	stw	ra,72(sp)
     2d4:	df001115 	stw	fp,68(sp)
     2d8:	df001104 	addi	fp,sp,68
     2dc:	e13fff15 	stw	r4,-4(fp)
	char Command[5];
	int i = 0;
     2e0:	e03fef15 	stw	zero,-68(fp)
	while(String[i] != 0x2C && i < 6) { i++; }; // We find first occurrence of comma (',') in the String.
     2e4:	00000306 	br	2f4 <GPS+0x28>
     2e8:	e0bfef17 	ldw	r2,-68(fp)
     2ec:	10800044 	addi	r2,r2,1
     2f0:	e0bfef15 	stw	r2,-68(fp)
     2f4:	e0bfef17 	ldw	r2,-68(fp)
     2f8:	e0ffff17 	ldw	r3,-4(fp)
     2fc:	1885883a 	add	r2,r3,r2
     300:	10800003 	ldbu	r2,0(r2)
     304:	10803fcc 	andi	r2,r2,255
     308:	1080201c 	xori	r2,r2,128
     30c:	10bfe004 	addi	r2,r2,-128
     310:	10800b20 	cmpeqi	r2,r2,44
     314:	1000031e 	bne	r2,zero,324 <GPS+0x58>
     318:	e0bfef17 	ldw	r2,-68(fp)
     31c:	10800190 	cmplti	r2,r2,6
     320:	103ff11e 	bne	r2,zero,2e8 <GPS+0x1c>

	strncpy(Command, String, i); // We copy characters (from first to comma) from String to Command.
     324:	e0bfef17 	ldw	r2,-68(fp)
     328:	e0fff304 	addi	r3,fp,-52
     32c:	1809883a 	mov	r4,r3
     330:	e17fff17 	ldw	r5,-4(fp)
     334:	100d883a 	mov	r6,r2
     338:	00033500 	call	3350 <strncpy>

	int b = strncmp(String,"$GPGGA",i); // We compare if command, we got is equal to GPGGA. Returns 0, when strings are identical.
     33c:	e0bfef17 	ldw	r2,-68(fp)
     340:	e13fff17 	ldw	r4,-4(fp)
     344:	014000b4 	movhi	r5,2
     348:	296a9b04 	addi	r5,r5,-21908
     34c:	100d883a 	mov	r6,r2
     350:	00032900 	call	3290 <strncmp>
     354:	e0bff015 	stw	r2,-64(fp)
	if (b == 0)
     358:	e0bff017 	ldw	r2,-64(fp)
     35c:	1000851e 	bne	r2,zero,574 <GPS+0x2a8>
	{
		int valid = dataValid(String); // We check if checksum at the end of the string is correct. Returns 1 if it is correct.
     360:	e13fff17 	ldw	r4,-4(fp)
     364:	00005880 	call	588 <dataValid>
     368:	e0bff115 	stw	r2,-60(fp)

		if (valid)
     36c:	e0bff117 	ldw	r2,-60(fp)
     370:	10008026 	beq	r2,zero,574 <GPS+0x2a8>
			//printf("%s\n",String);
			char Lat[20];
			char Long[20];

			// We parse latitude (between second and third comma) from the data and send it to the MX6 board through UART channel 3.
			i++;
     374:	e0bfef17 	ldw	r2,-68(fp)
     378:	10800044 	addi	r2,r2,1
     37c:	e0bfef15 	stw	r2,-68(fp)
			while(String[i] != 0x2C && i < 20) { i++; };
     380:	00000306 	br	390 <GPS+0xc4>
     384:	e0bfef17 	ldw	r2,-68(fp)
     388:	10800044 	addi	r2,r2,1
     38c:	e0bfef15 	stw	r2,-68(fp)
     390:	e0bfef17 	ldw	r2,-68(fp)
     394:	e0ffff17 	ldw	r3,-4(fp)
     398:	1885883a 	add	r2,r3,r2
     39c:	10800003 	ldbu	r2,0(r2)
     3a0:	10803fcc 	andi	r2,r2,255
     3a4:	1080201c 	xori	r2,r2,128
     3a8:	10bfe004 	addi	r2,r2,-128
     3ac:	10800b20 	cmpeqi	r2,r2,44
     3b0:	1000031e 	bne	r2,zero,3c0 <GPS+0xf4>
     3b4:	e0bfef17 	ldw	r2,-68(fp)
     3b8:	10800510 	cmplti	r2,r2,20
     3bc:	103ff11e 	bne	r2,zero,384 <GPS+0xb8>
			i++;
     3c0:	e0bfef17 	ldw	r2,-68(fp)
     3c4:	10800044 	addi	r2,r2,1
     3c8:	e0bfef15 	stw	r2,-68(fp)
			int temp = i;
     3cc:	e0bfef17 	ldw	r2,-68(fp)
     3d0:	e0bff215 	stw	r2,-56(fp)
			while(String[i] != 0x2C && i < 30) { i++; };
     3d4:	00000306 	br	3e4 <GPS+0x118>
     3d8:	e0bfef17 	ldw	r2,-68(fp)
     3dc:	10800044 	addi	r2,r2,1
     3e0:	e0bfef15 	stw	r2,-68(fp)
     3e4:	e0bfef17 	ldw	r2,-68(fp)
     3e8:	e0ffff17 	ldw	r3,-4(fp)
     3ec:	1885883a 	add	r2,r3,r2
     3f0:	10800003 	ldbu	r2,0(r2)
     3f4:	10803fcc 	andi	r2,r2,255
     3f8:	1080201c 	xori	r2,r2,128
     3fc:	10bfe004 	addi	r2,r2,-128
     400:	10800b20 	cmpeqi	r2,r2,44
     404:	1000031e 	bne	r2,zero,414 <GPS+0x148>
     408:	e0bfef17 	ldw	r2,-68(fp)
     40c:	10800790 	cmplti	r2,r2,30
     410:	103ff11e 	bne	r2,zero,3d8 <GPS+0x10c>
			strncpy(Lat, &String[temp], i - temp);
     414:	e0bff217 	ldw	r2,-56(fp)
     418:	e0ffff17 	ldw	r3,-4(fp)
     41c:	188b883a 	add	r5,r3,r2
     420:	e0ffef17 	ldw	r3,-68(fp)
     424:	e0bff217 	ldw	r2,-56(fp)
     428:	1885c83a 	sub	r2,r3,r2
     42c:	1007883a 	mov	r3,r2
     430:	e0bff444 	addi	r2,fp,-47
     434:	1009883a 	mov	r4,r2
     438:	180d883a 	mov	r6,r3
     43c:	00033500 	call	3350 <strncpy>
			Lat[i-temp] = 0x00;
     440:	e0ffef17 	ldw	r3,-68(fp)
     444:	e0bff217 	ldw	r2,-56(fp)
     448:	1885c83a 	sub	r2,r3,r2
     44c:	e0fff444 	addi	r3,fp,-47
     450:	1885883a 	add	r2,r3,r2
     454:	10000005 	stb	zero,0(r2)

			// We parse longitude (between fourth and fifth comma) from the data and send it to the MX6 board through UART channel 3.
			i++;
     458:	e0bfef17 	ldw	r2,-68(fp)
     45c:	10800044 	addi	r2,r2,1
     460:	e0bfef15 	stw	r2,-68(fp)
			while(String[i] != 0x2C && i < 35) { i++; };
     464:	00000306 	br	474 <GPS+0x1a8>
     468:	e0bfef17 	ldw	r2,-68(fp)
     46c:	10800044 	addi	r2,r2,1
     470:	e0bfef15 	stw	r2,-68(fp)
     474:	e0bfef17 	ldw	r2,-68(fp)
     478:	e0ffff17 	ldw	r3,-4(fp)
     47c:	1885883a 	add	r2,r3,r2
     480:	10800003 	ldbu	r2,0(r2)
     484:	10803fcc 	andi	r2,r2,255
     488:	1080201c 	xori	r2,r2,128
     48c:	10bfe004 	addi	r2,r2,-128
     490:	10800b20 	cmpeqi	r2,r2,44
     494:	1000031e 	bne	r2,zero,4a4 <GPS+0x1d8>
     498:	e0bfef17 	ldw	r2,-68(fp)
     49c:	108008d0 	cmplti	r2,r2,35
     4a0:	103ff11e 	bne	r2,zero,468 <GPS+0x19c>
			i++;
     4a4:	e0bfef17 	ldw	r2,-68(fp)
     4a8:	10800044 	addi	r2,r2,1
     4ac:	e0bfef15 	stw	r2,-68(fp)
			temp = i;
     4b0:	e0bfef17 	ldw	r2,-68(fp)
     4b4:	e0bff215 	stw	r2,-56(fp)
			while(String[i] != 0x2C && i < 40) { i++; };
     4b8:	00000306 	br	4c8 <GPS+0x1fc>
     4bc:	e0bfef17 	ldw	r2,-68(fp)
     4c0:	10800044 	addi	r2,r2,1
     4c4:	e0bfef15 	stw	r2,-68(fp)
     4c8:	e0bfef17 	ldw	r2,-68(fp)
     4cc:	e0ffff17 	ldw	r3,-4(fp)
     4d0:	1885883a 	add	r2,r3,r2
     4d4:	10800003 	ldbu	r2,0(r2)
     4d8:	10803fcc 	andi	r2,r2,255
     4dc:	1080201c 	xori	r2,r2,128
     4e0:	10bfe004 	addi	r2,r2,-128
     4e4:	10800b20 	cmpeqi	r2,r2,44
     4e8:	1000031e 	bne	r2,zero,4f8 <GPS+0x22c>
     4ec:	e0bfef17 	ldw	r2,-68(fp)
     4f0:	10800a10 	cmplti	r2,r2,40
     4f4:	103ff11e 	bne	r2,zero,4bc <GPS+0x1f0>
			strncpy(Long, &String[temp], i - temp);
     4f8:	e0bff217 	ldw	r2,-56(fp)
     4fc:	e0ffff17 	ldw	r3,-4(fp)
     500:	188b883a 	add	r5,r3,r2
     504:	e0ffef17 	ldw	r3,-68(fp)
     508:	e0bff217 	ldw	r2,-56(fp)
     50c:	1885c83a 	sub	r2,r3,r2
     510:	1007883a 	mov	r3,r2
     514:	e0bff944 	addi	r2,fp,-27
     518:	1009883a 	mov	r4,r2
     51c:	180d883a 	mov	r6,r3
     520:	00033500 	call	3350 <strncpy>
			Long[i-temp] = 0x00;
     524:	e0ffef17 	ldw	r3,-68(fp)
     528:	e0bff217 	ldw	r2,-56(fp)
     52c:	1885c83a 	sub	r2,r3,r2
     530:	e0fff944 	addi	r3,fp,-27
     534:	1885883a 	add	r2,r3,r2
     538:	10000005 	stb	zero,0(r2)


			uart_send_string("48.76");
     53c:	010000b4 	movhi	r4,2
     540:	212a9d04 	addi	r4,r4,-21900
     544:	00010340 	call	1034 <uart_send_string>
			for(i=0;i<50000;i++);
     548:	e03fef15 	stw	zero,-68(fp)
     54c:	00000306 	br	55c <GPS+0x290>
     550:	e0bfef17 	ldw	r2,-68(fp)
     554:	10800044 	addi	r2,r2,1
     558:	e0bfef15 	stw	r2,-68(fp)
     55c:	e0bfef17 	ldw	r2,-68(fp)
     560:	00f0d3d4 	movui	r3,49999
     564:	18bffa0e 	bge	r3,r2,550 <GPS+0x284>
			uart_send_string("11.26");
     568:	010000b4 	movhi	r4,2
     56c:	212a9f04 	addi	r4,r4,-21892
     570:	00010340 	call	1034 <uart_send_string>
	}
	else
	{
		//printf("Wrong command!\n");
	}
}
     574:	e037883a 	mov	sp,fp
     578:	dfc00117 	ldw	ra,4(sp)
     57c:	df000017 	ldw	fp,0(sp)
     580:	dec00204 	addi	sp,sp,8
     584:	f800283a 	ret

00000588 <dataValid>:

Remarks:
	None
***************************************************************************/
int dataValid(char *String)
{
     588:	defffb04 	addi	sp,sp,-20
     58c:	dfc00415 	stw	ra,16(sp)
     590:	df000315 	stw	fp,12(sp)
     594:	df000304 	addi	fp,sp,12
     598:	e13fff15 	stw	r4,-4(fp)
	int i = 1;
     59c:	00800044 	movi	r2,1
     5a0:	e0bffd15 	stw	r2,-12(fp)
	char calcChecksum = 0x00;
     5a4:	e03ffe05 	stb	zero,-8(fp)

	// Calculates checksum (XOR of all bytes between $ and *). Maximum characters in NMEA standard is 80!
	while (String[i] != 0x2A && i < 80)
     5a8:	00000a06 	br	5d4 <dataValid+0x4c>
	{
		calcChecksum = calcChecksum ^ String[i];
     5ac:	e0bffd17 	ldw	r2,-12(fp)
     5b0:	e0ffff17 	ldw	r3,-4(fp)
     5b4:	1885883a 	add	r2,r3,r2
     5b8:	10c00003 	ldbu	r3,0(r2)
     5bc:	e0bffe03 	ldbu	r2,-8(fp)
     5c0:	1884f03a 	xor	r2,r3,r2
     5c4:	e0bffe05 	stb	r2,-8(fp)
		i++;
     5c8:	e0bffd17 	ldw	r2,-12(fp)
     5cc:	10800044 	addi	r2,r2,1
     5d0:	e0bffd15 	stw	r2,-12(fp)
{
	int i = 1;
	char calcChecksum = 0x00;

	// Calculates checksum (XOR of all bytes between $ and *). Maximum characters in NMEA standard is 80!
	while (String[i] != 0x2A && i < 80)
     5d4:	e0bffd17 	ldw	r2,-12(fp)
     5d8:	e0ffff17 	ldw	r3,-4(fp)
     5dc:	1885883a 	add	r2,r3,r2
     5e0:	10800003 	ldbu	r2,0(r2)
     5e4:	10803fcc 	andi	r2,r2,255
     5e8:	1080201c 	xori	r2,r2,128
     5ec:	10bfe004 	addi	r2,r2,-128
     5f0:	10800aa0 	cmpeqi	r2,r2,42
     5f4:	1000031e 	bne	r2,zero,604 <dataValid+0x7c>
     5f8:	e0bffd17 	ldw	r2,-12(fp)
     5fc:	10801410 	cmplti	r2,r2,80
     600:	103fea1e 	bne	r2,zero,5ac <dataValid+0x24>
	{
		calcChecksum = calcChecksum ^ String[i];
		i++;
	}
	if (i > 80) return 0;
     604:	e0bffd17 	ldw	r2,-12(fp)
     608:	10801450 	cmplti	r2,r2,81
     60c:	1000021e 	bne	r2,zero,618 <dataValid+0x90>
     610:	0005883a 	mov	r2,zero
     614:	00002206 	br	6a0 <dataValid+0x118>

	char retChecksum = char_to_int(String[i+1]); // Converts first character of received checksum (one after *) to integer.
     618:	e0bffd17 	ldw	r2,-12(fp)
     61c:	10800044 	addi	r2,r2,1
     620:	e0ffff17 	ldw	r3,-4(fp)
     624:	1885883a 	add	r2,r3,r2
     628:	10800003 	ldbu	r2,0(r2)
     62c:	10803fcc 	andi	r2,r2,255
     630:	1080201c 	xori	r2,r2,128
     634:	10bfe004 	addi	r2,r2,-128
     638:	1009883a 	mov	r4,r2
     63c:	00006b40 	call	6b4 <char_to_int>
     640:	e0bffe45 	stb	r2,-7(fp)
	char temp = char_to_int(String[i+2]); // Converts second character of received checksum (two after *) to integer.
     644:	e0bffd17 	ldw	r2,-12(fp)
     648:	10800084 	addi	r2,r2,2
     64c:	e0ffff17 	ldw	r3,-4(fp)
     650:	1885883a 	add	r2,r3,r2
     654:	10800003 	ldbu	r2,0(r2)
     658:	10803fcc 	andi	r2,r2,255
     65c:	1080201c 	xori	r2,r2,128
     660:	10bfe004 	addi	r2,r2,-128
     664:	1009883a 	mov	r4,r2
     668:	00006b40 	call	6b4 <char_to_int>
     66c:	e0bffe85 	stb	r2,-6(fp)
	retChecksum =(retChecksum << 4) | temp; // Combines both numbers into one.
     670:	e0bffe47 	ldb	r2,-7(fp)
     674:	1004913a 	slli	r2,r2,4
     678:	1007883a 	mov	r3,r2
     67c:	e0bffe83 	ldbu	r2,-6(fp)
     680:	1884b03a 	or	r2,r3,r2
     684:	e0bffe45 	stb	r2,-7(fp)
	if (calcChecksum == retChecksum) // Compares received and calculated checksum.
     688:	e0fffe07 	ldb	r3,-8(fp)
     68c:	e0bffe47 	ldb	r2,-7(fp)
     690:	1880021e 	bne	r3,r2,69c <dataValid+0x114>
	{
		return 1;
     694:	00800044 	movi	r2,1
     698:	00000106 	br	6a0 <dataValid+0x118>
	}
	else
	{
		return 0;
     69c:	0005883a 	mov	r2,zero
	}
}
     6a0:	e037883a 	mov	sp,fp
     6a4:	dfc00117 	ldw	ra,4(sp)
     6a8:	df000017 	ldw	fp,0(sp)
     6ac:	dec00204 	addi	sp,sp,8
     6b0:	f800283a 	ret

000006b4 <char_to_int>:

Remarks:
	None
***************************************************************************/
int char_to_int(char a)
{
     6b4:	defffa04 	addi	sp,sp,-24
     6b8:	dfc00515 	stw	ra,20(sp)
     6bc:	df000415 	stw	fp,16(sp)
     6c0:	df000404 	addi	fp,sp,16
     6c4:	2005883a 	mov	r2,r4
     6c8:	e0bfff05 	stb	r2,-4(fp)
    int first = a / 16 - 3; // Gets the first number of the character
     6cc:	e0bfff07 	ldb	r2,-4(fp)
     6d0:	1000010e 	bge	r2,zero,6d8 <char_to_int+0x24>
     6d4:	108003c4 	addi	r2,r2,15
     6d8:	1005d13a 	srai	r2,r2,4
     6dc:	10803fcc 	andi	r2,r2,255
     6e0:	1080201c 	xori	r2,r2,128
     6e4:	10bfe004 	addi	r2,r2,-128
     6e8:	10bfff44 	addi	r2,r2,-3
     6ec:	e0bffd15 	stw	r2,-12(fp)
    int second = a % 16; // Gets the second number of the character
     6f0:	e0ffff07 	ldb	r3,-4(fp)
     6f4:	00a00034 	movhi	r2,32768
     6f8:	108003c4 	addi	r2,r2,15
     6fc:	1884703a 	and	r2,r3,r2
     700:	1000040e 	bge	r2,zero,714 <char_to_int+0x60>
     704:	10bfffc4 	addi	r2,r2,-1
     708:	00fffc04 	movi	r3,-16
     70c:	10c4b03a 	or	r2,r2,r3
     710:	10800044 	addi	r2,r2,1
     714:	10803fcc 	andi	r2,r2,255
     718:	1080201c 	xori	r2,r2,128
     71c:	10bfe004 	addi	r2,r2,-128
     720:	e0bffe15 	stw	r2,-8(fp)
    int result = first*10 + second; // Combines numbers
     724:	e13ffd17 	ldw	r4,-12(fp)
     728:	01400284 	movi	r5,10
     72c:	000129c0 	call	129c <__mulsi3>
     730:	1007883a 	mov	r3,r2
     734:	e0bffe17 	ldw	r2,-8(fp)
     738:	1885883a 	add	r2,r3,r2
     73c:	e0bffc15 	stw	r2,-16(fp)
    if(result > 9) result--; // Corrects result for the characters between A and F.
     740:	e0bffc17 	ldw	r2,-16(fp)
     744:	10800290 	cmplti	r2,r2,10
     748:	1000031e 	bne	r2,zero,758 <char_to_int+0xa4>
     74c:	e0bffc17 	ldw	r2,-16(fp)
     750:	10bfffc4 	addi	r2,r2,-1
     754:	e0bffc15 	stw	r2,-16(fp)
    return result;
     758:	e0bffc17 	ldw	r2,-16(fp)
}
     75c:	e037883a 	mov	sp,fp
     760:	dfc00117 	ldw	ra,4(sp)
     764:	df000017 	ldw	fp,0(sp)
     768:	dec00204 	addi	sp,sp,8
     76c:	f800283a 	ret

00000770 <task1>:
OS_EVENT *isr_signal; //timer ISR signal to task 1
OS_EVENT *isr_signal2; //timer ISR signal to task 1

/* Prints "Hello World" and sleeps for three seconds */
void task1(void* pdata)
{
     770:	defff904 	addi	sp,sp,-28
     774:	dfc00615 	stw	ra,24(sp)
     778:	df000515 	stw	fp,20(sp)
     77c:	df000504 	addi	fp,sp,20
     780:	e13fff15 	stw	r4,-4(fp)
	NIOS2_WRITE_STATUS(0);
     784:	0001703a 	wrctl	status,zero
	int sr;
	unsigned char identifier;
	unsigned char data;
	INT8U return_code = OS_NO_ERR;
     788:	e03ffe05 	stb	zero,-8(fp)
	unsigned char res_l, res_h;

	while (1)
	{
	    //wait for UART interrupt to permit execution
	    OSSemPend(isr_signal, 0, &return_code);
     78c:	d0e03117 	ldw	r3,-32572(gp)
     790:	e0bffe04 	addi	r2,fp,-8
     794:	1809883a 	mov	r4,r3
     798:	000b883a 	mov	r5,zero
     79c:	100d883a 	mov	r6,r2
     7a0:	00143000 	call	14300 <OSSemPend>

		sr = IORD_ALTERA_AVALON_UART_STATUS(NEW_ULTRASOUND3_BASE);
     7a4:	00808074 	movhi	r2,513
     7a8:	10a87204 	addi	r2,r2,-24120
     7ac:	10800037 	ldwio	r2,0(r2)
     7b0:	e0bffb15 	stw	r2,-20(fp)

		if(sr & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
     7b4:	e0bffb17 	ldw	r2,-20(fp)
     7b8:	1080200c 	andi	r2,r2,128
     7bc:	10003026 	beq	r2,zero,880 <task1+0x110>
		{
			data = uart_receive_byte(NEW_ULTRASOUND3_BASE);
     7c0:	01008074 	movhi	r4,513
     7c4:	21287004 	addi	r4,r4,-24128
     7c8:	0000fd40 	call	fd4 <uart_receive_byte>
     7cc:	e0bffc05 	stb	r2,-16(fp)
			identifier = uart_receive_byte(NEW_ULTRASOUND3_BASE);
     7d0:	01008074 	movhi	r4,513
     7d4:	21287004 	addi	r4,r4,-24128
     7d8:	0000fd40 	call	fd4 <uart_receive_byte>
     7dc:	e0bffc45 	stb	r2,-15(fp)

			switch (identifier)
     7e0:	e0bffc43 	ldbu	r2,-15(fp)
     7e4:	10c00060 	cmpeqi	r3,r2,1
     7e8:	1800031e 	bne	r3,zero,7f8 <task1+0x88>
     7ec:	108000a0 	cmpeqi	r2,r2,2
     7f0:	10000e1e 	bne	r2,zero,82c <task1+0xbc>
     7f4:	00001a06 	br	860 <task1+0xf0>
			{
				case 1: setSpeedPerc(data-100); uart_send_string("Sp"); break;
     7f8:	e0bffc03 	ldbu	r2,-16(fp)
     7fc:	10bfe704 	addi	r2,r2,-100
     800:	1009883a 	mov	r4,r2
     804:	0002fc80 	call	2fc8 <__floatsidf>
     808:	100b883a 	mov	r5,r2
     80c:	180d883a 	mov	r6,r3
     810:	2809883a 	mov	r4,r5
     814:	300b883a 	mov	r5,r6
     818:	0000c500 	call	c50 <setSpeedPerc>
     81c:	010000b4 	movhi	r4,2
     820:	212aa104 	addi	r4,r4,-21884
     824:	00010340 	call	1034 <uart_send_string>
     828:	00001106 	br	870 <task1+0x100>

				case 2: setSteeringPerc(data-100); uart_send_string("St"); break;
     82c:	e0bffc03 	ldbu	r2,-16(fp)
     830:	10bfe704 	addi	r2,r2,-100
     834:	1009883a 	mov	r4,r2
     838:	0002fc80 	call	2fc8 <__floatsidf>
     83c:	100b883a 	mov	r5,r2
     840:	180d883a 	mov	r6,r3
     844:	2809883a 	mov	r4,r5
     848:	300b883a 	mov	r5,r6
     84c:	0000da00 	call	da0 <setSteeringPerc>
     850:	010000b4 	movhi	r4,2
     854:	212aa204 	addi	r4,r4,-21880
     858:	00010340 	call	1034 <uart_send_string>
     85c:	00000406 	br	870 <task1+0x100>

				default: uart_send_string("Er"); break;
     860:	010000b4 	movhi	r4,2
     864:	212aa304 	addi	r4,r4,-21876
     868:	00010340 	call	1034 <uart_send_string>
     86c:	0001883a 	nop
			}

			IOWR_ALTERA_AVALON_UART_STATUS(NEW_ULTRASOUND3_BASE, 0);
     870:	0007883a 	mov	r3,zero
     874:	00808074 	movhi	r2,513
     878:	10a87204 	addi	r2,r2,-24120
     87c:	10c00035 	stwio	r3,0(r2)
		}

		uart_send_byte(NEW_ULTRASOUND0_BASE, 0xe8);
     880:	01008074 	movhi	r4,513
     884:	21288804 	addi	r4,r4,-24032
     888:	01403a04 	movi	r5,232
     88c:	0000f680 	call	f68 <uart_send_byte>
		//for (i = 0; i < 300; i++);
		uart_send_byte(NEW_ULTRASOUND0_BASE, 0x02);
     890:	01008074 	movhi	r4,513
     894:	21288804 	addi	r4,r4,-24032
     898:	01400084 	movi	r5,2
     89c:	0000f680 	call	f68 <uart_send_byte>
		//for (i = 0; i < 300; i++)
			;
		if (0)
			uart_send_byte(NEW_ULTRASOUND0_BASE, 0xb8);
		else
			uart_send_byte(NEW_ULTRASOUND0_BASE, 0xb0);
     8a0:	01008074 	movhi	r4,513
     8a4:	21288804 	addi	r4,r4,-24032
     8a8:	01402c04 	movi	r5,176
     8ac:	0000f680 	call	f68 <uart_send_byte>
		//for (i = 0; i < 300; i++);
		res_h = uart_receive_byte(NEW_ULTRASOUND0_BASE);
     8b0:	01008074 	movhi	r4,513
     8b4:	21288804 	addi	r4,r4,-24032
     8b8:	0000fd40 	call	fd4 <uart_receive_byte>
     8bc:	e0bffc85 	stb	r2,-14(fp)
		// for (i = 0; i < 100; i++);
		res_l = uart_receive_byte(NEW_ULTRASOUND0_BASE);
     8c0:	01008074 	movhi	r4,513
     8c4:	21288804 	addi	r4,r4,-24032
     8c8:	0000fd40 	call	fd4 <uart_receive_byte>
     8cc:	e0bffcc5 	stb	r2,-13(fp)
		uiDistance1 = (((unsigned int) res_h) << 8) + res_l;
     8d0:	e0bffc83 	ldbu	r2,-14(fp)
     8d4:	1006923a 	slli	r3,r2,8
     8d8:	e0bffcc3 	ldbu	r2,-13(fp)
     8dc:	1885883a 	add	r2,r3,r2
     8e0:	e0bffd15 	stw	r2,-12(fp)

		printf("Dist: %d\n", uiDistance1);
     8e4:	010000b4 	movhi	r4,2
     8e8:	212aa404 	addi	r4,r4,-21872
     8ec:	e17ffd17 	ldw	r5,-12(fp)
     8f0:	00032540 	call	3254 <printf>

		// Enable interrupt
		IOWR_ALTERA_AVALON_UART_CONTROL(NEW_ULTRASOUND3_BASE, ALTERA_AVALON_UART_CONTROL_RRDY_MSK);
     8f4:	00c02004 	movi	r3,128
     8f8:	00808074 	movhi	r2,513
     8fc:	10a87304 	addi	r2,r2,-24116
     900:	10c00035 	stwio	r3,0(r2)
	}
     904:	003fa106 	br	78c <task1+0x1c>

00000908 <task2>:
}

/* Prints "Hello World" and sleeps for three seconds */
void task2(void* pdata)
{
     908:	defffd04 	addi	sp,sp,-12
     90c:	dfc00215 	stw	ra,8(sp)
     910:	df000115 	stw	fp,4(sp)
     914:	df000104 	addi	fp,sp,4
     918:	e13fff15 	stw	r4,-4(fp)

	while (1)
	{
		OSTimeDlyHMSM(0, 0, 6, 0);
     91c:	0009883a 	mov	r4,zero
     920:	000b883a 	mov	r5,zero
     924:	01800184 	movi	r6,6
     928:	000f883a 	mov	r7,zero
     92c:	001642c0 	call	1642c <OSTimeDlyHMSM>
	}
     930:	003ffa06 	br	91c <task2+0x14>

00000934 <task3>:
}

/* Prints "Hello World" and sleeps for three seconds */
void task3(void* pdata)
{
     934:	defffd04 	addi	sp,sp,-12
     938:	dfc00215 	stw	ra,8(sp)
     93c:	df000115 	stw	fp,4(sp)
     940:	df000104 	addi	fp,sp,4
     944:	e13fff15 	stw	r4,-4(fp)
	  while (1)
	  {
		  OSTimeDlyHMSM(0, 0, 6, 0);
     948:	0009883a 	mov	r4,zero
     94c:	000b883a 	mov	r5,zero
     950:	01800184 	movi	r6,6
     954:	000f883a 	mov	r7,zero
     958:	001642c0 	call	1642c <OSTimeDlyHMSM>
	  }
     95c:	003ffa06 	br	948 <task3+0x14>

00000960 <nUART_ISR>:
}

void nUART_ISR(void* nirq_isr_context)
{
     960:	defffd04 	addi	sp,sp,-12
     964:	dfc00215 	stw	ra,8(sp)
     968:	df000115 	stw	fp,4(sp)
     96c:	df000104 	addi	fp,sp,4
     970:	e13fff15 	stw	r4,-4(fp)
	// Disable interrupt
	IOWR_ALTERA_AVALON_UART_CONTROL(NEW_ULTRASOUND3_BASE, 0x00);
     974:	0007883a 	mov	r3,zero
     978:	00808074 	movhi	r2,513
     97c:	10a87304 	addi	r2,r2,-24116
     980:	10c00035 	stwio	r3,0(r2)
	OSSemPost(isr_signal);
     984:	d0a03117 	ldw	r2,-32572(gp)
     988:	1009883a 	mov	r4,r2
     98c:	00146d40 	call	146d4 <OSSemPost>
}
     990:	e037883a 	mov	sp,fp
     994:	dfc00117 	ldw	ra,4(sp)
     998:	df000017 	ldw	fp,0(sp)
     99c:	dec00204 	addi	sp,sp,8
     9a0:	f800283a 	ret

000009a4 <main>:

/* The main function creates two task and starts multi-tasking */
int main(void)
{
     9a4:	defff904 	addi	sp,sp,-28
     9a8:	dfc00615 	stw	ra,24(sp)
     9ac:	df000515 	stw	fp,20(sp)
     9b0:	df000504 	addi	fp,sp,20
	ultrasound_init();
     9b4:	00010d00 	call	10d0 <ultrasound_init>
	communication_init();
     9b8:	00001f40 	call	1f4 <communication_init>

	// Create a semaphore set at zero, so task3 will wait for nUART_ISR
	isr_signal = OSSemCreate(0);
     9bc:	0009883a 	mov	r4,zero
     9c0:	0013f980 	call	13f98 <OSSemCreate>
     9c4:	d0a03115 	stw	r2,-32572(gp)

	alt_ic_isr_register(
     9c8:	d8000015 	stw	zero,0(sp)
     9cc:	0009883a 	mov	r4,zero
     9d0:	01400244 	movi	r5,9
     9d4:	01800034 	movhi	r6,0
     9d8:	31825804 	addi	r6,r6,2400
     9dc:	000f883a 	mov	r7,zero
     9e0:	000df140 	call	df14 <alt_ic_isr_register>
					NEW_ULTRASOUND3_IRQ,
			  nUART_ISR,
			  0x0,
			  0x0);

	printf("Hello on Console!");
     9e4:	010000b4 	movhi	r4,2
     9e8:	212aa704 	addi	r4,r4,-21860
     9ec:	00032540 	call	3254 <printf>
	uart_send_string("Hello over uart!");
     9f0:	010000b4 	movhi	r4,2
     9f4:	212aac04 	addi	r4,r4,-21840
     9f8:	00010340 	call	1034 <uart_send_string>

	OSTaskCreateExt(task1,
     9fc:	00800044 	movi	r2,1
     a00:	d8800015 	stw	r2,0(sp)
     a04:	008000b4 	movhi	r2,2
     a08:	10b42404 	addi	r2,r2,-12144
     a0c:	d8800115 	stw	r2,4(sp)
     a10:	00820004 	movi	r2,2048
     a14:	d8800215 	stw	r2,8(sp)
     a18:	d8000315 	stw	zero,12(sp)
     a1c:	d8000415 	stw	zero,16(sp)
     a20:	01000034 	movhi	r4,0
     a24:	2101dc04 	addi	r4,r4,1904
     a28:	000b883a 	mov	r5,zero
     a2c:	018000b4 	movhi	r6,2
     a30:	31bc2304 	addi	r6,r6,-3956
     a34:	01c00044 	movi	r7,1
     a38:	00150ec0 	call	150ec <OSTaskCreateExt>
                  TASK_STACKSIZE,
                  NULL,
                  0);


	OSTaskCreateExt(task2,
     a3c:	00800084 	movi	r2,2
     a40:	d8800015 	stw	r2,0(sp)
     a44:	008000b4 	movhi	r2,2
     a48:	10bc2404 	addi	r2,r2,-3952
     a4c:	d8800115 	stw	r2,4(sp)
     a50:	00820004 	movi	r2,2048
     a54:	d8800215 	stw	r2,8(sp)
     a58:	d8000315 	stw	zero,12(sp)
     a5c:	d8000415 	stw	zero,16(sp)
     a60:	01000034 	movhi	r4,0
     a64:	21024204 	addi	r4,r4,2312
     a68:	000b883a 	mov	r5,zero
     a6c:	018000b4 	movhi	r6,2
     a70:	31842304 	addi	r6,r6,4236
     a74:	01c00084 	movi	r7,2
     a78:	00150ec0 	call	150ec <OSTaskCreateExt>
                  TASK_STACKSIZE,
                  NULL,
                  0);


	OSTaskCreateExt(task3,
     a7c:	00800144 	movi	r2,5
     a80:	d8800015 	stw	r2,0(sp)
     a84:	008000b4 	movhi	r2,2
     a88:	10842404 	addi	r2,r2,4240
     a8c:	d8800115 	stw	r2,4(sp)
     a90:	00820004 	movi	r2,2048
     a94:	d8800215 	stw	r2,8(sp)
     a98:	d8000315 	stw	zero,12(sp)
     a9c:	d8000415 	stw	zero,16(sp)
     aa0:	01000034 	movhi	r4,0
     aa4:	21024d04 	addi	r4,r4,2356
     aa8:	000b883a 	mov	r5,zero
     aac:	018000b4 	movhi	r6,2
     ab0:	318c2304 	addi	r6,r6,12428
     ab4:	01c00144 	movi	r7,5
     ab8:	00150ec0 	call	150ec <OSTaskCreateExt>
                  task3_stk,
                  TASK_STACKSIZE,
                  NULL,
                  0);

	OSStart();
     abc:	000f7500 	call	f750 <OSStart>
	return 0;
     ac0:	0005883a 	mov	r2,zero
}
     ac4:	e037883a 	mov	sp,fp
     ac8:	dfc00117 	ldw	ra,4(sp)
     acc:	df000017 	ldw	fp,0(sp)
     ad0:	dec00204 	addi	sp,sp,8
     ad4:	f800283a 	ret

00000ad8 <servo_setting>:
  Remarks:
	This function is called by setSteering(int anglePos) 
 **************************************************************************/
void servo_setting(unsigned long phase1, unsigned long duty1,unsigned long phase2, unsigned long duty2,
		unsigned long period,unsigned long enable)
{
     ad8:	defff504 	addi	sp,sp,-44
     adc:	df000a15 	stw	fp,40(sp)
     ae0:	df000a04 	addi	fp,sp,40
     ae4:	e13ffc15 	stw	r4,-16(fp)
     ae8:	e17ffd15 	stw	r5,-12(fp)
     aec:	e1bffe15 	stw	r6,-8(fp)
     af0:	e1ffff15 	stw	r7,-4(fp)
	unsigned long * pwm_en= (unsigned long *)PWM0_EN;
     af4:	00a08074 	movhi	r2,33281
     af8:	10a8b004 	addi	r2,r2,-23872
     afc:	e0bff615 	stw	r2,-40(fp)
	unsigned long * pwm_period=(unsigned long *)PWM0_PERIOD;
     b00:	00a08074 	movhi	r2,33281
     b04:	10a8b104 	addi	r2,r2,-23868
     b08:	e0bff715 	stw	r2,-36(fp)
	unsigned long * pwm_phase1=(unsigned long *)PWM0_PHASE1;
     b0c:	00a08074 	movhi	r2,33281
     b10:	10a8b404 	addi	r2,r2,-23856
     b14:	e0bff815 	stw	r2,-32(fp)
	unsigned long * pwm_phase2=(unsigned long *)PWM0_PHASE2;
     b18:	00a08074 	movhi	r2,33281
     b1c:	10a8b504 	addi	r2,r2,-23852
     b20:	e0bff915 	stw	r2,-28(fp)
	unsigned long * pwm_duty1=(unsigned long *)PWM0_DUTY1;
     b24:	00a08074 	movhi	r2,33281
     b28:	10a8b204 	addi	r2,r2,-23864
     b2c:	e0bffa15 	stw	r2,-24(fp)
	unsigned long * pwm_duty2=(unsigned long *)PWM0_DUTY2;
     b30:	00a08074 	movhi	r2,33281
     b34:	10a8b304 	addi	r2,r2,-23860
     b38:	e0bffb15 	stw	r2,-20(fp)

	* pwm_en=enable;
     b3c:	e0bff617 	ldw	r2,-40(fp)
     b40:	e0c00217 	ldw	r3,8(fp)
     b44:	10c00015 	stw	r3,0(r2)
	* pwm_period=period;
     b48:	e0bff717 	ldw	r2,-36(fp)
     b4c:	e0c00117 	ldw	r3,4(fp)
     b50:	10c00015 	stw	r3,0(r2)
	* pwm_phase1=phase1;
     b54:	e0bff817 	ldw	r2,-32(fp)
     b58:	e0fffc17 	ldw	r3,-16(fp)
     b5c:	10c00015 	stw	r3,0(r2)
	* pwm_phase2=phase2;
     b60:	e0bff917 	ldw	r2,-28(fp)
     b64:	e0fffe17 	ldw	r3,-8(fp)
     b68:	10c00015 	stw	r3,0(r2)
	* pwm_duty1=duty1;
     b6c:	e0bffa17 	ldw	r2,-24(fp)
     b70:	e0fffd17 	ldw	r3,-12(fp)
     b74:	10c00015 	stw	r3,0(r2)
	* pwm_duty2=duty2;
     b78:	e0bffb17 	ldw	r2,-20(fp)
     b7c:	e0ffff17 	ldw	r3,-4(fp)
     b80:	10c00015 	stw	r3,0(r2)

}
     b84:	e037883a 	mov	sp,fp
     b88:	df000017 	ldw	fp,0(sp)
     b8c:	dec00104 	addi	sp,sp,4
     b90:	f800283a 	ret

00000b94 <motor_setting>:
  Remarks:
	This function is called by setSpeedPerc(float percentage)
 **************************************************************************/
void motor_setting(unsigned long phase1, unsigned long duty1,unsigned long phase2, unsigned long duty2,
		unsigned long period,unsigned long enable)
{
     b94:	defff504 	addi	sp,sp,-44
     b98:	df000a15 	stw	fp,40(sp)
     b9c:	df000a04 	addi	fp,sp,40
     ba0:	e13ffc15 	stw	r4,-16(fp)
     ba4:	e17ffd15 	stw	r5,-12(fp)
     ba8:	e1bffe15 	stw	r6,-8(fp)
     bac:	e1ffff15 	stw	r7,-4(fp)
	unsigned long * pwm_en= (unsigned long *)PWM1_EN;
     bb0:	00a08074 	movhi	r2,33281
     bb4:	10a8a804 	addi	r2,r2,-23904
     bb8:	e0bff615 	stw	r2,-40(fp)
	unsigned long * pwm_period=(unsigned long *)PWM1_PERIOD;
     bbc:	00a08074 	movhi	r2,33281
     bc0:	10a8a904 	addi	r2,r2,-23900
     bc4:	e0bff715 	stw	r2,-36(fp)
	unsigned long * pwm_phase1=(unsigned long *)PWM1_PHASE1;
     bc8:	00a08074 	movhi	r2,33281
     bcc:	10a8ac04 	addi	r2,r2,-23888
     bd0:	e0bff815 	stw	r2,-32(fp)
	unsigned long * pwm_phase2=(unsigned long *)PWM1_PHASE2;
     bd4:	00a08074 	movhi	r2,33281
     bd8:	10a8ad04 	addi	r2,r2,-23884
     bdc:	e0bff915 	stw	r2,-28(fp)
	unsigned long * pwm_duty1=(unsigned long *)PWM1_DUTY1;
     be0:	00a08074 	movhi	r2,33281
     be4:	10a8aa04 	addi	r2,r2,-23896
     be8:	e0bffa15 	stw	r2,-24(fp)
	unsigned long * pwm_duty2=(unsigned long *)PWM1_DUTY2;
     bec:	00a08074 	movhi	r2,33281
     bf0:	10a8ab04 	addi	r2,r2,-23892
     bf4:	e0bffb15 	stw	r2,-20(fp)

	* pwm_en=enable;
     bf8:	e0bff617 	ldw	r2,-40(fp)
     bfc:	e0c00217 	ldw	r3,8(fp)
     c00:	10c00015 	stw	r3,0(r2)
	* pwm_period=period;
     c04:	e0bff717 	ldw	r2,-36(fp)
     c08:	e0c00117 	ldw	r3,4(fp)
     c0c:	10c00015 	stw	r3,0(r2)
	* pwm_phase1=phase1;
     c10:	e0bff817 	ldw	r2,-32(fp)
     c14:	e0fffc17 	ldw	r3,-16(fp)
     c18:	10c00015 	stw	r3,0(r2)
	* pwm_phase2=phase2;
     c1c:	e0bff917 	ldw	r2,-28(fp)
     c20:	e0fffe17 	ldw	r3,-8(fp)
     c24:	10c00015 	stw	r3,0(r2)
	* pwm_duty1=duty1;
     c28:	e0bffa17 	ldw	r2,-24(fp)
     c2c:	e0fffd17 	ldw	r3,-12(fp)
     c30:	10c00015 	stw	r3,0(r2)
	* pwm_duty2=duty2;
     c34:	e0bffb17 	ldw	r2,-20(fp)
     c38:	e0ffff17 	ldw	r3,-4(fp)
     c3c:	10c00015 	stw	r3,0(r2)

}
     c40:	e037883a 	mov	sp,fp
     c44:	df000017 	ldw	fp,0(sp)
     c48:	dec00104 	addi	sp,sp,4
     c4c:	f800283a 	ret

00000c50 <setSpeedPerc>:

  Remarks:
    None
  ***************************************************************************/
void setSpeedPerc(double percentage)
{
     c50:	defff804 	addi	sp,sp,-32
     c54:	dfc00715 	stw	ra,28(sp)
     c58:	df000615 	stw	fp,24(sp)
     c5c:	df000604 	addi	fp,sp,24
     c60:	e13ffe15 	stw	r4,-8(fp)
     c64:	e17fff15 	stw	r5,-4(fp)
	const unsigned long steady = 75e3;
     c68:	00800074 	movhi	r2,1
     c6c:	10893e04 	addi	r2,r2,9464
     c70:	e0bffc15 	stw	r2,-16(fp)
	unsigned long dutyadd;




	if (percentage > 100)
     c74:	e13ffe17 	ldw	r4,-8(fp)
     c78:	e17fff17 	ldw	r5,-4(fp)
     c7c:	000d883a 	mov	r6,zero
     c80:	01d01674 	movhi	r7,16473
     c84:	0001c440 	call	1c44 <__gedf2>
     c88:	0080040e 	bge	zero,r2,c9c <setSpeedPerc+0x4c>
	{
		percentage = 100;
     c8c:	e03ffe15 	stw	zero,-8(fp)
     c90:	00901674 	movhi	r2,16473
     c94:	e0bfff15 	stw	r2,-4(fp)
     c98:	00001806 	br	cfc <setSpeedPerc+0xac>
	} else if (percentage<7 && percentage>-25){
     c9c:	e13ffe17 	ldw	r4,-8(fp)
     ca0:	e17fff17 	ldw	r5,-4(fp)
     ca4:	000d883a 	mov	r6,zero
     ca8:	01d00734 	movhi	r7,16412
     cac:	0001d240 	call	1d24 <__ledf2>
     cb0:	1000090e 	bge	r2,zero,cd8 <setSpeedPerc+0x88>
     cb4:	e13ffe17 	ldw	r4,-8(fp)
     cb8:	e17fff17 	ldw	r5,-4(fp)
     cbc:	000d883a 	mov	r6,zero
     cc0:	01f00e74 	movhi	r7,49209
     cc4:	0001c440 	call	1c44 <__gedf2>
     cc8:	0080030e 	bge	zero,r2,cd8 <setSpeedPerc+0x88>
		// apply no signal between -25 and +7 because is to less torque to move the wheels
		percentage=0;
     ccc:	e03ffe15 	stw	zero,-8(fp)
     cd0:	e03fff15 	stw	zero,-4(fp)
     cd4:	00000906 	br	cfc <setSpeedPerc+0xac>
	} else if (percentage < -100)
     cd8:	e13ffe17 	ldw	r4,-8(fp)
     cdc:	e17fff17 	ldw	r5,-4(fp)
     ce0:	000d883a 	mov	r6,zero
     ce4:	01f01674 	movhi	r7,49241
     ce8:	0001d240 	call	1d24 <__ledf2>
     cec:	1000030e 	bge	r2,zero,cfc <setSpeedPerc+0xac>
	{
		percentage = -100;
     cf0:	e03ffe15 	stw	zero,-8(fp)
     cf4:	00b01674 	movhi	r2,49241
     cf8:	e0bfff15 	stw	r2,-4(fp)
	}

	// add between -25000 to +25000
	dutyadd = percentage*25000/100;
     cfc:	e13ffe17 	ldw	r4,-8(fp)
     d00:	e17fff17 	ldw	r5,-4(fp)
     d04:	000d883a 	mov	r6,zero
     d08:	01d03634 	movhi	r7,16600
     d0c:	39da8004 	addi	r7,r7,27136
     d10:	0001e040 	call	1e04 <__muldf3>
     d14:	1009883a 	mov	r4,r2
     d18:	180b883a 	mov	r5,r3
     d1c:	2005883a 	mov	r2,r4
     d20:	2807883a 	mov	r3,r5
     d24:	1009883a 	mov	r4,r2
     d28:	180b883a 	mov	r5,r3
     d2c:	000d883a 	mov	r6,zero
     d30:	01d01674 	movhi	r7,16473
     d34:	00012c40 	call	12c4 <__divdf3>
     d38:	1009883a 	mov	r4,r2
     d3c:	180b883a 	mov	r5,r3
     d40:	2005883a 	mov	r2,r4
     d44:	2807883a 	mov	r3,r5
     d48:	1009883a 	mov	r4,r2
     d4c:	180b883a 	mov	r5,r3
     d50:	00012280 	call	1228 <__fixunsdfsi>
     d54:	e0bffd15 	stw	r2,-12(fp)

	//printf("motor_setting %lu, perc=%f\n",steady+dutyadd,percentage);
	motor_setting(0, steady+dutyadd, 0, 0, 1e6, 1);
     d58:	e0fffc17 	ldw	r3,-16(fp)
     d5c:	e0bffd17 	ldw	r2,-12(fp)
     d60:	1887883a 	add	r3,r3,r2
     d64:	008003f4 	movhi	r2,15
     d68:	10909004 	addi	r2,r2,16960
     d6c:	d8800015 	stw	r2,0(sp)
     d70:	00800044 	movi	r2,1
     d74:	d8800115 	stw	r2,4(sp)
     d78:	0009883a 	mov	r4,zero
     d7c:	180b883a 	mov	r5,r3
     d80:	000d883a 	mov	r6,zero
     d84:	000f883a 	mov	r7,zero
     d88:	0000b940 	call	b94 <motor_setting>
}
     d8c:	e037883a 	mov	sp,fp
     d90:	dfc00117 	ldw	ra,4(sp)
     d94:	df000017 	ldw	fp,0(sp)
     d98:	dec00204 	addi	sp,sp,8
     d9c:	f800283a 	ret

00000da0 <setSteeringPerc>:

  Remarks:
    None
  ***************************************************************************/
void setSteeringPerc(double percentage)
{
     da0:	defff804 	addi	sp,sp,-32
     da4:	dfc00715 	stw	ra,28(sp)
     da8:	df000615 	stw	fp,24(sp)
     dac:	df000604 	addi	fp,sp,24
     db0:	e13ffe15 	stw	r4,-8(fp)
     db4:	e17fff15 	stw	r5,-4(fp)
	const unsigned long steady = 75000;
     db8:	00800074 	movhi	r2,1
     dbc:	10893e04 	addi	r2,r2,9464
     dc0:	e0bffc15 	stw	r2,-16(fp)
	unsigned long dutyadd;

	if (percentage > 100)
     dc4:	e13ffe17 	ldw	r4,-8(fp)
     dc8:	e17fff17 	ldw	r5,-4(fp)
     dcc:	000d883a 	mov	r6,zero
     dd0:	01d01674 	movhi	r7,16473
     dd4:	0001c440 	call	1c44 <__gedf2>
     dd8:	0080040e 	bge	zero,r2,dec <setSteeringPerc+0x4c>
	{
		percentage = 100;
     ddc:	e03ffe15 	stw	zero,-8(fp)
     de0:	00901674 	movhi	r2,16473
     de4:	e0bfff15 	stw	r2,-4(fp)
     de8:	00000906 	br	e10 <setSteeringPerc+0x70>
	}
	else if (percentage < -100)
     dec:	e13ffe17 	ldw	r4,-8(fp)
     df0:	e17fff17 	ldw	r5,-4(fp)
     df4:	000d883a 	mov	r6,zero
     df8:	01f01674 	movhi	r7,49241
     dfc:	0001d240 	call	1d24 <__ledf2>
     e00:	1000030e 	bge	r2,zero,e10 <setSteeringPerc+0x70>
	{
		percentage = -100;
     e04:	e03ffe15 	stw	zero,-8(fp)
     e08:	00b01674 	movhi	r2,49241
     e0c:	e0bfff15 	stw	r2,-4(fp)
	}

	// add between -20000 to +20000
	dutyadd = percentage*20000/100;
     e10:	e13ffe17 	ldw	r4,-8(fp)
     e14:	e17fff17 	ldw	r5,-4(fp)
     e18:	000d883a 	mov	r6,zero
     e1c:	01d03534 	movhi	r7,16596
     e20:	39e20004 	addi	r7,r7,-30720
     e24:	0001e040 	call	1e04 <__muldf3>
     e28:	1009883a 	mov	r4,r2
     e2c:	180b883a 	mov	r5,r3
     e30:	2005883a 	mov	r2,r4
     e34:	2807883a 	mov	r3,r5
     e38:	1009883a 	mov	r4,r2
     e3c:	180b883a 	mov	r5,r3
     e40:	000d883a 	mov	r6,zero
     e44:	01d01674 	movhi	r7,16473
     e48:	00012c40 	call	12c4 <__divdf3>
     e4c:	1009883a 	mov	r4,r2
     e50:	180b883a 	mov	r5,r3
     e54:	2005883a 	mov	r2,r4
     e58:	2807883a 	mov	r3,r5
     e5c:	1009883a 	mov	r4,r2
     e60:	180b883a 	mov	r5,r3
     e64:	00012280 	call	1228 <__fixunsdfsi>
     e68:	e0bffd15 	stw	r2,-12(fp)
//	printf("servo_setting %lu, perc=%f\n",steady+dutyadd,percentage);
	servo_setting(0, steady+dutyadd, 0, 0, 1e6, 1);
     e6c:	e0fffc17 	ldw	r3,-16(fp)
     e70:	e0bffd17 	ldw	r2,-12(fp)
     e74:	1887883a 	add	r3,r3,r2
     e78:	008003f4 	movhi	r2,15
     e7c:	10909004 	addi	r2,r2,16960
     e80:	d8800015 	stw	r2,0(sp)
     e84:	00800044 	movi	r2,1
     e88:	d8800115 	stw	r2,4(sp)
     e8c:	0009883a 	mov	r4,zero
     e90:	180b883a 	mov	r5,r3
     e94:	000d883a 	mov	r6,zero
     e98:	000f883a 	mov	r7,zero
     e9c:	0000ad80 	call	ad8 <servo_setting>
}
     ea0:	e037883a 	mov	sp,fp
     ea4:	dfc00117 	ldw	ra,4(sp)
     ea8:	df000017 	ldw	fp,0(sp)
     eac:	dec00204 	addi	sp,sp,8
     eb0:	f800283a 	ret

00000eb4 <setSteering>:

  Remarks:
    None
  ***************************************************************************/
void setSteering(double angle)
{
     eb4:	defffa04 	addi	sp,sp,-24
     eb8:	dfc00515 	stw	ra,20(sp)
     ebc:	df000415 	stw	fp,16(sp)
     ec0:	df000404 	addi	fp,sp,16
     ec4:	e13ffe15 	stw	r4,-8(fp)
     ec8:	e17fff15 	stw	r5,-4(fp)
	const double maxangle = 17;
     ecc:	e03ffc15 	stw	zero,-16(fp)
     ed0:	00900c74 	movhi	r2,16433
     ed4:	e0bffd15 	stw	r2,-12(fp)
    setSteeringPerc(angle/maxangle);
     ed8:	e13ffe17 	ldw	r4,-8(fp)
     edc:	e17fff17 	ldw	r5,-4(fp)
     ee0:	e1bffc17 	ldw	r6,-16(fp)
     ee4:	e1fffd17 	ldw	r7,-12(fp)
     ee8:	00012c40 	call	12c4 <__divdf3>
     eec:	1009883a 	mov	r4,r2
     ef0:	180b883a 	mov	r5,r3
     ef4:	2005883a 	mov	r2,r4
     ef8:	2807883a 	mov	r3,r5
     efc:	1009883a 	mov	r4,r2
     f00:	180b883a 	mov	r5,r3
     f04:	0000da00 	call	da0 <setSteeringPerc>
}
     f08:	e037883a 	mov	sp,fp
     f0c:	dfc00117 	ldw	ra,4(sp)
     f10:	df000017 	ldw	fp,0(sp)
     f14:	dec00204 	addi	sp,sp,8
     f18:	f800283a 	ret

00000f1c <uart_init>:

  Remarks:
    None
  ***************************************************************************/
void uart_init(long Address, unsigned char flag)
{
     f1c:	defffd04 	addi	sp,sp,-12
     f20:	df000215 	stw	fp,8(sp)
     f24:	df000204 	addi	fp,sp,8
     f28:	e13ffe15 	stw	r4,-8(fp)
     f2c:	2805883a 	mov	r2,r5
     f30:	e0bfff05 	stb	r2,-4(fp)
	IOWR_ALTERA_AVALON_UART_CONTROL(Address, flag);
     f34:	e0bffe17 	ldw	r2,-8(fp)
     f38:	10800304 	addi	r2,r2,12
     f3c:	1007883a 	mov	r3,r2
     f40:	e0bfff03 	ldbu	r2,-4(fp)
     f44:	18800035 	stwio	r2,0(r3)
    IOWR_ALTERA_AVALON_UART_STATUS(Address, 0x00);
     f48:	e0bffe17 	ldw	r2,-8(fp)
     f4c:	10800204 	addi	r2,r2,8
     f50:	0007883a 	mov	r3,zero
     f54:	10c00035 	stwio	r3,0(r2)
}
     f58:	e037883a 	mov	sp,fp
     f5c:	df000017 	ldw	fp,0(sp)
     f60:	dec00104 	addi	sp,sp,4
     f64:	f800283a 	ret

00000f68 <uart_send_byte>:

  Remarks:
    None
  ***************************************************************************/
void uart_send_byte(long Address, unsigned char data)
{
     f68:	defffc04 	addi	sp,sp,-16
     f6c:	df000315 	stw	fp,12(sp)
     f70:	df000304 	addi	fp,sp,12
     f74:	e13ffe15 	stw	r4,-8(fp)
     f78:	2805883a 	mov	r2,r5
     f7c:	e0bfff05 	stb	r2,-4(fp)
	unsigned int status;
    IOWR_ALTERA_AVALON_UART_TXDATA(Address,data);
     f80:	e0bffe17 	ldw	r2,-8(fp)
     f84:	10800104 	addi	r2,r2,4
     f88:	1007883a 	mov	r3,r2
     f8c:	e0bfff03 	ldbu	r2,-4(fp)
     f90:	18800035 	stwio	r2,0(r3)
    status=IORD_ALTERA_AVALON_UART_STATUS(Address);
     f94:	e0bffe17 	ldw	r2,-8(fp)
     f98:	10800204 	addi	r2,r2,8
     f9c:	10800037 	ldwio	r2,0(r2)
     fa0:	e0bffd15 	stw	r2,-12(fp)
    while(!(status&0x0040))
     fa4:	00000406 	br	fb8 <uart_send_byte+0x50>
    {
    	status=IORD_ALTERA_AVALON_UART_STATUS(Address);
     fa8:	e0bffe17 	ldw	r2,-8(fp)
     fac:	10800204 	addi	r2,r2,8
     fb0:	10800037 	ldwio	r2,0(r2)
     fb4:	e0bffd15 	stw	r2,-12(fp)
void uart_send_byte(long Address, unsigned char data)
{
	unsigned int status;
    IOWR_ALTERA_AVALON_UART_TXDATA(Address,data);
    status=IORD_ALTERA_AVALON_UART_STATUS(Address);
    while(!(status&0x0040))
     fb8:	e0bffd17 	ldw	r2,-12(fp)
     fbc:	1080100c 	andi	r2,r2,64
     fc0:	103ff926 	beq	r2,zero,fa8 <uart_send_byte+0x40>
    {
    	status=IORD_ALTERA_AVALON_UART_STATUS(Address);
    }
}
     fc4:	e037883a 	mov	sp,fp
     fc8:	df000017 	ldw	fp,0(sp)
     fcc:	dec00104 	addi	sp,sp,4
     fd0:	f800283a 	ret

00000fd4 <uart_receive_byte>:

  Remarks:
    None
  ***************************************************************************/
unsigned char uart_receive_byte(long Address)
{
     fd4:	defffc04 	addi	sp,sp,-16
     fd8:	df000315 	stw	fp,12(sp)
     fdc:	df000304 	addi	fp,sp,12
     fe0:	e13fff15 	stw	r4,-4(fp)
	unsigned int  status;
	unsigned char res;
    status=IORD_ALTERA_AVALON_UART_STATUS(Address);
     fe4:	e0bfff17 	ldw	r2,-4(fp)
     fe8:	10800204 	addi	r2,r2,8
     fec:	10800037 	ldwio	r2,0(r2)
     ff0:	e0bffd15 	stw	r2,-12(fp)
    while(!(status&0x0080))
     ff4:	00000406 	br	1008 <uart_receive_byte+0x34>
    {
    	status=IORD_ALTERA_AVALON_UART_STATUS(Address);
     ff8:	e0bfff17 	ldw	r2,-4(fp)
     ffc:	10800204 	addi	r2,r2,8
    1000:	10800037 	ldwio	r2,0(r2)
    1004:	e0bffd15 	stw	r2,-12(fp)
unsigned char uart_receive_byte(long Address)
{
	unsigned int  status;
	unsigned char res;
    status=IORD_ALTERA_AVALON_UART_STATUS(Address);
    while(!(status&0x0080))
    1008:	e0bffd17 	ldw	r2,-12(fp)
    100c:	1080200c 	andi	r2,r2,128
    1010:	103ff926 	beq	r2,zero,ff8 <uart_receive_byte+0x24>
    {
    	status=IORD_ALTERA_AVALON_UART_STATUS(Address);
    }
    res=IORD_ALTERA_AVALON_UART_RXDATA(Address);
    1014:	e0bfff17 	ldw	r2,-4(fp)
    1018:	10800037 	ldwio	r2,0(r2)
    101c:	e0bffe05 	stb	r2,-8(fp)
    return res;
    1020:	e0bffe03 	ldbu	r2,-8(fp)
}
    1024:	e037883a 	mov	sp,fp
    1028:	df000017 	ldw	fp,0(sp)
    102c:	dec00104 	addi	sp,sp,4
    1030:	f800283a 	ret

00001034 <uart_send_string>:

void uart_send_string(char *sendString)
{
    1034:	defffc04 	addi	sp,sp,-16
    1038:	dfc00315 	stw	ra,12(sp)
    103c:	df000215 	stw	fp,8(sp)
    1040:	df000204 	addi	fp,sp,8
    1044:	e13fff15 	stw	r4,-4(fp)
	int length = 0;
    1048:	e03ffe15 	stw	zero,-8(fp)
	while ((sendString[length] != '\0') && (length < 100))
    104c:	00000c06 	br	1080 <uart_send_string+0x4c>
	{
		uart_send_byte(NEW_ULTRASOUND3_BASE, sendString[length]);
    1050:	e0bffe17 	ldw	r2,-8(fp)
    1054:	e0ffff17 	ldw	r3,-4(fp)
    1058:	1885883a 	add	r2,r3,r2
    105c:	10800003 	ldbu	r2,0(r2)
    1060:	10803fcc 	andi	r2,r2,255
    1064:	01008074 	movhi	r4,513
    1068:	21287004 	addi	r4,r4,-24128
    106c:	100b883a 	mov	r5,r2
    1070:	0000f680 	call	f68 <uart_send_byte>
		length++;
    1074:	e0bffe17 	ldw	r2,-8(fp)
    1078:	10800044 	addi	r2,r2,1
    107c:	e0bffe15 	stw	r2,-8(fp)
}

void uart_send_string(char *sendString)
{
	int length = 0;
	while ((sendString[length] != '\0') && (length < 100))
    1080:	e0bffe17 	ldw	r2,-8(fp)
    1084:	e0ffff17 	ldw	r3,-4(fp)
    1088:	1885883a 	add	r2,r3,r2
    108c:	10800003 	ldbu	r2,0(r2)
    1090:	10803fcc 	andi	r2,r2,255
    1094:	1080201c 	xori	r2,r2,128
    1098:	10bfe004 	addi	r2,r2,-128
    109c:	10000326 	beq	r2,zero,10ac <uart_send_string+0x78>
    10a0:	e0bffe17 	ldw	r2,-8(fp)
    10a4:	10801910 	cmplti	r2,r2,100
    10a8:	103fe91e 	bne	r2,zero,1050 <uart_send_string+0x1c>
	{
		uart_send_byte(NEW_ULTRASOUND3_BASE, sendString[length]);
		length++;
	}
	uart_send_byte(NEW_ULTRASOUND3_BASE, 0x00);
    10ac:	01008074 	movhi	r4,513
    10b0:	21287004 	addi	r4,r4,-24128
    10b4:	000b883a 	mov	r5,zero
    10b8:	0000f680 	call	f68 <uart_send_byte>
}
    10bc:	e037883a 	mov	sp,fp
    10c0:	dfc00117 	ldw	ra,4(sp)
    10c4:	df000017 	ldw	fp,0(sp)
    10c8:	dec00204 	addi	sp,sp,8
    10cc:	f800283a 	ret

000010d0 <ultrasound_init>:

  Remarks:
    None
  ***************************************************************************/
void ultrasound_init()
{
    10d0:	defffe04 	addi	sp,sp,-8
    10d4:	dfc00115 	stw	ra,4(sp)
    10d8:	df000015 	stw	fp,0(sp)
    10dc:	d839883a 	mov	fp,sp
	uart_init(NEW_ULTRASOUND0_BASE, 0x00);
    10e0:	01008074 	movhi	r4,513
    10e4:	21288804 	addi	r4,r4,-24032
    10e8:	000b883a 	mov	r5,zero
    10ec:	0000f1c0 	call	f1c <uart_init>
	uart_init(NEW_ULTRASOUND1_BASE, 0x00);
    10f0:	01008074 	movhi	r4,513
    10f4:	21288004 	addi	r4,r4,-24064
    10f8:	000b883a 	mov	r5,zero
    10fc:	0000f1c0 	call	f1c <uart_init>
}
    1100:	e037883a 	mov	sp,fp
    1104:	dfc00117 	ldw	ra,4(sp)
    1108:	df000017 	ldw	fp,0(sp)
    110c:	dec00204 	addi	sp,sp,8
    1110:	f800283a 	ret

00001114 <ultrasound_read>:

  Remarks:
    Distance in meter
  ***************************************************************************/
unsigned int ultrasound_read(long Address, unsigned char settings) 
{
    1114:	defffa04 	addi	sp,sp,-24
    1118:	dfc00515 	stw	ra,20(sp)
    111c:	df000415 	stw	fp,16(sp)
    1120:	df000404 	addi	fp,sp,16
    1124:	e13ffe15 	stw	r4,-8(fp)
    1128:	2805883a 	mov	r2,r5
    112c:	e0bfff05 	stb	r2,-4(fp)
	unsigned int i;
	unsigned char res_l, res_h;
	uart_send_byte(Address, 0xe8);
    1130:	e13ffe17 	ldw	r4,-8(fp)
    1134:	01403a04 	movi	r5,232
    1138:	0000f680 	call	f68 <uart_send_byte>
	for (i = 0; i < 300; i++);
    113c:	e03ffc15 	stw	zero,-16(fp)
    1140:	00000306 	br	1150 <ultrasound_read+0x3c>
    1144:	e0bffc17 	ldw	r2,-16(fp)
    1148:	10800044 	addi	r2,r2,1
    114c:	e0bffc15 	stw	r2,-16(fp)
    1150:	e0bffc17 	ldw	r2,-16(fp)
    1154:	10804b30 	cmpltui	r2,r2,300
    1158:	103ffa1e 	bne	r2,zero,1144 <ultrasound_read+0x30>
	uart_send_byte(Address, 0x02);
    115c:	e13ffe17 	ldw	r4,-8(fp)
    1160:	01400084 	movi	r5,2
    1164:	0000f680 	call	f68 <uart_send_byte>
	for (i = 0; i < 300; i++);
    1168:	e03ffc15 	stw	zero,-16(fp)
    116c:	00000306 	br	117c <ultrasound_read+0x68>
    1170:	e0bffc17 	ldw	r2,-16(fp)
    1174:	10800044 	addi	r2,r2,1
    1178:	e0bffc15 	stw	r2,-16(fp)
    117c:	e0bffc17 	ldw	r2,-16(fp)
    1180:	10804b30 	cmpltui	r2,r2,300
    1184:	103ffa1e 	bne	r2,zero,1170 <ultrasound_read+0x5c>
	if (settings)
    1188:	e0bfff03 	ldbu	r2,-4(fp)
    118c:	10000426 	beq	r2,zero,11a0 <ultrasound_read+0x8c>
		uart_send_byte(Address, 0xb8); 
    1190:	e13ffe17 	ldw	r4,-8(fp)
    1194:	01402e04 	movi	r5,184
    1198:	0000f680 	call	f68 <uart_send_byte>
    119c:	00000306 	br	11ac <ultrasound_read+0x98>
	else
		uart_send_byte(Address, 0xb0); 
    11a0:	e13ffe17 	ldw	r4,-8(fp)
    11a4:	01402c04 	movi	r5,176
    11a8:	0000f680 	call	f68 <uart_send_byte>
	for (i = 0; i < 300; i++);
    11ac:	e03ffc15 	stw	zero,-16(fp)
    11b0:	00000306 	br	11c0 <ultrasound_read+0xac>
    11b4:	e0bffc17 	ldw	r2,-16(fp)
    11b8:	10800044 	addi	r2,r2,1
    11bc:	e0bffc15 	stw	r2,-16(fp)
    11c0:	e0bffc17 	ldw	r2,-16(fp)
    11c4:	10804b30 	cmpltui	r2,r2,300
    11c8:	103ffa1e 	bne	r2,zero,11b4 <ultrasound_read+0xa0>
	res_h = uart_receive_byte(Address);
    11cc:	e13ffe17 	ldw	r4,-8(fp)
    11d0:	0000fd40 	call	fd4 <uart_receive_byte>
    11d4:	e0bffd05 	stb	r2,-12(fp)
	for (i = 0; i < 300; i++);
    11d8:	e03ffc15 	stw	zero,-16(fp)
    11dc:	00000306 	br	11ec <ultrasound_read+0xd8>
    11e0:	e0bffc17 	ldw	r2,-16(fp)
    11e4:	10800044 	addi	r2,r2,1
    11e8:	e0bffc15 	stw	r2,-16(fp)
    11ec:	e0bffc17 	ldw	r2,-16(fp)
    11f0:	10804b30 	cmpltui	r2,r2,300
    11f4:	103ffa1e 	bne	r2,zero,11e0 <ultrasound_read+0xcc>
	res_l = uart_receive_byte(Address);
    11f8:	e13ffe17 	ldw	r4,-8(fp)
    11fc:	0000fd40 	call	fd4 <uart_receive_byte>
    1200:	e0bffd45 	stb	r2,-11(fp)
	return (((unsigned int) res_h) << 8) + res_l; 
    1204:	e0bffd03 	ldbu	r2,-12(fp)
    1208:	1006923a 	slli	r3,r2,8
    120c:	e0bffd43 	ldbu	r2,-11(fp)
    1210:	1885883a 	add	r2,r3,r2
}
    1214:	e037883a 	mov	sp,fp
    1218:	dfc00117 	ldw	ra,4(sp)
    121c:	df000017 	ldw	fp,0(sp)
    1220:	dec00204 	addi	sp,sp,8
    1224:	f800283a 	ret

00001228 <__fixunsdfsi>:
    1228:	defffd04 	addi	sp,sp,-12
    122c:	000d883a 	mov	r6,zero
    1230:	01d07834 	movhi	r7,16864
    1234:	dc400115 	stw	r17,4(sp)
    1238:	dc000015 	stw	r16,0(sp)
    123c:	dfc00215 	stw	ra,8(sp)
    1240:	2023883a 	mov	r17,r4
    1244:	2821883a 	mov	r16,r5
    1248:	0001c440 	call	1c44 <__gedf2>
    124c:	1000080e 	bge	r2,zero,1270 <__fixunsdfsi+0x48>
    1250:	8809883a 	mov	r4,r17
    1254:	800b883a 	mov	r5,r16
    1258:	0002f400 	call	2f40 <__fixdfsi>
    125c:	dfc00217 	ldw	ra,8(sp)
    1260:	dc400117 	ldw	r17,4(sp)
    1264:	dc000017 	ldw	r16,0(sp)
    1268:	dec00304 	addi	sp,sp,12
    126c:	f800283a 	ret
    1270:	000d883a 	mov	r6,zero
    1274:	01d07834 	movhi	r7,16864
    1278:	8809883a 	mov	r4,r17
    127c:	800b883a 	mov	r5,r16
    1280:	00026700 	call	2670 <__subdf3>
    1284:	180b883a 	mov	r5,r3
    1288:	1009883a 	mov	r4,r2
    128c:	0002f400 	call	2f40 <__fixdfsi>
    1290:	00e00034 	movhi	r3,32768
    1294:	10c5883a 	add	r2,r2,r3
    1298:	003ff006 	br	125c <__fixunsdfsi+0x34>

0000129c <__mulsi3>:
    129c:	0005883a 	mov	r2,zero
    12a0:	20000726 	beq	r4,zero,12c0 <__mulsi3+0x24>
    12a4:	20c0004c 	andi	r3,r4,1
    12a8:	2008d07a 	srli	r4,r4,1
    12ac:	18000126 	beq	r3,zero,12b4 <__mulsi3+0x18>
    12b0:	1145883a 	add	r2,r2,r5
    12b4:	294b883a 	add	r5,r5,r5
    12b8:	203ffa1e 	bne	r4,zero,12a4 <__mulsi3+0x8>
    12bc:	f800283a 	ret
    12c0:	f800283a 	ret

000012c4 <__divdf3>:
    12c4:	defff004 	addi	sp,sp,-64
    12c8:	dc800815 	stw	r18,32(sp)
    12cc:	2824d53a 	srli	r18,r5,20
    12d0:	dd800c15 	stw	r22,48(sp)
    12d4:	282cd7fa 	srli	r22,r5,31
    12d8:	dc000615 	stw	r16,24(sp)
    12dc:	04000434 	movhi	r16,16
    12e0:	df000e15 	stw	fp,56(sp)
    12e4:	dd000a15 	stw	r20,40(sp)
    12e8:	dcc00915 	stw	r19,36(sp)
    12ec:	dc400715 	stw	r17,28(sp)
    12f0:	843fffc4 	addi	r16,r16,-1
    12f4:	dfc00f15 	stw	ra,60(sp)
    12f8:	ddc00d15 	stw	r23,52(sp)
    12fc:	dd400b15 	stw	r21,44(sp)
    1300:	9481ffcc 	andi	r18,r18,2047
    1304:	2029883a 	mov	r20,r4
    1308:	2027883a 	mov	r19,r4
    130c:	2c22703a 	and	r17,r5,r16
    1310:	b7003fcc 	andi	fp,r22,255
    1314:	90005e26 	beq	r18,zero,1490 <__divdf3+0x1cc>
    1318:	0081ffc4 	movi	r2,2047
    131c:	90803526 	beq	r18,r2,13f4 <__divdf3+0x130>
    1320:	8c000434 	orhi	r16,r17,16
    1324:	2004d77a 	srli	r2,r4,29
    1328:	802090fa 	slli	r16,r16,3
    132c:	202690fa 	slli	r19,r4,3
    1330:	94bf0044 	addi	r18,r18,-1023
    1334:	80a2b03a 	or	r17,r16,r2
    1338:	0029883a 	mov	r20,zero
    133c:	0011883a 	mov	r8,zero
    1340:	380ad53a 	srli	r5,r7,20
    1344:	382ed7fa 	srli	r23,r7,31
    1348:	04000434 	movhi	r16,16
    134c:	843fffc4 	addi	r16,r16,-1
    1350:	2941ffcc 	andi	r5,r5,2047
    1354:	302b883a 	mov	r21,r6
    1358:	3c20703a 	and	r16,r7,r16
    135c:	ba403fcc 	andi	r9,r23,255
    1360:	28006726 	beq	r5,zero,1500 <__divdf3+0x23c>
    1364:	0081ffc4 	movi	r2,2047
    1368:	28805f26 	beq	r5,r2,14e8 <__divdf3+0x224>
    136c:	84000434 	orhi	r16,r16,16
    1370:	3004d77a 	srli	r2,r6,29
    1374:	802090fa 	slli	r16,r16,3
    1378:	302a90fa 	slli	r21,r6,3
    137c:	297f0044 	addi	r5,r5,-1023
    1380:	80a0b03a 	or	r16,r16,r2
    1384:	000f883a 	mov	r7,zero
    1388:	3d06b03a 	or	r3,r7,r20
    138c:	180690ba 	slli	r3,r3,2
    1390:	00800034 	movhi	r2,0
    1394:	1084ed04 	addi	r2,r2,5044
    1398:	1885883a 	add	r2,r3,r2
    139c:	10800017 	ldw	r2,0(r2)
    13a0:	b5c8f03a 	xor	r4,r22,r23
    13a4:	200d883a 	mov	r6,r4
    13a8:	25003fcc 	andi	r20,r4,255
    13ac:	9165c83a 	sub	r18,r18,r5
    13b0:	1000683a 	jmp	r2
    13b4:	000015fc 	xorhi	zero,zero,87
    13b8:	0000142c 	andhi	zero,zero,80
    13bc:	000015c0 	call	15c <alt_irq_handler+0x70>
    13c0:	00001410 	cmplti	zero,zero,80
    13c4:	000015c0 	call	15c <alt_irq_handler+0x70>
    13c8:	00001594 	movui	zero,86
    13cc:	000015c0 	call	15c <alt_irq_handler+0x70>
    13d0:	00001410 	cmplti	zero,zero,80
    13d4:	0000142c 	andhi	zero,zero,80
    13d8:	0000142c 	andhi	zero,zero,80
    13dc:	00001594 	movui	zero,86
    13e0:	00001410 	cmplti	zero,zero,80
    13e4:	00001420 	cmpeqi	zero,zero,80
    13e8:	00001420 	cmpeqi	zero,zero,80
    13ec:	00001420 	cmpeqi	zero,zero,80
    13f0:	000015d0 	cmplti	zero,zero,87
    13f4:	8904b03a 	or	r2,r17,r4
    13f8:	1000631e 	bne	r2,zero,1588 <__divdf3+0x2c4>
    13fc:	05000204 	movi	r20,8
    1400:	0023883a 	mov	r17,zero
    1404:	0027883a 	mov	r19,zero
    1408:	02000084 	movi	r8,2
    140c:	003fcc06 	br	1340 <__divdf3+0x7c>
    1410:	8023883a 	mov	r17,r16
    1414:	a827883a 	mov	r19,r21
    1418:	4839883a 	mov	fp,r9
    141c:	3811883a 	mov	r8,r7
    1420:	00800084 	movi	r2,2
    1424:	4081531e 	bne	r8,r2,1974 <__divdf3+0x6b0>
    1428:	e029883a 	mov	r20,fp
    142c:	a180004c 	andi	r6,r20,1
    1430:	0201ffc4 	movi	r8,2047
    1434:	000b883a 	mov	r5,zero
    1438:	0027883a 	mov	r19,zero
    143c:	4010953a 	slli	r8,r8,20
    1440:	30c03fcc 	andi	r3,r6,255
    1444:	04000434 	movhi	r16,16
    1448:	180697fa 	slli	r3,r3,31
    144c:	843fffc4 	addi	r16,r16,-1
    1450:	2c20703a 	and	r16,r5,r16
    1454:	8220b03a 	or	r16,r16,r8
    1458:	80c6b03a 	or	r3,r16,r3
    145c:	9805883a 	mov	r2,r19
    1460:	dfc00f17 	ldw	ra,60(sp)
    1464:	df000e17 	ldw	fp,56(sp)
    1468:	ddc00d17 	ldw	r23,52(sp)
    146c:	dd800c17 	ldw	r22,48(sp)
    1470:	dd400b17 	ldw	r21,44(sp)
    1474:	dd000a17 	ldw	r20,40(sp)
    1478:	dcc00917 	ldw	r19,36(sp)
    147c:	dc800817 	ldw	r18,32(sp)
    1480:	dc400717 	ldw	r17,28(sp)
    1484:	dc000617 	ldw	r16,24(sp)
    1488:	dec01004 	addi	sp,sp,64
    148c:	f800283a 	ret
    1490:	8904b03a 	or	r2,r17,r4
    1494:	10003726 	beq	r2,zero,1574 <__divdf3+0x2b0>
    1498:	88014d26 	beq	r17,zero,19d0 <__divdf3+0x70c>
    149c:	8809883a 	mov	r4,r17
    14a0:	d9800215 	stw	r6,8(sp)
    14a4:	d9c00515 	stw	r7,20(sp)
    14a8:	00030980 	call	3098 <__clzsi2>
    14ac:	d9800217 	ldw	r6,8(sp)
    14b0:	d9c00517 	ldw	r7,20(sp)
    14b4:	1007883a 	mov	r3,r2
    14b8:	01000a04 	movi	r4,40
    14bc:	1cfffe04 	addi	r19,r3,-8
    14c0:	20c9c83a 	sub	r4,r4,r3
    14c4:	8cca983a 	sll	r5,r17,r19
    14c8:	a108d83a 	srl	r4,r20,r4
    14cc:	a4e6983a 	sll	r19,r20,r19
    14d0:	2162b03a 	or	r17,r4,r5
    14d4:	04bf0344 	movi	r18,-1011
    14d8:	90e5c83a 	sub	r18,r18,r3
    14dc:	0029883a 	mov	r20,zero
    14e0:	0011883a 	mov	r8,zero
    14e4:	003f9606 	br	1340 <__divdf3+0x7c>
    14e8:	8184b03a 	or	r2,r16,r6
    14ec:	10001f1e 	bne	r2,zero,156c <__divdf3+0x2a8>
    14f0:	0021883a 	mov	r16,zero
    14f4:	002b883a 	mov	r21,zero
    14f8:	01c00084 	movi	r7,2
    14fc:	003fa206 	br	1388 <__divdf3+0xc4>
    1500:	8184b03a 	or	r2,r16,r6
    1504:	10001526 	beq	r2,zero,155c <__divdf3+0x298>
    1508:	80013d26 	beq	r16,zero,1a00 <__divdf3+0x73c>
    150c:	8009883a 	mov	r4,r16
    1510:	d9800215 	stw	r6,8(sp)
    1514:	da000315 	stw	r8,12(sp)
    1518:	da400415 	stw	r9,16(sp)
    151c:	00030980 	call	3098 <__clzsi2>
    1520:	d9800217 	ldw	r6,8(sp)
    1524:	da000317 	ldw	r8,12(sp)
    1528:	da400417 	ldw	r9,16(sp)
    152c:	1007883a 	mov	r3,r2
    1530:	01000a04 	movi	r4,40
    1534:	1d7ffe04 	addi	r21,r3,-8
    1538:	20c9c83a 	sub	r4,r4,r3
    153c:	8560983a 	sll	r16,r16,r21
    1540:	3108d83a 	srl	r4,r6,r4
    1544:	356a983a 	sll	r21,r6,r21
    1548:	2420b03a 	or	r16,r4,r16
    154c:	017f0344 	movi	r5,-1011
    1550:	28cbc83a 	sub	r5,r5,r3
    1554:	000f883a 	mov	r7,zero
    1558:	003f8b06 	br	1388 <__divdf3+0xc4>
    155c:	0021883a 	mov	r16,zero
    1560:	002b883a 	mov	r21,zero
    1564:	01c00044 	movi	r7,1
    1568:	003f8706 	br	1388 <__divdf3+0xc4>
    156c:	01c000c4 	movi	r7,3
    1570:	003f8506 	br	1388 <__divdf3+0xc4>
    1574:	05000104 	movi	r20,4
    1578:	0023883a 	mov	r17,zero
    157c:	0027883a 	mov	r19,zero
    1580:	02000044 	movi	r8,1
    1584:	003f6e06 	br	1340 <__divdf3+0x7c>
    1588:	05000304 	movi	r20,12
    158c:	020000c4 	movi	r8,3
    1590:	003f6b06 	br	1340 <__divdf3+0x7c>
    1594:	01400434 	movhi	r5,16
    1598:	000d883a 	mov	r6,zero
    159c:	297fffc4 	addi	r5,r5,-1
    15a0:	04ffffc4 	movi	r19,-1
    15a4:	0201ffc4 	movi	r8,2047
    15a8:	003fa406 	br	143c <__divdf3+0x178>
    15ac:	043f0084 	movi	r16,-1022
    15b0:	84a1c83a 	sub	r16,r16,r18
    15b4:	00800e04 	movi	r2,56
    15b8:	14014d0e 	bge	r2,r16,1af0 <__divdf3+0x82c>
    15bc:	a180004c 	andi	r6,r20,1
    15c0:	0011883a 	mov	r8,zero
    15c4:	000b883a 	mov	r5,zero
    15c8:	0027883a 	mov	r19,zero
    15cc:	003f9b06 	br	143c <__divdf3+0x178>
    15d0:	8880022c 	andhi	r2,r17,8
    15d4:	1000f026 	beq	r2,zero,1998 <__divdf3+0x6d4>
    15d8:	8080022c 	andhi	r2,r16,8
    15dc:	1000ee1e 	bne	r2,zero,1998 <__divdf3+0x6d4>
    15e0:	00800434 	movhi	r2,16
    15e4:	81400234 	orhi	r5,r16,8
    15e8:	10bfffc4 	addi	r2,r2,-1
    15ec:	b80d883a 	mov	r6,r23
    15f0:	288a703a 	and	r5,r5,r2
    15f4:	a827883a 	mov	r19,r21
    15f8:	003fea06 	br	15a4 <__divdf3+0x2e0>
    15fc:	84411c36 	bltu	r16,r17,1a70 <__divdf3+0x7ac>
    1600:	8c011a26 	beq	r17,r16,1a6c <__divdf3+0x7a8>
    1604:	94bfffc4 	addi	r18,r18,-1
    1608:	dcc00015 	stw	r19,0(sp)
    160c:	8811883a 	mov	r8,r17
    1610:	002d883a 	mov	r22,zero
    1614:	a80cd63a 	srli	r6,r21,24
    1618:	8020923a 	slli	r16,r16,8
    161c:	a82a923a 	slli	r21,r21,8
    1620:	4009883a 	mov	r4,r8
    1624:	342eb03a 	or	r23,r6,r16
    1628:	dd400115 	stw	r21,4(sp)
    162c:	b82ad43a 	srli	r21,r23,16
    1630:	da000315 	stw	r8,12(sp)
    1634:	bcffffcc 	andi	r19,r23,65535
    1638:	a80b883a 	mov	r5,r21
    163c:	00032180 	call	3218 <__udivsi3>
    1640:	1009883a 	mov	r4,r2
    1644:	980b883a 	mov	r5,r19
    1648:	1023883a 	mov	r17,r2
    164c:	000129c0 	call	129c <__mulsi3>
    1650:	da000317 	ldw	r8,12(sp)
    1654:	a80b883a 	mov	r5,r21
    1658:	1039883a 	mov	fp,r2
    165c:	4009883a 	mov	r4,r8
    1660:	00032200 	call	3220 <__umodsi3>
    1664:	d8c00017 	ldw	r3,0(sp)
    1668:	1004943a 	slli	r2,r2,16
    166c:	1810d43a 	srli	r8,r3,16
    1670:	120eb03a 	or	r7,r2,r8
    1674:	3f00062e 	bgeu	r7,fp,1690 <__divdf3+0x3cc>
    1678:	3dcf883a 	add	r7,r7,r23
    167c:	88bfffc4 	addi	r2,r17,-1
    1680:	3dc10a36 	bltu	r7,r23,1aac <__divdf3+0x7e8>
    1684:	3f01092e 	bgeu	r7,fp,1aac <__divdf3+0x7e8>
    1688:	8c7fff84 	addi	r17,r17,-2
    168c:	3dcf883a 	add	r7,r7,r23
    1690:	3f39c83a 	sub	fp,r7,fp
    1694:	e009883a 	mov	r4,fp
    1698:	a80b883a 	mov	r5,r21
    169c:	00032180 	call	3218 <__udivsi3>
    16a0:	1009883a 	mov	r4,r2
    16a4:	980b883a 	mov	r5,r19
    16a8:	1021883a 	mov	r16,r2
    16ac:	000129c0 	call	129c <__mulsi3>
    16b0:	e009883a 	mov	r4,fp
    16b4:	a80b883a 	mov	r5,r21
    16b8:	d8800315 	stw	r2,12(sp)
    16bc:	00032200 	call	3220 <__umodsi3>
    16c0:	d9000017 	ldw	r4,0(sp)
    16c4:	1004943a 	slli	r2,r2,16
    16c8:	da000317 	ldw	r8,12(sp)
    16cc:	20ffffcc 	andi	r3,r4,65535
    16d0:	10ceb03a 	or	r7,r2,r3
    16d4:	3a00062e 	bgeu	r7,r8,16f0 <__divdf3+0x42c>
    16d8:	3dcf883a 	add	r7,r7,r23
    16dc:	80bfffc4 	addi	r2,r16,-1
    16e0:	3dc0f036 	bltu	r7,r23,1aa4 <__divdf3+0x7e0>
    16e4:	3a00ef2e 	bgeu	r7,r8,1aa4 <__divdf3+0x7e0>
    16e8:	843fff84 	addi	r16,r16,-2
    16ec:	3dcf883a 	add	r7,r7,r23
    16f0:	d8c00117 	ldw	r3,4(sp)
    16f4:	8822943a 	slli	r17,r17,16
    16f8:	3a0fc83a 	sub	r7,r7,r8
    16fc:	1806d43a 	srli	r3,r3,16
    1700:	8462b03a 	or	r17,r16,r17
    1704:	8affffcc 	andi	r11,r17,65535
    1708:	d8c00015 	stw	r3,0(sp)
    170c:	d8c00117 	ldw	r3,4(sp)
    1710:	8820d43a 	srli	r16,r17,16
    1714:	5809883a 	mov	r4,r11
    1718:	1f3fffcc 	andi	fp,r3,65535
    171c:	e00b883a 	mov	r5,fp
    1720:	d9c00515 	stw	r7,20(sp)
    1724:	dac00215 	stw	r11,8(sp)
    1728:	000129c0 	call	129c <__mulsi3>
    172c:	8009883a 	mov	r4,r16
    1730:	e00b883a 	mov	r5,fp
    1734:	d8800415 	stw	r2,16(sp)
    1738:	000129c0 	call	129c <__mulsi3>
    173c:	d9400017 	ldw	r5,0(sp)
    1740:	8009883a 	mov	r4,r16
    1744:	d8800315 	stw	r2,12(sp)
    1748:	000129c0 	call	129c <__mulsi3>
    174c:	dac00217 	ldw	r11,8(sp)
    1750:	d9400017 	ldw	r5,0(sp)
    1754:	d8800215 	stw	r2,8(sp)
    1758:	5809883a 	mov	r4,r11
    175c:	000129c0 	call	129c <__mulsi3>
    1760:	da400417 	ldw	r9,16(sp)
    1764:	da800317 	ldw	r10,12(sp)
    1768:	d9c00517 	ldw	r7,20(sp)
    176c:	480ad43a 	srli	r5,r9,16
    1770:	5085883a 	add	r2,r10,r2
    1774:	db000217 	ldw	r12,8(sp)
    1778:	1151883a 	add	r8,r2,r5
    177c:	4280022e 	bgeu	r8,r10,1788 <__divdf3+0x4c4>
    1780:	00800074 	movhi	r2,1
    1784:	6099883a 	add	r12,r12,r2
    1788:	400ad43a 	srli	r5,r8,16
    178c:	4010943a 	slli	r8,r8,16
    1790:	4c3fffcc 	andi	r16,r9,65535
    1794:	6149883a 	add	r4,r12,r5
    1798:	4411883a 	add	r8,r8,r16
    179c:	3900a736 	bltu	r7,r4,1a3c <__divdf3+0x778>
    17a0:	3900c426 	beq	r7,r4,1ab4 <__divdf3+0x7f0>
    17a4:	3909c83a 	sub	r4,r7,r4
    17a8:	b221c83a 	sub	r16,r22,r8
    17ac:	b42d803a 	cmpltu	r22,r22,r16
    17b0:	25adc83a 	sub	r22,r4,r22
    17b4:	b5c0c626 	beq	r22,r23,1ad0 <__divdf3+0x80c>
    17b8:	b009883a 	mov	r4,r22
    17bc:	a80b883a 	mov	r5,r21
    17c0:	00032180 	call	3218 <__udivsi3>
    17c4:	1009883a 	mov	r4,r2
    17c8:	980b883a 	mov	r5,r19
    17cc:	d8800315 	stw	r2,12(sp)
    17d0:	000129c0 	call	129c <__mulsi3>
    17d4:	a80b883a 	mov	r5,r21
    17d8:	b009883a 	mov	r4,r22
    17dc:	d8800415 	stw	r2,16(sp)
    17e0:	00032200 	call	3220 <__umodsi3>
    17e4:	1004943a 	slli	r2,r2,16
    17e8:	800ed43a 	srli	r7,r16,16
    17ec:	da400417 	ldw	r9,16(sp)
    17f0:	da000317 	ldw	r8,12(sp)
    17f4:	11cab03a 	or	r5,r2,r7
    17f8:	2a40062e 	bgeu	r5,r9,1814 <__divdf3+0x550>
    17fc:	2dcb883a 	add	r5,r5,r23
    1800:	40bfffc4 	addi	r2,r8,-1
    1804:	2dc0b436 	bltu	r5,r23,1ad8 <__divdf3+0x814>
    1808:	2a40b32e 	bgeu	r5,r9,1ad8 <__divdf3+0x814>
    180c:	423fff84 	addi	r8,r8,-2
    1810:	2dcb883a 	add	r5,r5,r23
    1814:	2a6dc83a 	sub	r22,r5,r9
    1818:	b009883a 	mov	r4,r22
    181c:	a80b883a 	mov	r5,r21
    1820:	da000315 	stw	r8,12(sp)
    1824:	00032180 	call	3218 <__udivsi3>
    1828:	980b883a 	mov	r5,r19
    182c:	1009883a 	mov	r4,r2
    1830:	d8800415 	stw	r2,16(sp)
    1834:	000129c0 	call	129c <__mulsi3>
    1838:	b009883a 	mov	r4,r22
    183c:	a80b883a 	mov	r5,r21
    1840:	1027883a 	mov	r19,r2
    1844:	00032200 	call	3220 <__umodsi3>
    1848:	1004943a 	slli	r2,r2,16
    184c:	843fffcc 	andi	r16,r16,65535
    1850:	da000317 	ldw	r8,12(sp)
    1854:	140eb03a 	or	r7,r2,r16
    1858:	da400417 	ldw	r9,16(sp)
    185c:	3cc0062e 	bgeu	r7,r19,1878 <__divdf3+0x5b4>
    1860:	3dcf883a 	add	r7,r7,r23
    1864:	48bfffc4 	addi	r2,r9,-1
    1868:	3dc09d36 	bltu	r7,r23,1ae0 <__divdf3+0x81c>
    186c:	3cc09c2e 	bgeu	r7,r19,1ae0 <__divdf3+0x81c>
    1870:	4a7fff84 	addi	r9,r9,-2
    1874:	3dcf883a 	add	r7,r7,r23
    1878:	4010943a 	slli	r8,r8,16
    187c:	3cebc83a 	sub	r21,r7,r19
    1880:	e00b883a 	mov	r5,fp
    1884:	4a26b03a 	or	r19,r9,r8
    1888:	99ffffcc 	andi	r7,r19,65535
    188c:	9820d43a 	srli	r16,r19,16
    1890:	3809883a 	mov	r4,r7
    1894:	d9c00515 	stw	r7,20(sp)
    1898:	000129c0 	call	129c <__mulsi3>
    189c:	8009883a 	mov	r4,r16
    18a0:	e00b883a 	mov	r5,fp
    18a4:	102d883a 	mov	r22,r2
    18a8:	000129c0 	call	129c <__mulsi3>
    18ac:	d9400017 	ldw	r5,0(sp)
    18b0:	8009883a 	mov	r4,r16
    18b4:	1039883a 	mov	fp,r2
    18b8:	000129c0 	call	129c <__mulsi3>
    18bc:	d9c00517 	ldw	r7,20(sp)
    18c0:	d9400017 	ldw	r5,0(sp)
    18c4:	1021883a 	mov	r16,r2
    18c8:	3809883a 	mov	r4,r7
    18cc:	000129c0 	call	129c <__mulsi3>
    18d0:	b008d43a 	srli	r4,r22,16
    18d4:	e085883a 	add	r2,fp,r2
    18d8:	1109883a 	add	r4,r2,r4
    18dc:	2700022e 	bgeu	r4,fp,18e8 <__divdf3+0x624>
    18e0:	00800074 	movhi	r2,1
    18e4:	80a1883a 	add	r16,r16,r2
    18e8:	200ad43a 	srli	r5,r4,16
    18ec:	2008943a 	slli	r4,r4,16
    18f0:	b5bfffcc 	andi	r22,r22,65535
    18f4:	8145883a 	add	r2,r16,r5
    18f8:	2589883a 	add	r4,r4,r22
    18fc:	a8802c36 	bltu	r21,r2,19b0 <__divdf3+0x6ec>
    1900:	a880a426 	beq	r21,r2,1b94 <__divdf3+0x8d0>
    1904:	9cc00054 	ori	r19,r19,1
    1908:	9200ffc4 	addi	r8,r18,1023
    190c:	023f270e 	bge	zero,r8,15ac <__divdf3+0x2e8>
    1910:	988001cc 	andi	r2,r19,7
    1914:	10000726 	beq	r2,zero,1934 <__divdf3+0x670>
    1918:	990003cc 	andi	r4,r19,15
    191c:	00800104 	movi	r2,4
    1920:	20800426 	beq	r4,r2,1934 <__divdf3+0x670>
    1924:	9885883a 	add	r2,r19,r2
    1928:	14e7803a 	cmpltu	r19,r2,r19
    192c:	8ce3883a 	add	r17,r17,r19
    1930:	1027883a 	mov	r19,r2
    1934:	8880402c 	andhi	r2,r17,256
    1938:	10000426 	beq	r2,zero,194c <__divdf3+0x688>
    193c:	00bfc034 	movhi	r2,65280
    1940:	10bfffc4 	addi	r2,r2,-1
    1944:	92010004 	addi	r8,r18,1024
    1948:	88a2703a 	and	r17,r17,r2
    194c:	0081ff84 	movi	r2,2046
    1950:	123eb616 	blt	r2,r8,142c <__divdf3+0x168>
    1954:	9826d0fa 	srli	r19,r19,3
    1958:	8804977a 	slli	r2,r17,29
    195c:	8820927a 	slli	r16,r17,9
    1960:	4201ffcc 	andi	r8,r8,2047
    1964:	14e6b03a 	or	r19,r2,r19
    1968:	800ad33a 	srli	r5,r16,12
    196c:	a180004c 	andi	r6,r20,1
    1970:	003eb206 	br	143c <__divdf3+0x178>
    1974:	008000c4 	movi	r2,3
    1978:	4080ac26 	beq	r8,r2,1c2c <__divdf3+0x968>
    197c:	00800044 	movi	r2,1
    1980:	4080591e 	bne	r8,r2,1ae8 <__divdf3+0x824>
    1984:	e00d883a 	mov	r6,fp
    1988:	0011883a 	mov	r8,zero
    198c:	000b883a 	mov	r5,zero
    1990:	0027883a 	mov	r19,zero
    1994:	003ea906 	br	143c <__divdf3+0x178>
    1998:	00800434 	movhi	r2,16
    199c:	89400234 	orhi	r5,r17,8
    19a0:	10bfffc4 	addi	r2,r2,-1
    19a4:	b00d883a 	mov	r6,r22
    19a8:	288a703a 	and	r5,r5,r2
    19ac:	003efd06 	br	15a4 <__divdf3+0x2e0>
    19b0:	adcf883a 	add	r7,r21,r23
    19b4:	997fffc4 	addi	r5,r19,-1
    19b8:	3dc0412e 	bgeu	r7,r23,1ac0 <__divdf3+0x7fc>
    19bc:	2827883a 	mov	r19,r5
    19c0:	38bfd01e 	bne	r7,r2,1904 <__divdf3+0x640>
    19c4:	d8c00117 	ldw	r3,4(sp)
    19c8:	193fce1e 	bne	r3,r4,1904 <__divdf3+0x640>
    19cc:	003fce06 	br	1908 <__divdf3+0x644>
    19d0:	d9800215 	stw	r6,8(sp)
    19d4:	d9c00515 	stw	r7,20(sp)
    19d8:	00030980 	call	3098 <__clzsi2>
    19dc:	10c00804 	addi	r3,r2,32
    19e0:	010009c4 	movi	r4,39
    19e4:	d9800217 	ldw	r6,8(sp)
    19e8:	d9c00517 	ldw	r7,20(sp)
    19ec:	20feb20e 	bge	r4,r3,14b8 <__divdf3+0x1f4>
    19f0:	117ffe04 	addi	r5,r2,-8
    19f4:	a162983a 	sll	r17,r20,r5
    19f8:	0027883a 	mov	r19,zero
    19fc:	003eb506 	br	14d4 <__divdf3+0x210>
    1a00:	3009883a 	mov	r4,r6
    1a04:	d9800215 	stw	r6,8(sp)
    1a08:	da000315 	stw	r8,12(sp)
    1a0c:	da400415 	stw	r9,16(sp)
    1a10:	00030980 	call	3098 <__clzsi2>
    1a14:	10c00804 	addi	r3,r2,32
    1a18:	010009c4 	movi	r4,39
    1a1c:	d9800217 	ldw	r6,8(sp)
    1a20:	da000317 	ldw	r8,12(sp)
    1a24:	da400417 	ldw	r9,16(sp)
    1a28:	20fec10e 	bge	r4,r3,1530 <__divdf3+0x26c>
    1a2c:	10bffe04 	addi	r2,r2,-8
    1a30:	a8a0983a 	sll	r16,r21,r2
    1a34:	002b883a 	mov	r21,zero
    1a38:	003ec406 	br	154c <__divdf3+0x288>
    1a3c:	d8c00117 	ldw	r3,4(sp)
    1a40:	b0ed883a 	add	r22,r22,r3
    1a44:	b0c5803a 	cmpltu	r2,r22,r3
    1a48:	15c5883a 	add	r2,r2,r23
    1a4c:	11cf883a 	add	r7,r2,r7
    1a50:	88bfffc4 	addi	r2,r17,-1
    1a54:	b9c00d2e 	bgeu	r23,r7,1a8c <__divdf3+0x7c8>
    1a58:	39003f36 	bltu	r7,r4,1b58 <__divdf3+0x894>
    1a5c:	21c06a26 	beq	r4,r7,1c08 <__divdf3+0x944>
    1a60:	3909c83a 	sub	r4,r7,r4
    1a64:	1023883a 	mov	r17,r2
    1a68:	003f4f06 	br	17a8 <__divdf3+0x4e4>
    1a6c:	9d7ee536 	bltu	r19,r21,1604 <__divdf3+0x340>
    1a70:	982ed07a 	srli	r23,r19,1
    1a74:	880497fa 	slli	r2,r17,31
    1a78:	8810d07a 	srli	r8,r17,1
    1a7c:	982c97fa 	slli	r22,r19,31
    1a80:	b884b03a 	or	r2,r23,r2
    1a84:	d8800015 	stw	r2,0(sp)
    1a88:	003ee206 	br	1614 <__divdf3+0x350>
    1a8c:	3dfff41e 	bne	r7,r23,1a60 <__divdf3+0x79c>
    1a90:	d8c00117 	ldw	r3,4(sp)
    1a94:	b0fff02e 	bgeu	r22,r3,1a58 <__divdf3+0x794>
    1a98:	b909c83a 	sub	r4,r23,r4
    1a9c:	1023883a 	mov	r17,r2
    1aa0:	003f4106 	br	17a8 <__divdf3+0x4e4>
    1aa4:	1021883a 	mov	r16,r2
    1aa8:	003f1106 	br	16f0 <__divdf3+0x42c>
    1aac:	1023883a 	mov	r17,r2
    1ab0:	003ef706 	br	1690 <__divdf3+0x3cc>
    1ab4:	b23fe136 	bltu	r22,r8,1a3c <__divdf3+0x778>
    1ab8:	0009883a 	mov	r4,zero
    1abc:	003f3a06 	br	17a8 <__divdf3+0x4e4>
    1ac0:	38802c36 	bltu	r7,r2,1b74 <__divdf3+0x8b0>
    1ac4:	11c05326 	beq	r2,r7,1c14 <__divdf3+0x950>
    1ac8:	2827883a 	mov	r19,r5
    1acc:	003f8d06 	br	1904 <__divdf3+0x640>
    1ad0:	04ffffc4 	movi	r19,-1
    1ad4:	003f8c06 	br	1908 <__divdf3+0x644>
    1ad8:	1011883a 	mov	r8,r2
    1adc:	003f4d06 	br	1814 <__divdf3+0x550>
    1ae0:	1013883a 	mov	r9,r2
    1ae4:	003f6406 	br	1878 <__divdf3+0x5b4>
    1ae8:	e029883a 	mov	r20,fp
    1aec:	003f8606 	br	1908 <__divdf3+0x644>
    1af0:	008007c4 	movi	r2,31
    1af4:	14002a16 	blt	r2,r16,1ba0 <__divdf3+0x8dc>
    1af8:	91410784 	addi	r5,r18,1054
    1afc:	9c0cd83a 	srl	r6,r19,r16
    1b00:	8948983a 	sll	r4,r17,r5
    1b04:	9944983a 	sll	r2,r19,r5
    1b08:	8c20d83a 	srl	r16,r17,r16
    1b0c:	3108b03a 	or	r4,r6,r4
    1b10:	1004c03a 	cmpne	r2,r2,zero
    1b14:	2084b03a 	or	r2,r4,r2
    1b18:	110001cc 	andi	r4,r2,7
    1b1c:	20000726 	beq	r4,zero,1b3c <__divdf3+0x878>
    1b20:	114003cc 	andi	r5,r2,15
    1b24:	01000104 	movi	r4,4
    1b28:	29000426 	beq	r5,r4,1b3c <__divdf3+0x878>
    1b2c:	11000104 	addi	r4,r2,4
    1b30:	2085803a 	cmpltu	r2,r4,r2
    1b34:	80a1883a 	add	r16,r16,r2
    1b38:	2005883a 	mov	r2,r4
    1b3c:	8100202c 	andhi	r4,r16,128
    1b40:	20002d26 	beq	r4,zero,1bf8 <__divdf3+0x934>
    1b44:	a180004c 	andi	r6,r20,1
    1b48:	02000044 	movi	r8,1
    1b4c:	000b883a 	mov	r5,zero
    1b50:	0027883a 	mov	r19,zero
    1b54:	003e3906 	br	143c <__divdf3+0x178>
    1b58:	d8c00117 	ldw	r3,4(sp)
    1b5c:	8c7fff84 	addi	r17,r17,-2
    1b60:	b0ed883a 	add	r22,r22,r3
    1b64:	b0c5803a 	cmpltu	r2,r22,r3
    1b68:	15c5883a 	add	r2,r2,r23
    1b6c:	11cf883a 	add	r7,r2,r7
    1b70:	003f0c06 	br	17a4 <__divdf3+0x4e0>
    1b74:	d8c00117 	ldw	r3,4(sp)
    1b78:	997fff84 	addi	r5,r19,-2
    1b7c:	18d1883a 	add	r8,r3,r3
    1b80:	40c7803a 	cmpltu	r3,r8,r3
    1b84:	1dcd883a 	add	r6,r3,r23
    1b88:	398f883a 	add	r7,r7,r6
    1b8c:	da000115 	stw	r8,4(sp)
    1b90:	003f8a06 	br	19bc <__divdf3+0x6f8>
    1b94:	203f861e 	bne	r4,zero,19b0 <__divdf3+0x6ec>
    1b98:	d8000115 	stw	zero,4(sp)
    1b9c:	003f8906 	br	19c4 <__divdf3+0x700>
    1ba0:	00bef884 	movi	r2,-1054
    1ba4:	1485c83a 	sub	r2,r2,r18
    1ba8:	01000804 	movi	r4,32
    1bac:	8884d83a 	srl	r2,r17,r2
    1bb0:	81001c26 	beq	r16,r4,1c24 <__divdf3+0x960>
    1bb4:	91010f84 	addi	r4,r18,1086
    1bb8:	8908983a 	sll	r4,r17,r4
    1bbc:	24c8b03a 	or	r4,r4,r19
    1bc0:	2008c03a 	cmpne	r4,r4,zero
    1bc4:	2084b03a 	or	r2,r4,r2
    1bc8:	140001cc 	andi	r16,r2,7
    1bcc:	8000061e 	bne	r16,zero,1be8 <__divdf3+0x924>
    1bd0:	000b883a 	mov	r5,zero
    1bd4:	1004d0fa 	srli	r2,r2,3
    1bd8:	a180004c 	andi	r6,r20,1
    1bdc:	0011883a 	mov	r8,zero
    1be0:	1426b03a 	or	r19,r2,r16
    1be4:	003e1506 	br	143c <__divdf3+0x178>
    1be8:	114003cc 	andi	r5,r2,15
    1bec:	01000104 	movi	r4,4
    1bf0:	0021883a 	mov	r16,zero
    1bf4:	293fcd1e 	bne	r5,r4,1b2c <__divdf3+0x868>
    1bf8:	800a927a 	slli	r5,r16,9
    1bfc:	8020977a 	slli	r16,r16,29
    1c00:	280ad33a 	srli	r5,r5,12
    1c04:	003ff306 	br	1bd4 <__divdf3+0x910>
    1c08:	b23fd336 	bltu	r22,r8,1b58 <__divdf3+0x894>
    1c0c:	1023883a 	mov	r17,r2
    1c10:	003fa906 	br	1ab8 <__divdf3+0x7f4>
    1c14:	d8c00117 	ldw	r3,4(sp)
    1c18:	193fd636 	bltu	r3,r4,1b74 <__divdf3+0x8b0>
    1c1c:	2827883a 	mov	r19,r5
    1c20:	003f6806 	br	19c4 <__divdf3+0x700>
    1c24:	0009883a 	mov	r4,zero
    1c28:	003fe406 	br	1bbc <__divdf3+0x8f8>
    1c2c:	00800434 	movhi	r2,16
    1c30:	89400234 	orhi	r5,r17,8
    1c34:	10bfffc4 	addi	r2,r2,-1
    1c38:	e00d883a 	mov	r6,fp
    1c3c:	288a703a 	and	r5,r5,r2
    1c40:	003e5806 	br	15a4 <__divdf3+0x2e0>

00001c44 <__gedf2>:
    1c44:	2804d53a 	srli	r2,r5,20
    1c48:	3806d53a 	srli	r3,r7,20
    1c4c:	02000434 	movhi	r8,16
    1c50:	423fffc4 	addi	r8,r8,-1
    1c54:	0241ffc4 	movi	r9,2047
    1c58:	1081ffcc 	andi	r2,r2,2047
    1c5c:	2a14703a 	and	r10,r5,r8
    1c60:	1a46703a 	and	r3,r3,r9
    1c64:	3a10703a 	and	r8,r7,r8
    1c68:	280ad7fa 	srli	r5,r5,31
    1c6c:	380ed7fa 	srli	r7,r7,31
    1c70:	12400b26 	beq	r2,r9,1ca0 <__gedf2+0x5c>
    1c74:	1a401626 	beq	r3,r9,1cd0 <__gedf2+0x8c>
    1c78:	10000c1e 	bne	r2,zero,1cac <__gedf2+0x68>
    1c7c:	5112b03a 	or	r9,r10,r4
    1c80:	4813003a 	cmpeq	r9,r9,zero
    1c84:	4817883a 	mov	r11,r9
    1c88:	18000c1e 	bne	r3,zero,1cbc <__gedf2+0x78>
    1c8c:	4198b03a 	or	r12,r8,r6
    1c90:	60000a1e 	bne	r12,zero,1cbc <__gedf2+0x78>
    1c94:	48001326 	beq	r9,zero,1ce4 <__gedf2+0xa0>
    1c98:	0005883a 	mov	r2,zero
    1c9c:	f800283a 	ret
    1ca0:	5112b03a 	or	r9,r10,r4
    1ca4:	4800191e 	bne	r9,zero,1d0c <__gedf2+0xc8>
    1ca8:	18800926 	beq	r3,r2,1cd0 <__gedf2+0x8c>
    1cac:	18000b1e 	bne	r3,zero,1cdc <__gedf2+0x98>
    1cb0:	4192b03a 	or	r9,r8,r6
    1cb4:	0017883a 	mov	r11,zero
    1cb8:	48000a26 	beq	r9,zero,1ce4 <__gedf2+0xa0>
    1cbc:	39c03fcc 	andi	r7,r7,255
    1cc0:	58000726 	beq	r11,zero,1ce0 <__gedf2+0x9c>
    1cc4:	3800081e 	bne	r7,zero,1ce8 <__gedf2+0xa4>
    1cc8:	00bfffc4 	movi	r2,-1
    1ccc:	f800283a 	ret
    1cd0:	4192b03a 	or	r9,r8,r6
    1cd4:	48000d1e 	bne	r9,zero,1d0c <__gedf2+0xc8>
    1cd8:	103fe826 	beq	r2,zero,1c7c <__gedf2+0x38>
    1cdc:	39c03fcc 	andi	r7,r7,255
    1ce0:	29c00326 	beq	r5,r7,1cf0 <__gedf2+0xac>
    1ce4:	283ff81e 	bne	r5,zero,1cc8 <__gedf2+0x84>
    1ce8:	00800044 	movi	r2,1
    1cec:	f800283a 	ret
    1cf0:	18bffc16 	blt	r3,r2,1ce4 <__gedf2+0xa0>
    1cf4:	10c00316 	blt	r2,r3,1d04 <__gedf2+0xc0>
    1cf8:	42bffa36 	bltu	r8,r10,1ce4 <__gedf2+0xa0>
    1cfc:	52000526 	beq	r10,r8,1d14 <__gedf2+0xd0>
    1d00:	523fe52e 	bgeu	r10,r8,1c98 <__gedf2+0x54>
    1d04:	283ff026 	beq	r5,zero,1cc8 <__gedf2+0x84>
    1d08:	003ff706 	br	1ce8 <__gedf2+0xa4>
    1d0c:	00bfff84 	movi	r2,-2
    1d10:	f800283a 	ret
    1d14:	313ff336 	bltu	r6,r4,1ce4 <__gedf2+0xa0>
    1d18:	21bfdf2e 	bgeu	r4,r6,1c98 <__gedf2+0x54>
    1d1c:	283fea26 	beq	r5,zero,1cc8 <__gedf2+0x84>
    1d20:	003ff106 	br	1ce8 <__gedf2+0xa4>

00001d24 <__ledf2>:
    1d24:	2804d53a 	srli	r2,r5,20
    1d28:	3810d53a 	srli	r8,r7,20
    1d2c:	00c00434 	movhi	r3,16
    1d30:	18ffffc4 	addi	r3,r3,-1
    1d34:	0241ffc4 	movi	r9,2047
    1d38:	1081ffcc 	andi	r2,r2,2047
    1d3c:	28d4703a 	and	r10,r5,r3
    1d40:	4250703a 	and	r8,r8,r9
    1d44:	38c6703a 	and	r3,r7,r3
    1d48:	280ad7fa 	srli	r5,r5,31
    1d4c:	380ed7fa 	srli	r7,r7,31
    1d50:	12400b26 	beq	r2,r9,1d80 <__ledf2+0x5c>
    1d54:	42401926 	beq	r8,r9,1dbc <__ledf2+0x98>
    1d58:	10000c1e 	bne	r2,zero,1d8c <__ledf2+0x68>
    1d5c:	5112b03a 	or	r9,r10,r4
    1d60:	4813003a 	cmpeq	r9,r9,zero
    1d64:	4817883a 	mov	r11,r9
    1d68:	40000f26 	beq	r8,zero,1da8 <__ledf2+0x84>
    1d6c:	39c03fcc 	andi	r7,r7,255
    1d70:	58001826 	beq	r11,zero,1dd4 <__ledf2+0xb0>
    1d74:	38000a1e 	bne	r7,zero,1da0 <__ledf2+0x7c>
    1d78:	00bfffc4 	movi	r2,-1
    1d7c:	f800283a 	ret
    1d80:	5112b03a 	or	r9,r10,r4
    1d84:	48000f1e 	bne	r9,zero,1dc4 <__ledf2+0xa0>
    1d88:	40800c26 	beq	r8,r2,1dbc <__ledf2+0x98>
    1d8c:	4000101e 	bne	r8,zero,1dd0 <__ledf2+0xac>
    1d90:	1992b03a 	or	r9,r3,r6
    1d94:	0017883a 	mov	r11,zero
    1d98:	483ff41e 	bne	r9,zero,1d6c <__ledf2+0x48>
    1d9c:	283ff61e 	bne	r5,zero,1d78 <__ledf2+0x54>
    1da0:	00800044 	movi	r2,1
    1da4:	f800283a 	ret
    1da8:	1998b03a 	or	r12,r3,r6
    1dac:	603fef1e 	bne	r12,zero,1d6c <__ledf2+0x48>
    1db0:	483ffa26 	beq	r9,zero,1d9c <__ledf2+0x78>
    1db4:	0005883a 	mov	r2,zero
    1db8:	f800283a 	ret
    1dbc:	1992b03a 	or	r9,r3,r6
    1dc0:	48000226 	beq	r9,zero,1dcc <__ledf2+0xa8>
    1dc4:	00800084 	movi	r2,2
    1dc8:	f800283a 	ret
    1dcc:	103fe326 	beq	r2,zero,1d5c <__ledf2+0x38>
    1dd0:	39c03fcc 	andi	r7,r7,255
    1dd4:	29fff11e 	bne	r5,r7,1d9c <__ledf2+0x78>
    1dd8:	40bff016 	blt	r8,r2,1d9c <__ledf2+0x78>
    1ddc:	12000316 	blt	r2,r8,1dec <__ledf2+0xc8>
    1de0:	1abfee36 	bltu	r3,r10,1d9c <__ledf2+0x78>
    1de4:	50c00326 	beq	r10,r3,1df4 <__ledf2+0xd0>
    1de8:	50fff22e 	bgeu	r10,r3,1db4 <__ledf2+0x90>
    1dec:	283fe226 	beq	r5,zero,1d78 <__ledf2+0x54>
    1df0:	003feb06 	br	1da0 <__ledf2+0x7c>
    1df4:	313fe936 	bltu	r6,r4,1d9c <__ledf2+0x78>
    1df8:	21bfee2e 	bgeu	r4,r6,1db4 <__ledf2+0x90>
    1dfc:	283fde26 	beq	r5,zero,1d78 <__ledf2+0x54>
    1e00:	003fe706 	br	1da0 <__ledf2+0x7c>

00001e04 <__muldf3>:
    1e04:	deffee04 	addi	sp,sp,-72
    1e08:	dd000c15 	stw	r20,48(sp)
    1e0c:	2828d53a 	srli	r20,r5,20
    1e10:	dd400d15 	stw	r21,52(sp)
    1e14:	282ad7fa 	srli	r21,r5,31
    1e18:	dc000815 	stw	r16,32(sp)
    1e1c:	04000434 	movhi	r16,16
    1e20:	ddc00f15 	stw	r23,60(sp)
    1e24:	dcc00b15 	stw	r19,44(sp)
    1e28:	dc800a15 	stw	r18,40(sp)
    1e2c:	843fffc4 	addi	r16,r16,-1
    1e30:	dfc01115 	stw	ra,68(sp)
    1e34:	df001015 	stw	fp,64(sp)
    1e38:	dd800e15 	stw	r22,56(sp)
    1e3c:	dc400915 	stw	r17,36(sp)
    1e40:	a501ffcc 	andi	r20,r20,2047
    1e44:	2025883a 	mov	r18,r4
    1e48:	202f883a 	mov	r23,r4
    1e4c:	2c20703a 	and	r16,r5,r16
    1e50:	a827883a 	mov	r19,r21
    1e54:	aa403fcc 	andi	r9,r21,255
    1e58:	a0005926 	beq	r20,zero,1fc0 <__muldf3+0x1bc>
    1e5c:	0081ffc4 	movi	r2,2047
    1e60:	a0803426 	beq	r20,r2,1f34 <__muldf3+0x130>
    1e64:	84000434 	orhi	r16,r16,16
    1e68:	2004d77a 	srli	r2,r4,29
    1e6c:	802090fa 	slli	r16,r16,3
    1e70:	202e90fa 	slli	r23,r4,3
    1e74:	a53f0044 	addi	r20,r20,-1023
    1e78:	80a0b03a 	or	r16,r16,r2
    1e7c:	000b883a 	mov	r5,zero
    1e80:	0039883a 	mov	fp,zero
    1e84:	3806d53a 	srli	r3,r7,20
    1e88:	382cd7fa 	srli	r22,r7,31
    1e8c:	00800434 	movhi	r2,16
    1e90:	10bfffc4 	addi	r2,r2,-1
    1e94:	18c1ffcc 	andi	r3,r3,2047
    1e98:	3025883a 	mov	r18,r6
    1e9c:	38a2703a 	and	r17,r7,r2
    1ea0:	b2803fcc 	andi	r10,r22,255
    1ea4:	18006426 	beq	r3,zero,2038 <__muldf3+0x234>
    1ea8:	0081ffc4 	movi	r2,2047
    1eac:	18805c26 	beq	r3,r2,2020 <__muldf3+0x21c>
    1eb0:	8c400434 	orhi	r17,r17,16
    1eb4:	3004d77a 	srli	r2,r6,29
    1eb8:	882290fa 	slli	r17,r17,3
    1ebc:	302490fa 	slli	r18,r6,3
    1ec0:	18ff0044 	addi	r3,r3,-1023
    1ec4:	88a2b03a 	or	r17,r17,r2
    1ec8:	000f883a 	mov	r7,zero
    1ecc:	394ab03a 	or	r5,r7,r5
    1ed0:	280a90ba 	slli	r5,r5,2
    1ed4:	00800034 	movhi	r2,0
    1ed8:	1087bd04 	addi	r2,r2,7924
    1edc:	288b883a 	add	r5,r5,r2
    1ee0:	28800017 	ldw	r2,0(r5)
    1ee4:	a0c7883a 	add	r3,r20,r3
    1ee8:	b54cf03a 	xor	r6,r22,r21
    1eec:	1a000044 	addi	r8,r3,1
    1ef0:	1000683a 	jmp	r2
    1ef4:	00002138 	rdprs	zero,zero,132
    1ef8:	00002124 	muli	zero,zero,132
    1efc:	00002124 	muli	zero,zero,132
    1f00:	00002110 	cmplti	zero,zero,132
    1f04:	00001f50 	cmplti	zero,zero,125
    1f08:	00001f50 	cmplti	zero,zero,125
    1f0c:	000020f8 	rdprs	zero,zero,131
    1f10:	00002110 	cmplti	zero,zero,132
    1f14:	00001f50 	cmplti	zero,zero,125
    1f18:	000020f8 	rdprs	zero,zero,131
    1f1c:	00001f50 	cmplti	zero,zero,125
    1f20:	00002110 	cmplti	zero,zero,132
    1f24:	00001f54 	movui	zero,125
    1f28:	00001f54 	movui	zero,125
    1f2c:	00001f54 	movui	zero,125
    1f30:	00002474 	movhi	zero,145
    1f34:	8104b03a 	or	r2,r16,r4
    1f38:	10006c1e 	bne	r2,zero,20ec <__muldf3+0x2e8>
    1f3c:	01400204 	movi	r5,8
    1f40:	0021883a 	mov	r16,zero
    1f44:	002f883a 	mov	r23,zero
    1f48:	07000084 	movi	fp,2
    1f4c:	003fcd06 	br	1e84 <__muldf3+0x80>
    1f50:	3013883a 	mov	r9,r6
    1f54:	00800084 	movi	r2,2
    1f58:	e080501e 	bne	fp,r2,209c <__muldf3+0x298>
    1f5c:	4cc0004c 	andi	r19,r9,1
    1f60:	0101ffc4 	movi	r4,2047
    1f64:	0021883a 	mov	r16,zero
    1f68:	002f883a 	mov	r23,zero
    1f6c:	2008953a 	slli	r4,r4,20
    1f70:	98c03fcc 	andi	r3,r19,255
    1f74:	04400434 	movhi	r17,16
    1f78:	8c7fffc4 	addi	r17,r17,-1
    1f7c:	180697fa 	slli	r3,r3,31
    1f80:	8460703a 	and	r16,r16,r17
    1f84:	8120b03a 	or	r16,r16,r4
    1f88:	80c6b03a 	or	r3,r16,r3
    1f8c:	b805883a 	mov	r2,r23
    1f90:	dfc01117 	ldw	ra,68(sp)
    1f94:	df001017 	ldw	fp,64(sp)
    1f98:	ddc00f17 	ldw	r23,60(sp)
    1f9c:	dd800e17 	ldw	r22,56(sp)
    1fa0:	dd400d17 	ldw	r21,52(sp)
    1fa4:	dd000c17 	ldw	r20,48(sp)
    1fa8:	dcc00b17 	ldw	r19,44(sp)
    1fac:	dc800a17 	ldw	r18,40(sp)
    1fb0:	dc400917 	ldw	r17,36(sp)
    1fb4:	dc000817 	ldw	r16,32(sp)
    1fb8:	dec01204 	addi	sp,sp,72
    1fbc:	f800283a 	ret
    1fc0:	8104b03a 	or	r2,r16,r4
    1fc4:	10004426 	beq	r2,zero,20d8 <__muldf3+0x2d4>
    1fc8:	80014b26 	beq	r16,zero,24f8 <__muldf3+0x6f4>
    1fcc:	8009883a 	mov	r4,r16
    1fd0:	d9800715 	stw	r6,28(sp)
    1fd4:	d9c00215 	stw	r7,8(sp)
    1fd8:	da400415 	stw	r9,16(sp)
    1fdc:	00030980 	call	3098 <__clzsi2>
    1fe0:	d9800717 	ldw	r6,28(sp)
    1fe4:	d9c00217 	ldw	r7,8(sp)
    1fe8:	da400417 	ldw	r9,16(sp)
    1fec:	1007883a 	mov	r3,r2
    1ff0:	01000a04 	movi	r4,40
    1ff4:	1dfffe04 	addi	r23,r3,-8
    1ff8:	20c9c83a 	sub	r4,r4,r3
    1ffc:	85e0983a 	sll	r16,r16,r23
    2000:	9108d83a 	srl	r4,r18,r4
    2004:	95ee983a 	sll	r23,r18,r23
    2008:	2420b03a 	or	r16,r4,r16
    200c:	053f0344 	movi	r20,-1011
    2010:	a0e9c83a 	sub	r20,r20,r3
    2014:	000b883a 	mov	r5,zero
    2018:	0039883a 	mov	fp,zero
    201c:	003f9906 	br	1e84 <__muldf3+0x80>
    2020:	8984b03a 	or	r2,r17,r6
    2024:	10002a1e 	bne	r2,zero,20d0 <__muldf3+0x2cc>
    2028:	0023883a 	mov	r17,zero
    202c:	0025883a 	mov	r18,zero
    2030:	01c00084 	movi	r7,2
    2034:	003fa506 	br	1ecc <__muldf3+0xc8>
    2038:	8984b03a 	or	r2,r17,r6
    203c:	10002026 	beq	r2,zero,20c0 <__muldf3+0x2bc>
    2040:	88011c26 	beq	r17,zero,24b4 <__muldf3+0x6b0>
    2044:	8809883a 	mov	r4,r17
    2048:	d9400215 	stw	r5,8(sp)
    204c:	d9800715 	stw	r6,28(sp)
    2050:	da400415 	stw	r9,16(sp)
    2054:	da800315 	stw	r10,12(sp)
    2058:	00030980 	call	3098 <__clzsi2>
    205c:	d9400217 	ldw	r5,8(sp)
    2060:	d9800717 	ldw	r6,28(sp)
    2064:	da400417 	ldw	r9,16(sp)
    2068:	da800317 	ldw	r10,12(sp)
    206c:	1007883a 	mov	r3,r2
    2070:	01000a04 	movi	r4,40
    2074:	1cbffe04 	addi	r18,r3,-8
    2078:	20c9c83a 	sub	r4,r4,r3
    207c:	8ca2983a 	sll	r17,r17,r18
    2080:	3108d83a 	srl	r4,r6,r4
    2084:	34a4983a 	sll	r18,r6,r18
    2088:	2462b03a 	or	r17,r4,r17
    208c:	00bf0344 	movi	r2,-1011
    2090:	10c7c83a 	sub	r3,r2,r3
    2094:	000f883a 	mov	r7,zero
    2098:	003f8c06 	br	1ecc <__muldf3+0xc8>
    209c:	008000c4 	movi	r2,3
    20a0:	e0816d26 	beq	fp,r2,2658 <__muldf3+0x854>
    20a4:	00800044 	movi	r2,1
    20a8:	e081321e 	bne	fp,r2,2574 <__muldf3+0x770>
    20ac:	48a6703a 	and	r19,r9,r2
    20b0:	0009883a 	mov	r4,zero
    20b4:	0021883a 	mov	r16,zero
    20b8:	002f883a 	mov	r23,zero
    20bc:	003fab06 	br	1f6c <__muldf3+0x168>
    20c0:	0023883a 	mov	r17,zero
    20c4:	0025883a 	mov	r18,zero
    20c8:	01c00044 	movi	r7,1
    20cc:	003f7f06 	br	1ecc <__muldf3+0xc8>
    20d0:	01c000c4 	movi	r7,3
    20d4:	003f7d06 	br	1ecc <__muldf3+0xc8>
    20d8:	01400104 	movi	r5,4
    20dc:	0021883a 	mov	r16,zero
    20e0:	002f883a 	mov	r23,zero
    20e4:	07000044 	movi	fp,1
    20e8:	003f6606 	br	1e84 <__muldf3+0x80>
    20ec:	01400304 	movi	r5,12
    20f0:	070000c4 	movi	fp,3
    20f4:	003f6306 	br	1e84 <__muldf3+0x80>
    20f8:	04000434 	movhi	r16,16
    20fc:	0027883a 	mov	r19,zero
    2100:	843fffc4 	addi	r16,r16,-1
    2104:	05ffffc4 	movi	r23,-1
    2108:	0101ffc4 	movi	r4,2047
    210c:	003f9706 	br	1f6c <__muldf3+0x168>
    2110:	8821883a 	mov	r16,r17
    2114:	902f883a 	mov	r23,r18
    2118:	5013883a 	mov	r9,r10
    211c:	3839883a 	mov	fp,r7
    2120:	003f8c06 	br	1f54 <__muldf3+0x150>
    2124:	8821883a 	mov	r16,r17
    2128:	902f883a 	mov	r23,r18
    212c:	3013883a 	mov	r9,r6
    2130:	3839883a 	mov	fp,r7
    2134:	003f8706 	br	1f54 <__muldf3+0x150>
    2138:	b82ad43a 	srli	r21,r23,16
    213c:	9038d43a 	srli	fp,r18,16
    2140:	bdffffcc 	andi	r23,r23,65535
    2144:	94bfffcc 	andi	r18,r18,65535
    2148:	9009883a 	mov	r4,r18
    214c:	b80b883a 	mov	r5,r23
    2150:	d8c00515 	stw	r3,20(sp)
    2154:	d9800715 	stw	r6,28(sp)
    2158:	da000615 	stw	r8,24(sp)
    215c:	000129c0 	call	129c <__mulsi3>
    2160:	9009883a 	mov	r4,r18
    2164:	a80b883a 	mov	r5,r21
    2168:	1029883a 	mov	r20,r2
    216c:	000129c0 	call	129c <__mulsi3>
    2170:	e009883a 	mov	r4,fp
    2174:	a80b883a 	mov	r5,r21
    2178:	102d883a 	mov	r22,r2
    217c:	000129c0 	call	129c <__mulsi3>
    2180:	e009883a 	mov	r4,fp
    2184:	b80b883a 	mov	r5,r23
    2188:	1027883a 	mov	r19,r2
    218c:	000129c0 	call	129c <__mulsi3>
    2190:	a008d43a 	srli	r4,r20,16
    2194:	b085883a 	add	r2,r22,r2
    2198:	d8c00517 	ldw	r3,20(sp)
    219c:	110f883a 	add	r7,r2,r4
    21a0:	d9800717 	ldw	r6,28(sp)
    21a4:	da000617 	ldw	r8,24(sp)
    21a8:	3d80022e 	bgeu	r7,r22,21b4 <__muldf3+0x3b0>
    21ac:	00800074 	movhi	r2,1
    21b0:	98a7883a 	add	r19,r19,r2
    21b4:	3804943a 	slli	r2,r7,16
    21b8:	380ed43a 	srli	r7,r7,16
    21bc:	882cd43a 	srli	r22,r17,16
    21c0:	a53fffcc 	andi	r20,r20,65535
    21c4:	8c7fffcc 	andi	r17,r17,65535
    21c8:	1529883a 	add	r20,r2,r20
    21cc:	8809883a 	mov	r4,r17
    21d0:	b80b883a 	mov	r5,r23
    21d4:	d8c00515 	stw	r3,20(sp)
    21d8:	d9800715 	stw	r6,28(sp)
    21dc:	da000615 	stw	r8,24(sp)
    21e0:	d9c00015 	stw	r7,0(sp)
    21e4:	dd000115 	stw	r20,4(sp)
    21e8:	000129c0 	call	129c <__mulsi3>
    21ec:	a80b883a 	mov	r5,r21
    21f0:	8809883a 	mov	r4,r17
    21f4:	d8800415 	stw	r2,16(sp)
    21f8:	000129c0 	call	129c <__mulsi3>
    21fc:	a80b883a 	mov	r5,r21
    2200:	b009883a 	mov	r4,r22
    2204:	1029883a 	mov	r20,r2
    2208:	000129c0 	call	129c <__mulsi3>
    220c:	b009883a 	mov	r4,r22
    2210:	b80b883a 	mov	r5,r23
    2214:	102b883a 	mov	r21,r2
    2218:	000129c0 	call	129c <__mulsi3>
    221c:	da400417 	ldw	r9,16(sp)
    2220:	a085883a 	add	r2,r20,r2
    2224:	d8c00517 	ldw	r3,20(sp)
    2228:	4808d43a 	srli	r4,r9,16
    222c:	d9800717 	ldw	r6,28(sp)
    2230:	da000617 	ldw	r8,24(sp)
    2234:	1109883a 	add	r4,r2,r4
    2238:	2500022e 	bgeu	r4,r20,2244 <__muldf3+0x440>
    223c:	00800074 	movhi	r2,1
    2240:	a8ab883a 	add	r21,r21,r2
    2244:	200e943a 	slli	r7,r4,16
    2248:	2004d43a 	srli	r2,r4,16
    224c:	802ed43a 	srli	r23,r16,16
    2250:	843fffcc 	andi	r16,r16,65535
    2254:	4d3fffcc 	andi	r20,r9,65535
    2258:	9009883a 	mov	r4,r18
    225c:	800b883a 	mov	r5,r16
    2260:	3d29883a 	add	r20,r7,r20
    2264:	d8c00515 	stw	r3,20(sp)
    2268:	d9800715 	stw	r6,28(sp)
    226c:	da000615 	stw	r8,24(sp)
    2270:	a8ab883a 	add	r21,r21,r2
    2274:	000129c0 	call	129c <__mulsi3>
    2278:	9009883a 	mov	r4,r18
    227c:	b80b883a 	mov	r5,r23
    2280:	d8800315 	stw	r2,12(sp)
    2284:	000129c0 	call	129c <__mulsi3>
    2288:	e009883a 	mov	r4,fp
    228c:	b80b883a 	mov	r5,r23
    2290:	1025883a 	mov	r18,r2
    2294:	000129c0 	call	129c <__mulsi3>
    2298:	e009883a 	mov	r4,fp
    229c:	800b883a 	mov	r5,r16
    22a0:	d8800215 	stw	r2,8(sp)
    22a4:	000129c0 	call	129c <__mulsi3>
    22a8:	da800317 	ldw	r10,12(sp)
    22ac:	d9400017 	ldw	r5,0(sp)
    22b0:	9085883a 	add	r2,r18,r2
    22b4:	5008d43a 	srli	r4,r10,16
    22b8:	a153883a 	add	r9,r20,r5
    22bc:	d8c00517 	ldw	r3,20(sp)
    22c0:	1109883a 	add	r4,r2,r4
    22c4:	d9800717 	ldw	r6,28(sp)
    22c8:	da000617 	ldw	r8,24(sp)
    22cc:	dac00217 	ldw	r11,8(sp)
    22d0:	2480022e 	bgeu	r4,r18,22dc <__muldf3+0x4d8>
    22d4:	00800074 	movhi	r2,1
    22d8:	5897883a 	add	r11,r11,r2
    22dc:	200e943a 	slli	r7,r4,16
    22e0:	2038d43a 	srli	fp,r4,16
    22e4:	52bfffcc 	andi	r10,r10,65535
    22e8:	3a8f883a 	add	r7,r7,r10
    22ec:	8809883a 	mov	r4,r17
    22f0:	800b883a 	mov	r5,r16
    22f4:	d8c00515 	stw	r3,20(sp)
    22f8:	d9800715 	stw	r6,28(sp)
    22fc:	d9c00215 	stw	r7,8(sp)
    2300:	da000615 	stw	r8,24(sp)
    2304:	da400415 	stw	r9,16(sp)
    2308:	5f39883a 	add	fp,r11,fp
    230c:	000129c0 	call	129c <__mulsi3>
    2310:	8809883a 	mov	r4,r17
    2314:	b80b883a 	mov	r5,r23
    2318:	1025883a 	mov	r18,r2
    231c:	000129c0 	call	129c <__mulsi3>
    2320:	b009883a 	mov	r4,r22
    2324:	b80b883a 	mov	r5,r23
    2328:	d8800315 	stw	r2,12(sp)
    232c:	000129c0 	call	129c <__mulsi3>
    2330:	b009883a 	mov	r4,r22
    2334:	800b883a 	mov	r5,r16
    2338:	1023883a 	mov	r17,r2
    233c:	000129c0 	call	129c <__mulsi3>
    2340:	da800317 	ldw	r10,12(sp)
    2344:	9008d43a 	srli	r4,r18,16
    2348:	d8c00517 	ldw	r3,20(sp)
    234c:	5085883a 	add	r2,r10,r2
    2350:	1109883a 	add	r4,r2,r4
    2354:	d9800717 	ldw	r6,28(sp)
    2358:	d9c00217 	ldw	r7,8(sp)
    235c:	da000617 	ldw	r8,24(sp)
    2360:	da400417 	ldw	r9,16(sp)
    2364:	2280022e 	bgeu	r4,r10,2370 <__muldf3+0x56c>
    2368:	00800074 	movhi	r2,1
    236c:	88a3883a 	add	r17,r17,r2
    2370:	2004943a 	slli	r2,r4,16
    2374:	94bfffcc 	andi	r18,r18,65535
    2378:	4ce7883a 	add	r19,r9,r19
    237c:	14a5883a 	add	r18,r2,r18
    2380:	9d29803a 	cmpltu	r20,r19,r20
    2384:	9565883a 	add	r18,r18,r21
    2388:	9505883a 	add	r2,r18,r20
    238c:	99e7883a 	add	r19,r19,r7
    2390:	99cf803a 	cmpltu	r7,r19,r7
    2394:	e08b883a 	add	r5,fp,r2
    2398:	2008d43a 	srli	r4,r4,16
    239c:	29ef883a 	add	r23,r5,r7
    23a0:	1529803a 	cmpltu	r20,r2,r20
    23a4:	956b803a 	cmpltu	r21,r18,r21
    23a8:	b9cf803a 	cmpltu	r7,r23,r7
    23ac:	a564b03a 	or	r18,r20,r21
    23b0:	2f39803a 	cmpltu	fp,r5,fp
    23b4:	9125883a 	add	r18,r18,r4
    23b8:	3f38b03a 	or	fp,r7,fp
    23bc:	9725883a 	add	r18,r18,fp
    23c0:	9804927a 	slli	r2,r19,9
    23c4:	9463883a 	add	r17,r18,r17
    23c8:	d9000117 	ldw	r4,4(sp)
    23cc:	b820d5fa 	srli	r16,r23,23
    23d0:	8822927a 	slli	r17,r17,9
    23d4:	9826d5fa 	srli	r19,r19,23
    23d8:	1104b03a 	or	r2,r2,r4
    23dc:	b82e927a 	slli	r23,r23,9
    23e0:	1004c03a 	cmpne	r2,r2,zero
    23e4:	8c20b03a 	or	r16,r17,r16
    23e8:	14e6b03a 	or	r19,r2,r19
    23ec:	8080402c 	andhi	r2,r16,256
    23f0:	9deeb03a 	or	r23,r19,r23
    23f4:	10000726 	beq	r2,zero,2414 <__muldf3+0x610>
    23f8:	b804d07a 	srli	r2,r23,1
    23fc:	800697fa 	slli	r3,r16,31
    2400:	bdc0004c 	andi	r23,r23,1
    2404:	8020d07a 	srli	r16,r16,1
    2408:	b8aeb03a 	or	r23,r23,r2
    240c:	b8eeb03a 	or	r23,r23,r3
    2410:	4007883a 	mov	r3,r8
    2414:	1900ffc4 	addi	r4,r3,1023
    2418:	01004d0e 	bge	zero,r4,2550 <__muldf3+0x74c>
    241c:	b88001cc 	andi	r2,r23,7
    2420:	10000726 	beq	r2,zero,2440 <__muldf3+0x63c>
    2424:	b94003cc 	andi	r5,r23,15
    2428:	00800104 	movi	r2,4
    242c:	28800426 	beq	r5,r2,2440 <__muldf3+0x63c>
    2430:	b885883a 	add	r2,r23,r2
    2434:	15ef803a 	cmpltu	r23,r2,r23
    2438:	85e1883a 	add	r16,r16,r23
    243c:	102f883a 	mov	r23,r2
    2440:	8080402c 	andhi	r2,r16,256
    2444:	10000426 	beq	r2,zero,2458 <__muldf3+0x654>
    2448:	00bfc034 	movhi	r2,65280
    244c:	10bfffc4 	addi	r2,r2,-1
    2450:	19010004 	addi	r4,r3,1024
    2454:	80a0703a 	and	r16,r16,r2
    2458:	0081ff84 	movi	r2,2046
    245c:	1100340e 	bge	r2,r4,2530 <__muldf3+0x72c>
    2460:	34c0004c 	andi	r19,r6,1
    2464:	0101ffc4 	movi	r4,2047
    2468:	0021883a 	mov	r16,zero
    246c:	002f883a 	mov	r23,zero
    2470:	003ebe06 	br	1f6c <__muldf3+0x168>
    2474:	8080022c 	andhi	r2,r16,8
    2478:	10000926 	beq	r2,zero,24a0 <__muldf3+0x69c>
    247c:	8880022c 	andhi	r2,r17,8
    2480:	1000071e 	bne	r2,zero,24a0 <__muldf3+0x69c>
    2484:	00800434 	movhi	r2,16
    2488:	8c000234 	orhi	r16,r17,8
    248c:	10bfffc4 	addi	r2,r2,-1
    2490:	b027883a 	mov	r19,r22
    2494:	80a0703a 	and	r16,r16,r2
    2498:	902f883a 	mov	r23,r18
    249c:	003f1a06 	br	2108 <__muldf3+0x304>
    24a0:	00800434 	movhi	r2,16
    24a4:	84000234 	orhi	r16,r16,8
    24a8:	10bfffc4 	addi	r2,r2,-1
    24ac:	80a0703a 	and	r16,r16,r2
    24b0:	003f1506 	br	2108 <__muldf3+0x304>
    24b4:	3009883a 	mov	r4,r6
    24b8:	d9400215 	stw	r5,8(sp)
    24bc:	d9800715 	stw	r6,28(sp)
    24c0:	da400415 	stw	r9,16(sp)
    24c4:	da800315 	stw	r10,12(sp)
    24c8:	00030980 	call	3098 <__clzsi2>
    24cc:	10c00804 	addi	r3,r2,32
    24d0:	010009c4 	movi	r4,39
    24d4:	d9400217 	ldw	r5,8(sp)
    24d8:	d9800717 	ldw	r6,28(sp)
    24dc:	da400417 	ldw	r9,16(sp)
    24e0:	da800317 	ldw	r10,12(sp)
    24e4:	20fee20e 	bge	r4,r3,2070 <__muldf3+0x26c>
    24e8:	147ffe04 	addi	r17,r2,-8
    24ec:	9462983a 	sll	r17,r18,r17
    24f0:	0025883a 	mov	r18,zero
    24f4:	003ee506 	br	208c <__muldf3+0x288>
    24f8:	d9800715 	stw	r6,28(sp)
    24fc:	d9c00215 	stw	r7,8(sp)
    2500:	da400415 	stw	r9,16(sp)
    2504:	00030980 	call	3098 <__clzsi2>
    2508:	10c00804 	addi	r3,r2,32
    250c:	010009c4 	movi	r4,39
    2510:	d9800717 	ldw	r6,28(sp)
    2514:	d9c00217 	ldw	r7,8(sp)
    2518:	da400417 	ldw	r9,16(sp)
    251c:	20feb40e 	bge	r4,r3,1ff0 <__muldf3+0x1ec>
    2520:	143ffe04 	addi	r16,r2,-8
    2524:	9420983a 	sll	r16,r18,r16
    2528:	002f883a 	mov	r23,zero
    252c:	003eb706 	br	200c <__muldf3+0x208>
    2530:	8004977a 	slli	r2,r16,29
    2534:	b82ed0fa 	srli	r23,r23,3
    2538:	8020927a 	slli	r16,r16,9
    253c:	2101ffcc 	andi	r4,r4,2047
    2540:	15eeb03a 	or	r23,r2,r23
    2544:	8020d33a 	srli	r16,r16,12
    2548:	34c0004c 	andi	r19,r6,1
    254c:	003e8706 	br	1f6c <__muldf3+0x168>
    2550:	00bf0084 	movi	r2,-1022
    2554:	10c5c83a 	sub	r2,r2,r3
    2558:	01000e04 	movi	r4,56
    255c:	2080080e 	bge	r4,r2,2580 <__muldf3+0x77c>
    2560:	34c0004c 	andi	r19,r6,1
    2564:	0009883a 	mov	r4,zero
    2568:	0021883a 	mov	r16,zero
    256c:	002f883a 	mov	r23,zero
    2570:	003e7e06 	br	1f6c <__muldf3+0x168>
    2574:	4007883a 	mov	r3,r8
    2578:	480d883a 	mov	r6,r9
    257c:	003fa506 	br	2414 <__muldf3+0x610>
    2580:	010007c4 	movi	r4,31
    2584:	20801816 	blt	r4,r2,25e8 <__muldf3+0x7e4>
    2588:	18c10784 	addi	r3,r3,1054
    258c:	80c8983a 	sll	r4,r16,r3
    2590:	b88ad83a 	srl	r5,r23,r2
    2594:	b8c6983a 	sll	r3,r23,r3
    2598:	80a0d83a 	srl	r16,r16,r2
    259c:	2908b03a 	or	r4,r5,r4
    25a0:	1804c03a 	cmpne	r2,r3,zero
    25a4:	2088b03a 	or	r4,r4,r2
    25a8:	208001cc 	andi	r2,r4,7
    25ac:	10000726 	beq	r2,zero,25cc <__muldf3+0x7c8>
    25b0:	20c003cc 	andi	r3,r4,15
    25b4:	00800104 	movi	r2,4
    25b8:	18800426 	beq	r3,r2,25cc <__muldf3+0x7c8>
    25bc:	20c00104 	addi	r3,r4,4
    25c0:	1905803a 	cmpltu	r2,r3,r4
    25c4:	80a1883a 	add	r16,r16,r2
    25c8:	1809883a 	mov	r4,r3
    25cc:	8080202c 	andhi	r2,r16,128
    25d0:	10001b26 	beq	r2,zero,2640 <__muldf3+0x83c>
    25d4:	34c0004c 	andi	r19,r6,1
    25d8:	01000044 	movi	r4,1
    25dc:	0021883a 	mov	r16,zero
    25e0:	002f883a 	mov	r23,zero
    25e4:	003e6106 	br	1f6c <__muldf3+0x168>
    25e8:	013ef884 	movi	r4,-1054
    25ec:	20c9c83a 	sub	r4,r4,r3
    25f0:	01400804 	movi	r5,32
    25f4:	8108d83a 	srl	r4,r16,r4
    25f8:	11401526 	beq	r2,r5,2650 <__muldf3+0x84c>
    25fc:	18c10f84 	addi	r3,r3,1086
    2600:	80e0983a 	sll	r16,r16,r3
    2604:	85eeb03a 	or	r23,r16,r23
    2608:	b804c03a 	cmpne	r2,r23,zero
    260c:	1108b03a 	or	r4,r2,r4
    2610:	20c001cc 	andi	r3,r4,7
    2614:	1800061e 	bne	r3,zero,2630 <__muldf3+0x82c>
    2618:	0021883a 	mov	r16,zero
    261c:	202ed0fa 	srli	r23,r4,3
    2620:	34c0004c 	andi	r19,r6,1
    2624:	0009883a 	mov	r4,zero
    2628:	b8eeb03a 	or	r23,r23,r3
    262c:	003e4f06 	br	1f6c <__muldf3+0x168>
    2630:	20c003cc 	andi	r3,r4,15
    2634:	00800104 	movi	r2,4
    2638:	0021883a 	mov	r16,zero
    263c:	18bfdf1e 	bne	r3,r2,25bc <__muldf3+0x7b8>
    2640:	8004927a 	slli	r2,r16,9
    2644:	8006977a 	slli	r3,r16,29
    2648:	1020d33a 	srli	r16,r2,12
    264c:	003ff306 	br	261c <__muldf3+0x818>
    2650:	0021883a 	mov	r16,zero
    2654:	003feb06 	br	2604 <__muldf3+0x800>
    2658:	00800434 	movhi	r2,16
    265c:	84000234 	orhi	r16,r16,8
    2660:	10bfffc4 	addi	r2,r2,-1
    2664:	4cc0004c 	andi	r19,r9,1
    2668:	80a0703a 	and	r16,r16,r2
    266c:	003ea606 	br	2108 <__muldf3+0x304>

00002670 <__subdf3>:
    2670:	00c00434 	movhi	r3,16
    2674:	18ffffc4 	addi	r3,r3,-1
    2678:	defffb04 	addi	sp,sp,-20
    267c:	28d2703a 	and	r9,r5,r3
    2680:	3814d53a 	srli	r10,r7,20
    2684:	38c6703a 	and	r3,r7,r3
    2688:	3004d77a 	srli	r2,r6,29
    268c:	dc800215 	stw	r18,8(sp)
    2690:	dc000015 	stw	r16,0(sp)
    2694:	2824d7fa 	srli	r18,r5,31
    2698:	2820d53a 	srli	r16,r5,20
    269c:	481290fa 	slli	r9,r9,3
    26a0:	200ad77a 	srli	r5,r4,29
    26a4:	180690fa 	slli	r3,r3,3
    26a8:	dc400115 	stw	r17,4(sp)
    26ac:	dfc00415 	stw	ra,16(sp)
    26b0:	202290fa 	slli	r17,r4,3
    26b4:	dcc00315 	stw	r19,12(sp)
    26b8:	5281ffcc 	andi	r10,r10,2047
    26bc:	0101ffc4 	movi	r4,2047
    26c0:	9011883a 	mov	r8,r18
    26c4:	8401ffcc 	andi	r16,r16,2047
    26c8:	94803fcc 	andi	r18,r18,255
    26cc:	494ab03a 	or	r5,r9,r5
    26d0:	380ed7fa 	srli	r7,r7,31
    26d4:	1886b03a 	or	r3,r3,r2
    26d8:	300c90fa 	slli	r6,r6,3
    26dc:	51009026 	beq	r10,r4,2920 <__subdf3+0x2b0>
    26e0:	39c0005c 	xori	r7,r7,1
    26e4:	8285c83a 	sub	r2,r16,r10
    26e8:	91c06f26 	beq	r18,r7,28a8 <__subdf3+0x238>
    26ec:	0080b10e 	bge	zero,r2,29b4 <__subdf3+0x344>
    26f0:	50002a1e 	bne	r10,zero,279c <__subdf3+0x12c>
    26f4:	1988b03a 	or	r4,r3,r6
    26f8:	2000941e 	bne	r4,zero,294c <__subdf3+0x2dc>
    26fc:	888001cc 	andi	r2,r17,7
    2700:	10005b26 	beq	r2,zero,2870 <__subdf3+0x200>
    2704:	88c003cc 	andi	r3,r17,15
    2708:	00800104 	movi	r2,4
    270c:	18805826 	beq	r3,r2,2870 <__subdf3+0x200>
    2710:	88c00104 	addi	r3,r17,4
    2714:	1c63803a 	cmpltu	r17,r3,r17
    2718:	2c4b883a 	add	r5,r5,r17
    271c:	2880202c 	andhi	r2,r5,128
    2720:	9200004c 	andi	r8,r18,1
    2724:	1823883a 	mov	r17,r3
    2728:	10005426 	beq	r2,zero,287c <__subdf3+0x20c>
    272c:	84000044 	addi	r16,r16,1
    2730:	0081ffc4 	movi	r2,2047
    2734:	8080bf26 	beq	r16,r2,2a34 <__subdf3+0x3c4>
    2738:	013fe034 	movhi	r4,65408
    273c:	213fffc4 	addi	r4,r4,-1
    2740:	290a703a 	and	r5,r5,r4
    2744:	2804977a 	slli	r2,r5,29
    2748:	280a927a 	slli	r5,r5,9
    274c:	8822d0fa 	srli	r17,r17,3
    2750:	8401ffcc 	andi	r16,r16,2047
    2754:	2808d33a 	srli	r4,r5,12
    2758:	1444b03a 	or	r2,r2,r17
    275c:	8401ffcc 	andi	r16,r16,2047
    2760:	800a953a 	slli	r5,r16,20
    2764:	40c03fcc 	andi	r3,r8,255
    2768:	04000434 	movhi	r16,16
    276c:	180697fa 	slli	r3,r3,31
    2770:	843fffc4 	addi	r16,r16,-1
    2774:	2420703a 	and	r16,r4,r16
    2778:	8160b03a 	or	r16,r16,r5
    277c:	80c6b03a 	or	r3,r16,r3
    2780:	dfc00417 	ldw	ra,16(sp)
    2784:	dcc00317 	ldw	r19,12(sp)
    2788:	dc800217 	ldw	r18,8(sp)
    278c:	dc400117 	ldw	r17,4(sp)
    2790:	dc000017 	ldw	r16,0(sp)
    2794:	dec00504 	addi	sp,sp,20
    2798:	f800283a 	ret
    279c:	0101ffc4 	movi	r4,2047
    27a0:	813fd626 	beq	r16,r4,26fc <__subdf3+0x8c>
    27a4:	18c02034 	orhi	r3,r3,128
    27a8:	01000e04 	movi	r4,56
    27ac:	2080a416 	blt	r4,r2,2a40 <__subdf3+0x3d0>
    27b0:	010007c4 	movi	r4,31
    27b4:	2080c716 	blt	r4,r2,2ad4 <__subdf3+0x464>
    27b8:	01000804 	movi	r4,32
    27bc:	2089c83a 	sub	r4,r4,r2
    27c0:	1910983a 	sll	r8,r3,r4
    27c4:	308ed83a 	srl	r7,r6,r2
    27c8:	3108983a 	sll	r4,r6,r4
    27cc:	1884d83a 	srl	r2,r3,r2
    27d0:	41ccb03a 	or	r6,r8,r7
    27d4:	2008c03a 	cmpne	r4,r4,zero
    27d8:	310cb03a 	or	r6,r6,r4
    27dc:	898dc83a 	sub	r6,r17,r6
    27e0:	89a3803a 	cmpltu	r17,r17,r6
    27e4:	288bc83a 	sub	r5,r5,r2
    27e8:	2c4bc83a 	sub	r5,r5,r17
    27ec:	3023883a 	mov	r17,r6
    27f0:	2880202c 	andhi	r2,r5,128
    27f4:	10006b26 	beq	r2,zero,29a4 <__subdf3+0x334>
    27f8:	04c02034 	movhi	r19,128
    27fc:	9cffffc4 	addi	r19,r19,-1
    2800:	2ce6703a 	and	r19,r5,r19
    2804:	98007c26 	beq	r19,zero,29f8 <__subdf3+0x388>
    2808:	9809883a 	mov	r4,r19
    280c:	00030980 	call	3098 <__clzsi2>
    2810:	10fffe04 	addi	r3,r2,-8
    2814:	010007c4 	movi	r4,31
    2818:	20c07d16 	blt	r4,r3,2a10 <__subdf3+0x3a0>
    281c:	01400a04 	movi	r5,40
    2820:	2885c83a 	sub	r2,r5,r2
    2824:	888ad83a 	srl	r5,r17,r2
    2828:	98e6983a 	sll	r19,r19,r3
    282c:	88e2983a 	sll	r17,r17,r3
    2830:	2ce6b03a 	or	r19,r5,r19
    2834:	1c007a16 	blt	r3,r16,2a20 <__subdf3+0x3b0>
    2838:	1c21c83a 	sub	r16,r3,r16
    283c:	81400044 	addi	r5,r16,1
    2840:	00c007c4 	movi	r3,31
    2844:	19409616 	blt	r3,r5,2aa0 <__subdf3+0x430>
    2848:	1c21c83a 	sub	r16,r3,r16
    284c:	8c08983a 	sll	r4,r17,r16
    2850:	8946d83a 	srl	r3,r17,r5
    2854:	9c20983a 	sll	r16,r19,r16
    2858:	2008c03a 	cmpne	r4,r4,zero
    285c:	994ad83a 	srl	r5,r19,r5
    2860:	1c06b03a 	or	r3,r3,r16
    2864:	1922b03a 	or	r17,r3,r4
    2868:	0021883a 	mov	r16,zero
    286c:	003fa306 	br	26fc <__subdf3+0x8c>
    2870:	2880202c 	andhi	r2,r5,128
    2874:	9200004c 	andi	r8,r18,1
    2878:	103fac1e 	bne	r2,zero,272c <__subdf3+0xbc>
    287c:	2804977a 	slli	r2,r5,29
    2880:	8822d0fa 	srli	r17,r17,3
    2884:	00c1ffc4 	movi	r3,2047
    2888:	280ad0fa 	srli	r5,r5,3
    288c:	1444b03a 	or	r2,r2,r17
    2890:	80c02726 	beq	r16,r3,2930 <__subdf3+0x2c0>
    2894:	01000434 	movhi	r4,16
    2898:	213fffc4 	addi	r4,r4,-1
    289c:	80e0703a 	and	r16,r16,r3
    28a0:	2908703a 	and	r4,r5,r4
    28a4:	003fad06 	br	275c <__subdf3+0xec>
    28a8:	0080690e 	bge	zero,r2,2a50 <__subdf3+0x3e0>
    28ac:	50002f26 	beq	r10,zero,296c <__subdf3+0x2fc>
    28b0:	0101ffc4 	movi	r4,2047
    28b4:	813f9126 	beq	r16,r4,26fc <__subdf3+0x8c>
    28b8:	18c02034 	orhi	r3,r3,128
    28bc:	01000e04 	movi	r4,56
    28c0:	2080b00e 	bge	r4,r2,2b84 <__subdf3+0x514>
    28c4:	198cb03a 	or	r6,r3,r6
    28c8:	300ec03a 	cmpne	r7,r6,zero
    28cc:	0005883a 	mov	r2,zero
    28d0:	3c4f883a 	add	r7,r7,r17
    28d4:	3c63803a 	cmpltu	r17,r7,r17
    28d8:	114b883a 	add	r5,r2,r5
    28dc:	2c4b883a 	add	r5,r5,r17
    28e0:	3823883a 	mov	r17,r7
    28e4:	2880202c 	andhi	r2,r5,128
    28e8:	10002e26 	beq	r2,zero,29a4 <__subdf3+0x334>
    28ec:	84000044 	addi	r16,r16,1
    28f0:	0081ffc4 	movi	r2,2047
    28f4:	8080de26 	beq	r16,r2,2c70 <__subdf3+0x600>
    28f8:	00bfe034 	movhi	r2,65408
    28fc:	10bfffc4 	addi	r2,r2,-1
    2900:	288a703a 	and	r5,r5,r2
    2904:	880cd07a 	srli	r6,r17,1
    2908:	280897fa 	slli	r4,r5,31
    290c:	88c0004c 	andi	r3,r17,1
    2910:	30e2b03a 	or	r17,r6,r3
    2914:	280ad07a 	srli	r5,r5,1
    2918:	8922b03a 	or	r17,r17,r4
    291c:	003f7706 	br	26fc <__subdf3+0x8c>
    2920:	1984b03a 	or	r2,r3,r6
    2924:	103f6e26 	beq	r2,zero,26e0 <__subdf3+0x70>
    2928:	39c03fcc 	andi	r7,r7,255
    292c:	003f6d06 	br	26e4 <__subdf3+0x74>
    2930:	1146b03a 	or	r3,r2,r5
    2934:	18003f26 	beq	r3,zero,2a34 <__subdf3+0x3c4>
    2938:	00c00434 	movhi	r3,16
    293c:	29000234 	orhi	r4,r5,8
    2940:	18ffffc4 	addi	r3,r3,-1
    2944:	20c8703a 	and	r4,r4,r3
    2948:	003f8406 	br	275c <__subdf3+0xec>
    294c:	10bfffc4 	addi	r2,r2,-1
    2950:	1000501e 	bne	r2,zero,2a94 <__subdf3+0x424>
    2954:	898fc83a 	sub	r7,r17,r6
    2958:	89e3803a 	cmpltu	r17,r17,r7
    295c:	28cbc83a 	sub	r5,r5,r3
    2960:	2c4bc83a 	sub	r5,r5,r17
    2964:	3823883a 	mov	r17,r7
    2968:	003fa106 	br	27f0 <__subdf3+0x180>
    296c:	1988b03a 	or	r4,r3,r6
    2970:	203f6226 	beq	r4,zero,26fc <__subdf3+0x8c>
    2974:	10bfffc4 	addi	r2,r2,-1
    2978:	10009b1e 	bne	r2,zero,2be8 <__subdf3+0x578>
    297c:	344d883a 	add	r6,r6,r17
    2980:	3463803a 	cmpltu	r17,r6,r17
    2984:	194b883a 	add	r5,r3,r5
    2988:	2c4b883a 	add	r5,r5,r17
    298c:	3023883a 	mov	r17,r6
    2990:	003fd406 	br	28e4 <__subdf3+0x274>
    2994:	1106b03a 	or	r3,r2,r4
    2998:	1800b426 	beq	r3,zero,2c6c <__subdf3+0x5fc>
    299c:	100b883a 	mov	r5,r2
    29a0:	2023883a 	mov	r17,r4
    29a4:	888001cc 	andi	r2,r17,7
    29a8:	103f561e 	bne	r2,zero,2704 <__subdf3+0x94>
    29ac:	9200004c 	andi	r8,r18,1
    29b0:	003fb206 	br	287c <__subdf3+0x20c>
    29b4:	1000531e 	bne	r2,zero,2b04 <__subdf3+0x494>
    29b8:	80800044 	addi	r2,r16,1
    29bc:	1081ffcc 	andi	r2,r2,2047
    29c0:	01000044 	movi	r4,1
    29c4:	2080a00e 	bge	r4,r2,2c48 <__subdf3+0x5d8>
    29c8:	8985c83a 	sub	r2,r17,r6
    29cc:	8889803a 	cmpltu	r4,r17,r2
    29d0:	28e7c83a 	sub	r19,r5,r3
    29d4:	9927c83a 	sub	r19,r19,r4
    29d8:	9900202c 	andhi	r4,r19,128
    29dc:	20006226 	beq	r4,zero,2b68 <__subdf3+0x4f8>
    29e0:	3463c83a 	sub	r17,r6,r17
    29e4:	194bc83a 	sub	r5,r3,r5
    29e8:	344d803a 	cmpltu	r6,r6,r17
    29ec:	29a7c83a 	sub	r19,r5,r6
    29f0:	3825883a 	mov	r18,r7
    29f4:	983f841e 	bne	r19,zero,2808 <__subdf3+0x198>
    29f8:	8809883a 	mov	r4,r17
    29fc:	00030980 	call	3098 <__clzsi2>
    2a00:	10800804 	addi	r2,r2,32
    2a04:	10fffe04 	addi	r3,r2,-8
    2a08:	010007c4 	movi	r4,31
    2a0c:	20ff830e 	bge	r4,r3,281c <__subdf3+0x1ac>
    2a10:	14fff604 	addi	r19,r2,-40
    2a14:	8ce6983a 	sll	r19,r17,r19
    2a18:	0023883a 	mov	r17,zero
    2a1c:	1c3f860e 	bge	r3,r16,2838 <__subdf3+0x1c8>
    2a20:	017fe034 	movhi	r5,65408
    2a24:	297fffc4 	addi	r5,r5,-1
    2a28:	80e1c83a 	sub	r16,r16,r3
    2a2c:	994a703a 	and	r5,r19,r5
    2a30:	003f3206 	br	26fc <__subdf3+0x8c>
    2a34:	0009883a 	mov	r4,zero
    2a38:	0005883a 	mov	r2,zero
    2a3c:	003f4706 	br	275c <__subdf3+0xec>
    2a40:	198cb03a 	or	r6,r3,r6
    2a44:	300cc03a 	cmpne	r6,r6,zero
    2a48:	0005883a 	mov	r2,zero
    2a4c:	003f6306 	br	27dc <__subdf3+0x16c>
    2a50:	10009d1e 	bne	r2,zero,2cc8 <__subdf3+0x658>
    2a54:	81c00044 	addi	r7,r16,1
    2a58:	3881ffcc 	andi	r2,r7,2047
    2a5c:	02400044 	movi	r9,1
    2a60:	4880680e 	bge	r9,r2,2c04 <__subdf3+0x594>
    2a64:	0081ffc4 	movi	r2,2047
    2a68:	3880ae26 	beq	r7,r2,2d24 <__subdf3+0x6b4>
    2a6c:	344d883a 	add	r6,r6,r17
    2a70:	3463803a 	cmpltu	r17,r6,r17
    2a74:	194b883a 	add	r5,r3,r5
    2a78:	2c4b883a 	add	r5,r5,r17
    2a7c:	282297fa 	slli	r17,r5,31
    2a80:	300cd07a 	srli	r6,r6,1
    2a84:	280ad07a 	srli	r5,r5,1
    2a88:	3821883a 	mov	r16,r7
    2a8c:	89a2b03a 	or	r17,r17,r6
    2a90:	003f1a06 	br	26fc <__subdf3+0x8c>
    2a94:	0101ffc4 	movi	r4,2047
    2a98:	813f431e 	bne	r16,r4,27a8 <__subdf3+0x138>
    2a9c:	003f1706 	br	26fc <__subdf3+0x8c>
    2aa0:	80bff844 	addi	r2,r16,-31
    2aa4:	00c00804 	movi	r3,32
    2aa8:	9884d83a 	srl	r2,r19,r2
    2aac:	28c05126 	beq	r5,r3,2bf4 <__subdf3+0x584>
    2ab0:	00c00fc4 	movi	r3,63
    2ab4:	1c21c83a 	sub	r16,r3,r16
    2ab8:	9c26983a 	sll	r19,r19,r16
    2abc:	9c62b03a 	or	r17,r19,r17
    2ac0:	8822c03a 	cmpne	r17,r17,zero
    2ac4:	88a2b03a 	or	r17,r17,r2
    2ac8:	000b883a 	mov	r5,zero
    2acc:	0021883a 	mov	r16,zero
    2ad0:	003fb406 	br	29a4 <__subdf3+0x334>
    2ad4:	113ff804 	addi	r4,r2,-32
    2ad8:	01c00804 	movi	r7,32
    2adc:	1908d83a 	srl	r4,r3,r4
    2ae0:	11c04626 	beq	r2,r7,2bfc <__subdf3+0x58c>
    2ae4:	01c01004 	movi	r7,64
    2ae8:	3885c83a 	sub	r2,r7,r2
    2aec:	1884983a 	sll	r2,r3,r2
    2af0:	118cb03a 	or	r6,r2,r6
    2af4:	300cc03a 	cmpne	r6,r6,zero
    2af8:	310cb03a 	or	r6,r6,r4
    2afc:	0005883a 	mov	r2,zero
    2b00:	003f3606 	br	27dc <__subdf3+0x16c>
    2b04:	80002b26 	beq	r16,zero,2bb4 <__subdf3+0x544>
    2b08:	0101ffc4 	movi	r4,2047
    2b0c:	51006926 	beq	r10,r4,2cb4 <__subdf3+0x644>
    2b10:	0085c83a 	sub	r2,zero,r2
    2b14:	29402034 	orhi	r5,r5,128
    2b18:	01000e04 	movi	r4,56
    2b1c:	20807d16 	blt	r4,r2,2d14 <__subdf3+0x6a4>
    2b20:	010007c4 	movi	r4,31
    2b24:	2080d916 	blt	r4,r2,2e8c <__subdf3+0x81c>
    2b28:	01000804 	movi	r4,32
    2b2c:	2089c83a 	sub	r4,r4,r2
    2b30:	2912983a 	sll	r9,r5,r4
    2b34:	8890d83a 	srl	r8,r17,r2
    2b38:	8908983a 	sll	r4,r17,r4
    2b3c:	2884d83a 	srl	r2,r5,r2
    2b40:	4a22b03a 	or	r17,r9,r8
    2b44:	2008c03a 	cmpne	r4,r4,zero
    2b48:	8922b03a 	or	r17,r17,r4
    2b4c:	3463c83a 	sub	r17,r6,r17
    2b50:	1885c83a 	sub	r2,r3,r2
    2b54:	344d803a 	cmpltu	r6,r6,r17
    2b58:	118bc83a 	sub	r5,r2,r6
    2b5c:	5021883a 	mov	r16,r10
    2b60:	3825883a 	mov	r18,r7
    2b64:	003f2206 	br	27f0 <__subdf3+0x180>
    2b68:	9886b03a 	or	r3,r19,r2
    2b6c:	18001c1e 	bne	r3,zero,2be0 <__subdf3+0x570>
    2b70:	0011883a 	mov	r8,zero
    2b74:	000b883a 	mov	r5,zero
    2b78:	0023883a 	mov	r17,zero
    2b7c:	0021883a 	mov	r16,zero
    2b80:	003f3e06 	br	287c <__subdf3+0x20c>
    2b84:	010007c4 	movi	r4,31
    2b88:	20803c16 	blt	r4,r2,2c7c <__subdf3+0x60c>
    2b8c:	01000804 	movi	r4,32
    2b90:	2089c83a 	sub	r4,r4,r2
    2b94:	1912983a 	sll	r9,r3,r4
    2b98:	308ed83a 	srl	r7,r6,r2
    2b9c:	3108983a 	sll	r4,r6,r4
    2ba0:	1884d83a 	srl	r2,r3,r2
    2ba4:	49ceb03a 	or	r7,r9,r7
    2ba8:	2008c03a 	cmpne	r4,r4,zero
    2bac:	390eb03a 	or	r7,r7,r4
    2bb0:	003f4706 	br	28d0 <__subdf3+0x260>
    2bb4:	2c48b03a 	or	r4,r5,r17
    2bb8:	20003e26 	beq	r4,zero,2cb4 <__subdf3+0x644>
    2bbc:	0084303a 	nor	r2,zero,r2
    2bc0:	10003a1e 	bne	r2,zero,2cac <__subdf3+0x63c>
    2bc4:	3463c83a 	sub	r17,r6,r17
    2bc8:	194bc83a 	sub	r5,r3,r5
    2bcc:	344d803a 	cmpltu	r6,r6,r17
    2bd0:	298bc83a 	sub	r5,r5,r6
    2bd4:	5021883a 	mov	r16,r10
    2bd8:	3825883a 	mov	r18,r7
    2bdc:	003f0406 	br	27f0 <__subdf3+0x180>
    2be0:	1023883a 	mov	r17,r2
    2be4:	003f0706 	br	2804 <__subdf3+0x194>
    2be8:	0101ffc4 	movi	r4,2047
    2bec:	813f331e 	bne	r16,r4,28bc <__subdf3+0x24c>
    2bf0:	003ec206 	br	26fc <__subdf3+0x8c>
    2bf4:	0027883a 	mov	r19,zero
    2bf8:	003fb006 	br	2abc <__subdf3+0x44c>
    2bfc:	0005883a 	mov	r2,zero
    2c00:	003fbb06 	br	2af0 <__subdf3+0x480>
    2c04:	2c44b03a 	or	r2,r5,r17
    2c08:	80008b1e 	bne	r16,zero,2e38 <__subdf3+0x7c8>
    2c0c:	1000b526 	beq	r2,zero,2ee4 <__subdf3+0x874>
    2c10:	1984b03a 	or	r2,r3,r6
    2c14:	103eb926 	beq	r2,zero,26fc <__subdf3+0x8c>
    2c18:	3449883a 	add	r4,r6,r17
    2c1c:	2463803a 	cmpltu	r17,r4,r17
    2c20:	194b883a 	add	r5,r3,r5
    2c24:	2c4b883a 	add	r5,r5,r17
    2c28:	2880202c 	andhi	r2,r5,128
    2c2c:	2023883a 	mov	r17,r4
    2c30:	103f5c26 	beq	r2,zero,29a4 <__subdf3+0x334>
    2c34:	00bfe034 	movhi	r2,65408
    2c38:	10bfffc4 	addi	r2,r2,-1
    2c3c:	4821883a 	mov	r16,r9
    2c40:	288a703a 	and	r5,r5,r2
    2c44:	003ead06 	br	26fc <__subdf3+0x8c>
    2c48:	2c44b03a 	or	r2,r5,r17
    2c4c:	8000291e 	bne	r16,zero,2cf4 <__subdf3+0x684>
    2c50:	10004f1e 	bne	r2,zero,2d90 <__subdf3+0x720>
    2c54:	1984b03a 	or	r2,r3,r6
    2c58:	10000426 	beq	r2,zero,2c6c <__subdf3+0x5fc>
    2c5c:	180b883a 	mov	r5,r3
    2c60:	3023883a 	mov	r17,r6
    2c64:	3825883a 	mov	r18,r7
    2c68:	003ea406 	br	26fc <__subdf3+0x8c>
    2c6c:	0011883a 	mov	r8,zero
    2c70:	000b883a 	mov	r5,zero
    2c74:	0023883a 	mov	r17,zero
    2c78:	003f0006 	br	287c <__subdf3+0x20c>
    2c7c:	11fff804 	addi	r7,r2,-32
    2c80:	19c8d83a 	srl	r4,r3,r7
    2c84:	01c00804 	movi	r7,32
    2c88:	11c07e26 	beq	r2,r7,2e84 <__subdf3+0x814>
    2c8c:	01c01004 	movi	r7,64
    2c90:	3885c83a 	sub	r2,r7,r2
    2c94:	1884983a 	sll	r2,r3,r2
    2c98:	118cb03a 	or	r6,r2,r6
    2c9c:	300ec03a 	cmpne	r7,r6,zero
    2ca0:	390eb03a 	or	r7,r7,r4
    2ca4:	0005883a 	mov	r2,zero
    2ca8:	003f0906 	br	28d0 <__subdf3+0x260>
    2cac:	0101ffc4 	movi	r4,2047
    2cb0:	513f991e 	bne	r10,r4,2b18 <__subdf3+0x4a8>
    2cb4:	180b883a 	mov	r5,r3
    2cb8:	3023883a 	mov	r17,r6
    2cbc:	5021883a 	mov	r16,r10
    2cc0:	3825883a 	mov	r18,r7
    2cc4:	003e8d06 	br	26fc <__subdf3+0x8c>
    2cc8:	80001a1e 	bne	r16,zero,2d34 <__subdf3+0x6c4>
    2ccc:	2c48b03a 	or	r4,r5,r17
    2cd0:	20005526 	beq	r4,zero,2e28 <__subdf3+0x7b8>
    2cd4:	0084303a 	nor	r2,zero,r2
    2cd8:	1000511e 	bne	r2,zero,2e20 <__subdf3+0x7b0>
    2cdc:	89a3883a 	add	r17,r17,r6
    2ce0:	194b883a 	add	r5,r3,r5
    2ce4:	898d803a 	cmpltu	r6,r17,r6
    2ce8:	298b883a 	add	r5,r5,r6
    2cec:	5021883a 	mov	r16,r10
    2cf0:	003efc06 	br	28e4 <__subdf3+0x274>
    2cf4:	1000341e 	bne	r2,zero,2dc8 <__subdf3+0x758>
    2cf8:	1984b03a 	or	r2,r3,r6
    2cfc:	10006f26 	beq	r2,zero,2ebc <__subdf3+0x84c>
    2d00:	180b883a 	mov	r5,r3
    2d04:	3023883a 	mov	r17,r6
    2d08:	3825883a 	mov	r18,r7
    2d0c:	0401ffc4 	movi	r16,2047
    2d10:	003e7a06 	br	26fc <__subdf3+0x8c>
    2d14:	2c62b03a 	or	r17,r5,r17
    2d18:	8822c03a 	cmpne	r17,r17,zero
    2d1c:	0005883a 	mov	r2,zero
    2d20:	003f8a06 	br	2b4c <__subdf3+0x4dc>
    2d24:	3821883a 	mov	r16,r7
    2d28:	000b883a 	mov	r5,zero
    2d2c:	0023883a 	mov	r17,zero
    2d30:	003ed206 	br	287c <__subdf3+0x20c>
    2d34:	0101ffc4 	movi	r4,2047
    2d38:	51003b26 	beq	r10,r4,2e28 <__subdf3+0x7b8>
    2d3c:	0085c83a 	sub	r2,zero,r2
    2d40:	29402034 	orhi	r5,r5,128
    2d44:	01000e04 	movi	r4,56
    2d48:	20806216 	blt	r4,r2,2ed4 <__subdf3+0x864>
    2d4c:	010007c4 	movi	r4,31
    2d50:	20806b16 	blt	r4,r2,2f00 <__subdf3+0x890>
    2d54:	01000804 	movi	r4,32
    2d58:	2089c83a 	sub	r4,r4,r2
    2d5c:	2912983a 	sll	r9,r5,r4
    2d60:	888ed83a 	srl	r7,r17,r2
    2d64:	8908983a 	sll	r4,r17,r4
    2d68:	2884d83a 	srl	r2,r5,r2
    2d6c:	49e2b03a 	or	r17,r9,r7
    2d70:	2008c03a 	cmpne	r4,r4,zero
    2d74:	8922b03a 	or	r17,r17,r4
    2d78:	89a3883a 	add	r17,r17,r6
    2d7c:	10c5883a 	add	r2,r2,r3
    2d80:	898d803a 	cmpltu	r6,r17,r6
    2d84:	118b883a 	add	r5,r2,r6
    2d88:	5021883a 	mov	r16,r10
    2d8c:	003ed506 	br	28e4 <__subdf3+0x274>
    2d90:	1984b03a 	or	r2,r3,r6
    2d94:	103e5926 	beq	r2,zero,26fc <__subdf3+0x8c>
    2d98:	8989c83a 	sub	r4,r17,r6
    2d9c:	8911803a 	cmpltu	r8,r17,r4
    2da0:	28c5c83a 	sub	r2,r5,r3
    2da4:	1205c83a 	sub	r2,r2,r8
    2da8:	1200202c 	andhi	r8,r2,128
    2dac:	403ef926 	beq	r8,zero,2994 <__subdf3+0x324>
    2db0:	3463c83a 	sub	r17,r6,r17
    2db4:	194bc83a 	sub	r5,r3,r5
    2db8:	344d803a 	cmpltu	r6,r6,r17
    2dbc:	298bc83a 	sub	r5,r5,r6
    2dc0:	3825883a 	mov	r18,r7
    2dc4:	003e4d06 	br	26fc <__subdf3+0x8c>
    2dc8:	1984b03a 	or	r2,r3,r6
    2dcc:	10002b26 	beq	r2,zero,2e7c <__subdf3+0x80c>
    2dd0:	2808d0fa 	srli	r4,r5,3
    2dd4:	8822d0fa 	srli	r17,r17,3
    2dd8:	280a977a 	slli	r5,r5,29
    2ddc:	2080022c 	andhi	r2,r4,8
    2de0:	2c62b03a 	or	r17,r5,r17
    2de4:	10000826 	beq	r2,zero,2e08 <__subdf3+0x798>
    2de8:	1810d0fa 	srli	r8,r3,3
    2dec:	4080022c 	andhi	r2,r8,8
    2df0:	1000051e 	bne	r2,zero,2e08 <__subdf3+0x798>
    2df4:	300cd0fa 	srli	r6,r6,3
    2df8:	1804977a 	slli	r2,r3,29
    2dfc:	4009883a 	mov	r4,r8
    2e00:	3825883a 	mov	r18,r7
    2e04:	11a2b03a 	or	r17,r2,r6
    2e08:	880ad77a 	srli	r5,r17,29
    2e0c:	200890fa 	slli	r4,r4,3
    2e10:	882290fa 	slli	r17,r17,3
    2e14:	0401ffc4 	movi	r16,2047
    2e18:	290ab03a 	or	r5,r5,r4
    2e1c:	003e3706 	br	26fc <__subdf3+0x8c>
    2e20:	0101ffc4 	movi	r4,2047
    2e24:	513fc71e 	bne	r10,r4,2d44 <__subdf3+0x6d4>
    2e28:	180b883a 	mov	r5,r3
    2e2c:	3023883a 	mov	r17,r6
    2e30:	5021883a 	mov	r16,r10
    2e34:	003e3106 	br	26fc <__subdf3+0x8c>
    2e38:	10002d26 	beq	r2,zero,2ef0 <__subdf3+0x880>
    2e3c:	1984b03a 	or	r2,r3,r6
    2e40:	10000e26 	beq	r2,zero,2e7c <__subdf3+0x80c>
    2e44:	2808d0fa 	srli	r4,r5,3
    2e48:	8822d0fa 	srli	r17,r17,3
    2e4c:	280a977a 	slli	r5,r5,29
    2e50:	2080022c 	andhi	r2,r4,8
    2e54:	2c62b03a 	or	r17,r5,r17
    2e58:	103feb26 	beq	r2,zero,2e08 <__subdf3+0x798>
    2e5c:	180ed0fa 	srli	r7,r3,3
    2e60:	3880022c 	andhi	r2,r7,8
    2e64:	103fe81e 	bne	r2,zero,2e08 <__subdf3+0x798>
    2e68:	300cd0fa 	srli	r6,r6,3
    2e6c:	1804977a 	slli	r2,r3,29
    2e70:	3809883a 	mov	r4,r7
    2e74:	11a2b03a 	or	r17,r2,r6
    2e78:	003fe306 	br	2e08 <__subdf3+0x798>
    2e7c:	0401ffc4 	movi	r16,2047
    2e80:	003e1e06 	br	26fc <__subdf3+0x8c>
    2e84:	0005883a 	mov	r2,zero
    2e88:	003f8306 	br	2c98 <__subdf3+0x628>
    2e8c:	113ff804 	addi	r4,r2,-32
    2e90:	02000804 	movi	r8,32
    2e94:	2908d83a 	srl	r4,r5,r4
    2e98:	12002526 	beq	r2,r8,2f30 <__subdf3+0x8c0>
    2e9c:	02001004 	movi	r8,64
    2ea0:	4085c83a 	sub	r2,r8,r2
    2ea4:	288a983a 	sll	r5,r5,r2
    2ea8:	2c62b03a 	or	r17,r5,r17
    2eac:	8822c03a 	cmpne	r17,r17,zero
    2eb0:	8922b03a 	or	r17,r17,r4
    2eb4:	0005883a 	mov	r2,zero
    2eb8:	003f2406 	br	2b4c <__subdf3+0x4dc>
    2ebc:	01402034 	movhi	r5,128
    2ec0:	0011883a 	mov	r8,zero
    2ec4:	297fffc4 	addi	r5,r5,-1
    2ec8:	047ffe04 	movi	r17,-8
    2ecc:	0401ffc4 	movi	r16,2047
    2ed0:	003e6a06 	br	287c <__subdf3+0x20c>
    2ed4:	2c62b03a 	or	r17,r5,r17
    2ed8:	8822c03a 	cmpne	r17,r17,zero
    2edc:	0005883a 	mov	r2,zero
    2ee0:	003fa506 	br	2d78 <__subdf3+0x708>
    2ee4:	180b883a 	mov	r5,r3
    2ee8:	3023883a 	mov	r17,r6
    2eec:	003e0306 	br	26fc <__subdf3+0x8c>
    2ef0:	180b883a 	mov	r5,r3
    2ef4:	3023883a 	mov	r17,r6
    2ef8:	0401ffc4 	movi	r16,2047
    2efc:	003dff06 	br	26fc <__subdf3+0x8c>
    2f00:	113ff804 	addi	r4,r2,-32
    2f04:	01c00804 	movi	r7,32
    2f08:	2908d83a 	srl	r4,r5,r4
    2f0c:	11c00a26 	beq	r2,r7,2f38 <__subdf3+0x8c8>
    2f10:	01c01004 	movi	r7,64
    2f14:	3885c83a 	sub	r2,r7,r2
    2f18:	288a983a 	sll	r5,r5,r2
    2f1c:	2c62b03a 	or	r17,r5,r17
    2f20:	8822c03a 	cmpne	r17,r17,zero
    2f24:	8922b03a 	or	r17,r17,r4
    2f28:	0005883a 	mov	r2,zero
    2f2c:	003f9206 	br	2d78 <__subdf3+0x708>
    2f30:	000b883a 	mov	r5,zero
    2f34:	003fdc06 	br	2ea8 <__subdf3+0x838>
    2f38:	000b883a 	mov	r5,zero
    2f3c:	003ff706 	br	2f1c <__subdf3+0x8ac>

00002f40 <__fixdfsi>:
    2f40:	2806d53a 	srli	r3,r5,20
    2f44:	00800434 	movhi	r2,16
    2f48:	10bfffc4 	addi	r2,r2,-1
    2f4c:	18c1ffcc 	andi	r3,r3,2047
    2f50:	0180ff84 	movi	r6,1022
    2f54:	2884703a 	and	r2,r5,r2
    2f58:	280ad7fa 	srli	r5,r5,31
    2f5c:	30c0130e 	bge	r6,r3,2fac <__fixdfsi+0x6c>
    2f60:	01810744 	movi	r6,1053
    2f64:	30c00d16 	blt	r6,r3,2f9c <__fixdfsi+0x5c>
    2f68:	01810cc4 	movi	r6,1075
    2f6c:	30cdc83a 	sub	r6,r6,r3
    2f70:	01c007c4 	movi	r7,31
    2f74:	10800434 	orhi	r2,r2,16
    2f78:	39800e0e 	bge	r7,r6,2fb4 <__fixdfsi+0x74>
    2f7c:	010104c4 	movi	r4,1043
    2f80:	20c7c83a 	sub	r3,r4,r3
    2f84:	10c6d83a 	srl	r3,r2,r3
    2f88:	29403fcc 	andi	r5,r5,255
    2f8c:	0145c83a 	sub	r2,zero,r5
    2f90:	1884f03a 	xor	r2,r3,r2
    2f94:	1145883a 	add	r2,r2,r5
    2f98:	f800283a 	ret
    2f9c:	00a00034 	movhi	r2,32768
    2fa0:	10bfffc4 	addi	r2,r2,-1
    2fa4:	2885883a 	add	r2,r5,r2
    2fa8:	f800283a 	ret
    2fac:	0005883a 	mov	r2,zero
    2fb0:	f800283a 	ret
    2fb4:	18fefb44 	addi	r3,r3,-1043
    2fb8:	2188d83a 	srl	r4,r4,r6
    2fbc:	10c6983a 	sll	r3,r2,r3
    2fc0:	20c6b03a 	or	r3,r4,r3
    2fc4:	003ff006 	br	2f88 <__fixdfsi+0x48>

00002fc8 <__floatsidf>:
    2fc8:	defffd04 	addi	sp,sp,-12
    2fcc:	dc400115 	stw	r17,4(sp)
    2fd0:	dfc00215 	stw	ra,8(sp)
    2fd4:	dc000015 	stw	r16,0(sp)
    2fd8:	2023883a 	mov	r17,r4
    2fdc:	20001426 	beq	r4,zero,3030 <__floatsidf+0x68>
    2fe0:	2020d7fa 	srli	r16,r4,31
    2fe4:	80000126 	beq	r16,zero,2fec <__floatsidf+0x24>
    2fe8:	0123c83a 	sub	r17,zero,r4
    2fec:	8809883a 	mov	r4,r17
    2ff0:	00030980 	call	3098 <__clzsi2>
    2ff4:	01410784 	movi	r5,1054
    2ff8:	00c00284 	movi	r3,10
    2ffc:	288bc83a 	sub	r5,r5,r2
    3000:	18801c16 	blt	r3,r2,3074 <__floatsidf+0xac>
    3004:	00c002c4 	movi	r3,11
    3008:	1887c83a 	sub	r3,r3,r2
    300c:	88c8d83a 	srl	r4,r17,r3
    3010:	00c00434 	movhi	r3,16
    3014:	18ffffc4 	addi	r3,r3,-1
    3018:	10800544 	addi	r2,r2,21
    301c:	20c8703a 	and	r4,r4,r3
    3020:	8884983a 	sll	r2,r17,r2
    3024:	28c1ffcc 	andi	r3,r5,2047
    3028:	800d883a 	mov	r6,r16
    302c:	00000406 	br	3040 <__floatsidf+0x78>
    3030:	000d883a 	mov	r6,zero
    3034:	0007883a 	mov	r3,zero
    3038:	0009883a 	mov	r4,zero
    303c:	0005883a 	mov	r2,zero
    3040:	180a953a 	slli	r5,r3,20
    3044:	31803fcc 	andi	r6,r6,255
    3048:	00c00434 	movhi	r3,16
    304c:	300c97fa 	slli	r6,r6,31
    3050:	18ffffc4 	addi	r3,r3,-1
    3054:	20c6703a 	and	r3,r4,r3
    3058:	1946b03a 	or	r3,r3,r5
    305c:	1986b03a 	or	r3,r3,r6
    3060:	dfc00217 	ldw	ra,8(sp)
    3064:	dc400117 	ldw	r17,4(sp)
    3068:	dc000017 	ldw	r16,0(sp)
    306c:	dec00304 	addi	sp,sp,12
    3070:	f800283a 	ret
    3074:	10fffd44 	addi	r3,r2,-11
    3078:	88c8983a 	sll	r4,r17,r3
    307c:	00800434 	movhi	r2,16
    3080:	10bfffc4 	addi	r2,r2,-1
    3084:	2088703a 	and	r4,r4,r2
    3088:	28c1ffcc 	andi	r3,r5,2047
    308c:	800d883a 	mov	r6,r16
    3090:	0005883a 	mov	r2,zero
    3094:	003fea06 	br	3040 <__floatsidf+0x78>

00003098 <__clzsi2>:
    3098:	00bfffd4 	movui	r2,65535
    309c:	11000b36 	bltu	r2,r4,30cc <__clzsi2+0x34>
    30a0:	00803fc4 	movi	r2,255
    30a4:	1100122e 	bgeu	r2,r4,30f0 <__clzsi2+0x58>
    30a8:	00c00204 	movi	r3,8
    30ac:	01400604 	movi	r5,24
    30b0:	20c8d83a 	srl	r4,r4,r3
    30b4:	008000b4 	movhi	r2,2
    30b8:	10aab104 	addi	r2,r2,-21820
    30bc:	1109883a 	add	r4,r2,r4
    30c0:	20800003 	ldbu	r2,0(r4)
    30c4:	2885c83a 	sub	r2,r5,r2
    30c8:	f800283a 	ret
    30cc:	00804034 	movhi	r2,256
    30d0:	10bfffc4 	addi	r2,r2,-1
    30d4:	11000336 	bltu	r2,r4,30e4 <__clzsi2+0x4c>
    30d8:	00c00404 	movi	r3,16
    30dc:	180b883a 	mov	r5,r3
    30e0:	003ff306 	br	30b0 <__clzsi2+0x18>
    30e4:	00c00604 	movi	r3,24
    30e8:	01400204 	movi	r5,8
    30ec:	003ff006 	br	30b0 <__clzsi2+0x18>
    30f0:	0007883a 	mov	r3,zero
    30f4:	01400804 	movi	r5,32
    30f8:	003fed06 	br	30b0 <__clzsi2+0x18>

000030fc <udivmodsi4>:
    30fc:	2900182e 	bgeu	r5,r4,3160 <udivmodsi4+0x64>
    3100:	28001716 	blt	r5,zero,3160 <udivmodsi4+0x64>
    3104:	00800804 	movi	r2,32
    3108:	00c00044 	movi	r3,1
    310c:	00000206 	br	3118 <udivmodsi4+0x1c>
    3110:	10001126 	beq	r2,zero,3158 <udivmodsi4+0x5c>
    3114:	28000516 	blt	r5,zero,312c <udivmodsi4+0x30>
    3118:	294b883a 	add	r5,r5,r5
    311c:	10bfffc4 	addi	r2,r2,-1
    3120:	18c7883a 	add	r3,r3,r3
    3124:	293ffa36 	bltu	r5,r4,3110 <udivmodsi4+0x14>
    3128:	18000b26 	beq	r3,zero,3158 <udivmodsi4+0x5c>
    312c:	0005883a 	mov	r2,zero
    3130:	21400236 	bltu	r4,r5,313c <udivmodsi4+0x40>
    3134:	2149c83a 	sub	r4,r4,r5
    3138:	10c4b03a 	or	r2,r2,r3
    313c:	1806d07a 	srli	r3,r3,1
    3140:	280ad07a 	srli	r5,r5,1
    3144:	183ffa1e 	bne	r3,zero,3130 <udivmodsi4+0x34>
    3148:	3000011e 	bne	r6,zero,3150 <udivmodsi4+0x54>
    314c:	f800283a 	ret
    3150:	2005883a 	mov	r2,r4
    3154:	f800283a 	ret
    3158:	0005883a 	mov	r2,zero
    315c:	003ffa06 	br	3148 <udivmodsi4+0x4c>
    3160:	00c00044 	movi	r3,1
    3164:	003ff106 	br	312c <udivmodsi4+0x30>

00003168 <__divsi3>:
    3168:	defffe04 	addi	sp,sp,-8
    316c:	dfc00115 	stw	ra,4(sp)
    3170:	dc000015 	stw	r16,0(sp)
    3174:	20000b16 	blt	r4,zero,31a4 <__divsi3+0x3c>
    3178:	0021883a 	mov	r16,zero
    317c:	28000c16 	blt	r5,zero,31b0 <__divsi3+0x48>
    3180:	000d883a 	mov	r6,zero
    3184:	00030fc0 	call	30fc <udivmodsi4>
    3188:	0407c83a 	sub	r3,zero,r16
    318c:	1884f03a 	xor	r2,r3,r2
    3190:	1405883a 	add	r2,r2,r16
    3194:	dfc00117 	ldw	ra,4(sp)
    3198:	dc000017 	ldw	r16,0(sp)
    319c:	dec00204 	addi	sp,sp,8
    31a0:	f800283a 	ret
    31a4:	0109c83a 	sub	r4,zero,r4
    31a8:	04000044 	movi	r16,1
    31ac:	283ff40e 	bge	r5,zero,3180 <__divsi3+0x18>
    31b0:	014bc83a 	sub	r5,zero,r5
    31b4:	8400005c 	xori	r16,r16,1
    31b8:	003ff106 	br	3180 <__divsi3+0x18>

000031bc <__modsi3>:
    31bc:	defffd04 	addi	sp,sp,-12
    31c0:	dfc00215 	stw	ra,8(sp)
    31c4:	dc400115 	stw	r17,4(sp)
    31c8:	dc000015 	stw	r16,0(sp)
    31cc:	20000c16 	blt	r4,zero,3200 <__modsi3+0x44>
    31d0:	0023883a 	mov	r17,zero
    31d4:	0021883a 	mov	r16,zero
    31d8:	28000d16 	blt	r5,zero,3210 <__modsi3+0x54>
    31dc:	01800044 	movi	r6,1
    31e0:	00030fc0 	call	30fc <udivmodsi4>
    31e4:	1404f03a 	xor	r2,r2,r16
    31e8:	8885883a 	add	r2,r17,r2
    31ec:	dfc00217 	ldw	ra,8(sp)
    31f0:	dc400117 	ldw	r17,4(sp)
    31f4:	dc000017 	ldw	r16,0(sp)
    31f8:	dec00304 	addi	sp,sp,12
    31fc:	f800283a 	ret
    3200:	0109c83a 	sub	r4,zero,r4
    3204:	04400044 	movi	r17,1
    3208:	043fffc4 	movi	r16,-1
    320c:	283ff30e 	bge	r5,zero,31dc <__modsi3+0x20>
    3210:	014bc83a 	sub	r5,zero,r5
    3214:	003ff106 	br	31dc <__modsi3+0x20>

00003218 <__udivsi3>:
    3218:	000d883a 	mov	r6,zero
    321c:	00030fc1 	jmpi	30fc <udivmodsi4>

00003220 <__umodsi3>:
    3220:	01800044 	movi	r6,1
    3224:	00030fc1 	jmpi	30fc <udivmodsi4>

00003228 <_printf_r>:
    3228:	defffd04 	addi	sp,sp,-12
    322c:	dfc00015 	stw	ra,0(sp)
    3230:	d9800115 	stw	r6,4(sp)
    3234:	d9c00215 	stw	r7,8(sp)
    3238:	280d883a 	mov	r6,r5
    323c:	21400217 	ldw	r5,8(r4)
    3240:	d9c00104 	addi	r7,sp,4
    3244:	000343c0 	call	343c <___vfprintf_internal_r>
    3248:	dfc00017 	ldw	ra,0(sp)
    324c:	dec00304 	addi	sp,sp,12
    3250:	f800283a 	ret

00003254 <printf>:
    3254:	defffc04 	addi	sp,sp,-16
    3258:	dfc00015 	stw	ra,0(sp)
    325c:	d9400115 	stw	r5,4(sp)
    3260:	d9800215 	stw	r6,8(sp)
    3264:	d9c00315 	stw	r7,12(sp)
    3268:	008000b4 	movhi	r2,2
    326c:	10b3c204 	addi	r2,r2,-12536
    3270:	10800017 	ldw	r2,0(r2)
    3274:	200b883a 	mov	r5,r4
    3278:	d9800104 	addi	r6,sp,4
    327c:	11000217 	ldw	r4,8(r2)
    3280:	00054940 	call	5494 <__vfprintf_internal>
    3284:	dfc00017 	ldw	ra,0(sp)
    3288:	dec00404 	addi	sp,sp,16
    328c:	f800283a 	ret

00003290 <strncmp>:
    3290:	30002126 	beq	r6,zero,3318 <strncmp+0x88>
    3294:	2144b03a 	or	r2,r4,r5
    3298:	108000cc 	andi	r2,r2,3
    329c:	1000241e 	bne	r2,zero,3330 <strncmp+0xa0>
    32a0:	024000c4 	movi	r9,3
    32a4:	4980222e 	bgeu	r9,r6,3330 <strncmp+0xa0>
    32a8:	20800017 	ldw	r2,0(r4)
    32ac:	28c00017 	ldw	r3,0(r5)
    32b0:	10c01f1e 	bne	r2,r3,3330 <strncmp+0xa0>
    32b4:	31bfff04 	addi	r6,r6,-4
    32b8:	30001726 	beq	r6,zero,3318 <strncmp+0x88>
    32bc:	02ffbff4 	movhi	r11,65279
    32c0:	5affbfc4 	addi	r11,r11,-257
    32c4:	0086303a 	nor	r3,zero,r2
    32c8:	02a02074 	movhi	r10,32897
    32cc:	12c5883a 	add	r2,r2,r11
    32d0:	52a02004 	addi	r10,r10,-32640
    32d4:	10c4703a 	and	r2,r2,r3
    32d8:	1284703a 	and	r2,r2,r10
    32dc:	10000226 	beq	r2,zero,32e8 <strncmp+0x58>
    32e0:	00000d06 	br	3318 <strncmp+0x88>
    32e4:	10000c1e 	bne	r2,zero,3318 <strncmp+0x88>
    32e8:	21000104 	addi	r4,r4,4
    32ec:	29400104 	addi	r5,r5,4
    32f0:	49800f2e 	bgeu	r9,r6,3330 <strncmp+0xa0>
    32f4:	20c00017 	ldw	r3,0(r4)
    32f8:	29c00017 	ldw	r7,0(r5)
    32fc:	1ad1883a 	add	r8,r3,r11
    3300:	00c4303a 	nor	r2,zero,r3
    3304:	4084703a 	and	r2,r8,r2
    3308:	1284703a 	and	r2,r2,r10
    330c:	19c0081e 	bne	r3,r7,3330 <strncmp+0xa0>
    3310:	31bfff04 	addi	r6,r6,-4
    3314:	303ff31e 	bne	r6,zero,32e4 <strncmp+0x54>
    3318:	0005883a 	mov	r2,zero
    331c:	f800283a 	ret
    3320:	303ffd26 	beq	r6,zero,3318 <strncmp+0x88>
    3324:	103ffc26 	beq	r2,zero,3318 <strncmp+0x88>
    3328:	21000044 	addi	r4,r4,1
    332c:	29400044 	addi	r5,r5,1
    3330:	20800007 	ldb	r2,0(r4)
    3334:	28c00007 	ldb	r3,0(r5)
    3338:	31bfffc4 	addi	r6,r6,-1
    333c:	10fff826 	beq	r2,r3,3320 <strncmp+0x90>
    3340:	20800003 	ldbu	r2,0(r4)
    3344:	28c00003 	ldbu	r3,0(r5)
    3348:	10c5c83a 	sub	r2,r2,r3
    334c:	f800283a 	ret

00003350 <strncpy>:
    3350:	2906b03a 	or	r3,r5,r4
    3354:	18c000cc 	andi	r3,r3,3
    3358:	2005883a 	mov	r2,r4
    335c:	18002c1e 	bne	r3,zero,3410 <strncpy+0xc0>
    3360:	010000c4 	movi	r4,3
    3364:	21802a2e 	bgeu	r4,r6,3410 <strncpy+0xc0>
    3368:	033fbff4 	movhi	r12,65279
    336c:	02e02074 	movhi	r11,32897
    3370:	633fbfc4 	addi	r12,r12,-257
    3374:	5ae02004 	addi	r11,r11,-32640
    3378:	100f883a 	mov	r7,r2
    337c:	2a000017 	ldw	r8,0(r5)
    3380:	3815883a 	mov	r10,r7
    3384:	0212303a 	nor	r9,zero,r8
    3388:	4307883a 	add	r3,r8,r12
    338c:	48c6703a 	and	r3,r9,r3
    3390:	1ac6703a 	and	r3,r3,r11
    3394:	1800261e 	bne	r3,zero,3430 <strncpy+0xe0>
    3398:	39c00104 	addi	r7,r7,4
    339c:	52000015 	stw	r8,0(r10)
    33a0:	31bfff04 	addi	r6,r6,-4
    33a4:	3811883a 	mov	r8,r7
    33a8:	29400104 	addi	r5,r5,4
    33ac:	21bff336 	bltu	r4,r6,337c <strncpy+0x2c>
    33b0:	30001e26 	beq	r6,zero,342c <strncpy+0xdc>
    33b4:	29c00003 	ldbu	r7,0(r5)
    33b8:	31bfffc4 	addi	r6,r6,-1
    33bc:	40c00044 	addi	r3,r8,1
    33c0:	41c00005 	stb	r7,0(r8)
    33c4:	39c03fcc 	andi	r7,r7,255
    33c8:	39c0201c 	xori	r7,r7,128
    33cc:	39ffe004 	addi	r7,r7,-128
    33d0:	29400044 	addi	r5,r5,1
    33d4:	38001026 	beq	r7,zero,3418 <strncpy+0xc8>
    33d8:	1811883a 	mov	r8,r3
    33dc:	00000906 	br	3404 <strncpy+0xb4>
    33e0:	29c00003 	ldbu	r7,0(r5)
    33e4:	31bfffc4 	addi	r6,r6,-1
    33e8:	29400044 	addi	r5,r5,1
    33ec:	41c00005 	stb	r7,0(r8)
    33f0:	39c03fcc 	andi	r7,r7,255
    33f4:	39c0201c 	xori	r7,r7,128
    33f8:	39ffe004 	addi	r7,r7,-128
    33fc:	1811883a 	mov	r8,r3
    3400:	38000526 	beq	r7,zero,3418 <strncpy+0xc8>
    3404:	18c00044 	addi	r3,r3,1
    3408:	303ff51e 	bne	r6,zero,33e0 <strncpy+0x90>
    340c:	f800283a 	ret
    3410:	1011883a 	mov	r8,r2
    3414:	003fe606 	br	33b0 <strncpy+0x60>
    3418:	30000726 	beq	r6,zero,3438 <strncpy+0xe8>
    341c:	198d883a 	add	r6,r3,r6
    3420:	18000005 	stb	zero,0(r3)
    3424:	18c00044 	addi	r3,r3,1
    3428:	19bffd1e 	bne	r3,r6,3420 <strncpy+0xd0>
    342c:	f800283a 	ret
    3430:	3811883a 	mov	r8,r7
    3434:	003fde06 	br	33b0 <strncpy+0x60>
    3438:	f800283a 	ret

0000343c <___vfprintf_internal_r>:
    343c:	deffb604 	addi	sp,sp,-296
    3440:	dfc04915 	stw	ra,292(sp)
    3444:	ddc04715 	stw	r23,284(sp)
    3448:	dd804615 	stw	r22,280(sp)
    344c:	202f883a 	mov	r23,r4
    3450:	282d883a 	mov	r22,r5
    3454:	d9802a15 	stw	r6,168(sp)
    3458:	d9c02d15 	stw	r7,180(sp)
    345c:	df004815 	stw	fp,288(sp)
    3460:	dd404515 	stw	r21,276(sp)
    3464:	dd004415 	stw	r20,272(sp)
    3468:	dcc04315 	stw	r19,268(sp)
    346c:	dc804215 	stw	r18,264(sp)
    3470:	dc404115 	stw	r17,260(sp)
    3474:	dc004015 	stw	r16,256(sp)
    3478:	0007ca40 	call	7ca4 <_localeconv_r>
    347c:	10800017 	ldw	r2,0(r2)
    3480:	1009883a 	mov	r4,r2
    3484:	d8803515 	stw	r2,212(sp)
    3488:	0009c800 	call	9c80 <strlen>
    348c:	d8803815 	stw	r2,224(sp)
    3490:	b8000226 	beq	r23,zero,349c <___vfprintf_internal_r+0x60>
    3494:	b8800e17 	ldw	r2,56(r23)
    3498:	1000e226 	beq	r2,zero,3824 <___vfprintf_internal_r+0x3e8>
    349c:	b080030b 	ldhu	r2,12(r22)
    34a0:	10c8000c 	andi	r3,r2,8192
    34a4:	1800061e 	bne	r3,zero,34c0 <___vfprintf_internal_r+0x84>
    34a8:	b1001917 	ldw	r4,100(r22)
    34ac:	00f7ffc4 	movi	r3,-8193
    34b0:	10880014 	ori	r2,r2,8192
    34b4:	20c6703a 	and	r3,r4,r3
    34b8:	b080030d 	sth	r2,12(r22)
    34bc:	b0c01915 	stw	r3,100(r22)
    34c0:	10c0020c 	andi	r3,r2,8
    34c4:	1800a826 	beq	r3,zero,3768 <___vfprintf_internal_r+0x32c>
    34c8:	b0c00417 	ldw	r3,16(r22)
    34cc:	1800a626 	beq	r3,zero,3768 <___vfprintf_internal_r+0x32c>
    34d0:	1080068c 	andi	r2,r2,26
    34d4:	00c00284 	movi	r3,10
    34d8:	10c0ab26 	beq	r2,r3,3788 <___vfprintf_internal_r+0x34c>
    34dc:	d8801e04 	addi	r2,sp,120
    34e0:	d8c01dc4 	addi	r3,sp,119
    34e4:	d9000404 	addi	r4,sp,16
    34e8:	050000b4 	movhi	r20,2
    34ec:	10cbc83a 	sub	r5,r2,r3
    34f0:	a52b0184 	addi	r20,r20,-21498
    34f4:	d8802815 	stw	r2,160(sp)
    34f8:	d8c02915 	stw	r3,164(sp)
    34fc:	d9001e15 	stw	r4,120(sp)
    3500:	d8002015 	stw	zero,128(sp)
    3504:	d8001f15 	stw	zero,124(sp)
    3508:	d8003315 	stw	zero,204(sp)
    350c:	d8003715 	stw	zero,220(sp)
    3510:	d8003915 	stw	zero,228(sp)
    3514:	2011883a 	mov	r8,r4
    3518:	d8003b15 	stw	zero,236(sp)
    351c:	d8003a15 	stw	zero,232(sp)
    3520:	d8002f15 	stw	zero,188(sp)
    3524:	d9403c15 	stw	r5,240(sp)
    3528:	d8c02a17 	ldw	r3,168(sp)
    352c:	18800007 	ldb	r2,0(r3)
    3530:	1001f226 	beq	r2,zero,3cfc <___vfprintf_internal_r+0x8c0>
    3534:	00c00944 	movi	r3,37
    3538:	dc002a17 	ldw	r16,168(sp)
    353c:	10c0021e 	bne	r2,r3,3548 <___vfprintf_internal_r+0x10c>
    3540:	00001606 	br	359c <___vfprintf_internal_r+0x160>
    3544:	10c08526 	beq	r2,r3,375c <___vfprintf_internal_r+0x320>
    3548:	84000044 	addi	r16,r16,1
    354c:	80800007 	ldb	r2,0(r16)
    3550:	103ffc1e 	bne	r2,zero,3544 <___vfprintf_internal_r+0x108>
    3554:	d9002a17 	ldw	r4,168(sp)
    3558:	8123c83a 	sub	r17,r16,r4
    355c:	88000f26 	beq	r17,zero,359c <___vfprintf_internal_r+0x160>
    3560:	d8802a17 	ldw	r2,168(sp)
    3564:	d8c02017 	ldw	r3,128(sp)
    3568:	44400115 	stw	r17,4(r8)
    356c:	40800015 	stw	r2,0(r8)
    3570:	d8801f17 	ldw	r2,124(sp)
    3574:	1c47883a 	add	r3,r3,r17
    3578:	d8c02015 	stw	r3,128(sp)
    357c:	10800044 	addi	r2,r2,1
    3580:	d8801f15 	stw	r2,124(sp)
    3584:	00c001c4 	movi	r3,7
    3588:	18809416 	blt	r3,r2,37dc <___vfprintf_internal_r+0x3a0>
    358c:	42000204 	addi	r8,r8,8
    3590:	d8c02f17 	ldw	r3,188(sp)
    3594:	1c47883a 	add	r3,r3,r17
    3598:	d8c02f15 	stw	r3,188(sp)
    359c:	80800007 	ldb	r2,0(r16)
    35a0:	10009526 	beq	r2,zero,37f8 <___vfprintf_internal_r+0x3bc>
    35a4:	80800044 	addi	r2,r16,1
    35a8:	84000047 	ldb	r16,1(r16)
    35ac:	0027883a 	mov	r19,zero
    35b0:	0039883a 	mov	fp,zero
    35b4:	dcc02b05 	stb	r19,172(sp)
    35b8:	d8002785 	stb	zero,158(sp)
    35bc:	027fffc4 	movi	r9,-1
    35c0:	d8002e15 	stw	zero,184(sp)
    35c4:	04401604 	movi	r17,88
    35c8:	04800244 	movi	r18,9
    35cc:	da002a15 	stw	r8,168(sp)
    35d0:	e027883a 	mov	r19,fp
    35d4:	17000044 	addi	fp,r2,1
    35d8:	80bff804 	addi	r2,r16,-32
    35dc:	8882ed36 	bltu	r17,r2,4194 <___vfprintf_internal_r+0xd58>
    35e0:	100490ba 	slli	r2,r2,2
    35e4:	01000034 	movhi	r4,0
    35e8:	210d7e04 	addi	r4,r4,13816
    35ec:	1105883a 	add	r2,r2,r4
    35f0:	10800017 	ldw	r2,0(r2)
    35f4:	1000683a 	jmp	r2
    35f8:	00003fdc 	xori	zero,zero,255
    35fc:	00004194 	movui	zero,262
    3600:	00004194 	movui	zero,262
    3604:	00003ff8 	rdprs	zero,zero,255
    3608:	00004194 	movui	zero,262
    360c:	00004194 	movui	zero,262
    3610:	00004194 	movui	zero,262
    3614:	00004194 	movui	zero,262
    3618:	00004194 	movui	zero,262
    361c:	00004194 	movui	zero,262
    3620:	00004008 	cmpgei	zero,zero,256
    3624:	00004030 	cmpltui	zero,zero,256
    3628:	00004194 	movui	zero,262
    362c:	00003830 	cmpltui	zero,zero,224
    3630:	00003840 	call	384 <GPS+0xb8>
    3634:	00004194 	movui	zero,262
    3638:	00003890 	cmplti	zero,zero,226
    363c:	000038a0 	cmpeqi	zero,zero,226
    3640:	000038a0 	cmpeqi	zero,zero,226
    3644:	000038a0 	cmpeqi	zero,zero,226
    3648:	000038a0 	cmpeqi	zero,zero,226
    364c:	000038a0 	cmpeqi	zero,zero,226
    3650:	000038a0 	cmpeqi	zero,zero,226
    3654:	000038a0 	cmpeqi	zero,zero,226
    3658:	000038a0 	cmpeqi	zero,zero,226
    365c:	000038a0 	cmpeqi	zero,zero,226
    3660:	00004194 	movui	zero,262
    3664:	00004194 	movui	zero,262
    3668:	00004194 	movui	zero,262
    366c:	00004194 	movui	zero,262
    3670:	00004194 	movui	zero,262
    3674:	00004194 	movui	zero,262
    3678:	00004194 	movui	zero,262
    367c:	00004194 	movui	zero,262
    3680:	00004194 	movui	zero,262
    3684:	00004194 	movui	zero,262
    3688:	000038e4 	muli	zero,zero,227
    368c:	00003d04 	movi	zero,244
    3690:	00004194 	movui	zero,262
    3694:	00003d04 	movi	zero,244
    3698:	00004194 	movui	zero,262
    369c:	00004194 	movui	zero,262
    36a0:	00004194 	movui	zero,262
    36a4:	00004194 	movui	zero,262
    36a8:	00003dac 	andhi	zero,zero,246
    36ac:	00004194 	movui	zero,262
    36b0:	00004194 	movui	zero,262
    36b4:	00003dbc 	xorhi	zero,zero,246
    36b8:	00004194 	movui	zero,262
    36bc:	00004194 	movui	zero,262
    36c0:	00004194 	movui	zero,262
    36c4:	00004194 	movui	zero,262
    36c8:	00004194 	movui	zero,262
    36cc:	00003dfc 	xorhi	zero,zero,247
    36d0:	00004194 	movui	zero,262
    36d4:	00004194 	movui	zero,262
    36d8:	00003f28 	cmpgeui	zero,zero,252
    36dc:	00004194 	movui	zero,262
    36e0:	00004194 	movui	zero,262
    36e4:	00004194 	movui	zero,262
    36e8:	00004194 	movui	zero,262
    36ec:	00004194 	movui	zero,262
    36f0:	00004194 	movui	zero,262
    36f4:	00004194 	movui	zero,262
    36f8:	00004194 	movui	zero,262
    36fc:	00004194 	movui	zero,262
    3700:	00004194 	movui	zero,262
    3704:	00003f90 	cmplti	zero,zero,254
    3708:	00003e7c 	xorhi	zero,zero,249
    370c:	00003d04 	movi	zero,244
    3710:	00003d04 	movi	zero,244
    3714:	00003d04 	movi	zero,244
    3718:	00003ec0 	call	3ec <GPS+0x120>
    371c:	00003e7c 	xorhi	zero,zero,249
    3720:	00004194 	movui	zero,262
    3724:	00004194 	movui	zero,262
    3728:	00003ed0 	cmplti	zero,zero,251
    372c:	00004194 	movui	zero,262
    3730:	00003ee8 	cmpgeui	zero,zero,251
    3734:	00004158 	cmpnei	zero,zero,261
    3738:	00003e30 	cmpltui	zero,zero,248
    373c:	0000410c 	andi	zero,zero,260
    3740:	00004194 	movui	zero,262
    3744:	00004044 	movi	zero,257
    3748:	00004194 	movui	zero,262
    374c:	0000411c 	xori	zero,zero,260
    3750:	00004194 	movui	zero,262
    3754:	00004194 	movui	zero,262
    3758:	000040c0 	call	40c <GPS+0x140>
    375c:	d9402a17 	ldw	r5,168(sp)
    3760:	8163c83a 	sub	r17,r16,r5
    3764:	003f7d06 	br	355c <___vfprintf_internal_r+0x120>
    3768:	b809883a 	mov	r4,r23
    376c:	b00b883a 	mov	r5,r22
    3770:	00055740 	call	5574 <__swsetup_r>
    3774:	10000c1e 	bne	r2,zero,37a8 <___vfprintf_internal_r+0x36c>
    3778:	b080030b 	ldhu	r2,12(r22)
    377c:	00c00284 	movi	r3,10
    3780:	1080068c 	andi	r2,r2,26
    3784:	10ff551e 	bne	r2,r3,34dc <___vfprintf_internal_r+0xa0>
    3788:	b080038f 	ldh	r2,14(r22)
    378c:	103f5316 	blt	r2,zero,34dc <___vfprintf_internal_r+0xa0>
    3790:	d9802a17 	ldw	r6,168(sp)
    3794:	d9c02d17 	ldw	r7,180(sp)
    3798:	b809883a 	mov	r4,r23
    379c:	b00b883a 	mov	r5,r22
    37a0:	00054b80 	call	54b8 <__sbprintf>
    37a4:	00000106 	br	37ac <___vfprintf_internal_r+0x370>
    37a8:	00bfffc4 	movi	r2,-1
    37ac:	dfc04917 	ldw	ra,292(sp)
    37b0:	df004817 	ldw	fp,288(sp)
    37b4:	ddc04717 	ldw	r23,284(sp)
    37b8:	dd804617 	ldw	r22,280(sp)
    37bc:	dd404517 	ldw	r21,276(sp)
    37c0:	dd004417 	ldw	r20,272(sp)
    37c4:	dcc04317 	ldw	r19,268(sp)
    37c8:	dc804217 	ldw	r18,264(sp)
    37cc:	dc404117 	ldw	r17,260(sp)
    37d0:	dc004017 	ldw	r16,256(sp)
    37d4:	dec04a04 	addi	sp,sp,296
    37d8:	f800283a 	ret
    37dc:	b809883a 	mov	r4,r23
    37e0:	b00b883a 	mov	r5,r22
    37e4:	d9801e04 	addi	r6,sp,120
    37e8:	0009e140 	call	9e14 <__sprint_r>
    37ec:	1000081e 	bne	r2,zero,3810 <___vfprintf_internal_r+0x3d4>
    37f0:	da000404 	addi	r8,sp,16
    37f4:	003f6606 	br	3590 <___vfprintf_internal_r+0x154>
    37f8:	d8802017 	ldw	r2,128(sp)
    37fc:	10000426 	beq	r2,zero,3810 <___vfprintf_internal_r+0x3d4>
    3800:	b809883a 	mov	r4,r23
    3804:	b00b883a 	mov	r5,r22
    3808:	d9801e04 	addi	r6,sp,120
    380c:	0009e140 	call	9e14 <__sprint_r>
    3810:	b080030b 	ldhu	r2,12(r22)
    3814:	1080100c 	andi	r2,r2,64
    3818:	103fe31e 	bne	r2,zero,37a8 <___vfprintf_internal_r+0x36c>
    381c:	d8802f17 	ldw	r2,188(sp)
    3820:	003fe206 	br	37ac <___vfprintf_internal_r+0x370>
    3824:	b809883a 	mov	r4,r23
    3828:	000760c0 	call	760c <__sinit>
    382c:	003f1b06 	br	349c <___vfprintf_internal_r+0x60>
    3830:	e005883a 	mov	r2,fp
    3834:	9cc00114 	ori	r19,r19,4
    3838:	e4000007 	ldb	r16,0(fp)
    383c:	003f6506 	br	35d4 <___vfprintf_internal_r+0x198>
    3840:	e4000007 	ldb	r16,0(fp)
    3844:	01000a84 	movi	r4,42
    3848:	e0800044 	addi	r2,fp,1
    384c:	8106ff26 	beq	r16,r4,544c <___vfprintf_internal_r+0x2010>
    3850:	857ff404 	addi	r21,r16,-48
    3854:	1039883a 	mov	fp,r2
    3858:	0013883a 	mov	r9,zero
    385c:	957f5e36 	bltu	r18,r21,35d8 <___vfprintf_internal_r+0x19c>
    3860:	0009883a 	mov	r4,zero
    3864:	01400284 	movi	r5,10
    3868:	000129c0 	call	129c <__mulsi3>
    386c:	e4000007 	ldb	r16,0(fp)
    3870:	a889883a 	add	r4,r21,r2
    3874:	e7000044 	addi	fp,fp,1
    3878:	857ff404 	addi	r21,r16,-48
    387c:	957ff92e 	bgeu	r18,r21,3864 <___vfprintf_internal_r+0x428>
    3880:	2013883a 	mov	r9,r4
    3884:	203f540e 	bge	r4,zero,35d8 <___vfprintf_internal_r+0x19c>
    3888:	027fffc4 	movi	r9,-1
    388c:	003f5206 	br	35d8 <___vfprintf_internal_r+0x19c>
    3890:	9cc02014 	ori	r19,r19,128
    3894:	e005883a 	mov	r2,fp
    3898:	e4000007 	ldb	r16,0(fp)
    389c:	003f4d06 	br	35d4 <___vfprintf_internal_r+0x198>
    38a0:	857ff404 	addi	r21,r16,-48
    38a4:	d8002e15 	stw	zero,184(sp)
    38a8:	0009883a 	mov	r4,zero
    38ac:	da402c15 	stw	r9,176(sp)
    38b0:	e021883a 	mov	r16,fp
    38b4:	01400284 	movi	r5,10
    38b8:	000129c0 	call	129c <__mulsi3>
    38bc:	81400007 	ldb	r5,0(r16)
    38c0:	1549883a 	add	r4,r2,r21
    38c4:	e7000044 	addi	fp,fp,1
    38c8:	2d7ff404 	addi	r21,r5,-48
    38cc:	e021883a 	mov	r16,fp
    38d0:	957ff82e 	bgeu	r18,r21,38b4 <___vfprintf_internal_r+0x478>
    38d4:	2821883a 	mov	r16,r5
    38d8:	d9002e15 	stw	r4,184(sp)
    38dc:	da402c17 	ldw	r9,176(sp)
    38e0:	003f3d06 	br	35d8 <___vfprintf_internal_r+0x19c>
    38e4:	da002a17 	ldw	r8,168(sp)
    38e8:	df002a15 	stw	fp,168(sp)
    38ec:	9839883a 	mov	fp,r19
    38f0:	dcc02b03 	ldbu	r19,172(sp)
    38f4:	e7000414 	ori	fp,fp,16
    38f8:	e080080c 	andi	r2,fp,32
    38fc:	dcc02785 	stb	r19,158(sp)
    3900:	d8c02d17 	ldw	r3,180(sp)
    3904:	10016526 	beq	r2,zero,3e9c <___vfprintf_internal_r+0xa60>
    3908:	d9002d17 	ldw	r4,180(sp)
    390c:	18800117 	ldw	r2,4(r3)
    3910:	1c800017 	ldw	r18,0(r3)
    3914:	21000204 	addi	r4,r4,8
    3918:	d9002d15 	stw	r4,180(sp)
    391c:	102b883a 	mov	r21,r2
    3920:	10044516 	blt	r2,zero,4a38 <___vfprintf_internal_r+0x15fc>
    3924:	dcc02783 	ldbu	r19,158(sp)
    3928:	da403215 	stw	r9,200(sp)
    392c:	00800044 	movi	r2,1
    3930:	9546b03a 	or	r3,r18,r21
    3934:	48000216 	blt	r9,zero,3940 <___vfprintf_internal_r+0x504>
    3938:	013fdfc4 	movi	r4,-129
    393c:	e138703a 	and	fp,fp,r4
    3940:	1802211e 	bne	r3,zero,41c8 <___vfprintf_internal_r+0xd8c>
    3944:	48031326 	beq	r9,zero,4594 <___vfprintf_internal_r+0x1158>
    3948:	10803fcc 	andi	r2,r2,255
    394c:	00c00044 	movi	r3,1
    3950:	10c24126 	beq	r2,r3,4258 <___vfprintf_internal_r+0xe1c>
    3954:	00c00084 	movi	r3,2
    3958:	10c33426 	beq	r2,r3,462c <___vfprintf_internal_r+0x11f0>
    395c:	d8c01e04 	addi	r3,sp,120
    3960:	9008d0fa 	srli	r4,r18,3
    3964:	a80a977a 	slli	r5,r21,29
    3968:	a82ad0fa 	srli	r21,r21,3
    396c:	948001cc 	andi	r18,r18,7
    3970:	90800c04 	addi	r2,r18,48
    3974:	18ffffc4 	addi	r3,r3,-1
    3978:	2924b03a 	or	r18,r5,r4
    397c:	18800005 	stb	r2,0(r3)
    3980:	9548b03a 	or	r4,r18,r21
    3984:	203ff61e 	bne	r4,zero,3960 <___vfprintf_internal_r+0x524>
    3988:	e100004c 	andi	r4,fp,1
    398c:	d8c03115 	stw	r3,196(sp)
    3990:	2003961e 	bne	r4,zero,47ec <___vfprintf_internal_r+0x13b0>
    3994:	d8802817 	ldw	r2,160(sp)
    3998:	10e3c83a 	sub	r17,r2,r3
    399c:	8805883a 	mov	r2,r17
    39a0:	8a40010e 	bge	r17,r9,39a8 <___vfprintf_internal_r+0x56c>
    39a4:	4805883a 	mov	r2,r9
    39a8:	d8802b15 	stw	r2,172(sp)
    39ac:	d8003415 	stw	zero,208(sp)
    39b0:	98803fcc 	andi	r2,r19,255
    39b4:	1080201c 	xori	r2,r2,128
    39b8:	10bfe004 	addi	r2,r2,-128
    39bc:	10000326 	beq	r2,zero,39cc <___vfprintf_internal_r+0x590>
    39c0:	d8c02b17 	ldw	r3,172(sp)
    39c4:	18c00044 	addi	r3,r3,1
    39c8:	d8c02b15 	stw	r3,172(sp)
    39cc:	e0c0008c 	andi	r3,fp,2
    39d0:	d8c02c15 	stw	r3,176(sp)
    39d4:	18000326 	beq	r3,zero,39e4 <___vfprintf_internal_r+0x5a8>
    39d8:	d8c02b17 	ldw	r3,172(sp)
    39dc:	18c00084 	addi	r3,r3,2
    39e0:	d8c02b15 	stw	r3,172(sp)
    39e4:	e0c0210c 	andi	r3,fp,132
    39e8:	d8c03015 	stw	r3,192(sp)
    39ec:	1801f41e 	bne	r3,zero,41c0 <___vfprintf_internal_r+0xd84>
    39f0:	d9002e17 	ldw	r4,184(sp)
    39f4:	d8c02b17 	ldw	r3,172(sp)
    39f8:	20ebc83a 	sub	r21,r4,r3
    39fc:	0541f00e 	bge	zero,r21,41c0 <___vfprintf_internal_r+0xd84>
    3a00:	02400404 	movi	r9,16
    3a04:	d8c02017 	ldw	r3,128(sp)
    3a08:	d8801f17 	ldw	r2,124(sp)
    3a0c:	4d45710e 	bge	r9,r21,4fd4 <___vfprintf_internal_r+0x1b98>
    3a10:	014000b4 	movhi	r5,2
    3a14:	296b0584 	addi	r5,r5,-21482
    3a18:	d9403615 	stw	r5,216(sp)
    3a1c:	4827883a 	mov	r19,r9
    3a20:	048001c4 	movi	r18,7
    3a24:	00000306 	br	3a34 <___vfprintf_internal_r+0x5f8>
    3a28:	ad7ffc04 	addi	r21,r21,-16
    3a2c:	42000204 	addi	r8,r8,8
    3a30:	9d40130e 	bge	r19,r21,3a80 <___vfprintf_internal_r+0x644>
    3a34:	010000b4 	movhi	r4,2
    3a38:	18c00404 	addi	r3,r3,16
    3a3c:	10800044 	addi	r2,r2,1
    3a40:	212b0584 	addi	r4,r4,-21482
    3a44:	41000015 	stw	r4,0(r8)
    3a48:	44c00115 	stw	r19,4(r8)
    3a4c:	d8c02015 	stw	r3,128(sp)
    3a50:	d8801f15 	stw	r2,124(sp)
    3a54:	90bff40e 	bge	r18,r2,3a28 <___vfprintf_internal_r+0x5ec>
    3a58:	b809883a 	mov	r4,r23
    3a5c:	b00b883a 	mov	r5,r22
    3a60:	d9801e04 	addi	r6,sp,120
    3a64:	0009e140 	call	9e14 <__sprint_r>
    3a68:	103f691e 	bne	r2,zero,3810 <___vfprintf_internal_r+0x3d4>
    3a6c:	ad7ffc04 	addi	r21,r21,-16
    3a70:	d8c02017 	ldw	r3,128(sp)
    3a74:	d8801f17 	ldw	r2,124(sp)
    3a78:	da000404 	addi	r8,sp,16
    3a7c:	9d7fed16 	blt	r19,r21,3a34 <___vfprintf_internal_r+0x5f8>
    3a80:	d9403617 	ldw	r5,216(sp)
    3a84:	a8c7883a 	add	r3,r21,r3
    3a88:	10800044 	addi	r2,r2,1
    3a8c:	41400015 	stw	r5,0(r8)
    3a90:	45400115 	stw	r21,4(r8)
    3a94:	d8c02015 	stw	r3,128(sp)
    3a98:	d8801f15 	stw	r2,124(sp)
    3a9c:	010001c4 	movi	r4,7
    3aa0:	20832716 	blt	r4,r2,4740 <___vfprintf_internal_r+0x1304>
    3aa4:	d8802787 	ldb	r2,158(sp)
    3aa8:	42000204 	addi	r8,r8,8
    3aac:	10000c26 	beq	r2,zero,3ae0 <___vfprintf_internal_r+0x6a4>
    3ab0:	d8801f17 	ldw	r2,124(sp)
    3ab4:	d9002784 	addi	r4,sp,158
    3ab8:	18c00044 	addi	r3,r3,1
    3abc:	10800044 	addi	r2,r2,1
    3ac0:	41000015 	stw	r4,0(r8)
    3ac4:	01000044 	movi	r4,1
    3ac8:	41000115 	stw	r4,4(r8)
    3acc:	d8c02015 	stw	r3,128(sp)
    3ad0:	d8801f15 	stw	r2,124(sp)
    3ad4:	010001c4 	movi	r4,7
    3ad8:	2082c016 	blt	r4,r2,45dc <___vfprintf_internal_r+0x11a0>
    3adc:	42000204 	addi	r8,r8,8
    3ae0:	d8802c17 	ldw	r2,176(sp)
    3ae4:	10000c26 	beq	r2,zero,3b18 <___vfprintf_internal_r+0x6dc>
    3ae8:	d8801f17 	ldw	r2,124(sp)
    3aec:	d9002704 	addi	r4,sp,156
    3af0:	18c00084 	addi	r3,r3,2
    3af4:	10800044 	addi	r2,r2,1
    3af8:	41000015 	stw	r4,0(r8)
    3afc:	01000084 	movi	r4,2
    3b00:	41000115 	stw	r4,4(r8)
    3b04:	d8c02015 	stw	r3,128(sp)
    3b08:	d8801f15 	stw	r2,124(sp)
    3b0c:	010001c4 	movi	r4,7
    3b10:	2082ba16 	blt	r4,r2,45fc <___vfprintf_internal_r+0x11c0>
    3b14:	42000204 	addi	r8,r8,8
    3b18:	d9003017 	ldw	r4,192(sp)
    3b1c:	00802004 	movi	r2,128
    3b20:	20821c26 	beq	r4,r2,4394 <___vfprintf_internal_r+0xf58>
    3b24:	d9403217 	ldw	r5,200(sp)
    3b28:	2c67c83a 	sub	r19,r5,r17
    3b2c:	04c0260e 	bge	zero,r19,3bc8 <___vfprintf_internal_r+0x78c>
    3b30:	05400404 	movi	r21,16
    3b34:	d8801f17 	ldw	r2,124(sp)
    3b38:	acc46e0e 	bge	r21,r19,4cf4 <___vfprintf_internal_r+0x18b8>
    3b3c:	014000b4 	movhi	r5,2
    3b40:	296b0184 	addi	r5,r5,-21498
    3b44:	d9402c15 	stw	r5,176(sp)
    3b48:	048001c4 	movi	r18,7
    3b4c:	00000306 	br	3b5c <___vfprintf_internal_r+0x720>
    3b50:	9cfffc04 	addi	r19,r19,-16
    3b54:	42000204 	addi	r8,r8,8
    3b58:	acc0110e 	bge	r21,r19,3ba0 <___vfprintf_internal_r+0x764>
    3b5c:	18c00404 	addi	r3,r3,16
    3b60:	10800044 	addi	r2,r2,1
    3b64:	45000015 	stw	r20,0(r8)
    3b68:	45400115 	stw	r21,4(r8)
    3b6c:	d8c02015 	stw	r3,128(sp)
    3b70:	d8801f15 	stw	r2,124(sp)
    3b74:	90bff60e 	bge	r18,r2,3b50 <___vfprintf_internal_r+0x714>
    3b78:	b809883a 	mov	r4,r23
    3b7c:	b00b883a 	mov	r5,r22
    3b80:	d9801e04 	addi	r6,sp,120
    3b84:	0009e140 	call	9e14 <__sprint_r>
    3b88:	103f211e 	bne	r2,zero,3810 <___vfprintf_internal_r+0x3d4>
    3b8c:	9cfffc04 	addi	r19,r19,-16
    3b90:	d8c02017 	ldw	r3,128(sp)
    3b94:	d8801f17 	ldw	r2,124(sp)
    3b98:	da000404 	addi	r8,sp,16
    3b9c:	acffef16 	blt	r21,r19,3b5c <___vfprintf_internal_r+0x720>
    3ba0:	d9002c17 	ldw	r4,176(sp)
    3ba4:	1cc7883a 	add	r3,r3,r19
    3ba8:	10800044 	addi	r2,r2,1
    3bac:	41000015 	stw	r4,0(r8)
    3bb0:	44c00115 	stw	r19,4(r8)
    3bb4:	d8c02015 	stw	r3,128(sp)
    3bb8:	d8801f15 	stw	r2,124(sp)
    3bbc:	010001c4 	movi	r4,7
    3bc0:	20827e16 	blt	r4,r2,45bc <___vfprintf_internal_r+0x1180>
    3bc4:	42000204 	addi	r8,r8,8
    3bc8:	e080400c 	andi	r2,fp,256
    3bcc:	1001a81e 	bne	r2,zero,4270 <___vfprintf_internal_r+0xe34>
    3bd0:	d8801f17 	ldw	r2,124(sp)
    3bd4:	d9403117 	ldw	r5,196(sp)
    3bd8:	1c47883a 	add	r3,r3,r17
    3bdc:	10800044 	addi	r2,r2,1
    3be0:	41400015 	stw	r5,0(r8)
    3be4:	44400115 	stw	r17,4(r8)
    3be8:	d8c02015 	stw	r3,128(sp)
    3bec:	d8801f15 	stw	r2,124(sp)
    3bf0:	010001c4 	movi	r4,7
    3bf4:	20825916 	blt	r4,r2,455c <___vfprintf_internal_r+0x1120>
    3bf8:	42000204 	addi	r8,r8,8
    3bfc:	e080010c 	andi	r2,fp,4
    3c00:	10003126 	beq	r2,zero,3cc8 <___vfprintf_internal_r+0x88c>
    3c04:	d8802e17 	ldw	r2,184(sp)
    3c08:	d9002b17 	ldw	r4,172(sp)
    3c0c:	1121c83a 	sub	r16,r2,r4
    3c10:	04002d0e 	bge	zero,r16,3cc8 <___vfprintf_internal_r+0x88c>
    3c14:	04400404 	movi	r17,16
    3c18:	d8801f17 	ldw	r2,124(sp)
    3c1c:	8c053f0e 	bge	r17,r16,511c <___vfprintf_internal_r+0x1ce0>
    3c20:	010000b4 	movhi	r4,2
    3c24:	212b0584 	addi	r4,r4,-21482
    3c28:	d9003615 	stw	r4,216(sp)
    3c2c:	048001c4 	movi	r18,7
    3c30:	00000306 	br	3c40 <___vfprintf_internal_r+0x804>
    3c34:	843ffc04 	addi	r16,r16,-16
    3c38:	42000204 	addi	r8,r8,8
    3c3c:	8c00130e 	bge	r17,r16,3c8c <___vfprintf_internal_r+0x850>
    3c40:	014000b4 	movhi	r5,2
    3c44:	18c00404 	addi	r3,r3,16
    3c48:	10800044 	addi	r2,r2,1
    3c4c:	296b0584 	addi	r5,r5,-21482
    3c50:	41400015 	stw	r5,0(r8)
    3c54:	44400115 	stw	r17,4(r8)
    3c58:	d8c02015 	stw	r3,128(sp)
    3c5c:	d8801f15 	stw	r2,124(sp)
    3c60:	90bff40e 	bge	r18,r2,3c34 <___vfprintf_internal_r+0x7f8>
    3c64:	b809883a 	mov	r4,r23
    3c68:	b00b883a 	mov	r5,r22
    3c6c:	d9801e04 	addi	r6,sp,120
    3c70:	0009e140 	call	9e14 <__sprint_r>
    3c74:	103ee61e 	bne	r2,zero,3810 <___vfprintf_internal_r+0x3d4>
    3c78:	843ffc04 	addi	r16,r16,-16
    3c7c:	d8c02017 	ldw	r3,128(sp)
    3c80:	d8801f17 	ldw	r2,124(sp)
    3c84:	da000404 	addi	r8,sp,16
    3c88:	8c3fed16 	blt	r17,r16,3c40 <___vfprintf_internal_r+0x804>
    3c8c:	d9003617 	ldw	r4,216(sp)
    3c90:	1c07883a 	add	r3,r3,r16
    3c94:	10800044 	addi	r2,r2,1
    3c98:	41000015 	stw	r4,0(r8)
    3c9c:	44000115 	stw	r16,4(r8)
    3ca0:	d8c02015 	stw	r3,128(sp)
    3ca4:	d8801f15 	stw	r2,124(sp)
    3ca8:	010001c4 	movi	r4,7
    3cac:	2080060e 	bge	r4,r2,3cc8 <___vfprintf_internal_r+0x88c>
    3cb0:	b809883a 	mov	r4,r23
    3cb4:	b00b883a 	mov	r5,r22
    3cb8:	d9801e04 	addi	r6,sp,120
    3cbc:	0009e140 	call	9e14 <__sprint_r>
    3cc0:	103ed31e 	bne	r2,zero,3810 <___vfprintf_internal_r+0x3d4>
    3cc4:	d8c02017 	ldw	r3,128(sp)
    3cc8:	df002b17 	ldw	fp,172(sp)
    3ccc:	d9402e17 	ldw	r5,184(sp)
    3cd0:	e140010e 	bge	fp,r5,3cd8 <___vfprintf_internal_r+0x89c>
    3cd4:	2839883a 	mov	fp,r5
    3cd8:	d8802f17 	ldw	r2,188(sp)
    3cdc:	1705883a 	add	r2,r2,fp
    3ce0:	d8802f15 	stw	r2,188(sp)
    3ce4:	1802251e 	bne	r3,zero,457c <___vfprintf_internal_r+0x1140>
    3ce8:	d8c02a17 	ldw	r3,168(sp)
    3cec:	d8001f15 	stw	zero,124(sp)
    3cf0:	da000404 	addi	r8,sp,16
    3cf4:	18800007 	ldb	r2,0(r3)
    3cf8:	103e0e1e 	bne	r2,zero,3534 <___vfprintf_internal_r+0xf8>
    3cfc:	dc002a17 	ldw	r16,168(sp)
    3d00:	003e2606 	br	359c <___vfprintf_internal_r+0x160>
    3d04:	d9002d17 	ldw	r4,180(sp)
    3d08:	d9402d17 	ldw	r5,180(sp)
    3d0c:	da002a17 	ldw	r8,168(sp)
    3d10:	21000017 	ldw	r4,0(r4)
    3d14:	29400117 	ldw	r5,4(r5)
    3d18:	df002a15 	stw	fp,168(sp)
    3d1c:	9839883a 	mov	fp,r19
    3d20:	dcc02b03 	ldbu	r19,172(sp)
    3d24:	d9003715 	stw	r4,220(sp)
    3d28:	d9403915 	stw	r5,228(sp)
    3d2c:	da003f15 	stw	r8,252(sp)
    3d30:	da403e15 	stw	r9,248(sp)
    3d34:	dcc02785 	stb	r19,158(sp)
    3d38:	00099d80 	call	99d8 <__fpclassifyd>
    3d3c:	d8c02d17 	ldw	r3,180(sp)
    3d40:	04400044 	movi	r17,1
    3d44:	da003f17 	ldw	r8,252(sp)
    3d48:	1c800204 	addi	r18,r3,8
    3d4c:	da403e17 	ldw	r9,248(sp)
    3d50:	d9003717 	ldw	r4,220(sp)
    3d54:	d9403917 	ldw	r5,228(sp)
    3d58:	1443411e 	bne	r2,r17,4a60 <___vfprintf_internal_r+0x1624>
    3d5c:	000d883a 	mov	r6,zero
    3d60:	000f883a 	mov	r7,zero
    3d64:	0001d240 	call	1d24 <__ledf2>
    3d68:	da003f17 	ldw	r8,252(sp)
    3d6c:	10050d16 	blt	r2,zero,51a4 <___vfprintf_internal_r+0x1d68>
    3d70:	dcc02783 	ldbu	r19,158(sp)
    3d74:	008011c4 	movi	r2,71
    3d78:	1404590e 	bge	r2,r16,4ee0 <___vfprintf_internal_r+0x1aa4>
    3d7c:	014000b4 	movhi	r5,2
    3d80:	296af204 	addi	r5,r5,-21560
    3d84:	d9403115 	stw	r5,196(sp)
    3d88:	00c000c4 	movi	r3,3
    3d8c:	00bfdfc4 	movi	r2,-129
    3d90:	d8c02b15 	stw	r3,172(sp)
    3d94:	e0b8703a 	and	fp,fp,r2
    3d98:	dc802d15 	stw	r18,180(sp)
    3d9c:	1823883a 	mov	r17,r3
    3da0:	d8003215 	stw	zero,200(sp)
    3da4:	d8003415 	stw	zero,208(sp)
    3da8:	003f0106 	br	39b0 <___vfprintf_internal_r+0x574>
    3dac:	9cc00214 	ori	r19,r19,8
    3db0:	e005883a 	mov	r2,fp
    3db4:	e4000007 	ldb	r16,0(fp)
    3db8:	003e0606 	br	35d4 <___vfprintf_internal_r+0x198>
    3dbc:	da002a17 	ldw	r8,168(sp)
    3dc0:	df002a15 	stw	fp,168(sp)
    3dc4:	9f000414 	ori	fp,r19,16
    3dc8:	e080080c 	andi	r2,fp,32
    3dcc:	1000e726 	beq	r2,zero,416c <___vfprintf_internal_r+0xd30>
    3dd0:	d9402d17 	ldw	r5,180(sp)
    3dd4:	0005883a 	mov	r2,zero
    3dd8:	2c800017 	ldw	r18,0(r5)
    3ddc:	2d400117 	ldw	r21,4(r5)
    3de0:	29400204 	addi	r5,r5,8
    3de4:	d9402d15 	stw	r5,180(sp)
    3de8:	9546b03a 	or	r3,r18,r21
    3dec:	d8002785 	stb	zero,158(sp)
    3df0:	da403215 	stw	r9,200(sp)
    3df4:	0027883a 	mov	r19,zero
    3df8:	003ece06 	br	3934 <___vfprintf_internal_r+0x4f8>
    3dfc:	da002a17 	ldw	r8,168(sp)
    3e00:	df002a15 	stw	fp,168(sp)
    3e04:	9f000414 	ori	fp,r19,16
    3e08:	e080080c 	andi	r2,fp,32
    3e0c:	1000c826 	beq	r2,zero,4130 <___vfprintf_internal_r+0xcf4>
    3e10:	d9002d17 	ldw	r4,180(sp)
    3e14:	00800044 	movi	r2,1
    3e18:	24800017 	ldw	r18,0(r4)
    3e1c:	25400117 	ldw	r21,4(r4)
    3e20:	21000204 	addi	r4,r4,8
    3e24:	d9002d15 	stw	r4,180(sp)
    3e28:	9546b03a 	or	r3,r18,r21
    3e2c:	003fef06 	br	3dec <___vfprintf_internal_r+0x9b0>
    3e30:	d9402d17 	ldw	r5,180(sp)
    3e34:	00800c04 	movi	r2,48
    3e38:	d8802705 	stb	r2,156(sp)
    3e3c:	2c800017 	ldw	r18,0(r5)
    3e40:	00801e04 	movi	r2,120
    3e44:	d8802745 	stb	r2,157(sp)
    3e48:	008000b4 	movhi	r2,2
    3e4c:	10aafa04 	addi	r2,r2,-21528
    3e50:	29400104 	addi	r5,r5,4
    3e54:	da002a17 	ldw	r8,168(sp)
    3e58:	d8803b15 	stw	r2,236(sp)
    3e5c:	df002a15 	stw	fp,168(sp)
    3e60:	002b883a 	mov	r21,zero
    3e64:	9f000094 	ori	fp,r19,2
    3e68:	d9402d15 	stw	r5,180(sp)
    3e6c:	00800084 	movi	r2,2
    3e70:	04001e04 	movi	r16,120
    3e74:	9007883a 	mov	r3,r18
    3e78:	003fdc06 	br	3dec <___vfprintf_internal_r+0x9b0>
    3e7c:	da002a17 	ldw	r8,168(sp)
    3e80:	df002a15 	stw	fp,168(sp)
    3e84:	9839883a 	mov	fp,r19
    3e88:	dcc02b03 	ldbu	r19,172(sp)
    3e8c:	e080080c 	andi	r2,fp,32
    3e90:	d8c02d17 	ldw	r3,180(sp)
    3e94:	dcc02785 	stb	r19,158(sp)
    3e98:	103e9b1e 	bne	r2,zero,3908 <___vfprintf_internal_r+0x4cc>
    3e9c:	e080040c 	andi	r2,fp,16
    3ea0:	10036626 	beq	r2,zero,4c3c <___vfprintf_internal_r+0x1800>
    3ea4:	1c800017 	ldw	r18,0(r3)
    3ea8:	d9402d17 	ldw	r5,180(sp)
    3eac:	902bd7fa 	srai	r21,r18,31
    3eb0:	29400104 	addi	r5,r5,4
    3eb4:	d9402d15 	stw	r5,180(sp)
    3eb8:	a805883a 	mov	r2,r21
    3ebc:	003e9806 	br	3920 <___vfprintf_internal_r+0x4e4>
    3ec0:	9cc01014 	ori	r19,r19,64
    3ec4:	e005883a 	mov	r2,fp
    3ec8:	e4000007 	ldb	r16,0(fp)
    3ecc:	003dc106 	br	35d4 <___vfprintf_internal_r+0x198>
    3ed0:	e4000007 	ldb	r16,0(fp)
    3ed4:	00801b04 	movi	r2,108
    3ed8:	80841426 	beq	r16,r2,4f2c <___vfprintf_internal_r+0x1af0>
    3edc:	9cc00414 	ori	r19,r19,16
    3ee0:	e005883a 	mov	r2,fp
    3ee4:	003dbb06 	br	35d4 <___vfprintf_internal_r+0x198>
    3ee8:	da002a17 	ldw	r8,168(sp)
    3eec:	df002a15 	stw	fp,168(sp)
    3ef0:	9839883a 	mov	fp,r19
    3ef4:	dcc02b03 	ldbu	r19,172(sp)
    3ef8:	e080080c 	andi	r2,fp,32
    3efc:	dcc02785 	stb	r19,158(sp)
    3f00:	10036126 	beq	r2,zero,4c88 <___vfprintf_internal_r+0x184c>
    3f04:	d9402d17 	ldw	r5,180(sp)
    3f08:	d9002f17 	ldw	r4,188(sp)
    3f0c:	28800017 	ldw	r2,0(r5)
    3f10:	2007d7fa 	srai	r3,r4,31
    3f14:	29400104 	addi	r5,r5,4
    3f18:	d9402d15 	stw	r5,180(sp)
    3f1c:	11000015 	stw	r4,0(r2)
    3f20:	10c00115 	stw	r3,4(r2)
    3f24:	003d8006 	br	3528 <___vfprintf_internal_r+0xec>
    3f28:	da002a17 	ldw	r8,168(sp)
    3f2c:	df002a15 	stw	fp,168(sp)
    3f30:	9839883a 	mov	fp,r19
    3f34:	dcc02b03 	ldbu	r19,172(sp)
    3f38:	014000b4 	movhi	r5,2
    3f3c:	296af504 	addi	r5,r5,-21548
    3f40:	dcc02785 	stb	r19,158(sp)
    3f44:	d9403b15 	stw	r5,236(sp)
    3f48:	e0c0080c 	andi	r3,fp,32
    3f4c:	d8802d17 	ldw	r2,180(sp)
    3f50:	18006626 	beq	r3,zero,40ec <___vfprintf_internal_r+0xcb0>
    3f54:	d9402d17 	ldw	r5,180(sp)
    3f58:	14800017 	ldw	r18,0(r2)
    3f5c:	15400117 	ldw	r21,4(r2)
    3f60:	29400204 	addi	r5,r5,8
    3f64:	d9402d15 	stw	r5,180(sp)
    3f68:	e080004c 	andi	r2,fp,1
    3f6c:	1001fd26 	beq	r2,zero,4764 <___vfprintf_internal_r+0x1328>
    3f70:	9546b03a 	or	r3,r18,r21
    3f74:	18034f26 	beq	r3,zero,4cb4 <___vfprintf_internal_r+0x1878>
    3f78:	00800c04 	movi	r2,48
    3f7c:	d8802705 	stb	r2,156(sp)
    3f80:	dc002745 	stb	r16,157(sp)
    3f84:	e7000094 	ori	fp,fp,2
    3f88:	00800084 	movi	r2,2
    3f8c:	003f9706 	br	3dec <___vfprintf_internal_r+0x9b0>
    3f90:	d8c02d17 	ldw	r3,180(sp)
    3f94:	d9002d17 	ldw	r4,180(sp)
    3f98:	da002a17 	ldw	r8,168(sp)
    3f9c:	18800017 	ldw	r2,0(r3)
    3fa0:	21000104 	addi	r4,r4,4
    3fa4:	00c00044 	movi	r3,1
    3fa8:	df002a15 	stw	fp,168(sp)
    3fac:	d8c02b15 	stw	r3,172(sp)
    3fb0:	9839883a 	mov	fp,r19
    3fb4:	d8002785 	stb	zero,158(sp)
    3fb8:	d8801405 	stb	r2,80(sp)
    3fbc:	d9002d15 	stw	r4,180(sp)
    3fc0:	1823883a 	mov	r17,r3
    3fc4:	d8c01404 	addi	r3,sp,80
    3fc8:	d8003215 	stw	zero,200(sp)
    3fcc:	d8003415 	stw	zero,208(sp)
    3fd0:	d8c03115 	stw	r3,196(sp)
    3fd4:	0005883a 	mov	r2,zero
    3fd8:	003e7c06 	br	39cc <___vfprintf_internal_r+0x590>
    3fdc:	d8802b07 	ldb	r2,172(sp)
    3fe0:	1003011e 	bne	r2,zero,4be8 <___vfprintf_internal_r+0x17ac>
    3fe4:	00c00804 	movi	r3,32
    3fe8:	d8c02b05 	stb	r3,172(sp)
    3fec:	e005883a 	mov	r2,fp
    3ff0:	e4000007 	ldb	r16,0(fp)
    3ff4:	003d7706 	br	35d4 <___vfprintf_internal_r+0x198>
    3ff8:	9cc00054 	ori	r19,r19,1
    3ffc:	e005883a 	mov	r2,fp
    4000:	e4000007 	ldb	r16,0(fp)
    4004:	003d7306 	br	35d4 <___vfprintf_internal_r+0x198>
    4008:	d9002d17 	ldw	r4,180(sp)
    400c:	d9402d17 	ldw	r5,180(sp)
    4010:	21000017 	ldw	r4,0(r4)
    4014:	28c00104 	addi	r3,r5,4
    4018:	d9002e15 	stw	r4,184(sp)
    401c:	2003bd16 	blt	r4,zero,4f14 <___vfprintf_internal_r+0x1ad8>
    4020:	d8c02d15 	stw	r3,180(sp)
    4024:	e005883a 	mov	r2,fp
    4028:	e4000007 	ldb	r16,0(fp)
    402c:	003d6906 	br	35d4 <___vfprintf_internal_r+0x198>
    4030:	00c00ac4 	movi	r3,43
    4034:	d8c02b05 	stb	r3,172(sp)
    4038:	e005883a 	mov	r2,fp
    403c:	e4000007 	ldb	r16,0(fp)
    4040:	003d6406 	br	35d4 <___vfprintf_internal_r+0x198>
    4044:	d8c02d17 	ldw	r3,180(sp)
    4048:	d9002d17 	ldw	r4,180(sp)
    404c:	da002a17 	ldw	r8,168(sp)
    4050:	18c00017 	ldw	r3,0(r3)
    4054:	df002a15 	stw	fp,168(sp)
    4058:	d8002785 	stb	zero,158(sp)
    405c:	d8c03115 	stw	r3,196(sp)
    4060:	9839883a 	mov	fp,r19
    4064:	24800104 	addi	r18,r4,4
    4068:	18041b26 	beq	r3,zero,50d8 <___vfprintf_internal_r+0x1c9c>
    406c:	d9003117 	ldw	r4,196(sp)
    4070:	4803be16 	blt	r9,zero,4f6c <___vfprintf_internal_r+0x1b30>
    4074:	480d883a 	mov	r6,r9
    4078:	000b883a 	mov	r5,zero
    407c:	da003f15 	stw	r8,252(sp)
    4080:	da403e15 	stw	r9,248(sp)
    4084:	00086380 	call	8638 <memchr>
    4088:	da003f17 	ldw	r8,252(sp)
    408c:	da403e17 	ldw	r9,248(sp)
    4090:	10045426 	beq	r2,zero,51e4 <___vfprintf_internal_r+0x1da8>
    4094:	d8c03117 	ldw	r3,196(sp)
    4098:	10e3c83a 	sub	r17,r2,r3
    409c:	4c436a16 	blt	r9,r17,4e48 <___vfprintf_internal_r+0x1a0c>
    40a0:	8805883a 	mov	r2,r17
    40a4:	8803b616 	blt	r17,zero,4f80 <___vfprintf_internal_r+0x1b44>
    40a8:	dcc02783 	ldbu	r19,158(sp)
    40ac:	d8802b15 	stw	r2,172(sp)
    40b0:	dc802d15 	stw	r18,180(sp)
    40b4:	d8003215 	stw	zero,200(sp)
    40b8:	d8003415 	stw	zero,208(sp)
    40bc:	003e3c06 	br	39b0 <___vfprintf_internal_r+0x574>
    40c0:	da002a17 	ldw	r8,168(sp)
    40c4:	df002a15 	stw	fp,168(sp)
    40c8:	9839883a 	mov	fp,r19
    40cc:	dcc02b03 	ldbu	r19,172(sp)
    40d0:	010000b4 	movhi	r4,2
    40d4:	212afa04 	addi	r4,r4,-21528
    40d8:	d9003b15 	stw	r4,236(sp)
    40dc:	dcc02785 	stb	r19,158(sp)
    40e0:	e0c0080c 	andi	r3,fp,32
    40e4:	d8802d17 	ldw	r2,180(sp)
    40e8:	183f9a1e 	bne	r3,zero,3f54 <___vfprintf_internal_r+0xb18>
    40ec:	e0c0040c 	andi	r3,fp,16
    40f0:	1802c026 	beq	r3,zero,4bf4 <___vfprintf_internal_r+0x17b8>
    40f4:	d8c02d17 	ldw	r3,180(sp)
    40f8:	14800017 	ldw	r18,0(r2)
    40fc:	002b883a 	mov	r21,zero
    4100:	18c00104 	addi	r3,r3,4
    4104:	d8c02d15 	stw	r3,180(sp)
    4108:	003f9706 	br	3f68 <___vfprintf_internal_r+0xb2c>
    410c:	9cc00814 	ori	r19,r19,32
    4110:	e005883a 	mov	r2,fp
    4114:	e4000007 	ldb	r16,0(fp)
    4118:	003d2e06 	br	35d4 <___vfprintf_internal_r+0x198>
    411c:	da002a17 	ldw	r8,168(sp)
    4120:	df002a15 	stw	fp,168(sp)
    4124:	9839883a 	mov	fp,r19
    4128:	e080080c 	andi	r2,fp,32
    412c:	103f381e 	bne	r2,zero,3e10 <___vfprintf_internal_r+0x9d4>
    4130:	e080040c 	andi	r2,fp,16
    4134:	1002b726 	beq	r2,zero,4c14 <___vfprintf_internal_r+0x17d8>
    4138:	d9402d17 	ldw	r5,180(sp)
    413c:	002b883a 	mov	r21,zero
    4140:	00800044 	movi	r2,1
    4144:	2c800017 	ldw	r18,0(r5)
    4148:	29400104 	addi	r5,r5,4
    414c:	d9402d15 	stw	r5,180(sp)
    4150:	9007883a 	mov	r3,r18
    4154:	003f2506 	br	3dec <___vfprintf_internal_r+0x9b0>
    4158:	da002a17 	ldw	r8,168(sp)
    415c:	df002a15 	stw	fp,168(sp)
    4160:	9839883a 	mov	fp,r19
    4164:	e080080c 	andi	r2,fp,32
    4168:	103f191e 	bne	r2,zero,3dd0 <___vfprintf_internal_r+0x994>
    416c:	e080040c 	andi	r2,fp,16
    4170:	1002bb26 	beq	r2,zero,4c60 <___vfprintf_internal_r+0x1824>
    4174:	d8802d17 	ldw	r2,180(sp)
    4178:	002b883a 	mov	r21,zero
    417c:	14800017 	ldw	r18,0(r2)
    4180:	10800104 	addi	r2,r2,4
    4184:	d8802d15 	stw	r2,180(sp)
    4188:	9007883a 	mov	r3,r18
    418c:	0005883a 	mov	r2,zero
    4190:	003f1606 	br	3dec <___vfprintf_internal_r+0x9b0>
    4194:	da002a17 	ldw	r8,168(sp)
    4198:	df002a15 	stw	fp,168(sp)
    419c:	9839883a 	mov	fp,r19
    41a0:	dcc02b03 	ldbu	r19,172(sp)
    41a4:	dcc02785 	stb	r19,158(sp)
    41a8:	803d9326 	beq	r16,zero,37f8 <___vfprintf_internal_r+0x3bc>
    41ac:	00c00044 	movi	r3,1
    41b0:	d8c02b15 	stw	r3,172(sp)
    41b4:	dc001405 	stb	r16,80(sp)
    41b8:	d8002785 	stb	zero,158(sp)
    41bc:	003f8006 	br	3fc0 <___vfprintf_internal_r+0xb84>
    41c0:	d8c02017 	ldw	r3,128(sp)
    41c4:	003e3906 	br	3aac <___vfprintf_internal_r+0x670>
    41c8:	10803fcc 	andi	r2,r2,255
    41cc:	00c00044 	movi	r3,1
    41d0:	10fde01e 	bne	r2,r3,3954 <___vfprintf_internal_r+0x518>
    41d4:	a800021e 	bne	r21,zero,41e0 <___vfprintf_internal_r+0xda4>
    41d8:	00800244 	movi	r2,9
    41dc:	14801e2e 	bgeu	r2,r18,4258 <___vfprintf_internal_r+0xe1c>
    41e0:	dc002b15 	stw	r16,172(sp)
    41e4:	dc401e04 	addi	r17,sp,120
    41e8:	9021883a 	mov	r16,r18
    41ec:	da402c15 	stw	r9,176(sp)
    41f0:	a825883a 	mov	r18,r21
    41f4:	402b883a 	mov	r21,r8
    41f8:	8009883a 	mov	r4,r16
    41fc:	900b883a 	mov	r5,r18
    4200:	01800284 	movi	r6,10
    4204:	000f883a 	mov	r7,zero
    4208:	000ccd80 	call	ccd8 <__umoddi3>
    420c:	10800c04 	addi	r2,r2,48
    4210:	8c7fffc4 	addi	r17,r17,-1
    4214:	8009883a 	mov	r4,r16
    4218:	900b883a 	mov	r5,r18
    421c:	01800284 	movi	r6,10
    4220:	000f883a 	mov	r7,zero
    4224:	88800005 	stb	r2,0(r17)
    4228:	000c6980 	call	c698 <__udivdi3>
    422c:	1021883a 	mov	r16,r2
    4230:	10c4b03a 	or	r2,r2,r3
    4234:	1825883a 	mov	r18,r3
    4238:	103fef1e 	bne	r2,zero,41f8 <___vfprintf_internal_r+0xdbc>
    423c:	d9002817 	ldw	r4,160(sp)
    4240:	dc403115 	stw	r17,196(sp)
    4244:	dc002b17 	ldw	r16,172(sp)
    4248:	da402c17 	ldw	r9,176(sp)
    424c:	a811883a 	mov	r8,r21
    4250:	2463c83a 	sub	r17,r4,r17
    4254:	003dd106 	br	399c <___vfprintf_internal_r+0x560>
    4258:	94800c04 	addi	r18,r18,48
    425c:	d8c01dc4 	addi	r3,sp,119
    4260:	dc801dc5 	stb	r18,119(sp)
    4264:	dc403c17 	ldw	r17,240(sp)
    4268:	d8c03115 	stw	r3,196(sp)
    426c:	003dcb06 	br	399c <___vfprintf_internal_r+0x560>
    4270:	00801944 	movi	r2,101
    4274:	1400720e 	bge	r2,r16,4440 <___vfprintf_internal_r+0x1004>
    4278:	d9003717 	ldw	r4,220(sp)
    427c:	d9403917 	ldw	r5,228(sp)
    4280:	000d883a 	mov	r6,zero
    4284:	000f883a 	mov	r7,zero
    4288:	d8c03d15 	stw	r3,244(sp)
    428c:	da003f15 	stw	r8,252(sp)
    4290:	000db900 	call	db90 <__eqdf2>
    4294:	d8c03d17 	ldw	r3,244(sp)
    4298:	da003f17 	ldw	r8,252(sp)
    429c:	1000f41e 	bne	r2,zero,4670 <___vfprintf_internal_r+0x1234>
    42a0:	d8801f17 	ldw	r2,124(sp)
    42a4:	010000b4 	movhi	r4,2
    42a8:	212b0104 	addi	r4,r4,-21500
    42ac:	18c00044 	addi	r3,r3,1
    42b0:	10800044 	addi	r2,r2,1
    42b4:	41000015 	stw	r4,0(r8)
    42b8:	01000044 	movi	r4,1
    42bc:	41000115 	stw	r4,4(r8)
    42c0:	d8c02015 	stw	r3,128(sp)
    42c4:	d8801f15 	stw	r2,124(sp)
    42c8:	010001c4 	movi	r4,7
    42cc:	20828d16 	blt	r4,r2,4d04 <___vfprintf_internal_r+0x18c8>
    42d0:	42000204 	addi	r8,r8,8
    42d4:	d8802617 	ldw	r2,152(sp)
    42d8:	d9403317 	ldw	r5,204(sp)
    42dc:	11400216 	blt	r2,r5,42e8 <___vfprintf_internal_r+0xeac>
    42e0:	e080004c 	andi	r2,fp,1
    42e4:	103e4526 	beq	r2,zero,3bfc <___vfprintf_internal_r+0x7c0>
    42e8:	d8803817 	ldw	r2,224(sp)
    42ec:	d9003517 	ldw	r4,212(sp)
    42f0:	d9403817 	ldw	r5,224(sp)
    42f4:	1887883a 	add	r3,r3,r2
    42f8:	d8801f17 	ldw	r2,124(sp)
    42fc:	41000015 	stw	r4,0(r8)
    4300:	41400115 	stw	r5,4(r8)
    4304:	10800044 	addi	r2,r2,1
    4308:	d8c02015 	stw	r3,128(sp)
    430c:	d8801f15 	stw	r2,124(sp)
    4310:	010001c4 	movi	r4,7
    4314:	20830916 	blt	r4,r2,4f3c <___vfprintf_internal_r+0x1b00>
    4318:	42000204 	addi	r8,r8,8
    431c:	d8803317 	ldw	r2,204(sp)
    4320:	143fffc4 	addi	r16,r2,-1
    4324:	043e350e 	bge	zero,r16,3bfc <___vfprintf_internal_r+0x7c0>
    4328:	04400404 	movi	r17,16
    432c:	d8801f17 	ldw	r2,124(sp)
    4330:	8c007e0e 	bge	r17,r16,452c <___vfprintf_internal_r+0x10f0>
    4334:	014000b4 	movhi	r5,2
    4338:	296b0184 	addi	r5,r5,-21498
    433c:	d9402c15 	stw	r5,176(sp)
    4340:	04c001c4 	movi	r19,7
    4344:	00000306 	br	4354 <___vfprintf_internal_r+0xf18>
    4348:	42000204 	addi	r8,r8,8
    434c:	843ffc04 	addi	r16,r16,-16
    4350:	8c00790e 	bge	r17,r16,4538 <___vfprintf_internal_r+0x10fc>
    4354:	18c00404 	addi	r3,r3,16
    4358:	10800044 	addi	r2,r2,1
    435c:	45000015 	stw	r20,0(r8)
    4360:	44400115 	stw	r17,4(r8)
    4364:	d8c02015 	stw	r3,128(sp)
    4368:	d8801f15 	stw	r2,124(sp)
    436c:	98bff60e 	bge	r19,r2,4348 <___vfprintf_internal_r+0xf0c>
    4370:	b809883a 	mov	r4,r23
    4374:	b00b883a 	mov	r5,r22
    4378:	d9801e04 	addi	r6,sp,120
    437c:	0009e140 	call	9e14 <__sprint_r>
    4380:	103d231e 	bne	r2,zero,3810 <___vfprintf_internal_r+0x3d4>
    4384:	d8c02017 	ldw	r3,128(sp)
    4388:	d8801f17 	ldw	r2,124(sp)
    438c:	da000404 	addi	r8,sp,16
    4390:	003fee06 	br	434c <___vfprintf_internal_r+0xf10>
    4394:	d9402e17 	ldw	r5,184(sp)
    4398:	d8802b17 	ldw	r2,172(sp)
    439c:	28a7c83a 	sub	r19,r5,r2
    43a0:	04fde00e 	bge	zero,r19,3b24 <___vfprintf_internal_r+0x6e8>
    43a4:	05400404 	movi	r21,16
    43a8:	d8801f17 	ldw	r2,124(sp)
    43ac:	acc3870e 	bge	r21,r19,51cc <___vfprintf_internal_r+0x1d90>
    43b0:	014000b4 	movhi	r5,2
    43b4:	296b0184 	addi	r5,r5,-21498
    43b8:	d9402c15 	stw	r5,176(sp)
    43bc:	048001c4 	movi	r18,7
    43c0:	00000306 	br	43d0 <___vfprintf_internal_r+0xf94>
    43c4:	9cfffc04 	addi	r19,r19,-16
    43c8:	42000204 	addi	r8,r8,8
    43cc:	acc0110e 	bge	r21,r19,4414 <___vfprintf_internal_r+0xfd8>
    43d0:	18c00404 	addi	r3,r3,16
    43d4:	10800044 	addi	r2,r2,1
    43d8:	45000015 	stw	r20,0(r8)
    43dc:	45400115 	stw	r21,4(r8)
    43e0:	d8c02015 	stw	r3,128(sp)
    43e4:	d8801f15 	stw	r2,124(sp)
    43e8:	90bff60e 	bge	r18,r2,43c4 <___vfprintf_internal_r+0xf88>
    43ec:	b809883a 	mov	r4,r23
    43f0:	b00b883a 	mov	r5,r22
    43f4:	d9801e04 	addi	r6,sp,120
    43f8:	0009e140 	call	9e14 <__sprint_r>
    43fc:	103d041e 	bne	r2,zero,3810 <___vfprintf_internal_r+0x3d4>
    4400:	9cfffc04 	addi	r19,r19,-16
    4404:	d8c02017 	ldw	r3,128(sp)
    4408:	d8801f17 	ldw	r2,124(sp)
    440c:	da000404 	addi	r8,sp,16
    4410:	acffef16 	blt	r21,r19,43d0 <___vfprintf_internal_r+0xf94>
    4414:	d9002c17 	ldw	r4,176(sp)
    4418:	1cc7883a 	add	r3,r3,r19
    441c:	10800044 	addi	r2,r2,1
    4420:	41000015 	stw	r4,0(r8)
    4424:	44c00115 	stw	r19,4(r8)
    4428:	d8c02015 	stw	r3,128(sp)
    442c:	d8801f15 	stw	r2,124(sp)
    4430:	010001c4 	movi	r4,7
    4434:	20817816 	blt	r4,r2,4a18 <___vfprintf_internal_r+0x15dc>
    4438:	42000204 	addi	r8,r8,8
    443c:	003db906 	br	3b24 <___vfprintf_internal_r+0x6e8>
    4440:	d9403317 	ldw	r5,204(sp)
    4444:	00800044 	movi	r2,1
    4448:	18c00044 	addi	r3,r3,1
    444c:	11413e0e 	bge	r2,r5,4948 <___vfprintf_internal_r+0x150c>
    4450:	dc001f17 	ldw	r16,124(sp)
    4454:	d8803117 	ldw	r2,196(sp)
    4458:	d8c02015 	stw	r3,128(sp)
    445c:	84000044 	addi	r16,r16,1
    4460:	40800015 	stw	r2,0(r8)
    4464:	00800044 	movi	r2,1
    4468:	40800115 	stw	r2,4(r8)
    446c:	dc001f15 	stw	r16,124(sp)
    4470:	008001c4 	movi	r2,7
    4474:	14015616 	blt	r2,r16,49d0 <___vfprintf_internal_r+0x1594>
    4478:	42000204 	addi	r8,r8,8
    447c:	d9003817 	ldw	r4,224(sp)
    4480:	d9403517 	ldw	r5,212(sp)
    4484:	84000044 	addi	r16,r16,1
    4488:	1907883a 	add	r3,r3,r4
    448c:	41400015 	stw	r5,0(r8)
    4490:	41000115 	stw	r4,4(r8)
    4494:	d8c02015 	stw	r3,128(sp)
    4498:	dc001f15 	stw	r16,124(sp)
    449c:	008001c4 	movi	r2,7
    44a0:	14015416 	blt	r2,r16,49f4 <___vfprintf_internal_r+0x15b8>
    44a4:	44400204 	addi	r17,r8,8
    44a8:	d9003717 	ldw	r4,220(sp)
    44ac:	d9403917 	ldw	r5,228(sp)
    44b0:	000d883a 	mov	r6,zero
    44b4:	000f883a 	mov	r7,zero
    44b8:	d8c03d15 	stw	r3,244(sp)
    44bc:	000db900 	call	db90 <__eqdf2>
    44c0:	d8c03d17 	ldw	r3,244(sp)
    44c4:	1000aa26 	beq	r2,zero,4770 <___vfprintf_internal_r+0x1334>
    44c8:	d9003317 	ldw	r4,204(sp)
    44cc:	d9403117 	ldw	r5,196(sp)
    44d0:	84000044 	addi	r16,r16,1
    44d4:	20bfffc4 	addi	r2,r4,-1
    44d8:	1887883a 	add	r3,r3,r2
    44dc:	29000044 	addi	r4,r5,1
    44e0:	88800115 	stw	r2,4(r17)
    44e4:	89000015 	stw	r4,0(r17)
    44e8:	d8c02015 	stw	r3,128(sp)
    44ec:	dc001f15 	stw	r16,124(sp)
    44f0:	008001c4 	movi	r2,7
    44f4:	14012d16 	blt	r2,r16,49ac <___vfprintf_internal_r+0x1570>
    44f8:	8c400204 	addi	r17,r17,8
    44fc:	d9403a17 	ldw	r5,232(sp)
    4500:	dcc022c4 	addi	r19,sp,139
    4504:	84000044 	addi	r16,r16,1
    4508:	1947883a 	add	r3,r3,r5
    450c:	8cc00015 	stw	r19,0(r17)
    4510:	89400115 	stw	r5,4(r17)
    4514:	d8c02015 	stw	r3,128(sp)
    4518:	dc001f15 	stw	r16,124(sp)
    451c:	008001c4 	movi	r2,7
    4520:	14000e16 	blt	r2,r16,455c <___vfprintf_internal_r+0x1120>
    4524:	8a000204 	addi	r8,r17,8
    4528:	003db406 	br	3bfc <___vfprintf_internal_r+0x7c0>
    452c:	010000b4 	movhi	r4,2
    4530:	212b0184 	addi	r4,r4,-21498
    4534:	d9002c15 	stw	r4,176(sp)
    4538:	d9002c17 	ldw	r4,176(sp)
    453c:	1c07883a 	add	r3,r3,r16
    4540:	44000115 	stw	r16,4(r8)
    4544:	41000015 	stw	r4,0(r8)
    4548:	10800044 	addi	r2,r2,1
    454c:	d8c02015 	stw	r3,128(sp)
    4550:	d8801f15 	stw	r2,124(sp)
    4554:	010001c4 	movi	r4,7
    4558:	20bda70e 	bge	r4,r2,3bf8 <___vfprintf_internal_r+0x7bc>
    455c:	b809883a 	mov	r4,r23
    4560:	b00b883a 	mov	r5,r22
    4564:	d9801e04 	addi	r6,sp,120
    4568:	0009e140 	call	9e14 <__sprint_r>
    456c:	103ca81e 	bne	r2,zero,3810 <___vfprintf_internal_r+0x3d4>
    4570:	d8c02017 	ldw	r3,128(sp)
    4574:	da000404 	addi	r8,sp,16
    4578:	003da006 	br	3bfc <___vfprintf_internal_r+0x7c0>
    457c:	b809883a 	mov	r4,r23
    4580:	b00b883a 	mov	r5,r22
    4584:	d9801e04 	addi	r6,sp,120
    4588:	0009e140 	call	9e14 <__sprint_r>
    458c:	103dd626 	beq	r2,zero,3ce8 <___vfprintf_internal_r+0x8ac>
    4590:	003c9f06 	br	3810 <___vfprintf_internal_r+0x3d4>
    4594:	10803fcc 	andi	r2,r2,255
    4598:	1000201e 	bne	r2,zero,461c <___vfprintf_internal_r+0x11e0>
    459c:	e080004c 	andi	r2,fp,1
    45a0:	10001e26 	beq	r2,zero,461c <___vfprintf_internal_r+0x11e0>
    45a4:	00800c04 	movi	r2,48
    45a8:	d8c01dc4 	addi	r3,sp,119
    45ac:	d8801dc5 	stb	r2,119(sp)
    45b0:	dc403c17 	ldw	r17,240(sp)
    45b4:	d8c03115 	stw	r3,196(sp)
    45b8:	003cf806 	br	399c <___vfprintf_internal_r+0x560>
    45bc:	b809883a 	mov	r4,r23
    45c0:	b00b883a 	mov	r5,r22
    45c4:	d9801e04 	addi	r6,sp,120
    45c8:	0009e140 	call	9e14 <__sprint_r>
    45cc:	103c901e 	bne	r2,zero,3810 <___vfprintf_internal_r+0x3d4>
    45d0:	d8c02017 	ldw	r3,128(sp)
    45d4:	da000404 	addi	r8,sp,16
    45d8:	003d7b06 	br	3bc8 <___vfprintf_internal_r+0x78c>
    45dc:	b809883a 	mov	r4,r23
    45e0:	b00b883a 	mov	r5,r22
    45e4:	d9801e04 	addi	r6,sp,120
    45e8:	0009e140 	call	9e14 <__sprint_r>
    45ec:	103c881e 	bne	r2,zero,3810 <___vfprintf_internal_r+0x3d4>
    45f0:	d8c02017 	ldw	r3,128(sp)
    45f4:	da000404 	addi	r8,sp,16
    45f8:	003d3906 	br	3ae0 <___vfprintf_internal_r+0x6a4>
    45fc:	b809883a 	mov	r4,r23
    4600:	b00b883a 	mov	r5,r22
    4604:	d9801e04 	addi	r6,sp,120
    4608:	0009e140 	call	9e14 <__sprint_r>
    460c:	103c801e 	bne	r2,zero,3810 <___vfprintf_internal_r+0x3d4>
    4610:	d8c02017 	ldw	r3,128(sp)
    4614:	da000404 	addi	r8,sp,16
    4618:	003d3f06 	br	3b18 <___vfprintf_internal_r+0x6dc>
    461c:	d8c01e04 	addi	r3,sp,120
    4620:	0023883a 	mov	r17,zero
    4624:	d8c03115 	stw	r3,196(sp)
    4628:	003cdc06 	br	399c <___vfprintf_internal_r+0x560>
    462c:	d9403b17 	ldw	r5,236(sp)
    4630:	d8c01e04 	addi	r3,sp,120
    4634:	908003cc 	andi	r2,r18,15
    4638:	a808973a 	slli	r4,r21,28
    463c:	2885883a 	add	r2,r5,r2
    4640:	9024d13a 	srli	r18,r18,4
    4644:	10800003 	ldbu	r2,0(r2)
    4648:	a82ad13a 	srli	r21,r21,4
    464c:	18ffffc4 	addi	r3,r3,-1
    4650:	24a4b03a 	or	r18,r4,r18
    4654:	18800005 	stb	r2,0(r3)
    4658:	9544b03a 	or	r2,r18,r21
    465c:	103ff51e 	bne	r2,zero,4634 <___vfprintf_internal_r+0x11f8>
    4660:	d9402817 	ldw	r5,160(sp)
    4664:	d8c03115 	stw	r3,196(sp)
    4668:	28e3c83a 	sub	r17,r5,r3
    466c:	003ccb06 	br	399c <___vfprintf_internal_r+0x560>
    4670:	dc002617 	ldw	r16,152(sp)
    4674:	0401ab0e 	bge	zero,r16,4d24 <___vfprintf_internal_r+0x18e8>
    4678:	d8803317 	ldw	r2,204(sp)
    467c:	d9403117 	ldw	r5,196(sp)
    4680:	d9003417 	ldw	r4,208(sp)
    4684:	1023883a 	mov	r17,r2
    4688:	28a1883a 	add	r16,r5,r2
    468c:	2080010e 	bge	r4,r2,4694 <___vfprintf_internal_r+0x1258>
    4690:	2023883a 	mov	r17,r4
    4694:	04400b0e 	bge	zero,r17,46c4 <___vfprintf_internal_r+0x1288>
    4698:	d8801f17 	ldw	r2,124(sp)
    469c:	d9403117 	ldw	r5,196(sp)
    46a0:	1c47883a 	add	r3,r3,r17
    46a4:	10800044 	addi	r2,r2,1
    46a8:	41400015 	stw	r5,0(r8)
    46ac:	44400115 	stw	r17,4(r8)
    46b0:	d8c02015 	stw	r3,128(sp)
    46b4:	d8801f15 	stw	r2,124(sp)
    46b8:	010001c4 	movi	r4,7
    46bc:	20826716 	blt	r4,r2,505c <___vfprintf_internal_r+0x1c20>
    46c0:	42000204 	addi	r8,r8,8
    46c4:	88026316 	blt	r17,zero,5054 <___vfprintf_internal_r+0x1c18>
    46c8:	d8803417 	ldw	r2,208(sp)
    46cc:	1463c83a 	sub	r17,r2,r17
    46d0:	0440590e 	bge	zero,r17,4838 <___vfprintf_internal_r+0x13fc>
    46d4:	04c00404 	movi	r19,16
    46d8:	d8801f17 	ldw	r2,124(sp)
    46dc:	9c41770e 	bge	r19,r17,4cbc <___vfprintf_internal_r+0x1880>
    46e0:	014000b4 	movhi	r5,2
    46e4:	296b0184 	addi	r5,r5,-21498
    46e8:	d9402c15 	stw	r5,176(sp)
    46ec:	054001c4 	movi	r21,7
    46f0:	00000306 	br	4700 <___vfprintf_internal_r+0x12c4>
    46f4:	42000204 	addi	r8,r8,8
    46f8:	8c7ffc04 	addi	r17,r17,-16
    46fc:	9c41720e 	bge	r19,r17,4cc8 <___vfprintf_internal_r+0x188c>
    4700:	18c00404 	addi	r3,r3,16
    4704:	10800044 	addi	r2,r2,1
    4708:	45000015 	stw	r20,0(r8)
    470c:	44c00115 	stw	r19,4(r8)
    4710:	d8c02015 	stw	r3,128(sp)
    4714:	d8801f15 	stw	r2,124(sp)
    4718:	a8bff60e 	bge	r21,r2,46f4 <___vfprintf_internal_r+0x12b8>
    471c:	b809883a 	mov	r4,r23
    4720:	b00b883a 	mov	r5,r22
    4724:	d9801e04 	addi	r6,sp,120
    4728:	0009e140 	call	9e14 <__sprint_r>
    472c:	103c381e 	bne	r2,zero,3810 <___vfprintf_internal_r+0x3d4>
    4730:	d8c02017 	ldw	r3,128(sp)
    4734:	d8801f17 	ldw	r2,124(sp)
    4738:	da000404 	addi	r8,sp,16
    473c:	003fee06 	br	46f8 <___vfprintf_internal_r+0x12bc>
    4740:	b809883a 	mov	r4,r23
    4744:	b00b883a 	mov	r5,r22
    4748:	d9801e04 	addi	r6,sp,120
    474c:	0009e140 	call	9e14 <__sprint_r>
    4750:	103c2f1e 	bne	r2,zero,3810 <___vfprintf_internal_r+0x3d4>
    4754:	d8c02017 	ldw	r3,128(sp)
    4758:	d8802787 	ldb	r2,158(sp)
    475c:	da000404 	addi	r8,sp,16
    4760:	003cd206 	br	3aac <___vfprintf_internal_r+0x670>
    4764:	00800084 	movi	r2,2
    4768:	9546b03a 	or	r3,r18,r21
    476c:	003d9f06 	br	3dec <___vfprintf_internal_r+0x9b0>
    4770:	d8803317 	ldw	r2,204(sp)
    4774:	14ffffc4 	addi	r19,r2,-1
    4778:	04ff600e 	bge	zero,r19,44fc <___vfprintf_internal_r+0x10c0>
    477c:	05400404 	movi	r21,16
    4780:	acc07e0e 	bge	r21,r19,497c <___vfprintf_internal_r+0x1540>
    4784:	014000b4 	movhi	r5,2
    4788:	296b0184 	addi	r5,r5,-21498
    478c:	d9402c15 	stw	r5,176(sp)
    4790:	01c001c4 	movi	r7,7
    4794:	00000306 	br	47a4 <___vfprintf_internal_r+0x1368>
    4798:	8c400204 	addi	r17,r17,8
    479c:	9cfffc04 	addi	r19,r19,-16
    47a0:	acc0790e 	bge	r21,r19,4988 <___vfprintf_internal_r+0x154c>
    47a4:	18c00404 	addi	r3,r3,16
    47a8:	84000044 	addi	r16,r16,1
    47ac:	8d000015 	stw	r20,0(r17)
    47b0:	8d400115 	stw	r21,4(r17)
    47b4:	d8c02015 	stw	r3,128(sp)
    47b8:	dc001f15 	stw	r16,124(sp)
    47bc:	3c3ff60e 	bge	r7,r16,4798 <___vfprintf_internal_r+0x135c>
    47c0:	b809883a 	mov	r4,r23
    47c4:	b00b883a 	mov	r5,r22
    47c8:	d9801e04 	addi	r6,sp,120
    47cc:	d9c03d15 	stw	r7,244(sp)
    47d0:	0009e140 	call	9e14 <__sprint_r>
    47d4:	d9c03d17 	ldw	r7,244(sp)
    47d8:	103c0d1e 	bne	r2,zero,3810 <___vfprintf_internal_r+0x3d4>
    47dc:	d8c02017 	ldw	r3,128(sp)
    47e0:	dc001f17 	ldw	r16,124(sp)
    47e4:	dc400404 	addi	r17,sp,16
    47e8:	003fec06 	br	479c <___vfprintf_internal_r+0x1360>
    47ec:	10803fcc 	andi	r2,r2,255
    47f0:	1080201c 	xori	r2,r2,128
    47f4:	10bfe004 	addi	r2,r2,-128
    47f8:	01000c04 	movi	r4,48
    47fc:	1101d726 	beq	r2,r4,4f5c <___vfprintf_internal_r+0x1b20>
    4800:	d9403117 	ldw	r5,196(sp)
    4804:	d8802817 	ldw	r2,160(sp)
    4808:	193fffc5 	stb	r4,-1(r3)
    480c:	297fffc4 	addi	r5,r5,-1
    4810:	d9403115 	stw	r5,196(sp)
    4814:	1163c83a 	sub	r17,r2,r5
    4818:	003c6006 	br	399c <___vfprintf_internal_r+0x560>
    481c:	b809883a 	mov	r4,r23
    4820:	b00b883a 	mov	r5,r22
    4824:	d9801e04 	addi	r6,sp,120
    4828:	0009e140 	call	9e14 <__sprint_r>
    482c:	103bf81e 	bne	r2,zero,3810 <___vfprintf_internal_r+0x3d4>
    4830:	d8c02017 	ldw	r3,128(sp)
    4834:	da000404 	addi	r8,sp,16
    4838:	d9403117 	ldw	r5,196(sp)
    483c:	d9003417 	ldw	r4,208(sp)
    4840:	d8802617 	ldw	r2,152(sp)
    4844:	2923883a 	add	r17,r5,r4
    4848:	d9403317 	ldw	r5,204(sp)
    484c:	11400216 	blt	r2,r5,4858 <___vfprintf_internal_r+0x141c>
    4850:	e100004c 	andi	r4,fp,1
    4854:	20000d26 	beq	r4,zero,488c <___vfprintf_internal_r+0x1450>
    4858:	d9003817 	ldw	r4,224(sp)
    485c:	d9403517 	ldw	r5,212(sp)
    4860:	1907883a 	add	r3,r3,r4
    4864:	d9001f17 	ldw	r4,124(sp)
    4868:	41400015 	stw	r5,0(r8)
    486c:	d9403817 	ldw	r5,224(sp)
    4870:	21000044 	addi	r4,r4,1
    4874:	d8c02015 	stw	r3,128(sp)
    4878:	41400115 	stw	r5,4(r8)
    487c:	d9001f15 	stw	r4,124(sp)
    4880:	014001c4 	movi	r5,7
    4884:	2901fd16 	blt	r5,r4,507c <___vfprintf_internal_r+0x1c40>
    4888:	42000204 	addi	r8,r8,8
    488c:	d9003317 	ldw	r4,204(sp)
    4890:	2085c83a 	sub	r2,r4,r2
    4894:	8449c83a 	sub	r4,r16,r17
    4898:	1021883a 	mov	r16,r2
    489c:	2080010e 	bge	r4,r2,48a4 <___vfprintf_internal_r+0x1468>
    48a0:	2021883a 	mov	r16,r4
    48a4:	04000a0e 	bge	zero,r16,48d0 <___vfprintf_internal_r+0x1494>
    48a8:	d9001f17 	ldw	r4,124(sp)
    48ac:	1c07883a 	add	r3,r3,r16
    48b0:	44400015 	stw	r17,0(r8)
    48b4:	21000044 	addi	r4,r4,1
    48b8:	44000115 	stw	r16,4(r8)
    48bc:	d8c02015 	stw	r3,128(sp)
    48c0:	d9001f15 	stw	r4,124(sp)
    48c4:	014001c4 	movi	r5,7
    48c8:	29021816 	blt	r5,r4,512c <___vfprintf_internal_r+0x1cf0>
    48cc:	42000204 	addi	r8,r8,8
    48d0:	80021016 	blt	r16,zero,5114 <___vfprintf_internal_r+0x1cd8>
    48d4:	1421c83a 	sub	r16,r2,r16
    48d8:	043cc80e 	bge	zero,r16,3bfc <___vfprintf_internal_r+0x7c0>
    48dc:	04400404 	movi	r17,16
    48e0:	d8801f17 	ldw	r2,124(sp)
    48e4:	8c3f110e 	bge	r17,r16,452c <___vfprintf_internal_r+0x10f0>
    48e8:	014000b4 	movhi	r5,2
    48ec:	296b0184 	addi	r5,r5,-21498
    48f0:	d9402c15 	stw	r5,176(sp)
    48f4:	04c001c4 	movi	r19,7
    48f8:	00000306 	br	4908 <___vfprintf_internal_r+0x14cc>
    48fc:	42000204 	addi	r8,r8,8
    4900:	843ffc04 	addi	r16,r16,-16
    4904:	8c3f0c0e 	bge	r17,r16,4538 <___vfprintf_internal_r+0x10fc>
    4908:	18c00404 	addi	r3,r3,16
    490c:	10800044 	addi	r2,r2,1
    4910:	45000015 	stw	r20,0(r8)
    4914:	44400115 	stw	r17,4(r8)
    4918:	d8c02015 	stw	r3,128(sp)
    491c:	d8801f15 	stw	r2,124(sp)
    4920:	98bff60e 	bge	r19,r2,48fc <___vfprintf_internal_r+0x14c0>
    4924:	b809883a 	mov	r4,r23
    4928:	b00b883a 	mov	r5,r22
    492c:	d9801e04 	addi	r6,sp,120
    4930:	0009e140 	call	9e14 <__sprint_r>
    4934:	103bb61e 	bne	r2,zero,3810 <___vfprintf_internal_r+0x3d4>
    4938:	d8c02017 	ldw	r3,128(sp)
    493c:	d8801f17 	ldw	r2,124(sp)
    4940:	da000404 	addi	r8,sp,16
    4944:	003fee06 	br	4900 <___vfprintf_internal_r+0x14c4>
    4948:	e088703a 	and	r4,fp,r2
    494c:	203ec01e 	bne	r4,zero,4450 <___vfprintf_internal_r+0x1014>
    4950:	dc001f17 	ldw	r16,124(sp)
    4954:	d9003117 	ldw	r4,196(sp)
    4958:	40800115 	stw	r2,4(r8)
    495c:	84000044 	addi	r16,r16,1
    4960:	41000015 	stw	r4,0(r8)
    4964:	d8c02015 	stw	r3,128(sp)
    4968:	dc001f15 	stw	r16,124(sp)
    496c:	008001c4 	movi	r2,7
    4970:	14000e16 	blt	r2,r16,49ac <___vfprintf_internal_r+0x1570>
    4974:	44400204 	addi	r17,r8,8
    4978:	003ee006 	br	44fc <___vfprintf_internal_r+0x10c0>
    497c:	010000b4 	movhi	r4,2
    4980:	212b0184 	addi	r4,r4,-21498
    4984:	d9002c15 	stw	r4,176(sp)
    4988:	d8802c17 	ldw	r2,176(sp)
    498c:	1cc7883a 	add	r3,r3,r19
    4990:	84000044 	addi	r16,r16,1
    4994:	88800015 	stw	r2,0(r17)
    4998:	8cc00115 	stw	r19,4(r17)
    499c:	d8c02015 	stw	r3,128(sp)
    49a0:	dc001f15 	stw	r16,124(sp)
    49a4:	008001c4 	movi	r2,7
    49a8:	143ed30e 	bge	r2,r16,44f8 <___vfprintf_internal_r+0x10bc>
    49ac:	b809883a 	mov	r4,r23
    49b0:	b00b883a 	mov	r5,r22
    49b4:	d9801e04 	addi	r6,sp,120
    49b8:	0009e140 	call	9e14 <__sprint_r>
    49bc:	103b941e 	bne	r2,zero,3810 <___vfprintf_internal_r+0x3d4>
    49c0:	d8c02017 	ldw	r3,128(sp)
    49c4:	dc001f17 	ldw	r16,124(sp)
    49c8:	dc400404 	addi	r17,sp,16
    49cc:	003ecb06 	br	44fc <___vfprintf_internal_r+0x10c0>
    49d0:	b809883a 	mov	r4,r23
    49d4:	b00b883a 	mov	r5,r22
    49d8:	d9801e04 	addi	r6,sp,120
    49dc:	0009e140 	call	9e14 <__sprint_r>
    49e0:	103b8b1e 	bne	r2,zero,3810 <___vfprintf_internal_r+0x3d4>
    49e4:	d8c02017 	ldw	r3,128(sp)
    49e8:	dc001f17 	ldw	r16,124(sp)
    49ec:	da000404 	addi	r8,sp,16
    49f0:	003ea206 	br	447c <___vfprintf_internal_r+0x1040>
    49f4:	b809883a 	mov	r4,r23
    49f8:	b00b883a 	mov	r5,r22
    49fc:	d9801e04 	addi	r6,sp,120
    4a00:	0009e140 	call	9e14 <__sprint_r>
    4a04:	103b821e 	bne	r2,zero,3810 <___vfprintf_internal_r+0x3d4>
    4a08:	d8c02017 	ldw	r3,128(sp)
    4a0c:	dc001f17 	ldw	r16,124(sp)
    4a10:	dc400404 	addi	r17,sp,16
    4a14:	003ea406 	br	44a8 <___vfprintf_internal_r+0x106c>
    4a18:	b809883a 	mov	r4,r23
    4a1c:	b00b883a 	mov	r5,r22
    4a20:	d9801e04 	addi	r6,sp,120
    4a24:	0009e140 	call	9e14 <__sprint_r>
    4a28:	103b791e 	bne	r2,zero,3810 <___vfprintf_internal_r+0x3d4>
    4a2c:	d8c02017 	ldw	r3,128(sp)
    4a30:	da000404 	addi	r8,sp,16
    4a34:	003c3b06 	br	3b24 <___vfprintf_internal_r+0x6e8>
    4a38:	04a5c83a 	sub	r18,zero,r18
    4a3c:	9004c03a 	cmpne	r2,r18,zero
    4a40:	056bc83a 	sub	r21,zero,r21
    4a44:	a8abc83a 	sub	r21,r21,r2
    4a48:	04c00b44 	movi	r19,45
    4a4c:	dcc02785 	stb	r19,158(sp)
    4a50:	da403215 	stw	r9,200(sp)
    4a54:	00800044 	movi	r2,1
    4a58:	9546b03a 	or	r3,r18,r21
    4a5c:	003bb506 	br	3934 <___vfprintf_internal_r+0x4f8>
    4a60:	da003f15 	stw	r8,252(sp)
    4a64:	da403e15 	stw	r9,248(sp)
    4a68:	00099d80 	call	99d8 <__fpclassifyd>
    4a6c:	da003f17 	ldw	r8,252(sp)
    4a70:	da403e17 	ldw	r9,248(sp)
    4a74:	1000e526 	beq	r2,zero,4e0c <___vfprintf_internal_r+0x19d0>
    4a78:	04fff7c4 	movi	r19,-33
    4a7c:	00bfffc4 	movi	r2,-1
    4a80:	84e6703a 	and	r19,r16,r19
    4a84:	48822526 	beq	r9,r2,531c <___vfprintf_internal_r+0x1ee0>
    4a88:	008011c4 	movi	r2,71
    4a8c:	98821626 	beq	r19,r2,52e8 <___vfprintf_internal_r+0x1eac>
    4a90:	d9003917 	ldw	r4,228(sp)
    4a94:	e0c04014 	ori	r3,fp,256
    4a98:	d8c02d15 	stw	r3,180(sp)
    4a9c:	20022116 	blt	r4,zero,5324 <___vfprintf_internal_r+0x1ee8>
    4aa0:	dc403917 	ldw	r17,228(sp)
    4aa4:	d8002b05 	stb	zero,172(sp)
    4aa8:	00801984 	movi	r2,102
    4aac:	80814d26 	beq	r16,r2,4fe4 <___vfprintf_internal_r+0x1ba8>
    4ab0:	00801184 	movi	r2,70
    4ab4:	80814b26 	beq	r16,r2,4fe4 <___vfprintf_internal_r+0x1ba8>
    4ab8:	00801144 	movi	r2,69
    4abc:	98822626 	beq	r19,r2,5358 <___vfprintf_internal_r+0x1f1c>
    4ac0:	482b883a 	mov	r21,r9
    4ac4:	d8802604 	addi	r2,sp,152
    4ac8:	d8800115 	stw	r2,4(sp)
    4acc:	d9403717 	ldw	r5,220(sp)
    4ad0:	d8802504 	addi	r2,sp,148
    4ad4:	d8800215 	stw	r2,8(sp)
    4ad8:	d8802104 	addi	r2,sp,132
    4adc:	dd400015 	stw	r21,0(sp)
    4ae0:	d8800315 	stw	r2,12(sp)
    4ae4:	b809883a 	mov	r4,r23
    4ae8:	880d883a 	mov	r6,r17
    4aec:	01c00084 	movi	r7,2
    4af0:	da003f15 	stw	r8,252(sp)
    4af4:	da403e15 	stw	r9,248(sp)
    4af8:	00058f00 	call	58f0 <_dtoa_r>
    4afc:	d8803115 	stw	r2,196(sp)
    4b00:	008019c4 	movi	r2,103
    4b04:	da003f17 	ldw	r8,252(sp)
    4b08:	da403e17 	ldw	r9,248(sp)
    4b0c:	80800226 	beq	r16,r2,4b18 <___vfprintf_internal_r+0x16dc>
    4b10:	008011c4 	movi	r2,71
    4b14:	8081451e 	bne	r16,r2,502c <___vfprintf_internal_r+0x1bf0>
    4b18:	e080004c 	andi	r2,fp,1
    4b1c:	10021e26 	beq	r2,zero,5398 <___vfprintf_internal_r+0x1f5c>
    4b20:	d8c03117 	ldw	r3,196(sp)
    4b24:	1d55883a 	add	r10,r3,r21
    4b28:	d9003717 	ldw	r4,220(sp)
    4b2c:	880b883a 	mov	r5,r17
    4b30:	000d883a 	mov	r6,zero
    4b34:	000f883a 	mov	r7,zero
    4b38:	da003f15 	stw	r8,252(sp)
    4b3c:	da403e15 	stw	r9,248(sp)
    4b40:	da803d15 	stw	r10,244(sp)
    4b44:	000db900 	call	db90 <__eqdf2>
    4b48:	da003f17 	ldw	r8,252(sp)
    4b4c:	da403e17 	ldw	r9,248(sp)
    4b50:	da803d17 	ldw	r10,244(sp)
    4b54:	1001a126 	beq	r2,zero,51dc <___vfprintf_internal_r+0x1da0>
    4b58:	d8802117 	ldw	r2,132(sp)
    4b5c:	1280062e 	bgeu	r2,r10,4b78 <___vfprintf_internal_r+0x173c>
    4b60:	01000c04 	movi	r4,48
    4b64:	10c00044 	addi	r3,r2,1
    4b68:	d8c02115 	stw	r3,132(sp)
    4b6c:	11000005 	stb	r4,0(r2)
    4b70:	d8802117 	ldw	r2,132(sp)
    4b74:	12bffb36 	bltu	r2,r10,4b64 <___vfprintf_internal_r+0x1728>
    4b78:	d8c03117 	ldw	r3,196(sp)
    4b7c:	10c5c83a 	sub	r2,r2,r3
    4b80:	d8803315 	stw	r2,204(sp)
    4b84:	008011c4 	movi	r2,71
    4b88:	98817f26 	beq	r19,r2,5188 <___vfprintf_internal_r+0x1d4c>
    4b8c:	00801944 	movi	r2,101
    4b90:	14023e0e 	bge	r2,r16,548c <___vfprintf_internal_r+0x2050>
    4b94:	d8c02617 	ldw	r3,152(sp)
    4b98:	00801984 	movi	r2,102
    4b9c:	d8c03415 	stw	r3,208(sp)
    4ba0:	8081f326 	beq	r16,r2,5370 <___vfprintf_internal_r+0x1f34>
    4ba4:	d8c03417 	ldw	r3,208(sp)
    4ba8:	d9003317 	ldw	r4,204(sp)
    4bac:	1901e116 	blt	r3,r4,5334 <___vfprintf_internal_r+0x1ef8>
    4bb0:	e080004c 	andi	r2,fp,1
    4bb4:	1001ea26 	beq	r2,zero,5360 <___vfprintf_internal_r+0x1f24>
    4bb8:	d8c03417 	ldw	r3,208(sp)
    4bbc:	1c400044 	addi	r17,r3,1
    4bc0:	8839883a 	mov	fp,r17
    4bc4:	8801e216 	blt	r17,zero,5350 <___vfprintf_internal_r+0x1f14>
    4bc8:	dd402b07 	ldb	r21,172(sp)
    4bcc:	a801661e 	bne	r21,zero,5168 <___vfprintf_internal_r+0x1d2c>
    4bd0:	df002b15 	stw	fp,172(sp)
    4bd4:	dcc02783 	ldbu	r19,158(sp)
    4bd8:	df002d17 	ldw	fp,180(sp)
    4bdc:	d8003215 	stw	zero,200(sp)
    4be0:	dc802d15 	stw	r18,180(sp)
    4be4:	003b7206 	br	39b0 <___vfprintf_internal_r+0x574>
    4be8:	e4000007 	ldb	r16,0(fp)
    4bec:	e005883a 	mov	r2,fp
    4bf0:	003a7806 	br	35d4 <___vfprintf_internal_r+0x198>
    4bf4:	e0c0100c 	andi	r3,fp,64
    4bf8:	1800b326 	beq	r3,zero,4ec8 <___vfprintf_internal_r+0x1a8c>
    4bfc:	d9002d17 	ldw	r4,180(sp)
    4c00:	1480000b 	ldhu	r18,0(r2)
    4c04:	002b883a 	mov	r21,zero
    4c08:	21000104 	addi	r4,r4,4
    4c0c:	d9002d15 	stw	r4,180(sp)
    4c10:	003cd506 	br	3f68 <___vfprintf_internal_r+0xb2c>
    4c14:	e080100c 	andi	r2,fp,64
    4c18:	1000a326 	beq	r2,zero,4ea8 <___vfprintf_internal_r+0x1a6c>
    4c1c:	d8802d17 	ldw	r2,180(sp)
    4c20:	002b883a 	mov	r21,zero
    4c24:	1480000b 	ldhu	r18,0(r2)
    4c28:	10800104 	addi	r2,r2,4
    4c2c:	d8802d15 	stw	r2,180(sp)
    4c30:	9007883a 	mov	r3,r18
    4c34:	00800044 	movi	r2,1
    4c38:	003c6c06 	br	3dec <___vfprintf_internal_r+0x9b0>
    4c3c:	e080100c 	andi	r2,fp,64
    4c40:	10009226 	beq	r2,zero,4e8c <___vfprintf_internal_r+0x1a50>
    4c44:	1c80000f 	ldh	r18,0(r3)
    4c48:	d8802d17 	ldw	r2,180(sp)
    4c4c:	902bd7fa 	srai	r21,r18,31
    4c50:	10800104 	addi	r2,r2,4
    4c54:	d8802d15 	stw	r2,180(sp)
    4c58:	a805883a 	mov	r2,r21
    4c5c:	003b3006 	br	3920 <___vfprintf_internal_r+0x4e4>
    4c60:	e080100c 	andi	r2,fp,64
    4c64:	10008126 	beq	r2,zero,4e6c <___vfprintf_internal_r+0x1a30>
    4c68:	d8c02d17 	ldw	r3,180(sp)
    4c6c:	002b883a 	mov	r21,zero
    4c70:	0005883a 	mov	r2,zero
    4c74:	1c80000b 	ldhu	r18,0(r3)
    4c78:	18c00104 	addi	r3,r3,4
    4c7c:	d8c02d15 	stw	r3,180(sp)
    4c80:	9007883a 	mov	r3,r18
    4c84:	003c5906 	br	3dec <___vfprintf_internal_r+0x9b0>
    4c88:	e080040c 	andi	r2,fp,16
    4c8c:	1000701e 	bne	r2,zero,4e50 <___vfprintf_internal_r+0x1a14>
    4c90:	e080100c 	andi	r2,fp,64
    4c94:	10014626 	beq	r2,zero,51b0 <___vfprintf_internal_r+0x1d74>
    4c98:	d9002d17 	ldw	r4,180(sp)
    4c9c:	d9402f17 	ldw	r5,188(sp)
    4ca0:	20800017 	ldw	r2,0(r4)
    4ca4:	21000104 	addi	r4,r4,4
    4ca8:	d9002d15 	stw	r4,180(sp)
    4cac:	1140000d 	sth	r5,0(r2)
    4cb0:	003a1d06 	br	3528 <___vfprintf_internal_r+0xec>
    4cb4:	00800084 	movi	r2,2
    4cb8:	003c4c06 	br	3dec <___vfprintf_internal_r+0x9b0>
    4cbc:	010000b4 	movhi	r4,2
    4cc0:	212b0184 	addi	r4,r4,-21498
    4cc4:	d9002c15 	stw	r4,176(sp)
    4cc8:	d9002c17 	ldw	r4,176(sp)
    4ccc:	1c47883a 	add	r3,r3,r17
    4cd0:	10800044 	addi	r2,r2,1
    4cd4:	41000015 	stw	r4,0(r8)
    4cd8:	44400115 	stw	r17,4(r8)
    4cdc:	d8c02015 	stw	r3,128(sp)
    4ce0:	d8801f15 	stw	r2,124(sp)
    4ce4:	010001c4 	movi	r4,7
    4ce8:	20becc16 	blt	r4,r2,481c <___vfprintf_internal_r+0x13e0>
    4cec:	42000204 	addi	r8,r8,8
    4cf0:	003ed106 	br	4838 <___vfprintf_internal_r+0x13fc>
    4cf4:	010000b4 	movhi	r4,2
    4cf8:	212b0184 	addi	r4,r4,-21498
    4cfc:	d9002c15 	stw	r4,176(sp)
    4d00:	003ba706 	br	3ba0 <___vfprintf_internal_r+0x764>
    4d04:	b809883a 	mov	r4,r23
    4d08:	b00b883a 	mov	r5,r22
    4d0c:	d9801e04 	addi	r6,sp,120
    4d10:	0009e140 	call	9e14 <__sprint_r>
    4d14:	103abe1e 	bne	r2,zero,3810 <___vfprintf_internal_r+0x3d4>
    4d18:	d8c02017 	ldw	r3,128(sp)
    4d1c:	da000404 	addi	r8,sp,16
    4d20:	003d6c06 	br	42d4 <___vfprintf_internal_r+0xe98>
    4d24:	d8801f17 	ldw	r2,124(sp)
    4d28:	014000b4 	movhi	r5,2
    4d2c:	01000044 	movi	r4,1
    4d30:	18c00044 	addi	r3,r3,1
    4d34:	10800044 	addi	r2,r2,1
    4d38:	296b0104 	addi	r5,r5,-21500
    4d3c:	41000115 	stw	r4,4(r8)
    4d40:	41400015 	stw	r5,0(r8)
    4d44:	d8c02015 	stw	r3,128(sp)
    4d48:	d8801f15 	stw	r2,124(sp)
    4d4c:	010001c4 	movi	r4,7
    4d50:	20806716 	blt	r4,r2,4ef0 <___vfprintf_internal_r+0x1ab4>
    4d54:	42000204 	addi	r8,r8,8
    4d58:	8000041e 	bne	r16,zero,4d6c <___vfprintf_internal_r+0x1930>
    4d5c:	d8803317 	ldw	r2,204(sp)
    4d60:	1000021e 	bne	r2,zero,4d6c <___vfprintf_internal_r+0x1930>
    4d64:	e080004c 	andi	r2,fp,1
    4d68:	103ba426 	beq	r2,zero,3bfc <___vfprintf_internal_r+0x7c0>
    4d6c:	d9003817 	ldw	r4,224(sp)
    4d70:	d8801f17 	ldw	r2,124(sp)
    4d74:	d9403517 	ldw	r5,212(sp)
    4d78:	1907883a 	add	r3,r3,r4
    4d7c:	10800044 	addi	r2,r2,1
    4d80:	41000115 	stw	r4,4(r8)
    4d84:	41400015 	stw	r5,0(r8)
    4d88:	d8c02015 	stw	r3,128(sp)
    4d8c:	d8801f15 	stw	r2,124(sp)
    4d90:	010001c4 	movi	r4,7
    4d94:	20815716 	blt	r4,r2,52f4 <___vfprintf_internal_r+0x1eb8>
    4d98:	42000204 	addi	r8,r8,8
    4d9c:	0421c83a 	sub	r16,zero,r16
    4da0:	0400810e 	bge	zero,r16,4fa8 <___vfprintf_internal_r+0x1b6c>
    4da4:	04400404 	movi	r17,16
    4da8:	8c00bd0e 	bge	r17,r16,50a0 <___vfprintf_internal_r+0x1c64>
    4dac:	014000b4 	movhi	r5,2
    4db0:	296b0184 	addi	r5,r5,-21498
    4db4:	d9402c15 	stw	r5,176(sp)
    4db8:	04c001c4 	movi	r19,7
    4dbc:	00000306 	br	4dcc <___vfprintf_internal_r+0x1990>
    4dc0:	42000204 	addi	r8,r8,8
    4dc4:	843ffc04 	addi	r16,r16,-16
    4dc8:	8c00b80e 	bge	r17,r16,50ac <___vfprintf_internal_r+0x1c70>
    4dcc:	18c00404 	addi	r3,r3,16
    4dd0:	10800044 	addi	r2,r2,1
    4dd4:	45000015 	stw	r20,0(r8)
    4dd8:	44400115 	stw	r17,4(r8)
    4ddc:	d8c02015 	stw	r3,128(sp)
    4de0:	d8801f15 	stw	r2,124(sp)
    4de4:	98bff60e 	bge	r19,r2,4dc0 <___vfprintf_internal_r+0x1984>
    4de8:	b809883a 	mov	r4,r23
    4dec:	b00b883a 	mov	r5,r22
    4df0:	d9801e04 	addi	r6,sp,120
    4df4:	0009e140 	call	9e14 <__sprint_r>
    4df8:	103a851e 	bne	r2,zero,3810 <___vfprintf_internal_r+0x3d4>
    4dfc:	d8c02017 	ldw	r3,128(sp)
    4e00:	d8801f17 	ldw	r2,124(sp)
    4e04:	da000404 	addi	r8,sp,16
    4e08:	003fee06 	br	4dc4 <___vfprintf_internal_r+0x1988>
    4e0c:	008011c4 	movi	r2,71
    4e10:	1400d116 	blt	r2,r16,5158 <___vfprintf_internal_r+0x1d1c>
    4e14:	010000b4 	movhi	r4,2
    4e18:	212af304 	addi	r4,r4,-21556
    4e1c:	d9003115 	stw	r4,196(sp)
    4e20:	00c000c4 	movi	r3,3
    4e24:	00bfdfc4 	movi	r2,-129
    4e28:	d8c02b15 	stw	r3,172(sp)
    4e2c:	e0b8703a 	and	fp,fp,r2
    4e30:	dcc02783 	ldbu	r19,158(sp)
    4e34:	dc802d15 	stw	r18,180(sp)
    4e38:	1823883a 	mov	r17,r3
    4e3c:	d8003215 	stw	zero,200(sp)
    4e40:	d8003415 	stw	zero,208(sp)
    4e44:	003ada06 	br	39b0 <___vfprintf_internal_r+0x574>
    4e48:	4823883a 	mov	r17,r9
    4e4c:	003c9406 	br	40a0 <___vfprintf_internal_r+0xc64>
    4e50:	d9402d17 	ldw	r5,180(sp)
    4e54:	d8c02f17 	ldw	r3,188(sp)
    4e58:	28800017 	ldw	r2,0(r5)
    4e5c:	29400104 	addi	r5,r5,4
    4e60:	d9402d15 	stw	r5,180(sp)
    4e64:	10c00015 	stw	r3,0(r2)
    4e68:	0039af06 	br	3528 <___vfprintf_internal_r+0xec>
    4e6c:	d9002d17 	ldw	r4,180(sp)
    4e70:	002b883a 	mov	r21,zero
    4e74:	0005883a 	mov	r2,zero
    4e78:	24800017 	ldw	r18,0(r4)
    4e7c:	21000104 	addi	r4,r4,4
    4e80:	d9002d15 	stw	r4,180(sp)
    4e84:	9007883a 	mov	r3,r18
    4e88:	003bd806 	br	3dec <___vfprintf_internal_r+0x9b0>
    4e8c:	1c800017 	ldw	r18,0(r3)
    4e90:	d8c02d17 	ldw	r3,180(sp)
    4e94:	902bd7fa 	srai	r21,r18,31
    4e98:	18c00104 	addi	r3,r3,4
    4e9c:	d8c02d15 	stw	r3,180(sp)
    4ea0:	a805883a 	mov	r2,r21
    4ea4:	003a9e06 	br	3920 <___vfprintf_internal_r+0x4e4>
    4ea8:	d8c02d17 	ldw	r3,180(sp)
    4eac:	002b883a 	mov	r21,zero
    4eb0:	00800044 	movi	r2,1
    4eb4:	1c800017 	ldw	r18,0(r3)
    4eb8:	18c00104 	addi	r3,r3,4
    4ebc:	d8c02d15 	stw	r3,180(sp)
    4ec0:	9007883a 	mov	r3,r18
    4ec4:	003bc906 	br	3dec <___vfprintf_internal_r+0x9b0>
    4ec8:	d9402d17 	ldw	r5,180(sp)
    4ecc:	14800017 	ldw	r18,0(r2)
    4ed0:	002b883a 	mov	r21,zero
    4ed4:	29400104 	addi	r5,r5,4
    4ed8:	d9402d15 	stw	r5,180(sp)
    4edc:	003c2206 	br	3f68 <___vfprintf_internal_r+0xb2c>
    4ee0:	010000b4 	movhi	r4,2
    4ee4:	212af104 	addi	r4,r4,-21564
    4ee8:	d9003115 	stw	r4,196(sp)
    4eec:	003ba606 	br	3d88 <___vfprintf_internal_r+0x94c>
    4ef0:	b809883a 	mov	r4,r23
    4ef4:	b00b883a 	mov	r5,r22
    4ef8:	d9801e04 	addi	r6,sp,120
    4efc:	0009e140 	call	9e14 <__sprint_r>
    4f00:	103a431e 	bne	r2,zero,3810 <___vfprintf_internal_r+0x3d4>
    4f04:	dc002617 	ldw	r16,152(sp)
    4f08:	d8c02017 	ldw	r3,128(sp)
    4f0c:	da000404 	addi	r8,sp,16
    4f10:	003f9106 	br	4d58 <___vfprintf_internal_r+0x191c>
    4f14:	d8802e17 	ldw	r2,184(sp)
    4f18:	d8c02d15 	stw	r3,180(sp)
    4f1c:	0085c83a 	sub	r2,zero,r2
    4f20:	d8802e15 	stw	r2,184(sp)
    4f24:	e005883a 	mov	r2,fp
    4f28:	003a4206 	br	3834 <___vfprintf_internal_r+0x3f8>
    4f2c:	e0800044 	addi	r2,fp,1
    4f30:	9cc00814 	ori	r19,r19,32
    4f34:	e4000047 	ldb	r16,1(fp)
    4f38:	0039a606 	br	35d4 <___vfprintf_internal_r+0x198>
    4f3c:	b809883a 	mov	r4,r23
    4f40:	b00b883a 	mov	r5,r22
    4f44:	d9801e04 	addi	r6,sp,120
    4f48:	0009e140 	call	9e14 <__sprint_r>
    4f4c:	103a301e 	bne	r2,zero,3810 <___vfprintf_internal_r+0x3d4>
    4f50:	d8c02017 	ldw	r3,128(sp)
    4f54:	da000404 	addi	r8,sp,16
    4f58:	003cf006 	br	431c <___vfprintf_internal_r+0xee0>
    4f5c:	d8c02817 	ldw	r3,160(sp)
    4f60:	d9003117 	ldw	r4,196(sp)
    4f64:	1923c83a 	sub	r17,r3,r4
    4f68:	003a8c06 	br	399c <___vfprintf_internal_r+0x560>
    4f6c:	da003f15 	stw	r8,252(sp)
    4f70:	0009c800 	call	9c80 <strlen>
    4f74:	1023883a 	mov	r17,r2
    4f78:	da003f17 	ldw	r8,252(sp)
    4f7c:	883c4a0e 	bge	r17,zero,40a8 <___vfprintf_internal_r+0xc6c>
    4f80:	0005883a 	mov	r2,zero
    4f84:	003c4806 	br	40a8 <___vfprintf_internal_r+0xc6c>
    4f88:	b809883a 	mov	r4,r23
    4f8c:	b00b883a 	mov	r5,r22
    4f90:	d9801e04 	addi	r6,sp,120
    4f94:	0009e140 	call	9e14 <__sprint_r>
    4f98:	103a1d1e 	bne	r2,zero,3810 <___vfprintf_internal_r+0x3d4>
    4f9c:	d8c02017 	ldw	r3,128(sp)
    4fa0:	d8801f17 	ldw	r2,124(sp)
    4fa4:	da000404 	addi	r8,sp,16
    4fa8:	d9403317 	ldw	r5,204(sp)
    4fac:	d9003117 	ldw	r4,196(sp)
    4fb0:	10800044 	addi	r2,r2,1
    4fb4:	1947883a 	add	r3,r3,r5
    4fb8:	41000015 	stw	r4,0(r8)
    4fbc:	41400115 	stw	r5,4(r8)
    4fc0:	d8c02015 	stw	r3,128(sp)
    4fc4:	d8801f15 	stw	r2,124(sp)
    4fc8:	010001c4 	movi	r4,7
    4fcc:	20bb0a0e 	bge	r4,r2,3bf8 <___vfprintf_internal_r+0x7bc>
    4fd0:	003d6206 	br	455c <___vfprintf_internal_r+0x1120>
    4fd4:	010000b4 	movhi	r4,2
    4fd8:	212b0584 	addi	r4,r4,-21482
    4fdc:	d9003615 	stw	r4,216(sp)
    4fe0:	003aa706 	br	3a80 <___vfprintf_internal_r+0x644>
    4fe4:	d8802604 	addi	r2,sp,152
    4fe8:	d8800115 	stw	r2,4(sp)
    4fec:	d9403717 	ldw	r5,220(sp)
    4ff0:	d8802504 	addi	r2,sp,148
    4ff4:	d8800215 	stw	r2,8(sp)
    4ff8:	d8802104 	addi	r2,sp,132
    4ffc:	da400015 	stw	r9,0(sp)
    5000:	d8800315 	stw	r2,12(sp)
    5004:	b809883a 	mov	r4,r23
    5008:	880d883a 	mov	r6,r17
    500c:	01c000c4 	movi	r7,3
    5010:	da003f15 	stw	r8,252(sp)
    5014:	da403e15 	stw	r9,248(sp)
    5018:	00058f00 	call	58f0 <_dtoa_r>
    501c:	da403e17 	ldw	r9,248(sp)
    5020:	da003f17 	ldw	r8,252(sp)
    5024:	d8803115 	stw	r2,196(sp)
    5028:	482b883a 	mov	r21,r9
    502c:	d8c03117 	ldw	r3,196(sp)
    5030:	00801184 	movi	r2,70
    5034:	1d55883a 	add	r10,r3,r21
    5038:	98bebb1e 	bne	r19,r2,4b28 <___vfprintf_internal_r+0x16ec>
    503c:	19000007 	ldb	r4,0(r3)
    5040:	00800c04 	movi	r2,48
    5044:	2080df26 	beq	r4,r2,53c4 <___vfprintf_internal_r+0x1f88>
    5048:	d8c02617 	ldw	r3,152(sp)
    504c:	50d5883a 	add	r10,r10,r3
    5050:	003eb506 	br	4b28 <___vfprintf_internal_r+0x16ec>
    5054:	0023883a 	mov	r17,zero
    5058:	003d9b06 	br	46c8 <___vfprintf_internal_r+0x128c>
    505c:	b809883a 	mov	r4,r23
    5060:	b00b883a 	mov	r5,r22
    5064:	d9801e04 	addi	r6,sp,120
    5068:	0009e140 	call	9e14 <__sprint_r>
    506c:	1039e81e 	bne	r2,zero,3810 <___vfprintf_internal_r+0x3d4>
    5070:	d8c02017 	ldw	r3,128(sp)
    5074:	da000404 	addi	r8,sp,16
    5078:	003d9206 	br	46c4 <___vfprintf_internal_r+0x1288>
    507c:	b809883a 	mov	r4,r23
    5080:	b00b883a 	mov	r5,r22
    5084:	d9801e04 	addi	r6,sp,120
    5088:	0009e140 	call	9e14 <__sprint_r>
    508c:	1039e01e 	bne	r2,zero,3810 <___vfprintf_internal_r+0x3d4>
    5090:	d8802617 	ldw	r2,152(sp)
    5094:	d8c02017 	ldw	r3,128(sp)
    5098:	da000404 	addi	r8,sp,16
    509c:	003dfb06 	br	488c <___vfprintf_internal_r+0x1450>
    50a0:	010000b4 	movhi	r4,2
    50a4:	212b0184 	addi	r4,r4,-21498
    50a8:	d9002c15 	stw	r4,176(sp)
    50ac:	d9002c17 	ldw	r4,176(sp)
    50b0:	1c07883a 	add	r3,r3,r16
    50b4:	10800044 	addi	r2,r2,1
    50b8:	41000015 	stw	r4,0(r8)
    50bc:	44000115 	stw	r16,4(r8)
    50c0:	d8c02015 	stw	r3,128(sp)
    50c4:	d8801f15 	stw	r2,124(sp)
    50c8:	010001c4 	movi	r4,7
    50cc:	20bfae16 	blt	r4,r2,4f88 <___vfprintf_internal_r+0x1b4c>
    50d0:	42000204 	addi	r8,r8,8
    50d4:	003fb406 	br	4fa8 <___vfprintf_internal_r+0x1b6c>
    50d8:	00800184 	movi	r2,6
    50dc:	1240012e 	bgeu	r2,r9,50e4 <___vfprintf_internal_r+0x1ca8>
    50e0:	1013883a 	mov	r9,r2
    50e4:	4823883a 	mov	r17,r9
    50e8:	4805883a 	mov	r2,r9
    50ec:	4800ac16 	blt	r9,zero,53a0 <___vfprintf_internal_r+0x1f64>
    50f0:	014000b4 	movhi	r5,2
    50f4:	296aff04 	addi	r5,r5,-21508
    50f8:	d8802b15 	stw	r2,172(sp)
    50fc:	dc802d15 	stw	r18,180(sp)
    5100:	d8003215 	stw	zero,200(sp)
    5104:	d8003415 	stw	zero,208(sp)
    5108:	d9403115 	stw	r5,196(sp)
    510c:	0005883a 	mov	r2,zero
    5110:	003a2e06 	br	39cc <___vfprintf_internal_r+0x590>
    5114:	0021883a 	mov	r16,zero
    5118:	003dee06 	br	48d4 <___vfprintf_internal_r+0x1498>
    511c:	014000b4 	movhi	r5,2
    5120:	296b0584 	addi	r5,r5,-21482
    5124:	d9403615 	stw	r5,216(sp)
    5128:	003ad806 	br	3c8c <___vfprintf_internal_r+0x850>
    512c:	b809883a 	mov	r4,r23
    5130:	b00b883a 	mov	r5,r22
    5134:	d9801e04 	addi	r6,sp,120
    5138:	0009e140 	call	9e14 <__sprint_r>
    513c:	1039b41e 	bne	r2,zero,3810 <___vfprintf_internal_r+0x3d4>
    5140:	d8802617 	ldw	r2,152(sp)
    5144:	d9403317 	ldw	r5,204(sp)
    5148:	d8c02017 	ldw	r3,128(sp)
    514c:	da000404 	addi	r8,sp,16
    5150:	2885c83a 	sub	r2,r5,r2
    5154:	003dde06 	br	48d0 <___vfprintf_internal_r+0x1494>
    5158:	014000b4 	movhi	r5,2
    515c:	296af404 	addi	r5,r5,-21552
    5160:	d9403115 	stw	r5,196(sp)
    5164:	003f2e06 	br	4e20 <___vfprintf_internal_r+0x19e4>
    5168:	00800b44 	movi	r2,45
    516c:	d8802785 	stb	r2,158(sp)
    5170:	df002b15 	stw	fp,172(sp)
    5174:	d8003215 	stw	zero,200(sp)
    5178:	df002d17 	ldw	fp,180(sp)
    517c:	00800b44 	movi	r2,45
    5180:	dc802d15 	stw	r18,180(sp)
    5184:	003a0e06 	br	39c0 <___vfprintf_internal_r+0x584>
    5188:	d8c02617 	ldw	r3,152(sp)
    518c:	00bfff44 	movi	r2,-3
    5190:	18801b16 	blt	r3,r2,5200 <___vfprintf_internal_r+0x1dc4>
    5194:	48c01a16 	blt	r9,r3,5200 <___vfprintf_internal_r+0x1dc4>
    5198:	d8c03415 	stw	r3,208(sp)
    519c:	040019c4 	movi	r16,103
    51a0:	003e8006 	br	4ba4 <___vfprintf_internal_r+0x1768>
    51a4:	04c00b44 	movi	r19,45
    51a8:	dcc02785 	stb	r19,158(sp)
    51ac:	003af106 	br	3d74 <___vfprintf_internal_r+0x938>
    51b0:	d8c02d17 	ldw	r3,180(sp)
    51b4:	d9002f17 	ldw	r4,188(sp)
    51b8:	18800017 	ldw	r2,0(r3)
    51bc:	18c00104 	addi	r3,r3,4
    51c0:	d8c02d15 	stw	r3,180(sp)
    51c4:	11000015 	stw	r4,0(r2)
    51c8:	0038d706 	br	3528 <___vfprintf_internal_r+0xec>
    51cc:	010000b4 	movhi	r4,2
    51d0:	212b0184 	addi	r4,r4,-21498
    51d4:	d9002c15 	stw	r4,176(sp)
    51d8:	003c8e06 	br	4414 <___vfprintf_internal_r+0xfd8>
    51dc:	5005883a 	mov	r2,r10
    51e0:	003e6506 	br	4b78 <___vfprintf_internal_r+0x173c>
    51e4:	da402b15 	stw	r9,172(sp)
    51e8:	dcc02783 	ldbu	r19,158(sp)
    51ec:	4823883a 	mov	r17,r9
    51f0:	dc802d15 	stw	r18,180(sp)
    51f4:	d8003215 	stw	zero,200(sp)
    51f8:	d8003415 	stw	zero,208(sp)
    51fc:	0039ec06 	br	39b0 <___vfprintf_internal_r+0x574>
    5200:	843fff84 	addi	r16,r16,-2
    5204:	1d7fffc4 	addi	r21,r3,-1
    5208:	dd402615 	stw	r21,152(sp)
    520c:	dc0022c5 	stb	r16,139(sp)
    5210:	a8009616 	blt	r21,zero,546c <___vfprintf_internal_r+0x2030>
    5214:	00800ac4 	movi	r2,43
    5218:	d8802305 	stb	r2,140(sp)
    521c:	00800244 	movi	r2,9
    5220:	1540610e 	bge	r2,r21,53a8 <___vfprintf_internal_r+0x1f6c>
    5224:	dcc022c4 	addi	r19,sp,139
    5228:	dc002c15 	stw	r16,176(sp)
    522c:	4023883a 	mov	r17,r8
    5230:	9821883a 	mov	r16,r19
    5234:	a809883a 	mov	r4,r21
    5238:	01400284 	movi	r5,10
    523c:	00031bc0 	call	31bc <__modsi3>
    5240:	10800c04 	addi	r2,r2,48
    5244:	843fffc4 	addi	r16,r16,-1
    5248:	a809883a 	mov	r4,r21
    524c:	01400284 	movi	r5,10
    5250:	80800005 	stb	r2,0(r16)
    5254:	00031680 	call	3168 <__divsi3>
    5258:	01000244 	movi	r4,9
    525c:	102b883a 	mov	r21,r2
    5260:	20bff416 	blt	r4,r2,5234 <___vfprintf_internal_r+0x1df8>
    5264:	8811883a 	mov	r8,r17
    5268:	10800c04 	addi	r2,r2,48
    526c:	8023883a 	mov	r17,r16
    5270:	897fffc4 	addi	r5,r17,-1
    5274:	88bfffc5 	stb	r2,-1(r17)
    5278:	dc002c17 	ldw	r16,176(sp)
    527c:	2cc07f2e 	bgeu	r5,r19,547c <___vfprintf_internal_r+0x2040>
    5280:	d9802384 	addi	r6,sp,142
    5284:	344dc83a 	sub	r6,r6,r17
    5288:	d9002344 	addi	r4,sp,141
    528c:	998d883a 	add	r6,r19,r6
    5290:	00000106 	br	5298 <___vfprintf_internal_r+0x1e5c>
    5294:	28800003 	ldbu	r2,0(r5)
    5298:	20800005 	stb	r2,0(r4)
    529c:	21000044 	addi	r4,r4,1
    52a0:	29400044 	addi	r5,r5,1
    52a4:	21bffb1e 	bne	r4,r6,5294 <___vfprintf_internal_r+0x1e58>
    52a8:	d8802304 	addi	r2,sp,140
    52ac:	1445c83a 	sub	r2,r2,r17
    52b0:	d9402344 	addi	r5,sp,141
    52b4:	2885883a 	add	r2,r5,r2
    52b8:	14e7c83a 	sub	r19,r2,r19
    52bc:	d8803317 	ldw	r2,204(sp)
    52c0:	d8c03317 	ldw	r3,204(sp)
    52c4:	dcc03a15 	stw	r19,232(sp)
    52c8:	14e3883a 	add	r17,r2,r19
    52cc:	00800044 	movi	r2,1
    52d0:	10c04e0e 	bge	r2,r3,540c <___vfprintf_internal_r+0x1fd0>
    52d4:	8c400044 	addi	r17,r17,1
    52d8:	8839883a 	mov	fp,r17
    52dc:	88004916 	blt	r17,zero,5404 <___vfprintf_internal_r+0x1fc8>
    52e0:	d8003415 	stw	zero,208(sp)
    52e4:	003e3806 	br	4bc8 <___vfprintf_internal_r+0x178c>
    52e8:	483de91e 	bne	r9,zero,4a90 <___vfprintf_internal_r+0x1654>
    52ec:	8813883a 	mov	r9,r17
    52f0:	003de706 	br	4a90 <___vfprintf_internal_r+0x1654>
    52f4:	b809883a 	mov	r4,r23
    52f8:	b00b883a 	mov	r5,r22
    52fc:	d9801e04 	addi	r6,sp,120
    5300:	0009e140 	call	9e14 <__sprint_r>
    5304:	1039421e 	bne	r2,zero,3810 <___vfprintf_internal_r+0x3d4>
    5308:	dc002617 	ldw	r16,152(sp)
    530c:	d8c02017 	ldw	r3,128(sp)
    5310:	d8801f17 	ldw	r2,124(sp)
    5314:	da000404 	addi	r8,sp,16
    5318:	003ea006 	br	4d9c <___vfprintf_internal_r+0x1960>
    531c:	02400184 	movi	r9,6
    5320:	003ddb06 	br	4a90 <___vfprintf_internal_r+0x1654>
    5324:	00c00b44 	movi	r3,45
    5328:	2460003c 	xorhi	r17,r4,32768
    532c:	d8c02b05 	stb	r3,172(sp)
    5330:	003ddd06 	br	4aa8 <___vfprintf_internal_r+0x166c>
    5334:	d8c03417 	ldw	r3,208(sp)
    5338:	00c03d0e 	bge	zero,r3,5430 <___vfprintf_internal_r+0x1ff4>
    533c:	04400044 	movi	r17,1
    5340:	d9003317 	ldw	r4,204(sp)
    5344:	8923883a 	add	r17,r17,r4
    5348:	8839883a 	mov	fp,r17
    534c:	883e1e0e 	bge	r17,zero,4bc8 <___vfprintf_internal_r+0x178c>
    5350:	0039883a 	mov	fp,zero
    5354:	003e1c06 	br	4bc8 <___vfprintf_internal_r+0x178c>
    5358:	4d400044 	addi	r21,r9,1
    535c:	003dd906 	br	4ac4 <___vfprintf_internal_r+0x1688>
    5360:	1839883a 	mov	fp,r3
    5364:	18004716 	blt	r3,zero,5484 <___vfprintf_internal_r+0x2048>
    5368:	dc403417 	ldw	r17,208(sp)
    536c:	003e1606 	br	4bc8 <___vfprintf_internal_r+0x178c>
    5370:	00c0290e 	bge	zero,r3,5418 <___vfprintf_internal_r+0x1fdc>
    5374:	4800021e 	bne	r9,zero,5380 <___vfprintf_internal_r+0x1f44>
    5378:	e080004c 	andi	r2,fp,1
    537c:	103ff826 	beq	r2,zero,5360 <___vfprintf_internal_r+0x1f24>
    5380:	d8c03417 	ldw	r3,208(sp)
    5384:	4a400044 	addi	r9,r9,1
    5388:	1a63883a 	add	r17,r3,r9
    538c:	8839883a 	mov	fp,r17
    5390:	883e0d0e 	bge	r17,zero,4bc8 <___vfprintf_internal_r+0x178c>
    5394:	003fee06 	br	5350 <___vfprintf_internal_r+0x1f14>
    5398:	d8802117 	ldw	r2,132(sp)
    539c:	003df606 	br	4b78 <___vfprintf_internal_r+0x173c>
    53a0:	0005883a 	mov	r2,zero
    53a4:	003f5206 	br	50f0 <___vfprintf_internal_r+0x1cb4>
    53a8:	00800c04 	movi	r2,48
    53ac:	a8c00c04 	addi	r3,r21,48
    53b0:	d8802345 	stb	r2,141(sp)
    53b4:	d8c02385 	stb	r3,142(sp)
    53b8:	d88023c4 	addi	r2,sp,143
    53bc:	dcc022c4 	addi	r19,sp,139
    53c0:	003fbd06 	br	52b8 <___vfprintf_internal_r+0x1e7c>
    53c4:	d9003717 	ldw	r4,220(sp)
    53c8:	880b883a 	mov	r5,r17
    53cc:	000d883a 	mov	r6,zero
    53d0:	000f883a 	mov	r7,zero
    53d4:	da003f15 	stw	r8,252(sp)
    53d8:	da403e15 	stw	r9,248(sp)
    53dc:	da803d15 	stw	r10,244(sp)
    53e0:	000db900 	call	db90 <__eqdf2>
    53e4:	da003f17 	ldw	r8,252(sp)
    53e8:	da403e17 	ldw	r9,248(sp)
    53ec:	da803d17 	ldw	r10,244(sp)
    53f0:	103f1526 	beq	r2,zero,5048 <___vfprintf_internal_r+0x1c0c>
    53f4:	00800044 	movi	r2,1
    53f8:	1547c83a 	sub	r3,r2,r21
    53fc:	d8c02615 	stw	r3,152(sp)
    5400:	003f1206 	br	504c <___vfprintf_internal_r+0x1c10>
    5404:	0039883a 	mov	fp,zero
    5408:	003fb506 	br	52e0 <___vfprintf_internal_r+0x1ea4>
    540c:	e084703a 	and	r2,fp,r2
    5410:	103fb126 	beq	r2,zero,52d8 <___vfprintf_internal_r+0x1e9c>
    5414:	003faf06 	br	52d4 <___vfprintf_internal_r+0x1e98>
    5418:	4800081e 	bne	r9,zero,543c <___vfprintf_internal_r+0x2000>
    541c:	e080004c 	andi	r2,fp,1
    5420:	1000061e 	bne	r2,zero,543c <___vfprintf_internal_r+0x2000>
    5424:	07000044 	movi	fp,1
    5428:	e023883a 	mov	r17,fp
    542c:	003de606 	br	4bc8 <___vfprintf_internal_r+0x178c>
    5430:	04400084 	movi	r17,2
    5434:	88e3c83a 	sub	r17,r17,r3
    5438:	003fc106 	br	5340 <___vfprintf_internal_r+0x1f04>
    543c:	4c400084 	addi	r17,r9,2
    5440:	8839883a 	mov	fp,r17
    5444:	883de00e 	bge	r17,zero,4bc8 <___vfprintf_internal_r+0x178c>
    5448:	003fc106 	br	5350 <___vfprintf_internal_r+0x1f14>
    544c:	d9402d17 	ldw	r5,180(sp)
    5450:	2a400017 	ldw	r9,0(r5)
    5454:	28c00104 	addi	r3,r5,4
    5458:	d8c02d15 	stw	r3,180(sp)
    545c:	483eb50e 	bge	r9,zero,4f34 <___vfprintf_internal_r+0x1af8>
    5460:	027fffc4 	movi	r9,-1
    5464:	e4000047 	ldb	r16,1(fp)
    5468:	00385a06 	br	35d4 <___vfprintf_internal_r+0x198>
    546c:	00800b44 	movi	r2,45
    5470:	056bc83a 	sub	r21,zero,r21
    5474:	d8802305 	stb	r2,140(sp)
    5478:	003f6806 	br	521c <___vfprintf_internal_r+0x1de0>
    547c:	d8802344 	addi	r2,sp,141
    5480:	003f8d06 	br	52b8 <___vfprintf_internal_r+0x1e7c>
    5484:	0039883a 	mov	fp,zero
    5488:	003fb706 	br	5368 <___vfprintf_internal_r+0x1f2c>
    548c:	d8c02617 	ldw	r3,152(sp)
    5490:	003f5c06 	br	5204 <___vfprintf_internal_r+0x1dc8>

00005494 <__vfprintf_internal>:
    5494:	2007883a 	mov	r3,r4
    5498:	010000b4 	movhi	r4,2
    549c:	2133c204 	addi	r4,r4,-12536
    54a0:	21000017 	ldw	r4,0(r4)
    54a4:	2805883a 	mov	r2,r5
    54a8:	300f883a 	mov	r7,r6
    54ac:	180b883a 	mov	r5,r3
    54b0:	100d883a 	mov	r6,r2
    54b4:	000343c1 	jmpi	343c <___vfprintf_internal_r>

000054b8 <__sbprintf>:
    54b8:	2880030b 	ldhu	r2,12(r5)
    54bc:	2ac01917 	ldw	r11,100(r5)
    54c0:	2a80038b 	ldhu	r10,14(r5)
    54c4:	2a400717 	ldw	r9,28(r5)
    54c8:	2a000917 	ldw	r8,36(r5)
    54cc:	defee204 	addi	sp,sp,-1144
    54d0:	00c10004 	movi	r3,1024
    54d4:	dc011a15 	stw	r16,1128(sp)
    54d8:	10bfff4c 	andi	r2,r2,65533
    54dc:	2821883a 	mov	r16,r5
    54e0:	d8cb883a 	add	r5,sp,r3
    54e4:	dc811c15 	stw	r18,1136(sp)
    54e8:	dc411b15 	stw	r17,1132(sp)
    54ec:	dfc11d15 	stw	ra,1140(sp)
    54f0:	2025883a 	mov	r18,r4
    54f4:	d881030d 	sth	r2,1036(sp)
    54f8:	dac11915 	stw	r11,1124(sp)
    54fc:	da81038d 	sth	r10,1038(sp)
    5500:	da410715 	stw	r9,1052(sp)
    5504:	da010915 	stw	r8,1060(sp)
    5508:	dec10015 	stw	sp,1024(sp)
    550c:	dec10415 	stw	sp,1040(sp)
    5510:	d8c10215 	stw	r3,1032(sp)
    5514:	d8c10515 	stw	r3,1044(sp)
    5518:	d8010615 	stw	zero,1048(sp)
    551c:	000343c0 	call	343c <___vfprintf_internal_r>
    5520:	1023883a 	mov	r17,r2
    5524:	10000416 	blt	r2,zero,5538 <__sbprintf+0x80>
    5528:	9009883a 	mov	r4,r18
    552c:	d9410004 	addi	r5,sp,1024
    5530:	00072200 	call	7220 <_fflush_r>
    5534:	10000d1e 	bne	r2,zero,556c <__sbprintf+0xb4>
    5538:	d8c1030b 	ldhu	r3,1036(sp)
    553c:	18c0100c 	andi	r3,r3,64
    5540:	18000326 	beq	r3,zero,5550 <__sbprintf+0x98>
    5544:	8080030b 	ldhu	r2,12(r16)
    5548:	10801014 	ori	r2,r2,64
    554c:	8080030d 	sth	r2,12(r16)
    5550:	8805883a 	mov	r2,r17
    5554:	dfc11d17 	ldw	ra,1140(sp)
    5558:	dc811c17 	ldw	r18,1136(sp)
    555c:	dc411b17 	ldw	r17,1132(sp)
    5560:	dc011a17 	ldw	r16,1128(sp)
    5564:	dec11e04 	addi	sp,sp,1144
    5568:	f800283a 	ret
    556c:	047fffc4 	movi	r17,-1
    5570:	003ff106 	br	5538 <__sbprintf+0x80>

00005574 <__swsetup_r>:
    5574:	008000b4 	movhi	r2,2
    5578:	defffd04 	addi	sp,sp,-12
    557c:	10b3c204 	addi	r2,r2,-12536
    5580:	dc400115 	stw	r17,4(sp)
    5584:	2023883a 	mov	r17,r4
    5588:	11000017 	ldw	r4,0(r2)
    558c:	dc000015 	stw	r16,0(sp)
    5590:	dfc00215 	stw	ra,8(sp)
    5594:	2821883a 	mov	r16,r5
    5598:	20000226 	beq	r4,zero,55a4 <__swsetup_r+0x30>
    559c:	20c00e17 	ldw	r3,56(r4)
    55a0:	18003126 	beq	r3,zero,5668 <__swsetup_r+0xf4>
    55a4:	8080030b 	ldhu	r2,12(r16)
    55a8:	10c0020c 	andi	r3,r2,8
    55ac:	100d883a 	mov	r6,r2
    55b0:	18000f26 	beq	r3,zero,55f0 <__swsetup_r+0x7c>
    55b4:	80c00417 	ldw	r3,16(r16)
    55b8:	18001526 	beq	r3,zero,5610 <__swsetup_r+0x9c>
    55bc:	1100004c 	andi	r4,r2,1
    55c0:	20001c1e 	bne	r4,zero,5634 <__swsetup_r+0xc0>
    55c4:	1080008c 	andi	r2,r2,2
    55c8:	1000291e 	bne	r2,zero,5670 <__swsetup_r+0xfc>
    55cc:	80800517 	ldw	r2,20(r16)
    55d0:	80800215 	stw	r2,8(r16)
    55d4:	18001c26 	beq	r3,zero,5648 <__swsetup_r+0xd4>
    55d8:	0005883a 	mov	r2,zero
    55dc:	dfc00217 	ldw	ra,8(sp)
    55e0:	dc400117 	ldw	r17,4(sp)
    55e4:	dc000017 	ldw	r16,0(sp)
    55e8:	dec00304 	addi	sp,sp,12
    55ec:	f800283a 	ret
    55f0:	3080040c 	andi	r2,r6,16
    55f4:	10002e26 	beq	r2,zero,56b0 <__swsetup_r+0x13c>
    55f8:	3080010c 	andi	r2,r6,4
    55fc:	10001e1e 	bne	r2,zero,5678 <__swsetup_r+0x104>
    5600:	80c00417 	ldw	r3,16(r16)
    5604:	30800214 	ori	r2,r6,8
    5608:	8080030d 	sth	r2,12(r16)
    560c:	183feb1e 	bne	r3,zero,55bc <__swsetup_r+0x48>
    5610:	1140a00c 	andi	r5,r2,640
    5614:	01008004 	movi	r4,512
    5618:	293fe826 	beq	r5,r4,55bc <__swsetup_r+0x48>
    561c:	8809883a 	mov	r4,r17
    5620:	800b883a 	mov	r5,r16
    5624:	0007cd80 	call	7cd8 <__smakebuf_r>
    5628:	8080030b 	ldhu	r2,12(r16)
    562c:	80c00417 	ldw	r3,16(r16)
    5630:	003fe206 	br	55bc <__swsetup_r+0x48>
    5634:	80800517 	ldw	r2,20(r16)
    5638:	80000215 	stw	zero,8(r16)
    563c:	0085c83a 	sub	r2,zero,r2
    5640:	80800615 	stw	r2,24(r16)
    5644:	183fe41e 	bne	r3,zero,55d8 <__swsetup_r+0x64>
    5648:	80c0030b 	ldhu	r3,12(r16)
    564c:	0005883a 	mov	r2,zero
    5650:	1900200c 	andi	r4,r3,128
    5654:	203fe126 	beq	r4,zero,55dc <__swsetup_r+0x68>
    5658:	18c01014 	ori	r3,r3,64
    565c:	80c0030d 	sth	r3,12(r16)
    5660:	00bfffc4 	movi	r2,-1
    5664:	003fdd06 	br	55dc <__swsetup_r+0x68>
    5668:	000760c0 	call	760c <__sinit>
    566c:	003fcd06 	br	55a4 <__swsetup_r+0x30>
    5670:	0005883a 	mov	r2,zero
    5674:	003fd606 	br	55d0 <__swsetup_r+0x5c>
    5678:	81400c17 	ldw	r5,48(r16)
    567c:	28000626 	beq	r5,zero,5698 <__swsetup_r+0x124>
    5680:	80801004 	addi	r2,r16,64
    5684:	28800326 	beq	r5,r2,5694 <__swsetup_r+0x120>
    5688:	8809883a 	mov	r4,r17
    568c:	00077800 	call	7780 <_free_r>
    5690:	8180030b 	ldhu	r6,12(r16)
    5694:	80000c15 	stw	zero,48(r16)
    5698:	80c00417 	ldw	r3,16(r16)
    569c:	00bff6c4 	movi	r2,-37
    56a0:	118c703a 	and	r6,r2,r6
    56a4:	80000115 	stw	zero,4(r16)
    56a8:	80c00015 	stw	r3,0(r16)
    56ac:	003fd506 	br	5604 <__swsetup_r+0x90>
    56b0:	00800244 	movi	r2,9
    56b4:	88800015 	stw	r2,0(r17)
    56b8:	30801014 	ori	r2,r6,64
    56bc:	8080030d 	sth	r2,12(r16)
    56c0:	00bfffc4 	movi	r2,-1
    56c4:	003fc506 	br	55dc <__swsetup_r+0x68>

000056c8 <quorem>:
    56c8:	defff204 	addi	sp,sp,-56
    56cc:	ddc00b15 	stw	r23,44(sp)
    56d0:	20800417 	ldw	r2,16(r4)
    56d4:	2dc00417 	ldw	r23,16(r5)
    56d8:	dfc00d15 	stw	ra,52(sp)
    56dc:	df000c15 	stw	fp,48(sp)
    56e0:	dd800a15 	stw	r22,40(sp)
    56e4:	dd400915 	stw	r21,36(sp)
    56e8:	dd000815 	stw	r20,32(sp)
    56ec:	dcc00715 	stw	r19,28(sp)
    56f0:	dc800615 	stw	r18,24(sp)
    56f4:	dc400515 	stw	r17,20(sp)
    56f8:	dc000415 	stw	r16,16(sp)
    56fc:	15c07a16 	blt	r2,r23,58e8 <quorem+0x220>
    5700:	bdffffc4 	addi	r23,r23,-1
    5704:	bde9883a 	add	r20,r23,r23
    5708:	28c00504 	addi	r3,r5,20
    570c:	a529883a 	add	r20,r20,r20
    5710:	1d39883a 	add	fp,r3,r20
    5714:	24c00504 	addi	r19,r4,20
    5718:	d9400215 	stw	r5,8(sp)
    571c:	9d29883a 	add	r20,r19,r20
    5720:	e1400017 	ldw	r5,0(fp)
    5724:	d9000015 	stw	r4,0(sp)
    5728:	a1000017 	ldw	r4,0(r20)
    572c:	29400044 	addi	r5,r5,1
    5730:	d8c00115 	stw	r3,4(sp)
    5734:	dd000315 	stw	r20,12(sp)
    5738:	00032180 	call	3218 <__udivsi3>
    573c:	1025883a 	mov	r18,r2
    5740:	10003026 	beq	r2,zero,5804 <quorem+0x13c>
    5744:	dc400117 	ldw	r17,4(sp)
    5748:	9829883a 	mov	r20,r19
    574c:	002d883a 	mov	r22,zero
    5750:	0021883a 	mov	r16,zero
    5754:	8d400017 	ldw	r21,0(r17)
    5758:	900b883a 	mov	r5,r18
    575c:	8c400104 	addi	r17,r17,4
    5760:	a93fffcc 	andi	r4,r21,65535
    5764:	000129c0 	call	129c <__mulsi3>
    5768:	a808d43a 	srli	r4,r21,16
    576c:	900b883a 	mov	r5,r18
    5770:	b0ad883a 	add	r22,r22,r2
    5774:	000129c0 	call	129c <__mulsi3>
    5778:	a1000017 	ldw	r4,0(r20)
    577c:	b00cd43a 	srli	r6,r22,16
    5780:	b0ffffcc 	andi	r3,r22,65535
    5784:	217fffcc 	andi	r5,r4,65535
    5788:	2c21883a 	add	r16,r5,r16
    578c:	80c7c83a 	sub	r3,r16,r3
    5790:	2008d43a 	srli	r4,r4,16
    5794:	3085883a 	add	r2,r6,r2
    5798:	1821d43a 	srai	r16,r3,16
    579c:	117fffcc 	andi	r5,r2,65535
    57a0:	2149c83a 	sub	r4,r4,r5
    57a4:	2421883a 	add	r16,r4,r16
    57a8:	8008943a 	slli	r4,r16,16
    57ac:	18ffffcc 	andi	r3,r3,65535
    57b0:	102cd43a 	srli	r22,r2,16
    57b4:	20c8b03a 	or	r4,r4,r3
    57b8:	a1000015 	stw	r4,0(r20)
    57bc:	8021d43a 	srai	r16,r16,16
    57c0:	a5000104 	addi	r20,r20,4
    57c4:	e47fe32e 	bgeu	fp,r17,5754 <quorem+0x8c>
    57c8:	d8c00317 	ldw	r3,12(sp)
    57cc:	18800017 	ldw	r2,0(r3)
    57d0:	10000c1e 	bne	r2,zero,5804 <quorem+0x13c>
    57d4:	18bfff04 	addi	r2,r3,-4
    57d8:	9880082e 	bgeu	r19,r2,57fc <quorem+0x134>
    57dc:	18ffff17 	ldw	r3,-4(r3)
    57e0:	18000326 	beq	r3,zero,57f0 <quorem+0x128>
    57e4:	00000506 	br	57fc <quorem+0x134>
    57e8:	10c00017 	ldw	r3,0(r2)
    57ec:	1800031e 	bne	r3,zero,57fc <quorem+0x134>
    57f0:	10bfff04 	addi	r2,r2,-4
    57f4:	bdffffc4 	addi	r23,r23,-1
    57f8:	98bffb36 	bltu	r19,r2,57e8 <quorem+0x120>
    57fc:	d8c00017 	ldw	r3,0(sp)
    5800:	1dc00415 	stw	r23,16(r3)
    5804:	d9000017 	ldw	r4,0(sp)
    5808:	d9400217 	ldw	r5,8(sp)
    580c:	000930c0 	call	930c <__mcmp>
    5810:	10002816 	blt	r2,zero,58b4 <quorem+0x1ec>
    5814:	dc400117 	ldw	r17,4(sp)
    5818:	94800044 	addi	r18,r18,1
    581c:	980d883a 	mov	r6,r19
    5820:	0007883a 	mov	r3,zero
    5824:	31000017 	ldw	r4,0(r6)
    5828:	89400017 	ldw	r5,0(r17)
    582c:	31800104 	addi	r6,r6,4
    5830:	20bfffcc 	andi	r2,r4,65535
    5834:	10c7883a 	add	r3,r2,r3
    5838:	28bfffcc 	andi	r2,r5,65535
    583c:	1885c83a 	sub	r2,r3,r2
    5840:	280ad43a 	srli	r5,r5,16
    5844:	2008d43a 	srli	r4,r4,16
    5848:	1007d43a 	srai	r3,r2,16
    584c:	10bfffcc 	andi	r2,r2,65535
    5850:	2149c83a 	sub	r4,r4,r5
    5854:	20c9883a 	add	r4,r4,r3
    5858:	200a943a 	slli	r5,r4,16
    585c:	8c400104 	addi	r17,r17,4
    5860:	2007d43a 	srai	r3,r4,16
    5864:	2884b03a 	or	r2,r5,r2
    5868:	30bfff15 	stw	r2,-4(r6)
    586c:	e47fed2e 	bgeu	fp,r17,5824 <quorem+0x15c>
    5870:	bdc5883a 	add	r2,r23,r23
    5874:	1085883a 	add	r2,r2,r2
    5878:	9887883a 	add	r3,r19,r2
    587c:	18800017 	ldw	r2,0(r3)
    5880:	10000c1e 	bne	r2,zero,58b4 <quorem+0x1ec>
    5884:	18bfff04 	addi	r2,r3,-4
    5888:	9880082e 	bgeu	r19,r2,58ac <quorem+0x1e4>
    588c:	18ffff17 	ldw	r3,-4(r3)
    5890:	18000326 	beq	r3,zero,58a0 <quorem+0x1d8>
    5894:	00000506 	br	58ac <quorem+0x1e4>
    5898:	10c00017 	ldw	r3,0(r2)
    589c:	1800031e 	bne	r3,zero,58ac <quorem+0x1e4>
    58a0:	10bfff04 	addi	r2,r2,-4
    58a4:	bdffffc4 	addi	r23,r23,-1
    58a8:	98bffb36 	bltu	r19,r2,5898 <quorem+0x1d0>
    58ac:	d8c00017 	ldw	r3,0(sp)
    58b0:	1dc00415 	stw	r23,16(r3)
    58b4:	9005883a 	mov	r2,r18
    58b8:	dfc00d17 	ldw	ra,52(sp)
    58bc:	df000c17 	ldw	fp,48(sp)
    58c0:	ddc00b17 	ldw	r23,44(sp)
    58c4:	dd800a17 	ldw	r22,40(sp)
    58c8:	dd400917 	ldw	r21,36(sp)
    58cc:	dd000817 	ldw	r20,32(sp)
    58d0:	dcc00717 	ldw	r19,28(sp)
    58d4:	dc800617 	ldw	r18,24(sp)
    58d8:	dc400517 	ldw	r17,20(sp)
    58dc:	dc000417 	ldw	r16,16(sp)
    58e0:	dec00e04 	addi	sp,sp,56
    58e4:	f800283a 	ret
    58e8:	0005883a 	mov	r2,zero
    58ec:	003ff206 	br	58b8 <quorem+0x1f0>

000058f0 <_dtoa_r>:
    58f0:	20801017 	ldw	r2,64(r4)
    58f4:	deffde04 	addi	sp,sp,-136
    58f8:	dd401d15 	stw	r21,116(sp)
    58fc:	dcc01b15 	stw	r19,108(sp)
    5900:	dc801a15 	stw	r18,104(sp)
    5904:	dc401915 	stw	r17,100(sp)
    5908:	dc001815 	stw	r16,96(sp)
    590c:	dfc02115 	stw	ra,132(sp)
    5910:	df002015 	stw	fp,128(sp)
    5914:	ddc01f15 	stw	r23,124(sp)
    5918:	dd801e15 	stw	r22,120(sp)
    591c:	dd001c15 	stw	r20,112(sp)
    5920:	d9c00315 	stw	r7,12(sp)
    5924:	2021883a 	mov	r16,r4
    5928:	302b883a 	mov	r21,r6
    592c:	2825883a 	mov	r18,r5
    5930:	dc402417 	ldw	r17,144(sp)
    5934:	3027883a 	mov	r19,r6
    5938:	10000826 	beq	r2,zero,595c <_dtoa_r+0x6c>
    593c:	21801117 	ldw	r6,68(r4)
    5940:	00c00044 	movi	r3,1
    5944:	100b883a 	mov	r5,r2
    5948:	1986983a 	sll	r3,r3,r6
    594c:	11800115 	stw	r6,4(r2)
    5950:	10c00215 	stw	r3,8(r2)
    5954:	0008a240 	call	8a24 <_Bfree>
    5958:	80001015 	stw	zero,64(r16)
    595c:	a8002d16 	blt	r21,zero,5a14 <_dtoa_r+0x124>
    5960:	88000015 	stw	zero,0(r17)
    5964:	a8dffc2c 	andhi	r3,r21,32752
    5968:	009ffc34 	movhi	r2,32752
    596c:	18801b26 	beq	r3,r2,59dc <_dtoa_r+0xec>
    5970:	9009883a 	mov	r4,r18
    5974:	980b883a 	mov	r5,r19
    5978:	000d883a 	mov	r6,zero
    597c:	000f883a 	mov	r7,zero
    5980:	000db900 	call	db90 <__eqdf2>
    5984:	10002a1e 	bne	r2,zero,5a30 <_dtoa_r+0x140>
    5988:	d8c02317 	ldw	r3,140(sp)
    598c:	d9002517 	ldw	r4,148(sp)
    5990:	00800044 	movi	r2,1
    5994:	18800015 	stw	r2,0(r3)
    5998:	2001a226 	beq	r4,zero,6024 <_dtoa_r+0x734>
    599c:	008000b4 	movhi	r2,2
    59a0:	10ab0144 	addi	r2,r2,-21499
    59a4:	20800015 	stw	r2,0(r4)
    59a8:	10bfffc4 	addi	r2,r2,-1
    59ac:	dfc02117 	ldw	ra,132(sp)
    59b0:	df002017 	ldw	fp,128(sp)
    59b4:	ddc01f17 	ldw	r23,124(sp)
    59b8:	dd801e17 	ldw	r22,120(sp)
    59bc:	dd401d17 	ldw	r21,116(sp)
    59c0:	dd001c17 	ldw	r20,112(sp)
    59c4:	dcc01b17 	ldw	r19,108(sp)
    59c8:	dc801a17 	ldw	r18,104(sp)
    59cc:	dc401917 	ldw	r17,100(sp)
    59d0:	dc001817 	ldw	r16,96(sp)
    59d4:	dec02204 	addi	sp,sp,136
    59d8:	f800283a 	ret
    59dc:	d8c02317 	ldw	r3,140(sp)
    59e0:	0089c3c4 	movi	r2,9999
    59e4:	18800015 	stw	r2,0(r3)
    59e8:	90017c26 	beq	r18,zero,5fdc <_dtoa_r+0x6ec>
    59ec:	008000b4 	movhi	r2,2
    59f0:	10ab0d04 	addi	r2,r2,-21452
    59f4:	d9002517 	ldw	r4,148(sp)
    59f8:	203fec26 	beq	r4,zero,59ac <_dtoa_r+0xbc>
    59fc:	10c000c7 	ldb	r3,3(r2)
    5a00:	18017d1e 	bne	r3,zero,5ff8 <_dtoa_r+0x708>
    5a04:	10c000c4 	addi	r3,r2,3
    5a08:	d9802517 	ldw	r6,148(sp)
    5a0c:	30c00015 	stw	r3,0(r6)
    5a10:	003fe606 	br	59ac <_dtoa_r+0xbc>
    5a14:	04e00034 	movhi	r19,32768
    5a18:	9cffffc4 	addi	r19,r19,-1
    5a1c:	00800044 	movi	r2,1
    5a20:	ace6703a 	and	r19,r21,r19
    5a24:	88800015 	stw	r2,0(r17)
    5a28:	982b883a 	mov	r21,r19
    5a2c:	003fcd06 	br	5964 <_dtoa_r+0x74>
    5a30:	d8800204 	addi	r2,sp,8
    5a34:	a822d53a 	srli	r17,r21,20
    5a38:	d8800015 	stw	r2,0(sp)
    5a3c:	8009883a 	mov	r4,r16
    5a40:	900b883a 	mov	r5,r18
    5a44:	980d883a 	mov	r6,r19
    5a48:	d9c00104 	addi	r7,sp,4
    5a4c:	00096800 	call	9680 <__d2b>
    5a50:	1039883a 	mov	fp,r2
    5a54:	88016a1e 	bne	r17,zero,6000 <_dtoa_r+0x710>
    5a58:	dd000217 	ldw	r20,8(sp)
    5a5c:	dc400117 	ldw	r17,4(sp)
    5a60:	00befbc4 	movi	r2,-1041
    5a64:	a463883a 	add	r17,r20,r17
    5a68:	8882ea16 	blt	r17,r2,6614 <_dtoa_r+0xd24>
    5a6c:	00bf0384 	movi	r2,-1010
    5a70:	1445c83a 	sub	r2,r2,r17
    5a74:	89010484 	addi	r4,r17,1042
    5a78:	a8aa983a 	sll	r21,r21,r2
    5a7c:	9108d83a 	srl	r4,r18,r4
    5a80:	a908b03a 	or	r4,r21,r4
    5a84:	000dc140 	call	dc14 <__floatunsidf>
    5a88:	017f8434 	movhi	r5,65040
    5a8c:	01800044 	movi	r6,1
    5a90:	1009883a 	mov	r4,r2
    5a94:	194b883a 	add	r5,r3,r5
    5a98:	8c7fffc4 	addi	r17,r17,-1
    5a9c:	d9800f15 	stw	r6,60(sp)
    5aa0:	000d883a 	mov	r6,zero
    5aa4:	01cffe34 	movhi	r7,16376
    5aa8:	00026700 	call	2670 <__subdf3>
    5aac:	0198dbf4 	movhi	r6,25455
    5ab0:	01cff4f4 	movhi	r7,16339
    5ab4:	1009883a 	mov	r4,r2
    5ab8:	180b883a 	mov	r5,r3
    5abc:	3190d844 	addi	r6,r6,17249
    5ac0:	39e1e9c4 	addi	r7,r7,-30809
    5ac4:	0001e040 	call	1e04 <__muldf3>
    5ac8:	01a2d874 	movhi	r6,35681
    5acc:	01cff1f4 	movhi	r7,16327
    5ad0:	180b883a 	mov	r5,r3
    5ad4:	31b22cc4 	addi	r6,r6,-14157
    5ad8:	39e28a04 	addi	r7,r7,-30168
    5adc:	1009883a 	mov	r4,r2
    5ae0:	000d2f40 	call	d2f4 <__adddf3>
    5ae4:	8809883a 	mov	r4,r17
    5ae8:	102d883a 	mov	r22,r2
    5aec:	182b883a 	mov	r21,r3
    5af0:	0002fc80 	call	2fc8 <__floatsidf>
    5af4:	019427f4 	movhi	r6,20639
    5af8:	01cff4f4 	movhi	r7,16339
    5afc:	1009883a 	mov	r4,r2
    5b00:	180b883a 	mov	r5,r3
    5b04:	319e7ec4 	addi	r6,r6,31227
    5b08:	39d104c4 	addi	r7,r7,17427
    5b0c:	0001e040 	call	1e04 <__muldf3>
    5b10:	b009883a 	mov	r4,r22
    5b14:	a80b883a 	mov	r5,r21
    5b18:	100d883a 	mov	r6,r2
    5b1c:	180f883a 	mov	r7,r3
    5b20:	000d2f40 	call	d2f4 <__adddf3>
    5b24:	1009883a 	mov	r4,r2
    5b28:	180b883a 	mov	r5,r3
    5b2c:	102d883a 	mov	r22,r2
    5b30:	182b883a 	mov	r21,r3
    5b34:	0002f400 	call	2f40 <__fixdfsi>
    5b38:	b009883a 	mov	r4,r22
    5b3c:	a80b883a 	mov	r5,r21
    5b40:	000d883a 	mov	r6,zero
    5b44:	000f883a 	mov	r7,zero
    5b48:	d8800515 	stw	r2,20(sp)
    5b4c:	0001d240 	call	1d24 <__ledf2>
    5b50:	10023116 	blt	r2,zero,6418 <_dtoa_r+0xb28>
    5b54:	d8c00517 	ldw	r3,20(sp)
    5b58:	00800584 	movi	r2,22
    5b5c:	10c21f36 	bltu	r2,r3,63dc <_dtoa_r+0xaec>
    5b60:	180490fa 	slli	r2,r3,3
    5b64:	00c000b4 	movhi	r3,2
    5b68:	18eb2904 	addi	r3,r3,-21340
    5b6c:	1885883a 	add	r2,r3,r2
    5b70:	11000017 	ldw	r4,0(r2)
    5b74:	11400117 	ldw	r5,4(r2)
    5b78:	900d883a 	mov	r6,r18
    5b7c:	980f883a 	mov	r7,r19
    5b80:	0001c440 	call	1c44 <__gedf2>
    5b84:	0082a70e 	bge	zero,r2,6624 <_dtoa_r+0xd34>
    5b88:	d9000517 	ldw	r4,20(sp)
    5b8c:	d8000d15 	stw	zero,52(sp)
    5b90:	213fffc4 	addi	r4,r4,-1
    5b94:	d9000515 	stw	r4,20(sp)
    5b98:	a463c83a 	sub	r17,r20,r17
    5b9c:	8dbfffc4 	addi	r22,r17,-1
    5ba0:	b0021916 	blt	r22,zero,6408 <_dtoa_r+0xb18>
    5ba4:	d8000815 	stw	zero,32(sp)
    5ba8:	d8800517 	ldw	r2,20(sp)
    5bac:	10020e16 	blt	r2,zero,63e8 <_dtoa_r+0xaf8>
    5bb0:	b0ad883a 	add	r22,r22,r2
    5bb4:	d8800a15 	stw	r2,40(sp)
    5bb8:	d8000915 	stw	zero,36(sp)
    5bbc:	d8c00317 	ldw	r3,12(sp)
    5bc0:	00800244 	movi	r2,9
    5bc4:	10c11a36 	bltu	r2,r3,6030 <_dtoa_r+0x740>
    5bc8:	00800144 	movi	r2,5
    5bcc:	10c4fc0e 	bge	r2,r3,6fc0 <_dtoa_r+0x16d0>
    5bd0:	18ffff04 	addi	r3,r3,-4
    5bd4:	d8c00315 	stw	r3,12(sp)
    5bd8:	0029883a 	mov	r20,zero
    5bdc:	d9800317 	ldw	r6,12(sp)
    5be0:	008000c4 	movi	r2,3
    5be4:	3083bd26 	beq	r6,r2,6adc <_dtoa_r+0x11ec>
    5be8:	1183670e 	bge	r2,r6,6988 <_dtoa_r+0x1098>
    5bec:	d8c00317 	ldw	r3,12(sp)
    5bf0:	00800104 	movi	r2,4
    5bf4:	1882e726 	beq	r3,r2,6794 <_dtoa_r+0xea4>
    5bf8:	00800144 	movi	r2,5
    5bfc:	1884f21e 	bne	r3,r2,6fc8 <_dtoa_r+0x16d8>
    5c00:	00800044 	movi	r2,1
    5c04:	d8800b15 	stw	r2,44(sp)
    5c08:	d8c02217 	ldw	r3,136(sp)
    5c0c:	d9000517 	ldw	r4,20(sp)
    5c10:	1907883a 	add	r3,r3,r4
    5c14:	19800044 	addi	r6,r3,1
    5c18:	d8c00c15 	stw	r3,48(sp)
    5c1c:	d9800615 	stw	r6,24(sp)
    5c20:	0183c30e 	bge	zero,r6,6b30 <_dtoa_r+0x1240>
    5c24:	d9800617 	ldw	r6,24(sp)
    5c28:	3023883a 	mov	r17,r6
    5c2c:	80001115 	stw	zero,68(r16)
    5c30:	008005c4 	movi	r2,23
    5c34:	1184f62e 	bgeu	r2,r6,7010 <_dtoa_r+0x1720>
    5c38:	00c00044 	movi	r3,1
    5c3c:	00800104 	movi	r2,4
    5c40:	1085883a 	add	r2,r2,r2
    5c44:	11000504 	addi	r4,r2,20
    5c48:	180b883a 	mov	r5,r3
    5c4c:	18c00044 	addi	r3,r3,1
    5c50:	313ffb2e 	bgeu	r6,r4,5c40 <_dtoa_r+0x350>
    5c54:	81401115 	stw	r5,68(r16)
    5c58:	8009883a 	mov	r4,r16
    5c5c:	000897c0 	call	897c <_Balloc>
    5c60:	d8800715 	stw	r2,28(sp)
    5c64:	80801015 	stw	r2,64(r16)
    5c68:	00800384 	movi	r2,14
    5c6c:	1440fd36 	bltu	r2,r17,6064 <_dtoa_r+0x774>
    5c70:	a000fc26 	beq	r20,zero,6064 <_dtoa_r+0x774>
    5c74:	d8800517 	ldw	r2,20(sp)
    5c78:	0083b90e 	bge	zero,r2,6b60 <_dtoa_r+0x1270>
    5c7c:	d8c00517 	ldw	r3,20(sp)
    5c80:	108003cc 	andi	r2,r2,15
    5c84:	100490fa 	slli	r2,r2,3
    5c88:	182fd13a 	srai	r23,r3,4
    5c8c:	00c000b4 	movhi	r3,2
    5c90:	18eb2904 	addi	r3,r3,-21340
    5c94:	1885883a 	add	r2,r3,r2
    5c98:	b8c0040c 	andi	r3,r23,16
    5c9c:	12c00017 	ldw	r11,0(r2)
    5ca0:	12800117 	ldw	r10,4(r2)
    5ca4:	18039726 	beq	r3,zero,6b04 <_dtoa_r+0x1214>
    5ca8:	008000b4 	movhi	r2,2
    5cac:	10ab1f04 	addi	r2,r2,-21380
    5cb0:	11800817 	ldw	r6,32(r2)
    5cb4:	11c00917 	ldw	r7,36(r2)
    5cb8:	9009883a 	mov	r4,r18
    5cbc:	980b883a 	mov	r5,r19
    5cc0:	da801615 	stw	r10,88(sp)
    5cc4:	dac01515 	stw	r11,84(sp)
    5cc8:	00012c40 	call	12c4 <__divdf3>
    5ccc:	da801617 	ldw	r10,88(sp)
    5cd0:	dac01517 	ldw	r11,84(sp)
    5cd4:	bdc003cc 	andi	r23,r23,15
    5cd8:	044000c4 	movi	r17,3
    5cdc:	d8800e15 	stw	r2,56(sp)
    5ce0:	182b883a 	mov	r21,r3
    5ce4:	b8001126 	beq	r23,zero,5d2c <_dtoa_r+0x43c>
    5ce8:	050000b4 	movhi	r20,2
    5cec:	a52b1f04 	addi	r20,r20,-21380
    5cf0:	5805883a 	mov	r2,r11
    5cf4:	5007883a 	mov	r3,r10
    5cf8:	b980004c 	andi	r6,r23,1
    5cfc:	1009883a 	mov	r4,r2
    5d00:	b82fd07a 	srai	r23,r23,1
    5d04:	180b883a 	mov	r5,r3
    5d08:	30000426 	beq	r6,zero,5d1c <_dtoa_r+0x42c>
    5d0c:	a1800017 	ldw	r6,0(r20)
    5d10:	a1c00117 	ldw	r7,4(r20)
    5d14:	8c400044 	addi	r17,r17,1
    5d18:	0001e040 	call	1e04 <__muldf3>
    5d1c:	a5000204 	addi	r20,r20,8
    5d20:	b83ff51e 	bne	r23,zero,5cf8 <_dtoa_r+0x408>
    5d24:	1017883a 	mov	r11,r2
    5d28:	1815883a 	mov	r10,r3
    5d2c:	d9000e17 	ldw	r4,56(sp)
    5d30:	a80b883a 	mov	r5,r21
    5d34:	580d883a 	mov	r6,r11
    5d38:	500f883a 	mov	r7,r10
    5d3c:	00012c40 	call	12c4 <__divdf3>
    5d40:	1029883a 	mov	r20,r2
    5d44:	182b883a 	mov	r21,r3
    5d48:	d9800d17 	ldw	r6,52(sp)
    5d4c:	30000626 	beq	r6,zero,5d68 <_dtoa_r+0x478>
    5d50:	a009883a 	mov	r4,r20
    5d54:	a80b883a 	mov	r5,r21
    5d58:	000d883a 	mov	r6,zero
    5d5c:	01cffc34 	movhi	r7,16368
    5d60:	0001d240 	call	1d24 <__ledf2>
    5d64:	10043216 	blt	r2,zero,6e30 <_dtoa_r+0x1540>
    5d68:	8809883a 	mov	r4,r17
    5d6c:	0002fc80 	call	2fc8 <__floatsidf>
    5d70:	1009883a 	mov	r4,r2
    5d74:	180b883a 	mov	r5,r3
    5d78:	a00d883a 	mov	r6,r20
    5d7c:	a80f883a 	mov	r7,r21
    5d80:	0001e040 	call	1e04 <__muldf3>
    5d84:	000d883a 	mov	r6,zero
    5d88:	1009883a 	mov	r4,r2
    5d8c:	180b883a 	mov	r5,r3
    5d90:	01d00734 	movhi	r7,16412
    5d94:	000d2f40 	call	d2f4 <__adddf3>
    5d98:	1023883a 	mov	r17,r2
    5d9c:	d9800617 	ldw	r6,24(sp)
    5da0:	00bf3034 	movhi	r2,64704
    5da4:	1885883a 	add	r2,r3,r2
    5da8:	d8800e15 	stw	r2,56(sp)
    5dac:	30032e26 	beq	r6,zero,6a68 <_dtoa_r+0x1178>
    5db0:	d8c00517 	ldw	r3,20(sp)
    5db4:	da800617 	ldw	r10,24(sp)
    5db8:	d8c01215 	stw	r3,72(sp)
    5dbc:	d9000b17 	ldw	r4,44(sp)
    5dc0:	2003b026 	beq	r4,zero,6c84 <_dtoa_r+0x1394>
    5dc4:	50bfffc4 	addi	r2,r10,-1
    5dc8:	100490fa 	slli	r2,r2,3
    5dcc:	00c000b4 	movhi	r3,2
    5dd0:	18eb2904 	addi	r3,r3,-21340
    5dd4:	1885883a 	add	r2,r3,r2
    5dd8:	11800017 	ldw	r6,0(r2)
    5ddc:	11c00117 	ldw	r7,4(r2)
    5de0:	d8800717 	ldw	r2,28(sp)
    5de4:	0009883a 	mov	r4,zero
    5de8:	014ff834 	movhi	r5,16352
    5dec:	da801615 	stw	r10,88(sp)
    5df0:	15c00044 	addi	r23,r2,1
    5df4:	00012c40 	call	12c4 <__divdf3>
    5df8:	d9c00e17 	ldw	r7,56(sp)
    5dfc:	880d883a 	mov	r6,r17
    5e00:	1009883a 	mov	r4,r2
    5e04:	180b883a 	mov	r5,r3
    5e08:	00026700 	call	2670 <__subdf3>
    5e0c:	a80b883a 	mov	r5,r21
    5e10:	a009883a 	mov	r4,r20
    5e14:	d8c01015 	stw	r3,64(sp)
    5e18:	d8800e15 	stw	r2,56(sp)
    5e1c:	0002f400 	call	2f40 <__fixdfsi>
    5e20:	1009883a 	mov	r4,r2
    5e24:	d8801715 	stw	r2,92(sp)
    5e28:	0002fc80 	call	2fc8 <__floatsidf>
    5e2c:	a009883a 	mov	r4,r20
    5e30:	a80b883a 	mov	r5,r21
    5e34:	100d883a 	mov	r6,r2
    5e38:	180f883a 	mov	r7,r3
    5e3c:	00026700 	call	2670 <__subdf3>
    5e40:	da001717 	ldw	r8,92(sp)
    5e44:	1829883a 	mov	r20,r3
    5e48:	d8c00717 	ldw	r3,28(sp)
    5e4c:	d9000e17 	ldw	r4,56(sp)
    5e50:	d9401017 	ldw	r5,64(sp)
    5e54:	42000c04 	addi	r8,r8,48
    5e58:	1023883a 	mov	r17,r2
    5e5c:	1a000005 	stb	r8,0(r3)
    5e60:	880d883a 	mov	r6,r17
    5e64:	a00f883a 	mov	r7,r20
    5e68:	402b883a 	mov	r21,r8
    5e6c:	0001c440 	call	1c44 <__gedf2>
    5e70:	00844516 	blt	zero,r2,6f88 <_dtoa_r+0x1698>
    5e74:	0009883a 	mov	r4,zero
    5e78:	014ffc34 	movhi	r5,16368
    5e7c:	880d883a 	mov	r6,r17
    5e80:	a00f883a 	mov	r7,r20
    5e84:	00026700 	call	2670 <__subdf3>
    5e88:	d9000e17 	ldw	r4,56(sp)
    5e8c:	d9401017 	ldw	r5,64(sp)
    5e90:	100d883a 	mov	r6,r2
    5e94:	180f883a 	mov	r7,r3
    5e98:	0001c440 	call	1c44 <__gedf2>
    5e9c:	da801617 	ldw	r10,88(sp)
    5ea0:	00843616 	blt	zero,r2,6f7c <_dtoa_r+0x168c>
    5ea4:	00800044 	movi	r2,1
    5ea8:	12806e0e 	bge	r2,r10,6064 <_dtoa_r+0x774>
    5eac:	d9000717 	ldw	r4,28(sp)
    5eb0:	dd801315 	stw	r22,76(sp)
    5eb4:	dc001115 	stw	r16,68(sp)
    5eb8:	2295883a 	add	r10,r4,r10
    5ebc:	dcc01415 	stw	r19,80(sp)
    5ec0:	502d883a 	mov	r22,r10
    5ec4:	dcc01017 	ldw	r19,64(sp)
    5ec8:	b821883a 	mov	r16,r23
    5ecc:	dc801015 	stw	r18,64(sp)
    5ed0:	dc800e17 	ldw	r18,56(sp)
    5ed4:	00000906 	br	5efc <_dtoa_r+0x60c>
    5ed8:	00026700 	call	2670 <__subdf3>
    5edc:	1009883a 	mov	r4,r2
    5ee0:	180b883a 	mov	r5,r3
    5ee4:	900d883a 	mov	r6,r18
    5ee8:	980f883a 	mov	r7,r19
    5eec:	0001d240 	call	1d24 <__ledf2>
    5ef0:	10040e16 	blt	r2,zero,6f2c <_dtoa_r+0x163c>
    5ef4:	b821883a 	mov	r16,r23
    5ef8:	bd841026 	beq	r23,r22,6f3c <_dtoa_r+0x164c>
    5efc:	9009883a 	mov	r4,r18
    5f00:	980b883a 	mov	r5,r19
    5f04:	000d883a 	mov	r6,zero
    5f08:	01d00934 	movhi	r7,16420
    5f0c:	0001e040 	call	1e04 <__muldf3>
    5f10:	000d883a 	mov	r6,zero
    5f14:	01d00934 	movhi	r7,16420
    5f18:	8809883a 	mov	r4,r17
    5f1c:	a00b883a 	mov	r5,r20
    5f20:	1025883a 	mov	r18,r2
    5f24:	1827883a 	mov	r19,r3
    5f28:	0001e040 	call	1e04 <__muldf3>
    5f2c:	180b883a 	mov	r5,r3
    5f30:	1009883a 	mov	r4,r2
    5f34:	1823883a 	mov	r17,r3
    5f38:	1029883a 	mov	r20,r2
    5f3c:	0002f400 	call	2f40 <__fixdfsi>
    5f40:	1009883a 	mov	r4,r2
    5f44:	102b883a 	mov	r21,r2
    5f48:	0002fc80 	call	2fc8 <__floatsidf>
    5f4c:	a009883a 	mov	r4,r20
    5f50:	880b883a 	mov	r5,r17
    5f54:	100d883a 	mov	r6,r2
    5f58:	180f883a 	mov	r7,r3
    5f5c:	00026700 	call	2670 <__subdf3>
    5f60:	ad400c04 	addi	r21,r21,48
    5f64:	1009883a 	mov	r4,r2
    5f68:	180b883a 	mov	r5,r3
    5f6c:	900d883a 	mov	r6,r18
    5f70:	980f883a 	mov	r7,r19
    5f74:	85400005 	stb	r21,0(r16)
    5f78:	1023883a 	mov	r17,r2
    5f7c:	1829883a 	mov	r20,r3
    5f80:	0001d240 	call	1d24 <__ledf2>
    5f84:	bdc00044 	addi	r23,r23,1
    5f88:	0009883a 	mov	r4,zero
    5f8c:	014ffc34 	movhi	r5,16368
    5f90:	880d883a 	mov	r6,r17
    5f94:	a00f883a 	mov	r7,r20
    5f98:	103fcf0e 	bge	r2,zero,5ed8 <_dtoa_r+0x5e8>
    5f9c:	d9801217 	ldw	r6,72(sp)
    5fa0:	dc001117 	ldw	r16,68(sp)
    5fa4:	d9800515 	stw	r6,20(sp)
    5fa8:	8009883a 	mov	r4,r16
    5fac:	e00b883a 	mov	r5,fp
    5fb0:	0008a240 	call	8a24 <_Bfree>
    5fb4:	d8c00517 	ldw	r3,20(sp)
    5fb8:	d9002317 	ldw	r4,140(sp)
    5fbc:	d9802517 	ldw	r6,148(sp)
    5fc0:	b8000005 	stb	zero,0(r23)
    5fc4:	18800044 	addi	r2,r3,1
    5fc8:	20800015 	stw	r2,0(r4)
    5fcc:	30027226 	beq	r6,zero,6998 <_dtoa_r+0x10a8>
    5fd0:	35c00015 	stw	r23,0(r6)
    5fd4:	d8800717 	ldw	r2,28(sp)
    5fd8:	003e7406 	br	59ac <_dtoa_r+0xbc>
    5fdc:	00800434 	movhi	r2,16
    5fe0:	10bfffc4 	addi	r2,r2,-1
    5fe4:	a8aa703a 	and	r21,r21,r2
    5fe8:	a83e801e 	bne	r21,zero,59ec <_dtoa_r+0xfc>
    5fec:	008000b4 	movhi	r2,2
    5ff0:	10ab0a04 	addi	r2,r2,-21464
    5ff4:	003e7f06 	br	59f4 <_dtoa_r+0x104>
    5ff8:	10c00204 	addi	r3,r2,8
    5ffc:	003e8206 	br	5a08 <_dtoa_r+0x118>
    6000:	01400434 	movhi	r5,16
    6004:	297fffc4 	addi	r5,r5,-1
    6008:	994a703a 	and	r5,r19,r5
    600c:	9009883a 	mov	r4,r18
    6010:	8c7f0044 	addi	r17,r17,-1023
    6014:	294ffc34 	orhi	r5,r5,16368
    6018:	dd000217 	ldw	r20,8(sp)
    601c:	d8000f15 	stw	zero,60(sp)
    6020:	003e9f06 	br	5aa0 <_dtoa_r+0x1b0>
    6024:	008000b4 	movhi	r2,2
    6028:	10ab0104 	addi	r2,r2,-21500
    602c:	003e5f06 	br	59ac <_dtoa_r+0xbc>
    6030:	80001115 	stw	zero,68(r16)
    6034:	8009883a 	mov	r4,r16
    6038:	000b883a 	mov	r5,zero
    603c:	000897c0 	call	897c <_Balloc>
    6040:	01bfffc4 	movi	r6,-1
    6044:	d8800715 	stw	r2,28(sp)
    6048:	80801015 	stw	r2,64(r16)
    604c:	00800044 	movi	r2,1
    6050:	d9800c15 	stw	r6,48(sp)
    6054:	d8800b15 	stw	r2,44(sp)
    6058:	d9800615 	stw	r6,24(sp)
    605c:	d8002215 	stw	zero,136(sp)
    6060:	d8000315 	stw	zero,12(sp)
    6064:	d8800117 	ldw	r2,4(sp)
    6068:	10008e16 	blt	r2,zero,62a4 <_dtoa_r+0x9b4>
    606c:	d9000517 	ldw	r4,20(sp)
    6070:	00c00384 	movi	r3,14
    6074:	19008b16 	blt	r3,r4,62a4 <_dtoa_r+0x9b4>
    6078:	200490fa 	slli	r2,r4,3
    607c:	00c000b4 	movhi	r3,2
    6080:	d9802217 	ldw	r6,136(sp)
    6084:	18eb2904 	addi	r3,r3,-21340
    6088:	1885883a 	add	r2,r3,r2
    608c:	14400017 	ldw	r17,0(r2)
    6090:	15000117 	ldw	r20,4(r2)
    6094:	3001c716 	blt	r6,zero,67b4 <_dtoa_r+0xec4>
    6098:	880d883a 	mov	r6,r17
    609c:	a00f883a 	mov	r7,r20
    60a0:	9009883a 	mov	r4,r18
    60a4:	980b883a 	mov	r5,r19
    60a8:	00012c40 	call	12c4 <__divdf3>
    60ac:	180b883a 	mov	r5,r3
    60b0:	1009883a 	mov	r4,r2
    60b4:	0002f400 	call	2f40 <__fixdfsi>
    60b8:	1009883a 	mov	r4,r2
    60bc:	102d883a 	mov	r22,r2
    60c0:	0002fc80 	call	2fc8 <__floatsidf>
    60c4:	1009883a 	mov	r4,r2
    60c8:	180b883a 	mov	r5,r3
    60cc:	880d883a 	mov	r6,r17
    60d0:	a00f883a 	mov	r7,r20
    60d4:	0001e040 	call	1e04 <__muldf3>
    60d8:	9009883a 	mov	r4,r18
    60dc:	980b883a 	mov	r5,r19
    60e0:	100d883a 	mov	r6,r2
    60e4:	180f883a 	mov	r7,r3
    60e8:	00026700 	call	2670 <__subdf3>
    60ec:	d9000717 	ldw	r4,28(sp)
    60f0:	d9800617 	ldw	r6,24(sp)
    60f4:	180b883a 	mov	r5,r3
    60f8:	b0c00c04 	addi	r3,r22,48
    60fc:	20c00005 	stb	r3,0(r4)
    6100:	25c00044 	addi	r23,r4,1
    6104:	01000044 	movi	r4,1
    6108:	1011883a 	mov	r8,r2
    610c:	2807883a 	mov	r3,r5
    6110:	31003d26 	beq	r6,r4,6208 <_dtoa_r+0x918>
    6114:	000d883a 	mov	r6,zero
    6118:	01d00934 	movhi	r7,16420
    611c:	1009883a 	mov	r4,r2
    6120:	0001e040 	call	1e04 <__muldf3>
    6124:	1009883a 	mov	r4,r2
    6128:	180b883a 	mov	r5,r3
    612c:	000d883a 	mov	r6,zero
    6130:	000f883a 	mov	r7,zero
    6134:	1027883a 	mov	r19,r2
    6138:	182b883a 	mov	r21,r3
    613c:	000db900 	call	db90 <__eqdf2>
    6140:	103f9926 	beq	r2,zero,5fa8 <_dtoa_r+0x6b8>
    6144:	d8c00617 	ldw	r3,24(sp)
    6148:	d9000717 	ldw	r4,28(sp)
    614c:	b825883a 	mov	r18,r23
    6150:	18bfffc4 	addi	r2,r3,-1
    6154:	20ad883a 	add	r22,r4,r2
    6158:	dc000315 	stw	r16,12(sp)
    615c:	00000a06 	br	6188 <_dtoa_r+0x898>
    6160:	0001e040 	call	1e04 <__muldf3>
    6164:	1009883a 	mov	r4,r2
    6168:	180b883a 	mov	r5,r3
    616c:	000d883a 	mov	r6,zero
    6170:	000f883a 	mov	r7,zero
    6174:	1027883a 	mov	r19,r2
    6178:	182b883a 	mov	r21,r3
    617c:	b825883a 	mov	r18,r23
    6180:	000db900 	call	db90 <__eqdf2>
    6184:	10022626 	beq	r2,zero,6a20 <_dtoa_r+0x1130>
    6188:	880d883a 	mov	r6,r17
    618c:	a00f883a 	mov	r7,r20
    6190:	9809883a 	mov	r4,r19
    6194:	a80b883a 	mov	r5,r21
    6198:	00012c40 	call	12c4 <__divdf3>
    619c:	180b883a 	mov	r5,r3
    61a0:	1009883a 	mov	r4,r2
    61a4:	0002f400 	call	2f40 <__fixdfsi>
    61a8:	1009883a 	mov	r4,r2
    61ac:	1021883a 	mov	r16,r2
    61b0:	0002fc80 	call	2fc8 <__floatsidf>
    61b4:	1009883a 	mov	r4,r2
    61b8:	180b883a 	mov	r5,r3
    61bc:	880d883a 	mov	r6,r17
    61c0:	a00f883a 	mov	r7,r20
    61c4:	0001e040 	call	1e04 <__muldf3>
    61c8:	9809883a 	mov	r4,r19
    61cc:	a80b883a 	mov	r5,r21
    61d0:	100d883a 	mov	r6,r2
    61d4:	180f883a 	mov	r7,r3
    61d8:	00026700 	call	2670 <__subdf3>
    61dc:	82000c04 	addi	r8,r16,48
    61e0:	92000005 	stb	r8,0(r18)
    61e4:	1009883a 	mov	r4,r2
    61e8:	180b883a 	mov	r5,r3
    61ec:	000d883a 	mov	r6,zero
    61f0:	01d00934 	movhi	r7,16420
    61f4:	1011883a 	mov	r8,r2
    61f8:	bdc00044 	addi	r23,r23,1
    61fc:	95bfd81e 	bne	r18,r22,6160 <_dtoa_r+0x870>
    6200:	802d883a 	mov	r22,r16
    6204:	dc000317 	ldw	r16,12(sp)
    6208:	4009883a 	mov	r4,r8
    620c:	180b883a 	mov	r5,r3
    6210:	400d883a 	mov	r6,r8
    6214:	180f883a 	mov	r7,r3
    6218:	000d2f40 	call	d2f4 <__adddf3>
    621c:	8809883a 	mov	r4,r17
    6220:	a00b883a 	mov	r5,r20
    6224:	100d883a 	mov	r6,r2
    6228:	180f883a 	mov	r7,r3
    622c:	1027883a 	mov	r19,r2
    6230:	1825883a 	mov	r18,r3
    6234:	0001d240 	call	1d24 <__ledf2>
    6238:	10000816 	blt	r2,zero,625c <_dtoa_r+0x96c>
    623c:	8809883a 	mov	r4,r17
    6240:	a00b883a 	mov	r5,r20
    6244:	980d883a 	mov	r6,r19
    6248:	900f883a 	mov	r7,r18
    624c:	000db900 	call	db90 <__eqdf2>
    6250:	103f551e 	bne	r2,zero,5fa8 <_dtoa_r+0x6b8>
    6254:	b580004c 	andi	r22,r22,1
    6258:	b03f5326 	beq	r22,zero,5fa8 <_dtoa_r+0x6b8>
    625c:	bd7fffc3 	ldbu	r21,-1(r23)
    6260:	b8bfffc4 	addi	r2,r23,-1
    6264:	1007883a 	mov	r3,r2
    6268:	01400e44 	movi	r5,57
    626c:	d9800717 	ldw	r6,28(sp)
    6270:	00000506 	br	6288 <_dtoa_r+0x998>
    6274:	18ffffc4 	addi	r3,r3,-1
    6278:	30825e26 	beq	r6,r2,6bf4 <_dtoa_r+0x1304>
    627c:	1d400003 	ldbu	r21,0(r3)
    6280:	102f883a 	mov	r23,r2
    6284:	10bfffc4 	addi	r2,r2,-1
    6288:	a9003fcc 	andi	r4,r21,255
    628c:	2100201c 	xori	r4,r4,128
    6290:	213fe004 	addi	r4,r4,-128
    6294:	217ff726 	beq	r4,r5,6274 <_dtoa_r+0x984>
    6298:	aa000044 	addi	r8,r21,1
    629c:	12000005 	stb	r8,0(r2)
    62a0:	003f4106 	br	5fa8 <_dtoa_r+0x6b8>
    62a4:	d8c00b17 	ldw	r3,44(sp)
    62a8:	18006726 	beq	r3,zero,6448 <_dtoa_r+0xb58>
    62ac:	d9000317 	ldw	r4,12(sp)
    62b0:	00c00044 	movi	r3,1
    62b4:	19016a0e 	bge	r3,r4,6860 <_dtoa_r+0xf70>
    62b8:	d8800617 	ldw	r2,24(sp)
    62bc:	d8c00917 	ldw	r3,36(sp)
    62c0:	157fffc4 	addi	r21,r2,-1
    62c4:	1d420716 	blt	r3,r21,6ae4 <_dtoa_r+0x11f4>
    62c8:	1d6bc83a 	sub	r21,r3,r21
    62cc:	d8800617 	ldw	r2,24(sp)
    62d0:	1002c716 	blt	r2,zero,6df0 <_dtoa_r+0x1500>
    62d4:	dd000817 	ldw	r20,32(sp)
    62d8:	d8800617 	ldw	r2,24(sp)
    62dc:	d9800817 	ldw	r6,32(sp)
    62e0:	8009883a 	mov	r4,r16
    62e4:	01400044 	movi	r5,1
    62e8:	308d883a 	add	r6,r6,r2
    62ec:	d9800815 	stw	r6,32(sp)
    62f0:	b0ad883a 	add	r22,r22,r2
    62f4:	0008db00 	call	8db0 <__i2b>
    62f8:	1023883a 	mov	r17,r2
    62fc:	a0000826 	beq	r20,zero,6320 <_dtoa_r+0xa30>
    6300:	0580070e 	bge	zero,r22,6320 <_dtoa_r+0xa30>
    6304:	b005883a 	mov	r2,r22
    6308:	a5812016 	blt	r20,r22,678c <_dtoa_r+0xe9c>
    630c:	d8c00817 	ldw	r3,32(sp)
    6310:	a0a9c83a 	sub	r20,r20,r2
    6314:	b0adc83a 	sub	r22,r22,r2
    6318:	1887c83a 	sub	r3,r3,r2
    631c:	d8c00815 	stw	r3,32(sp)
    6320:	d9000917 	ldw	r4,36(sp)
    6324:	0100140e 	bge	zero,r4,6378 <_dtoa_r+0xa88>
    6328:	d9800b17 	ldw	r6,44(sp)
    632c:	3001e526 	beq	r6,zero,6ac4 <_dtoa_r+0x11d4>
    6330:	05400e0e 	bge	zero,r21,636c <_dtoa_r+0xa7c>
    6334:	880b883a 	mov	r5,r17
    6338:	8009883a 	mov	r4,r16
    633c:	a80d883a 	mov	r6,r21
    6340:	000907c0 	call	907c <__pow5mult>
    6344:	e00d883a 	mov	r6,fp
    6348:	8009883a 	mov	r4,r16
    634c:	100b883a 	mov	r5,r2
    6350:	1023883a 	mov	r17,r2
    6354:	0008dec0 	call	8dec <__multiply>
    6358:	102f883a 	mov	r23,r2
    635c:	e00b883a 	mov	r5,fp
    6360:	8009883a 	mov	r4,r16
    6364:	0008a240 	call	8a24 <_Bfree>
    6368:	b839883a 	mov	fp,r23
    636c:	d8800917 	ldw	r2,36(sp)
    6370:	154dc83a 	sub	r6,r2,r21
    6374:	3001281e 	bne	r6,zero,6818 <_dtoa_r+0xf28>
    6378:	05c00044 	movi	r23,1
    637c:	8009883a 	mov	r4,r16
    6380:	b80b883a 	mov	r5,r23
    6384:	0008db00 	call	8db0 <__i2b>
    6388:	d8c00a17 	ldw	r3,40(sp)
    638c:	102b883a 	mov	r21,r2
    6390:	00c0310e 	bge	zero,r3,6458 <_dtoa_r+0xb68>
    6394:	8009883a 	mov	r4,r16
    6398:	100b883a 	mov	r5,r2
    639c:	180d883a 	mov	r6,r3
    63a0:	000907c0 	call	907c <__pow5mult>
    63a4:	d9000317 	ldw	r4,12(sp)
    63a8:	102b883a 	mov	r21,r2
    63ac:	b9011f0e 	bge	r23,r4,682c <_dtoa_r+0xf3c>
    63b0:	0027883a 	mov	r19,zero
    63b4:	a8800417 	ldw	r2,16(r21)
    63b8:	10800104 	addi	r2,r2,4
    63bc:	1085883a 	add	r2,r2,r2
    63c0:	1085883a 	add	r2,r2,r2
    63c4:	a885883a 	add	r2,r21,r2
    63c8:	11000017 	ldw	r4,0(r2)
    63cc:	0008c980 	call	8c98 <__hi0bits>
    63d0:	00c00804 	movi	r3,32
    63d4:	1885c83a 	sub	r2,r3,r2
    63d8:	00002506 	br	6470 <_dtoa_r+0xb80>
    63dc:	01800044 	movi	r6,1
    63e0:	d9800d15 	stw	r6,52(sp)
    63e4:	003dec06 	br	5b98 <_dtoa_r+0x2a8>
    63e8:	d8c00817 	ldw	r3,32(sp)
    63ec:	d9000517 	ldw	r4,20(sp)
    63f0:	d8000a15 	stw	zero,40(sp)
    63f4:	1907c83a 	sub	r3,r3,r4
    63f8:	010dc83a 	sub	r6,zero,r4
    63fc:	d8c00815 	stw	r3,32(sp)
    6400:	d9800915 	stw	r6,36(sp)
    6404:	003ded06 	br	5bbc <_dtoa_r+0x2cc>
    6408:	05adc83a 	sub	r22,zero,r22
    640c:	dd800815 	stw	r22,32(sp)
    6410:	002d883a 	mov	r22,zero
    6414:	003de406 	br	5ba8 <_dtoa_r+0x2b8>
    6418:	d9000517 	ldw	r4,20(sp)
    641c:	0002fc80 	call	2fc8 <__floatsidf>
    6420:	1009883a 	mov	r4,r2
    6424:	180b883a 	mov	r5,r3
    6428:	b00d883a 	mov	r6,r22
    642c:	a80f883a 	mov	r7,r21
    6430:	000db900 	call	db90 <__eqdf2>
    6434:	103dc726 	beq	r2,zero,5b54 <_dtoa_r+0x264>
    6438:	d8800517 	ldw	r2,20(sp)
    643c:	10bfffc4 	addi	r2,r2,-1
    6440:	d8800515 	stw	r2,20(sp)
    6444:	003dc306 	br	5b54 <_dtoa_r+0x264>
    6448:	dd400917 	ldw	r21,36(sp)
    644c:	dd000817 	ldw	r20,32(sp)
    6450:	0023883a 	mov	r17,zero
    6454:	003fa906 	br	62fc <_dtoa_r+0xa0c>
    6458:	d9800317 	ldw	r6,12(sp)
    645c:	b981670e 	bge	r23,r6,69fc <_dtoa_r+0x110c>
    6460:	0027883a 	mov	r19,zero
    6464:	d8c00a17 	ldw	r3,40(sp)
    6468:	183fd21e 	bne	r3,zero,63b4 <_dtoa_r+0xac4>
    646c:	00800044 	movi	r2,1
    6470:	1585883a 	add	r2,r2,r22
    6474:	108007cc 	andi	r2,r2,31
    6478:	10005f26 	beq	r2,zero,65f8 <_dtoa_r+0xd08>
    647c:	00c00804 	movi	r3,32
    6480:	1887c83a 	sub	r3,r3,r2
    6484:	01000104 	movi	r4,4
    6488:	20c2dd0e 	bge	r4,r3,7000 <_dtoa_r+0x1710>
    648c:	d9000817 	ldw	r4,32(sp)
    6490:	00c00704 	movi	r3,28
    6494:	1885c83a 	sub	r2,r3,r2
    6498:	2089883a 	add	r4,r4,r2
    649c:	d9000815 	stw	r4,32(sp)
    64a0:	a0a9883a 	add	r20,r20,r2
    64a4:	b0ad883a 	add	r22,r22,r2
    64a8:	d8800817 	ldw	r2,32(sp)
    64ac:	0080050e 	bge	zero,r2,64c4 <_dtoa_r+0xbd4>
    64b0:	e00b883a 	mov	r5,fp
    64b4:	8009883a 	mov	r4,r16
    64b8:	100d883a 	mov	r6,r2
    64bc:	00091bc0 	call	91bc <__lshift>
    64c0:	1039883a 	mov	fp,r2
    64c4:	0580050e 	bge	zero,r22,64dc <_dtoa_r+0xbec>
    64c8:	a80b883a 	mov	r5,r21
    64cc:	8009883a 	mov	r4,r16
    64d0:	b00d883a 	mov	r6,r22
    64d4:	00091bc0 	call	91bc <__lshift>
    64d8:	102b883a 	mov	r21,r2
    64dc:	d8c00d17 	ldw	r3,52(sp)
    64e0:	1801161e 	bne	r3,zero,693c <_dtoa_r+0x104c>
    64e4:	d8c00617 	ldw	r3,24(sp)
    64e8:	00c12d0e 	bge	zero,r3,69a0 <_dtoa_r+0x10b0>
    64ec:	d8c00b17 	ldw	r3,44(sp)
    64f0:	1800571e 	bne	r3,zero,6650 <_dtoa_r+0xd60>
    64f4:	dc800717 	ldw	r18,28(sp)
    64f8:	dcc00617 	ldw	r19,24(sp)
    64fc:	9029883a 	mov	r20,r18
    6500:	00000206 	br	650c <_dtoa_r+0xc1c>
    6504:	0008a4c0 	call	8a4c <__multadd>
    6508:	1039883a 	mov	fp,r2
    650c:	e009883a 	mov	r4,fp
    6510:	a80b883a 	mov	r5,r21
    6514:	00056c80 	call	56c8 <quorem>
    6518:	10800c04 	addi	r2,r2,48
    651c:	90800005 	stb	r2,0(r18)
    6520:	94800044 	addi	r18,r18,1
    6524:	9507c83a 	sub	r3,r18,r20
    6528:	8009883a 	mov	r4,r16
    652c:	e00b883a 	mov	r5,fp
    6530:	01800284 	movi	r6,10
    6534:	000f883a 	mov	r7,zero
    6538:	1cfff216 	blt	r3,r19,6504 <_dtoa_r+0xc14>
    653c:	1011883a 	mov	r8,r2
    6540:	d8800617 	ldw	r2,24(sp)
    6544:	00822e0e 	bge	zero,r2,6e00 <_dtoa_r+0x1510>
    6548:	d9000717 	ldw	r4,28(sp)
    654c:	0025883a 	mov	r18,zero
    6550:	20af883a 	add	r23,r4,r2
    6554:	e00b883a 	mov	r5,fp
    6558:	01800044 	movi	r6,1
    655c:	8009883a 	mov	r4,r16
    6560:	da001715 	stw	r8,92(sp)
    6564:	00091bc0 	call	91bc <__lshift>
    6568:	1009883a 	mov	r4,r2
    656c:	a80b883a 	mov	r5,r21
    6570:	1039883a 	mov	fp,r2
    6574:	000930c0 	call	930c <__mcmp>
    6578:	da001717 	ldw	r8,92(sp)
    657c:	00816e0e 	bge	zero,r2,6b38 <_dtoa_r+0x1248>
    6580:	b93fffc3 	ldbu	r4,-1(r23)
    6584:	b8bfffc4 	addi	r2,r23,-1
    6588:	1007883a 	mov	r3,r2
    658c:	01800e44 	movi	r6,57
    6590:	d9c00717 	ldw	r7,28(sp)
    6594:	00000506 	br	65ac <_dtoa_r+0xcbc>
    6598:	18ffffc4 	addi	r3,r3,-1
    659c:	38811926 	beq	r7,r2,6a04 <_dtoa_r+0x1114>
    65a0:	19000003 	ldbu	r4,0(r3)
    65a4:	102f883a 	mov	r23,r2
    65a8:	10bfffc4 	addi	r2,r2,-1
    65ac:	21403fcc 	andi	r5,r4,255
    65b0:	2940201c 	xori	r5,r5,128
    65b4:	297fe004 	addi	r5,r5,-128
    65b8:	29bff726 	beq	r5,r6,6598 <_dtoa_r+0xca8>
    65bc:	21000044 	addi	r4,r4,1
    65c0:	11000005 	stb	r4,0(r2)
    65c4:	8009883a 	mov	r4,r16
    65c8:	a80b883a 	mov	r5,r21
    65cc:	0008a240 	call	8a24 <_Bfree>
    65d0:	883e7526 	beq	r17,zero,5fa8 <_dtoa_r+0x6b8>
    65d4:	90000426 	beq	r18,zero,65e8 <_dtoa_r+0xcf8>
    65d8:	94400326 	beq	r18,r17,65e8 <_dtoa_r+0xcf8>
    65dc:	8009883a 	mov	r4,r16
    65e0:	900b883a 	mov	r5,r18
    65e4:	0008a240 	call	8a24 <_Bfree>
    65e8:	8009883a 	mov	r4,r16
    65ec:	880b883a 	mov	r5,r17
    65f0:	0008a240 	call	8a24 <_Bfree>
    65f4:	003e6c06 	br	5fa8 <_dtoa_r+0x6b8>
    65f8:	00800704 	movi	r2,28
    65fc:	d9800817 	ldw	r6,32(sp)
    6600:	a0a9883a 	add	r20,r20,r2
    6604:	b0ad883a 	add	r22,r22,r2
    6608:	308d883a 	add	r6,r6,r2
    660c:	d9800815 	stw	r6,32(sp)
    6610:	003fa506 	br	64a8 <_dtoa_r+0xbb8>
    6614:	013efb84 	movi	r4,-1042
    6618:	246bc83a 	sub	r21,r4,r17
    661c:	9548983a 	sll	r4,r18,r21
    6620:	003d1806 	br	5a84 <_dtoa_r+0x194>
    6624:	d8000d15 	stw	zero,52(sp)
    6628:	003d5b06 	br	5b98 <_dtoa_r+0x2a8>
    662c:	880b883a 	mov	r5,r17
    6630:	8009883a 	mov	r4,r16
    6634:	01800284 	movi	r6,10
    6638:	000f883a 	mov	r7,zero
    663c:	0008a4c0 	call	8a4c <__multadd>
    6640:	1023883a 	mov	r17,r2
    6644:	d8800c17 	ldw	r2,48(sp)
    6648:	0082550e 	bge	zero,r2,6fa0 <_dtoa_r+0x16b0>
    664c:	d8800615 	stw	r2,24(sp)
    6650:	0500050e 	bge	zero,r20,6668 <_dtoa_r+0xd78>
    6654:	880b883a 	mov	r5,r17
    6658:	8009883a 	mov	r4,r16
    665c:	a00d883a 	mov	r6,r20
    6660:	00091bc0 	call	91bc <__lshift>
    6664:	1023883a 	mov	r17,r2
    6668:	98016a1e 	bne	r19,zero,6c14 <_dtoa_r+0x1324>
    666c:	8829883a 	mov	r20,r17
    6670:	d9000617 	ldw	r4,24(sp)
    6674:	dcc00717 	ldw	r19,28(sp)
    6678:	9480004c 	andi	r18,r18,1
    667c:	20bfffc4 	addi	r2,r4,-1
    6680:	9885883a 	add	r2,r19,r2
    6684:	d8800415 	stw	r2,16(sp)
    6688:	dc800615 	stw	r18,24(sp)
    668c:	e009883a 	mov	r4,fp
    6690:	a80b883a 	mov	r5,r21
    6694:	00056c80 	call	56c8 <quorem>
    6698:	e009883a 	mov	r4,fp
    669c:	880b883a 	mov	r5,r17
    66a0:	102f883a 	mov	r23,r2
    66a4:	000930c0 	call	930c <__mcmp>
    66a8:	8009883a 	mov	r4,r16
    66ac:	a80b883a 	mov	r5,r21
    66b0:	a00d883a 	mov	r6,r20
    66b4:	102d883a 	mov	r22,r2
    66b8:	000936c0 	call	936c <__mdiff>
    66bc:	1007883a 	mov	r3,r2
    66c0:	10800317 	ldw	r2,12(r2)
    66c4:	bc800c04 	addi	r18,r23,48
    66c8:	1000971e 	bne	r2,zero,6928 <_dtoa_r+0x1038>
    66cc:	180b883a 	mov	r5,r3
    66d0:	e009883a 	mov	r4,fp
    66d4:	d8c01515 	stw	r3,84(sp)
    66d8:	000930c0 	call	930c <__mcmp>
    66dc:	d8c01517 	ldw	r3,84(sp)
    66e0:	8009883a 	mov	r4,r16
    66e4:	d8801515 	stw	r2,84(sp)
    66e8:	180b883a 	mov	r5,r3
    66ec:	0008a240 	call	8a24 <_Bfree>
    66f0:	d8801517 	ldw	r2,84(sp)
    66f4:	1000041e 	bne	r2,zero,6708 <_dtoa_r+0xe18>
    66f8:	d9800317 	ldw	r6,12(sp)
    66fc:	3000021e 	bne	r6,zero,6708 <_dtoa_r+0xe18>
    6700:	d8c00617 	ldw	r3,24(sp)
    6704:	18007626 	beq	r3,zero,68e0 <_dtoa_r+0xff0>
    6708:	b0005b16 	blt	r22,zero,6878 <_dtoa_r+0xf88>
    670c:	b000041e 	bne	r22,zero,6720 <_dtoa_r+0xe30>
    6710:	d9000317 	ldw	r4,12(sp)
    6714:	2000021e 	bne	r4,zero,6720 <_dtoa_r+0xe30>
    6718:	d8c00617 	ldw	r3,24(sp)
    671c:	18005626 	beq	r3,zero,6878 <_dtoa_r+0xf88>
    6720:	00814d16 	blt	zero,r2,6c58 <_dtoa_r+0x1368>
    6724:	d8c00417 	ldw	r3,16(sp)
    6728:	9d800044 	addi	r22,r19,1
    672c:	9c800005 	stb	r18,0(r19)
    6730:	b02f883a 	mov	r23,r22
    6734:	98c14c26 	beq	r19,r3,6c68 <_dtoa_r+0x1378>
    6738:	e00b883a 	mov	r5,fp
    673c:	8009883a 	mov	r4,r16
    6740:	01800284 	movi	r6,10
    6744:	000f883a 	mov	r7,zero
    6748:	0008a4c0 	call	8a4c <__multadd>
    674c:	1039883a 	mov	fp,r2
    6750:	8d006d26 	beq	r17,r20,6908 <_dtoa_r+0x1018>
    6754:	880b883a 	mov	r5,r17
    6758:	01800284 	movi	r6,10
    675c:	000f883a 	mov	r7,zero
    6760:	8009883a 	mov	r4,r16
    6764:	0008a4c0 	call	8a4c <__multadd>
    6768:	a00b883a 	mov	r5,r20
    676c:	8009883a 	mov	r4,r16
    6770:	01800284 	movi	r6,10
    6774:	000f883a 	mov	r7,zero
    6778:	1023883a 	mov	r17,r2
    677c:	0008a4c0 	call	8a4c <__multadd>
    6780:	1029883a 	mov	r20,r2
    6784:	b027883a 	mov	r19,r22
    6788:	003fc006 	br	668c <_dtoa_r+0xd9c>
    678c:	a005883a 	mov	r2,r20
    6790:	003ede06 	br	630c <_dtoa_r+0xa1c>
    6794:	01000044 	movi	r4,1
    6798:	d9000b15 	stw	r4,44(sp)
    679c:	d9802217 	ldw	r6,136(sp)
    67a0:	0180dc0e 	bge	zero,r6,6b14 <_dtoa_r+0x1224>
    67a4:	3023883a 	mov	r17,r6
    67a8:	d9800c15 	stw	r6,48(sp)
    67ac:	d9800615 	stw	r6,24(sp)
    67b0:	003d1e06 	br	5c2c <_dtoa_r+0x33c>
    67b4:	d8800617 	ldw	r2,24(sp)
    67b8:	00be3716 	blt	zero,r2,6098 <_dtoa_r+0x7a8>
    67bc:	1000be1e 	bne	r2,zero,6ab8 <_dtoa_r+0x11c8>
    67c0:	8809883a 	mov	r4,r17
    67c4:	a00b883a 	mov	r5,r20
    67c8:	000d883a 	mov	r6,zero
    67cc:	01d00534 	movhi	r7,16404
    67d0:	0001e040 	call	1e04 <__muldf3>
    67d4:	1009883a 	mov	r4,r2
    67d8:	180b883a 	mov	r5,r3
    67dc:	900d883a 	mov	r6,r18
    67e0:	980f883a 	mov	r7,r19
    67e4:	0001c440 	call	1c44 <__gedf2>
    67e8:	002b883a 	mov	r21,zero
    67ec:	0023883a 	mov	r17,zero
    67f0:	10007a16 	blt	r2,zero,69dc <_dtoa_r+0x10ec>
    67f4:	d9002217 	ldw	r4,136(sp)
    67f8:	ddc00717 	ldw	r23,28(sp)
    67fc:	0108303a 	nor	r4,zero,r4
    6800:	d9000515 	stw	r4,20(sp)
    6804:	8009883a 	mov	r4,r16
    6808:	a80b883a 	mov	r5,r21
    680c:	0008a240 	call	8a24 <_Bfree>
    6810:	883f751e 	bne	r17,zero,65e8 <_dtoa_r+0xcf8>
    6814:	003de406 	br	5fa8 <_dtoa_r+0x6b8>
    6818:	e00b883a 	mov	r5,fp
    681c:	8009883a 	mov	r4,r16
    6820:	000907c0 	call	907c <__pow5mult>
    6824:	1039883a 	mov	fp,r2
    6828:	003ed306 	br	6378 <_dtoa_r+0xa88>
    682c:	903ee01e 	bne	r18,zero,63b0 <_dtoa_r+0xac0>
    6830:	00800434 	movhi	r2,16
    6834:	10bfffc4 	addi	r2,r2,-1
    6838:	9884703a 	and	r2,r19,r2
    683c:	103f081e 	bne	r2,zero,6460 <_dtoa_r+0xb70>
    6840:	9cdffc2c 	andhi	r19,r19,32752
    6844:	983f0626 	beq	r19,zero,6460 <_dtoa_r+0xb70>
    6848:	d8800817 	ldw	r2,32(sp)
    684c:	b5800044 	addi	r22,r22,1
    6850:	04c00044 	movi	r19,1
    6854:	10800044 	addi	r2,r2,1
    6858:	d8800815 	stw	r2,32(sp)
    685c:	003f0106 	br	6464 <_dtoa_r+0xb74>
    6860:	d9800f17 	ldw	r6,60(sp)
    6864:	30016826 	beq	r6,zero,6e08 <_dtoa_r+0x1518>
    6868:	10810cc4 	addi	r2,r2,1075
    686c:	dd400917 	ldw	r21,36(sp)
    6870:	dd000817 	ldw	r20,32(sp)
    6874:	003e9906 	br	62dc <_dtoa_r+0x9ec>
    6878:	9011883a 	mov	r8,r18
    687c:	4007883a 	mov	r3,r8
    6880:	e02d883a 	mov	r22,fp
    6884:	0080100e 	bge	zero,r2,68c8 <_dtoa_r+0xfd8>
    6888:	01800044 	movi	r6,1
    688c:	8009883a 	mov	r4,r16
    6890:	e00b883a 	mov	r5,fp
    6894:	da001515 	stw	r8,84(sp)
    6898:	da001715 	stw	r8,92(sp)
    689c:	00091bc0 	call	91bc <__lshift>
    68a0:	1009883a 	mov	r4,r2
    68a4:	a80b883a 	mov	r5,r21
    68a8:	102d883a 	mov	r22,r2
    68ac:	000930c0 	call	930c <__mcmp>
    68b0:	d8c01517 	ldw	r3,84(sp)
    68b4:	da001717 	ldw	r8,92(sp)
    68b8:	0081a50e 	bge	zero,r2,6f50 <_dtoa_r+0x1660>
    68bc:	00800e44 	movi	r2,57
    68c0:	40817b26 	beq	r8,r2,6eb0 <_dtoa_r+0x15c0>
    68c4:	40c00044 	addi	r3,r8,1
    68c8:	8825883a 	mov	r18,r17
    68cc:	9dc00044 	addi	r23,r19,1
    68d0:	98c00005 	stb	r3,0(r19)
    68d4:	a023883a 	mov	r17,r20
    68d8:	b039883a 	mov	fp,r22
    68dc:	003f3906 	br	65c4 <_dtoa_r+0xcd4>
    68e0:	00800e44 	movi	r2,57
    68e4:	9011883a 	mov	r8,r18
    68e8:	90817226 	beq	r18,r2,6eb4 <_dtoa_r+0x15c4>
    68ec:	0580010e 	bge	zero,r22,68f4 <_dtoa_r+0x1004>
    68f0:	ba000c44 	addi	r8,r23,49
    68f4:	8825883a 	mov	r18,r17
    68f8:	9dc00044 	addi	r23,r19,1
    68fc:	9a000005 	stb	r8,0(r19)
    6900:	a023883a 	mov	r17,r20
    6904:	003f2f06 	br	65c4 <_dtoa_r+0xcd4>
    6908:	880b883a 	mov	r5,r17
    690c:	8009883a 	mov	r4,r16
    6910:	01800284 	movi	r6,10
    6914:	000f883a 	mov	r7,zero
    6918:	0008a4c0 	call	8a4c <__multadd>
    691c:	1023883a 	mov	r17,r2
    6920:	1029883a 	mov	r20,r2
    6924:	003f9706 	br	6784 <_dtoa_r+0xe94>
    6928:	8009883a 	mov	r4,r16
    692c:	180b883a 	mov	r5,r3
    6930:	0008a240 	call	8a24 <_Bfree>
    6934:	00800044 	movi	r2,1
    6938:	003f7306 	br	6708 <_dtoa_r+0xe18>
    693c:	e009883a 	mov	r4,fp
    6940:	a80b883a 	mov	r5,r21
    6944:	000930c0 	call	930c <__mcmp>
    6948:	103ee60e 	bge	r2,zero,64e4 <_dtoa_r+0xbf4>
    694c:	8009883a 	mov	r4,r16
    6950:	e00b883a 	mov	r5,fp
    6954:	01800284 	movi	r6,10
    6958:	000f883a 	mov	r7,zero
    695c:	0008a4c0 	call	8a4c <__multadd>
    6960:	d9000517 	ldw	r4,20(sp)
    6964:	d9800b17 	ldw	r6,44(sp)
    6968:	1039883a 	mov	fp,r2
    696c:	213fffc4 	addi	r4,r4,-1
    6970:	d9000515 	stw	r4,20(sp)
    6974:	303f2d1e 	bne	r6,zero,662c <_dtoa_r+0xd3c>
    6978:	d9000c17 	ldw	r4,48(sp)
    697c:	0101780e 	bge	zero,r4,6f60 <_dtoa_r+0x1670>
    6980:	d9000615 	stw	r4,24(sp)
    6984:	003edb06 	br	64f4 <_dtoa_r+0xc04>
    6988:	00800084 	movi	r2,2
    698c:	30818e1e 	bne	r6,r2,6fc8 <_dtoa_r+0x16d8>
    6990:	d8000b15 	stw	zero,44(sp)
    6994:	003f8106 	br	679c <_dtoa_r+0xeac>
    6998:	d8800717 	ldw	r2,28(sp)
    699c:	003c0306 	br	59ac <_dtoa_r+0xbc>
    69a0:	d9000317 	ldw	r4,12(sp)
    69a4:	00800084 	movi	r2,2
    69a8:	113ed00e 	bge	r2,r4,64ec <_dtoa_r+0xbfc>
    69ac:	d8c00617 	ldw	r3,24(sp)
    69b0:	183f901e 	bne	r3,zero,67f4 <_dtoa_r+0xf04>
    69b4:	a80b883a 	mov	r5,r21
    69b8:	8009883a 	mov	r4,r16
    69bc:	01800144 	movi	r6,5
    69c0:	000f883a 	mov	r7,zero
    69c4:	0008a4c0 	call	8a4c <__multadd>
    69c8:	e009883a 	mov	r4,fp
    69cc:	100b883a 	mov	r5,r2
    69d0:	102b883a 	mov	r21,r2
    69d4:	000930c0 	call	930c <__mcmp>
    69d8:	00bf860e 	bge	zero,r2,67f4 <_dtoa_r+0xf04>
    69dc:	d9800717 	ldw	r6,28(sp)
    69e0:	00800c44 	movi	r2,49
    69e4:	30800005 	stb	r2,0(r6)
    69e8:	d8800517 	ldw	r2,20(sp)
    69ec:	35c00044 	addi	r23,r6,1
    69f0:	10800044 	addi	r2,r2,1
    69f4:	d8800515 	stw	r2,20(sp)
    69f8:	003f8206 	br	6804 <_dtoa_r+0xf14>
    69fc:	903e981e 	bne	r18,zero,6460 <_dtoa_r+0xb70>
    6a00:	003f8b06 	br	6830 <_dtoa_r+0xf40>
    6a04:	d9800517 	ldw	r6,20(sp)
    6a08:	d8c00717 	ldw	r3,28(sp)
    6a0c:	00800c44 	movi	r2,49
    6a10:	31800044 	addi	r6,r6,1
    6a14:	d9800515 	stw	r6,20(sp)
    6a18:	18800005 	stb	r2,0(r3)
    6a1c:	003ee906 	br	65c4 <_dtoa_r+0xcd4>
    6a20:	dc000317 	ldw	r16,12(sp)
    6a24:	003d6006 	br	5fa8 <_dtoa_r+0x6b8>
    6a28:	8809883a 	mov	r4,r17
    6a2c:	0002fc80 	call	2fc8 <__floatsidf>
    6a30:	a009883a 	mov	r4,r20
    6a34:	a80b883a 	mov	r5,r21
    6a38:	100d883a 	mov	r6,r2
    6a3c:	180f883a 	mov	r7,r3
    6a40:	0001e040 	call	1e04 <__muldf3>
    6a44:	1009883a 	mov	r4,r2
    6a48:	180b883a 	mov	r5,r3
    6a4c:	000d883a 	mov	r6,zero
    6a50:	01d00734 	movhi	r7,16412
    6a54:	000d2f40 	call	d2f4 <__adddf3>
    6a58:	1023883a 	mov	r17,r2
    6a5c:	00bf3034 	movhi	r2,64704
    6a60:	1885883a 	add	r2,r3,r2
    6a64:	d8800e15 	stw	r2,56(sp)
    6a68:	a009883a 	mov	r4,r20
    6a6c:	a80b883a 	mov	r5,r21
    6a70:	000d883a 	mov	r6,zero
    6a74:	01d00534 	movhi	r7,16404
    6a78:	00026700 	call	2670 <__subdf3>
    6a7c:	d9c00e17 	ldw	r7,56(sp)
    6a80:	1009883a 	mov	r4,r2
    6a84:	180b883a 	mov	r5,r3
    6a88:	880d883a 	mov	r6,r17
    6a8c:	102b883a 	mov	r21,r2
    6a90:	1829883a 	mov	r20,r3
    6a94:	0001c440 	call	1c44 <__gedf2>
    6a98:	00807716 	blt	zero,r2,6c78 <_dtoa_r+0x1388>
    6a9c:	d8800e17 	ldw	r2,56(sp)
    6aa0:	a809883a 	mov	r4,r21
    6aa4:	a00b883a 	mov	r5,r20
    6aa8:	11e0003c 	xorhi	r7,r2,32768
    6aac:	880d883a 	mov	r6,r17
    6ab0:	0001d240 	call	1d24 <__ledf2>
    6ab4:	103d6b0e 	bge	r2,zero,6064 <_dtoa_r+0x774>
    6ab8:	002b883a 	mov	r21,zero
    6abc:	0023883a 	mov	r17,zero
    6ac0:	003f4c06 	br	67f4 <_dtoa_r+0xf04>
    6ac4:	d9800917 	ldw	r6,36(sp)
    6ac8:	e00b883a 	mov	r5,fp
    6acc:	8009883a 	mov	r4,r16
    6ad0:	000907c0 	call	907c <__pow5mult>
    6ad4:	1039883a 	mov	fp,r2
    6ad8:	003e2706 	br	6378 <_dtoa_r+0xa88>
    6adc:	d8000b15 	stw	zero,44(sp)
    6ae0:	003c4906 	br	5c08 <_dtoa_r+0x318>
    6ae4:	d9000917 	ldw	r4,36(sp)
    6ae8:	d9800a17 	ldw	r6,40(sp)
    6aec:	dd400915 	stw	r21,36(sp)
    6af0:	a905c83a 	sub	r2,r21,r4
    6af4:	308d883a 	add	r6,r6,r2
    6af8:	d9800a15 	stw	r6,40(sp)
    6afc:	002b883a 	mov	r21,zero
    6b00:	003df206 	br	62cc <_dtoa_r+0x9dc>
    6b04:	dc800e15 	stw	r18,56(sp)
    6b08:	982b883a 	mov	r21,r19
    6b0c:	04400084 	movi	r17,2
    6b10:	003c7406 	br	5ce4 <_dtoa_r+0x3f4>
    6b14:	04400044 	movi	r17,1
    6b18:	dc400c15 	stw	r17,48(sp)
    6b1c:	dc400615 	stw	r17,24(sp)
    6b20:	dc402215 	stw	r17,136(sp)
    6b24:	80001115 	stw	zero,68(r16)
    6b28:	000b883a 	mov	r5,zero
    6b2c:	003c4a06 	br	5c58 <_dtoa_r+0x368>
    6b30:	3023883a 	mov	r17,r6
    6b34:	003ffb06 	br	6b24 <_dtoa_r+0x1234>
    6b38:	1000021e 	bne	r2,zero,6b44 <_dtoa_r+0x1254>
    6b3c:	4200004c 	andi	r8,r8,1
    6b40:	403e8f1e 	bne	r8,zero,6580 <_dtoa_r+0xc90>
    6b44:	01000c04 	movi	r4,48
    6b48:	00000106 	br	6b50 <_dtoa_r+0x1260>
    6b4c:	102f883a 	mov	r23,r2
    6b50:	b8bfffc4 	addi	r2,r23,-1
    6b54:	10c00007 	ldb	r3,0(r2)
    6b58:	193ffc26 	beq	r3,r4,6b4c <_dtoa_r+0x125c>
    6b5c:	003e9906 	br	65c4 <_dtoa_r+0xcd4>
    6b60:	d9000517 	ldw	r4,20(sp)
    6b64:	012fc83a 	sub	r23,zero,r4
    6b68:	b800ad26 	beq	r23,zero,6e20 <_dtoa_r+0x1530>
    6b6c:	b88003cc 	andi	r2,r23,15
    6b70:	100490fa 	slli	r2,r2,3
    6b74:	00c000b4 	movhi	r3,2
    6b78:	18eb2904 	addi	r3,r3,-21340
    6b7c:	1885883a 	add	r2,r3,r2
    6b80:	11800017 	ldw	r6,0(r2)
    6b84:	11c00117 	ldw	r7,4(r2)
    6b88:	b82fd13a 	srai	r23,r23,4
    6b8c:	9009883a 	mov	r4,r18
    6b90:	980b883a 	mov	r5,r19
    6b94:	0001e040 	call	1e04 <__muldf3>
    6b98:	1029883a 	mov	r20,r2
    6b9c:	182b883a 	mov	r21,r3
    6ba0:	b800f426 	beq	r23,zero,6f74 <_dtoa_r+0x1684>
    6ba4:	020000b4 	movhi	r8,2
    6ba8:	422b1f04 	addi	r8,r8,-21380
    6bac:	8029883a 	mov	r20,r16
    6bb0:	04400084 	movi	r17,2
    6bb4:	4021883a 	mov	r16,r8
    6bb8:	b980004c 	andi	r6,r23,1
    6bbc:	1009883a 	mov	r4,r2
    6bc0:	b82fd07a 	srai	r23,r23,1
    6bc4:	180b883a 	mov	r5,r3
    6bc8:	30000426 	beq	r6,zero,6bdc <_dtoa_r+0x12ec>
    6bcc:	81800017 	ldw	r6,0(r16)
    6bd0:	81c00117 	ldw	r7,4(r16)
    6bd4:	8c400044 	addi	r17,r17,1
    6bd8:	0001e040 	call	1e04 <__muldf3>
    6bdc:	84000204 	addi	r16,r16,8
    6be0:	b83ff51e 	bne	r23,zero,6bb8 <_dtoa_r+0x12c8>
    6be4:	a021883a 	mov	r16,r20
    6be8:	182b883a 	mov	r21,r3
    6bec:	1029883a 	mov	r20,r2
    6bf0:	003c5506 	br	5d48 <_dtoa_r+0x458>
    6bf4:	d9800517 	ldw	r6,20(sp)
    6bf8:	d9000717 	ldw	r4,28(sp)
    6bfc:	00c00c04 	movi	r3,48
    6c00:	31800044 	addi	r6,r6,1
    6c04:	d9800515 	stw	r6,20(sp)
    6c08:	20c00005 	stb	r3,0(r4)
    6c0c:	02000c44 	movi	r8,49
    6c10:	003da206 	br	629c <_dtoa_r+0x9ac>
    6c14:	89400117 	ldw	r5,4(r17)
    6c18:	8009883a 	mov	r4,r16
    6c1c:	000897c0 	call	897c <_Balloc>
    6c20:	89800417 	ldw	r6,16(r17)
    6c24:	11000304 	addi	r4,r2,12
    6c28:	89400304 	addi	r5,r17,12
    6c2c:	31800084 	addi	r6,r6,2
    6c30:	318d883a 	add	r6,r6,r6
    6c34:	318d883a 	add	r6,r6,r6
    6c38:	1027883a 	mov	r19,r2
    6c3c:	00087200 	call	8720 <memcpy>
    6c40:	8009883a 	mov	r4,r16
    6c44:	980b883a 	mov	r5,r19
    6c48:	01800044 	movi	r6,1
    6c4c:	00091bc0 	call	91bc <__lshift>
    6c50:	1029883a 	mov	r20,r2
    6c54:	003e8606 	br	6670 <_dtoa_r+0xd80>
    6c58:	00800e44 	movi	r2,57
    6c5c:	90809526 	beq	r18,r2,6eb4 <_dtoa_r+0x15c4>
    6c60:	92000044 	addi	r8,r18,1
    6c64:	003f2306 	br	68f4 <_dtoa_r+0x1004>
    6c68:	9011883a 	mov	r8,r18
    6c6c:	8825883a 	mov	r18,r17
    6c70:	a023883a 	mov	r17,r20
    6c74:	003e3706 	br	6554 <_dtoa_r+0xc64>
    6c78:	002b883a 	mov	r21,zero
    6c7c:	0023883a 	mov	r17,zero
    6c80:	003f5606 	br	69dc <_dtoa_r+0x10ec>
    6c84:	51bfffc4 	addi	r6,r10,-1
    6c88:	300490fa 	slli	r2,r6,3
    6c8c:	00c000b4 	movhi	r3,2
    6c90:	18eb2904 	addi	r3,r3,-21340
    6c94:	1885883a 	add	r2,r3,r2
    6c98:	d9c00e17 	ldw	r7,56(sp)
    6c9c:	11000017 	ldw	r4,0(r2)
    6ca0:	11400117 	ldw	r5,4(r2)
    6ca4:	d8800717 	ldw	r2,28(sp)
    6ca8:	d9801015 	stw	r6,64(sp)
    6cac:	880d883a 	mov	r6,r17
    6cb0:	da801615 	stw	r10,88(sp)
    6cb4:	15c00044 	addi	r23,r2,1
    6cb8:	0001e040 	call	1e04 <__muldf3>
    6cbc:	a80b883a 	mov	r5,r21
    6cc0:	a009883a 	mov	r4,r20
    6cc4:	d8c01115 	stw	r3,68(sp)
    6cc8:	d8800e15 	stw	r2,56(sp)
    6ccc:	0002f400 	call	2f40 <__fixdfsi>
    6cd0:	1009883a 	mov	r4,r2
    6cd4:	1023883a 	mov	r17,r2
    6cd8:	0002fc80 	call	2fc8 <__floatsidf>
    6cdc:	a009883a 	mov	r4,r20
    6ce0:	a80b883a 	mov	r5,r21
    6ce4:	100d883a 	mov	r6,r2
    6ce8:	180f883a 	mov	r7,r3
    6cec:	00026700 	call	2670 <__subdf3>
    6cf0:	1813883a 	mov	r9,r3
    6cf4:	d8c00717 	ldw	r3,28(sp)
    6cf8:	8c400c04 	addi	r17,r17,48
    6cfc:	1011883a 	mov	r8,r2
    6d00:	1c400005 	stb	r17,0(r3)
    6d04:	da801617 	ldw	r10,88(sp)
    6d08:	00800044 	movi	r2,1
    6d0c:	50802326 	beq	r10,r2,6d9c <_dtoa_r+0x14ac>
    6d10:	d8800717 	ldw	r2,28(sp)
    6d14:	b82b883a 	mov	r21,r23
    6d18:	dc001315 	stw	r16,76(sp)
    6d1c:	12a9883a 	add	r20,r2,r10
    6d20:	4807883a 	mov	r3,r9
    6d24:	4005883a 	mov	r2,r8
    6d28:	dc801415 	stw	r18,80(sp)
    6d2c:	000d883a 	mov	r6,zero
    6d30:	01d00934 	movhi	r7,16420
    6d34:	1009883a 	mov	r4,r2
    6d38:	180b883a 	mov	r5,r3
    6d3c:	0001e040 	call	1e04 <__muldf3>
    6d40:	180b883a 	mov	r5,r3
    6d44:	1009883a 	mov	r4,r2
    6d48:	1821883a 	mov	r16,r3
    6d4c:	1025883a 	mov	r18,r2
    6d50:	0002f400 	call	2f40 <__fixdfsi>
    6d54:	1009883a 	mov	r4,r2
    6d58:	1023883a 	mov	r17,r2
    6d5c:	0002fc80 	call	2fc8 <__floatsidf>
    6d60:	9009883a 	mov	r4,r18
    6d64:	800b883a 	mov	r5,r16
    6d68:	100d883a 	mov	r6,r2
    6d6c:	180f883a 	mov	r7,r3
    6d70:	8c400c04 	addi	r17,r17,48
    6d74:	00026700 	call	2670 <__subdf3>
    6d78:	ad400044 	addi	r21,r21,1
    6d7c:	ac7fffc5 	stb	r17,-1(r21)
    6d80:	ad3fea1e 	bne	r21,r20,6d2c <_dtoa_r+0x143c>
    6d84:	1813883a 	mov	r9,r3
    6d88:	d8c01017 	ldw	r3,64(sp)
    6d8c:	dc001317 	ldw	r16,76(sp)
    6d90:	dc801417 	ldw	r18,80(sp)
    6d94:	1011883a 	mov	r8,r2
    6d98:	b8ef883a 	add	r23,r23,r3
    6d9c:	d9000e17 	ldw	r4,56(sp)
    6da0:	d9401117 	ldw	r5,68(sp)
    6da4:	000d883a 	mov	r6,zero
    6da8:	01cff834 	movhi	r7,16352
    6dac:	da001715 	stw	r8,92(sp)
    6db0:	da401515 	stw	r9,84(sp)
    6db4:	000d2f40 	call	d2f4 <__adddf3>
    6db8:	da001717 	ldw	r8,92(sp)
    6dbc:	da401517 	ldw	r9,84(sp)
    6dc0:	1009883a 	mov	r4,r2
    6dc4:	400d883a 	mov	r6,r8
    6dc8:	480f883a 	mov	r7,r9
    6dcc:	180b883a 	mov	r5,r3
    6dd0:	0001d240 	call	1d24 <__ledf2>
    6dd4:	da001717 	ldw	r8,92(sp)
    6dd8:	da401517 	ldw	r9,84(sp)
    6ddc:	10003b0e 	bge	r2,zero,6ecc <_dtoa_r+0x15dc>
    6de0:	d9001217 	ldw	r4,72(sp)
    6de4:	bd7fffc3 	ldbu	r21,-1(r23)
    6de8:	d9000515 	stw	r4,20(sp)
    6dec:	003d1c06 	br	6260 <_dtoa_r+0x970>
    6df0:	d8c00817 	ldw	r3,32(sp)
    6df4:	18a9c83a 	sub	r20,r3,r2
    6df8:	0005883a 	mov	r2,zero
    6dfc:	003d3706 	br	62dc <_dtoa_r+0x9ec>
    6e00:	00800044 	movi	r2,1
    6e04:	003dd006 	br	6548 <_dtoa_r+0xc58>
    6e08:	d8c00217 	ldw	r3,8(sp)
    6e0c:	00800d84 	movi	r2,54
    6e10:	dd400917 	ldw	r21,36(sp)
    6e14:	10c5c83a 	sub	r2,r2,r3
    6e18:	dd000817 	ldw	r20,32(sp)
    6e1c:	003d2f06 	br	62dc <_dtoa_r+0x9ec>
    6e20:	9029883a 	mov	r20,r18
    6e24:	982b883a 	mov	r21,r19
    6e28:	04400084 	movi	r17,2
    6e2c:	003bc606 	br	5d48 <_dtoa_r+0x458>
    6e30:	d8800617 	ldw	r2,24(sp)
    6e34:	103efc26 	beq	r2,zero,6a28 <_dtoa_r+0x1138>
    6e38:	d8c00c17 	ldw	r3,48(sp)
    6e3c:	00fc890e 	bge	zero,r3,6064 <_dtoa_r+0x774>
    6e40:	a80b883a 	mov	r5,r21
    6e44:	a009883a 	mov	r4,r20
    6e48:	000d883a 	mov	r6,zero
    6e4c:	01d00934 	movhi	r7,16420
    6e50:	0001e040 	call	1e04 <__muldf3>
    6e54:	89000044 	addi	r4,r17,1
    6e58:	1029883a 	mov	r20,r2
    6e5c:	182b883a 	mov	r21,r3
    6e60:	0002fc80 	call	2fc8 <__floatsidf>
    6e64:	a009883a 	mov	r4,r20
    6e68:	a80b883a 	mov	r5,r21
    6e6c:	100d883a 	mov	r6,r2
    6e70:	180f883a 	mov	r7,r3
    6e74:	0001e040 	call	1e04 <__muldf3>
    6e78:	1009883a 	mov	r4,r2
    6e7c:	180b883a 	mov	r5,r3
    6e80:	000d883a 	mov	r6,zero
    6e84:	01d00734 	movhi	r7,16412
    6e88:	000d2f40 	call	d2f4 <__adddf3>
    6e8c:	d9000517 	ldw	r4,20(sp)
    6e90:	1023883a 	mov	r17,r2
    6e94:	00bf3034 	movhi	r2,64704
    6e98:	213fffc4 	addi	r4,r4,-1
    6e9c:	1885883a 	add	r2,r3,r2
    6ea0:	d9001215 	stw	r4,72(sp)
    6ea4:	d8800e15 	stw	r2,56(sp)
    6ea8:	da800c17 	ldw	r10,48(sp)
    6eac:	003bc306 	br	5dbc <_dtoa_r+0x4cc>
    6eb0:	b039883a 	mov	fp,r22
    6eb4:	01000e44 	movi	r4,57
    6eb8:	8825883a 	mov	r18,r17
    6ebc:	9dc00044 	addi	r23,r19,1
    6ec0:	99000005 	stb	r4,0(r19)
    6ec4:	a023883a 	mov	r17,r20
    6ec8:	003dae06 	br	6584 <_dtoa_r+0xc94>
    6ecc:	d9800e17 	ldw	r6,56(sp)
    6ed0:	d9c01117 	ldw	r7,68(sp)
    6ed4:	0009883a 	mov	r4,zero
    6ed8:	014ff834 	movhi	r5,16352
    6edc:	da001715 	stw	r8,92(sp)
    6ee0:	da401515 	stw	r9,84(sp)
    6ee4:	00026700 	call	2670 <__subdf3>
    6ee8:	da001717 	ldw	r8,92(sp)
    6eec:	da401517 	ldw	r9,84(sp)
    6ef0:	1009883a 	mov	r4,r2
    6ef4:	180b883a 	mov	r5,r3
    6ef8:	400d883a 	mov	r6,r8
    6efc:	480f883a 	mov	r7,r9
    6f00:	0001c440 	call	1c44 <__gedf2>
    6f04:	00bc570e 	bge	zero,r2,6064 <_dtoa_r+0x774>
    6f08:	01000c04 	movi	r4,48
    6f0c:	00000106 	br	6f14 <_dtoa_r+0x1624>
    6f10:	102f883a 	mov	r23,r2
    6f14:	b8bfffc4 	addi	r2,r23,-1
    6f18:	10c00007 	ldb	r3,0(r2)
    6f1c:	193ffc26 	beq	r3,r4,6f10 <_dtoa_r+0x1620>
    6f20:	d9801217 	ldw	r6,72(sp)
    6f24:	d9800515 	stw	r6,20(sp)
    6f28:	003c1f06 	br	5fa8 <_dtoa_r+0x6b8>
    6f2c:	d8801217 	ldw	r2,72(sp)
    6f30:	dc001117 	ldw	r16,68(sp)
    6f34:	d8800515 	stw	r2,20(sp)
    6f38:	003cc906 	br	6260 <_dtoa_r+0x970>
    6f3c:	dd801317 	ldw	r22,76(sp)
    6f40:	dc001117 	ldw	r16,68(sp)
    6f44:	dcc01417 	ldw	r19,80(sp)
    6f48:	dc801017 	ldw	r18,64(sp)
    6f4c:	003c4506 	br	6064 <_dtoa_r+0x774>
    6f50:	103e5d1e 	bne	r2,zero,68c8 <_dtoa_r+0xfd8>
    6f54:	4080004c 	andi	r2,r8,1
    6f58:	103e5b26 	beq	r2,zero,68c8 <_dtoa_r+0xfd8>
    6f5c:	003e5706 	br	68bc <_dtoa_r+0xfcc>
    6f60:	d8c00317 	ldw	r3,12(sp)
    6f64:	00800084 	movi	r2,2
    6f68:	10c00a16 	blt	r2,r3,6f94 <_dtoa_r+0x16a4>
    6f6c:	d9000c17 	ldw	r4,48(sp)
    6f70:	003e8306 	br	6980 <_dtoa_r+0x1090>
    6f74:	04400084 	movi	r17,2
    6f78:	003b7306 	br	5d48 <_dtoa_r+0x458>
    6f7c:	d9801217 	ldw	r6,72(sp)
    6f80:	d9800515 	stw	r6,20(sp)
    6f84:	003cb606 	br	6260 <_dtoa_r+0x970>
    6f88:	d9001217 	ldw	r4,72(sp)
    6f8c:	d9000515 	stw	r4,20(sp)
    6f90:	003c0506 	br	5fa8 <_dtoa_r+0x6b8>
    6f94:	d9800c17 	ldw	r6,48(sp)
    6f98:	d9800615 	stw	r6,24(sp)
    6f9c:	003e8306 	br	69ac <_dtoa_r+0x10bc>
    6fa0:	d9800317 	ldw	r6,12(sp)
    6fa4:	00800084 	movi	r2,2
    6fa8:	11800216 	blt	r2,r6,6fb4 <_dtoa_r+0x16c4>
    6fac:	d8800c17 	ldw	r2,48(sp)
    6fb0:	003da606 	br	664c <_dtoa_r+0xd5c>
    6fb4:	d8800c17 	ldw	r2,48(sp)
    6fb8:	d8800615 	stw	r2,24(sp)
    6fbc:	003e7b06 	br	69ac <_dtoa_r+0x10bc>
    6fc0:	05000044 	movi	r20,1
    6fc4:	003b0506 	br	5bdc <_dtoa_r+0x2ec>
    6fc8:	8009883a 	mov	r4,r16
    6fcc:	80001115 	stw	zero,68(r16)
    6fd0:	000b883a 	mov	r5,zero
    6fd4:	000897c0 	call	897c <_Balloc>
    6fd8:	d8800715 	stw	r2,28(sp)
    6fdc:	d8c00717 	ldw	r3,28(sp)
    6fe0:	00bfffc4 	movi	r2,-1
    6fe4:	01000044 	movi	r4,1
    6fe8:	d8800c15 	stw	r2,48(sp)
    6fec:	80c01015 	stw	r3,64(r16)
    6ff0:	d9000b15 	stw	r4,44(sp)
    6ff4:	d8800615 	stw	r2,24(sp)
    6ff8:	d8002215 	stw	zero,136(sp)
    6ffc:	003c1906 	br	6064 <_dtoa_r+0x774>
    7000:	193d2926 	beq	r3,r4,64a8 <_dtoa_r+0xbb8>
    7004:	00c00f04 	movi	r3,60
    7008:	1885c83a 	sub	r2,r3,r2
    700c:	003d7b06 	br	65fc <_dtoa_r+0xd0c>
    7010:	000b883a 	mov	r5,zero
    7014:	003b1006 	br	5c58 <_dtoa_r+0x368>

00007018 <__sflush_r>:
    7018:	2880030b 	ldhu	r2,12(r5)
    701c:	defffb04 	addi	sp,sp,-20
    7020:	dcc00315 	stw	r19,12(sp)
    7024:	dc400115 	stw	r17,4(sp)
    7028:	dfc00415 	stw	ra,16(sp)
    702c:	dc800215 	stw	r18,8(sp)
    7030:	dc000015 	stw	r16,0(sp)
    7034:	10c0020c 	andi	r3,r2,8
    7038:	2823883a 	mov	r17,r5
    703c:	2027883a 	mov	r19,r4
    7040:	1800311e 	bne	r3,zero,7108 <__sflush_r+0xf0>
    7044:	28c00117 	ldw	r3,4(r5)
    7048:	10820014 	ori	r2,r2,2048
    704c:	2880030d 	sth	r2,12(r5)
    7050:	00c04b0e 	bge	zero,r3,7180 <__sflush_r+0x168>
    7054:	8a000a17 	ldw	r8,40(r17)
    7058:	40002326 	beq	r8,zero,70e8 <__sflush_r+0xd0>
    705c:	9c000017 	ldw	r16,0(r19)
    7060:	10c4000c 	andi	r3,r2,4096
    7064:	98000015 	stw	zero,0(r19)
    7068:	18004826 	beq	r3,zero,718c <__sflush_r+0x174>
    706c:	89801417 	ldw	r6,80(r17)
    7070:	10c0010c 	andi	r3,r2,4
    7074:	18000626 	beq	r3,zero,7090 <__sflush_r+0x78>
    7078:	88c00117 	ldw	r3,4(r17)
    707c:	88800c17 	ldw	r2,48(r17)
    7080:	30cdc83a 	sub	r6,r6,r3
    7084:	10000226 	beq	r2,zero,7090 <__sflush_r+0x78>
    7088:	88800f17 	ldw	r2,60(r17)
    708c:	308dc83a 	sub	r6,r6,r2
    7090:	89400717 	ldw	r5,28(r17)
    7094:	9809883a 	mov	r4,r19
    7098:	000f883a 	mov	r7,zero
    709c:	403ee83a 	callr	r8
    70a0:	00ffffc4 	movi	r3,-1
    70a4:	10c04426 	beq	r2,r3,71b8 <__sflush_r+0x1a0>
    70a8:	88c0030b 	ldhu	r3,12(r17)
    70ac:	89000417 	ldw	r4,16(r17)
    70b0:	88000115 	stw	zero,4(r17)
    70b4:	197dffcc 	andi	r5,r3,63487
    70b8:	8940030d 	sth	r5,12(r17)
    70bc:	89000015 	stw	r4,0(r17)
    70c0:	18c4000c 	andi	r3,r3,4096
    70c4:	18002c1e 	bne	r3,zero,7178 <__sflush_r+0x160>
    70c8:	89400c17 	ldw	r5,48(r17)
    70cc:	9c000015 	stw	r16,0(r19)
    70d0:	28000526 	beq	r5,zero,70e8 <__sflush_r+0xd0>
    70d4:	88801004 	addi	r2,r17,64
    70d8:	28800226 	beq	r5,r2,70e4 <__sflush_r+0xcc>
    70dc:	9809883a 	mov	r4,r19
    70e0:	00077800 	call	7780 <_free_r>
    70e4:	88000c15 	stw	zero,48(r17)
    70e8:	0005883a 	mov	r2,zero
    70ec:	dfc00417 	ldw	ra,16(sp)
    70f0:	dcc00317 	ldw	r19,12(sp)
    70f4:	dc800217 	ldw	r18,8(sp)
    70f8:	dc400117 	ldw	r17,4(sp)
    70fc:	dc000017 	ldw	r16,0(sp)
    7100:	dec00504 	addi	sp,sp,20
    7104:	f800283a 	ret
    7108:	2c800417 	ldw	r18,16(r5)
    710c:	903ff626 	beq	r18,zero,70e8 <__sflush_r+0xd0>
    7110:	2c000017 	ldw	r16,0(r5)
    7114:	108000cc 	andi	r2,r2,3
    7118:	2c800015 	stw	r18,0(r5)
    711c:	84a1c83a 	sub	r16,r16,r18
    7120:	1000131e 	bne	r2,zero,7170 <__sflush_r+0x158>
    7124:	28800517 	ldw	r2,20(r5)
    7128:	88800215 	stw	r2,8(r17)
    712c:	04000316 	blt	zero,r16,713c <__sflush_r+0x124>
    7130:	003fed06 	br	70e8 <__sflush_r+0xd0>
    7134:	90a5883a 	add	r18,r18,r2
    7138:	043feb0e 	bge	zero,r16,70e8 <__sflush_r+0xd0>
    713c:	88800917 	ldw	r2,36(r17)
    7140:	89400717 	ldw	r5,28(r17)
    7144:	800f883a 	mov	r7,r16
    7148:	900d883a 	mov	r6,r18
    714c:	9809883a 	mov	r4,r19
    7150:	103ee83a 	callr	r2
    7154:	80a1c83a 	sub	r16,r16,r2
    7158:	00bff616 	blt	zero,r2,7134 <__sflush_r+0x11c>
    715c:	88c0030b 	ldhu	r3,12(r17)
    7160:	00bfffc4 	movi	r2,-1
    7164:	18c01014 	ori	r3,r3,64
    7168:	88c0030d 	sth	r3,12(r17)
    716c:	003fdf06 	br	70ec <__sflush_r+0xd4>
    7170:	0005883a 	mov	r2,zero
    7174:	003fec06 	br	7128 <__sflush_r+0x110>
    7178:	88801415 	stw	r2,80(r17)
    717c:	003fd206 	br	70c8 <__sflush_r+0xb0>
    7180:	28c00f17 	ldw	r3,60(r5)
    7184:	00ffb316 	blt	zero,r3,7054 <__sflush_r+0x3c>
    7188:	003fd706 	br	70e8 <__sflush_r+0xd0>
    718c:	89400717 	ldw	r5,28(r17)
    7190:	000d883a 	mov	r6,zero
    7194:	9809883a 	mov	r4,r19
    7198:	01c00044 	movi	r7,1
    719c:	403ee83a 	callr	r8
    71a0:	100d883a 	mov	r6,r2
    71a4:	00bfffc4 	movi	r2,-1
    71a8:	30801426 	beq	r6,r2,71fc <__sflush_r+0x1e4>
    71ac:	8880030b 	ldhu	r2,12(r17)
    71b0:	8a000a17 	ldw	r8,40(r17)
    71b4:	003fae06 	br	7070 <__sflush_r+0x58>
    71b8:	98c00017 	ldw	r3,0(r19)
    71bc:	183fba26 	beq	r3,zero,70a8 <__sflush_r+0x90>
    71c0:	01000744 	movi	r4,29
    71c4:	19000626 	beq	r3,r4,71e0 <__sflush_r+0x1c8>
    71c8:	01000584 	movi	r4,22
    71cc:	19000426 	beq	r3,r4,71e0 <__sflush_r+0x1c8>
    71d0:	88c0030b 	ldhu	r3,12(r17)
    71d4:	18c01014 	ori	r3,r3,64
    71d8:	88c0030d 	sth	r3,12(r17)
    71dc:	003fc306 	br	70ec <__sflush_r+0xd4>
    71e0:	8880030b 	ldhu	r2,12(r17)
    71e4:	88c00417 	ldw	r3,16(r17)
    71e8:	88000115 	stw	zero,4(r17)
    71ec:	10bdffcc 	andi	r2,r2,63487
    71f0:	8880030d 	sth	r2,12(r17)
    71f4:	88c00015 	stw	r3,0(r17)
    71f8:	003fb306 	br	70c8 <__sflush_r+0xb0>
    71fc:	98800017 	ldw	r2,0(r19)
    7200:	103fea26 	beq	r2,zero,71ac <__sflush_r+0x194>
    7204:	00c00744 	movi	r3,29
    7208:	10c00226 	beq	r2,r3,7214 <__sflush_r+0x1fc>
    720c:	00c00584 	movi	r3,22
    7210:	10ffd21e 	bne	r2,r3,715c <__sflush_r+0x144>
    7214:	9c000015 	stw	r16,0(r19)
    7218:	0005883a 	mov	r2,zero
    721c:	003fb306 	br	70ec <__sflush_r+0xd4>

00007220 <_fflush_r>:
    7220:	defffd04 	addi	sp,sp,-12
    7224:	dc000115 	stw	r16,4(sp)
    7228:	dfc00215 	stw	ra,8(sp)
    722c:	2021883a 	mov	r16,r4
    7230:	20000226 	beq	r4,zero,723c <_fflush_r+0x1c>
    7234:	20800e17 	ldw	r2,56(r4)
    7238:	10000c26 	beq	r2,zero,726c <_fflush_r+0x4c>
    723c:	2880030f 	ldh	r2,12(r5)
    7240:	1000051e 	bne	r2,zero,7258 <_fflush_r+0x38>
    7244:	0005883a 	mov	r2,zero
    7248:	dfc00217 	ldw	ra,8(sp)
    724c:	dc000117 	ldw	r16,4(sp)
    7250:	dec00304 	addi	sp,sp,12
    7254:	f800283a 	ret
    7258:	8009883a 	mov	r4,r16
    725c:	dfc00217 	ldw	ra,8(sp)
    7260:	dc000117 	ldw	r16,4(sp)
    7264:	dec00304 	addi	sp,sp,12
    7268:	00070181 	jmpi	7018 <__sflush_r>
    726c:	d9400015 	stw	r5,0(sp)
    7270:	000760c0 	call	760c <__sinit>
    7274:	d9400017 	ldw	r5,0(sp)
    7278:	003ff006 	br	723c <_fflush_r+0x1c>

0000727c <fflush>:
    727c:	20000526 	beq	r4,zero,7294 <fflush+0x18>
    7280:	008000b4 	movhi	r2,2
    7284:	10b3c204 	addi	r2,r2,-12536
    7288:	200b883a 	mov	r5,r4
    728c:	11000017 	ldw	r4,0(r2)
    7290:	00072201 	jmpi	7220 <_fflush_r>
    7294:	008000b4 	movhi	r2,2
    7298:	10b3c104 	addi	r2,r2,-12540
    729c:	11000017 	ldw	r4,0(r2)
    72a0:	01400034 	movhi	r5,0
    72a4:	295c8804 	addi	r5,r5,29216
    72a8:	0007b341 	jmpi	7b34 <_fwalk_reent>

000072ac <__fp_lock>:
    72ac:	0005883a 	mov	r2,zero
    72b0:	f800283a 	ret

000072b4 <__fp_unlock>:
    72b4:	0005883a 	mov	r2,zero
    72b8:	f800283a 	ret

000072bc <_cleanup_r>:
    72bc:	01400074 	movhi	r5,1
    72c0:	296ce104 	addi	r5,r5,-19580
    72c4:	0007b341 	jmpi	7b34 <_fwalk_reent>

000072c8 <__sinit.part.1>:
    72c8:	defff704 	addi	sp,sp,-36
    72cc:	00c00034 	movhi	r3,0
    72d0:	dfc00815 	stw	ra,32(sp)
    72d4:	ddc00715 	stw	r23,28(sp)
    72d8:	dd800615 	stw	r22,24(sp)
    72dc:	dd400515 	stw	r21,20(sp)
    72e0:	dd000415 	stw	r20,16(sp)
    72e4:	dcc00315 	stw	r19,12(sp)
    72e8:	dc800215 	stw	r18,8(sp)
    72ec:	dc400115 	stw	r17,4(sp)
    72f0:	dc000015 	stw	r16,0(sp)
    72f4:	18dcaf04 	addi	r3,r3,29372
    72f8:	24000117 	ldw	r16,4(r4)
    72fc:	20c00f15 	stw	r3,60(r4)
    7300:	2080bb04 	addi	r2,r4,748
    7304:	00c000c4 	movi	r3,3
    7308:	20c0b915 	stw	r3,740(r4)
    730c:	2080ba15 	stw	r2,744(r4)
    7310:	2000b815 	stw	zero,736(r4)
    7314:	05c00204 	movi	r23,8
    7318:	00800104 	movi	r2,4
    731c:	2025883a 	mov	r18,r4
    7320:	b80d883a 	mov	r6,r23
    7324:	81001704 	addi	r4,r16,92
    7328:	000b883a 	mov	r5,zero
    732c:	80000015 	stw	zero,0(r16)
    7330:	80000115 	stw	zero,4(r16)
    7334:	80000215 	stw	zero,8(r16)
    7338:	8080030d 	sth	r2,12(r16)
    733c:	80001915 	stw	zero,100(r16)
    7340:	8000038d 	sth	zero,14(r16)
    7344:	80000415 	stw	zero,16(r16)
    7348:	80000515 	stw	zero,20(r16)
    734c:	80000615 	stw	zero,24(r16)
    7350:	00088580 	call	8858 <memset>
    7354:	05800074 	movhi	r22,1
    7358:	94400217 	ldw	r17,8(r18)
    735c:	05400074 	movhi	r21,1
    7360:	05000074 	movhi	r20,1
    7364:	04c00074 	movhi	r19,1
    7368:	b5a6a804 	addi	r22,r22,-25952
    736c:	ad66bf04 	addi	r21,r21,-25860
    7370:	a526de04 	addi	r20,r20,-25736
    7374:	9ce6f504 	addi	r19,r19,-25644
    7378:	85800815 	stw	r22,32(r16)
    737c:	85400915 	stw	r21,36(r16)
    7380:	85000a15 	stw	r20,40(r16)
    7384:	84c00b15 	stw	r19,44(r16)
    7388:	84000715 	stw	r16,28(r16)
    738c:	00800284 	movi	r2,10
    7390:	8880030d 	sth	r2,12(r17)
    7394:	00800044 	movi	r2,1
    7398:	89001704 	addi	r4,r17,92
    739c:	b80d883a 	mov	r6,r23
    73a0:	000b883a 	mov	r5,zero
    73a4:	88000015 	stw	zero,0(r17)
    73a8:	88000115 	stw	zero,4(r17)
    73ac:	88000215 	stw	zero,8(r17)
    73b0:	88001915 	stw	zero,100(r17)
    73b4:	8880038d 	sth	r2,14(r17)
    73b8:	88000415 	stw	zero,16(r17)
    73bc:	88000515 	stw	zero,20(r17)
    73c0:	88000615 	stw	zero,24(r17)
    73c4:	00088580 	call	8858 <memset>
    73c8:	94000317 	ldw	r16,12(r18)
    73cc:	00800484 	movi	r2,18
    73d0:	8c400715 	stw	r17,28(r17)
    73d4:	8d800815 	stw	r22,32(r17)
    73d8:	8d400915 	stw	r21,36(r17)
    73dc:	8d000a15 	stw	r20,40(r17)
    73e0:	8cc00b15 	stw	r19,44(r17)
    73e4:	8080030d 	sth	r2,12(r16)
    73e8:	00800084 	movi	r2,2
    73ec:	80000015 	stw	zero,0(r16)
    73f0:	80000115 	stw	zero,4(r16)
    73f4:	80000215 	stw	zero,8(r16)
    73f8:	80001915 	stw	zero,100(r16)
    73fc:	8080038d 	sth	r2,14(r16)
    7400:	80000415 	stw	zero,16(r16)
    7404:	80000515 	stw	zero,20(r16)
    7408:	80000615 	stw	zero,24(r16)
    740c:	81001704 	addi	r4,r16,92
    7410:	000b883a 	mov	r5,zero
    7414:	b80d883a 	mov	r6,r23
    7418:	00088580 	call	8858 <memset>
    741c:	00800044 	movi	r2,1
    7420:	84000715 	stw	r16,28(r16)
    7424:	85800815 	stw	r22,32(r16)
    7428:	85400915 	stw	r21,36(r16)
    742c:	85000a15 	stw	r20,40(r16)
    7430:	84c00b15 	stw	r19,44(r16)
    7434:	90800e15 	stw	r2,56(r18)
    7438:	dfc00817 	ldw	ra,32(sp)
    743c:	ddc00717 	ldw	r23,28(sp)
    7440:	dd800617 	ldw	r22,24(sp)
    7444:	dd400517 	ldw	r21,20(sp)
    7448:	dd000417 	ldw	r20,16(sp)
    744c:	dcc00317 	ldw	r19,12(sp)
    7450:	dc800217 	ldw	r18,8(sp)
    7454:	dc400117 	ldw	r17,4(sp)
    7458:	dc000017 	ldw	r16,0(sp)
    745c:	dec00904 	addi	sp,sp,36
    7460:	f800283a 	ret

00007464 <__sfmoreglue>:
    7464:	defffc04 	addi	sp,sp,-16
    7468:	dc800215 	stw	r18,8(sp)
    746c:	2825883a 	mov	r18,r5
    7470:	dc000015 	stw	r16,0(sp)
    7474:	01401a04 	movi	r5,104
    7478:	2021883a 	mov	r16,r4
    747c:	913fffc4 	addi	r4,r18,-1
    7480:	dfc00315 	stw	ra,12(sp)
    7484:	dc400115 	stw	r17,4(sp)
    7488:	000129c0 	call	129c <__mulsi3>
    748c:	8009883a 	mov	r4,r16
    7490:	11401d04 	addi	r5,r2,116
    7494:	1023883a 	mov	r17,r2
    7498:	0007e900 	call	7e90 <_malloc_r>
    749c:	1021883a 	mov	r16,r2
    74a0:	10000726 	beq	r2,zero,74c0 <__sfmoreglue+0x5c>
    74a4:	11000304 	addi	r4,r2,12
    74a8:	10000015 	stw	zero,0(r2)
    74ac:	14800115 	stw	r18,4(r2)
    74b0:	11000215 	stw	r4,8(r2)
    74b4:	000b883a 	mov	r5,zero
    74b8:	89801a04 	addi	r6,r17,104
    74bc:	00088580 	call	8858 <memset>
    74c0:	8005883a 	mov	r2,r16
    74c4:	dfc00317 	ldw	ra,12(sp)
    74c8:	dc800217 	ldw	r18,8(sp)
    74cc:	dc400117 	ldw	r17,4(sp)
    74d0:	dc000017 	ldw	r16,0(sp)
    74d4:	dec00404 	addi	sp,sp,16
    74d8:	f800283a 	ret

000074dc <__sfp>:
    74dc:	008000b4 	movhi	r2,2
    74e0:	defffb04 	addi	sp,sp,-20
    74e4:	10b3c104 	addi	r2,r2,-12540
    74e8:	dc800215 	stw	r18,8(sp)
    74ec:	14800017 	ldw	r18,0(r2)
    74f0:	dcc00315 	stw	r19,12(sp)
    74f4:	dfc00415 	stw	ra,16(sp)
    74f8:	90800e17 	ldw	r2,56(r18)
    74fc:	dc400115 	stw	r17,4(sp)
    7500:	dc000015 	stw	r16,0(sp)
    7504:	2027883a 	mov	r19,r4
    7508:	1000021e 	bne	r2,zero,7514 <__sfp+0x38>
    750c:	9009883a 	mov	r4,r18
    7510:	00072c80 	call	72c8 <__sinit.part.1>
    7514:	9480b804 	addi	r18,r18,736
    7518:	047fffc4 	movi	r17,-1
    751c:	91400117 	ldw	r5,4(r18)
    7520:	94000217 	ldw	r16,8(r18)
    7524:	297fffc4 	addi	r5,r5,-1
    7528:	28000a16 	blt	r5,zero,7554 <__sfp+0x78>
    752c:	8080030f 	ldh	r2,12(r16)
    7530:	10000c26 	beq	r2,zero,7564 <__sfp+0x88>
    7534:	80c01d04 	addi	r3,r16,116
    7538:	00000206 	br	7544 <__sfp+0x68>
    753c:	18bfe60f 	ldh	r2,-104(r3)
    7540:	10000826 	beq	r2,zero,7564 <__sfp+0x88>
    7544:	297fffc4 	addi	r5,r5,-1
    7548:	1c3ffd04 	addi	r16,r3,-12
    754c:	18c01a04 	addi	r3,r3,104
    7550:	2c7ffa1e 	bne	r5,r17,753c <__sfp+0x60>
    7554:	90800017 	ldw	r2,0(r18)
    7558:	10001d26 	beq	r2,zero,75d0 <__sfp+0xf4>
    755c:	1025883a 	mov	r18,r2
    7560:	003fee06 	br	751c <__sfp+0x40>
    7564:	00bfffc4 	movi	r2,-1
    7568:	8080038d 	sth	r2,14(r16)
    756c:	00800044 	movi	r2,1
    7570:	8080030d 	sth	r2,12(r16)
    7574:	80001915 	stw	zero,100(r16)
    7578:	80000015 	stw	zero,0(r16)
    757c:	80000215 	stw	zero,8(r16)
    7580:	80000115 	stw	zero,4(r16)
    7584:	80000415 	stw	zero,16(r16)
    7588:	80000515 	stw	zero,20(r16)
    758c:	80000615 	stw	zero,24(r16)
    7590:	81001704 	addi	r4,r16,92
    7594:	000b883a 	mov	r5,zero
    7598:	01800204 	movi	r6,8
    759c:	00088580 	call	8858 <memset>
    75a0:	8005883a 	mov	r2,r16
    75a4:	80000c15 	stw	zero,48(r16)
    75a8:	80000d15 	stw	zero,52(r16)
    75ac:	80001115 	stw	zero,68(r16)
    75b0:	80001215 	stw	zero,72(r16)
    75b4:	dfc00417 	ldw	ra,16(sp)
    75b8:	dcc00317 	ldw	r19,12(sp)
    75bc:	dc800217 	ldw	r18,8(sp)
    75c0:	dc400117 	ldw	r17,4(sp)
    75c4:	dc000017 	ldw	r16,0(sp)
    75c8:	dec00504 	addi	sp,sp,20
    75cc:	f800283a 	ret
    75d0:	9809883a 	mov	r4,r19
    75d4:	01400104 	movi	r5,4
    75d8:	00074640 	call	7464 <__sfmoreglue>
    75dc:	90800015 	stw	r2,0(r18)
    75e0:	103fde1e 	bne	r2,zero,755c <__sfp+0x80>
    75e4:	00800304 	movi	r2,12
    75e8:	98800015 	stw	r2,0(r19)
    75ec:	0005883a 	mov	r2,zero
    75f0:	003ff006 	br	75b4 <__sfp+0xd8>

000075f4 <_cleanup>:
    75f4:	008000b4 	movhi	r2,2
    75f8:	10b3c104 	addi	r2,r2,-12540
    75fc:	11000017 	ldw	r4,0(r2)
    7600:	01400074 	movhi	r5,1
    7604:	296ce104 	addi	r5,r5,-19580
    7608:	0007b341 	jmpi	7b34 <_fwalk_reent>

0000760c <__sinit>:
    760c:	20800e17 	ldw	r2,56(r4)
    7610:	10000126 	beq	r2,zero,7618 <__sinit+0xc>
    7614:	f800283a 	ret
    7618:	00072c81 	jmpi	72c8 <__sinit.part.1>

0000761c <__sfp_lock_acquire>:
    761c:	f800283a 	ret

00007620 <__sfp_lock_release>:
    7620:	f800283a 	ret

00007624 <__sinit_lock_acquire>:
    7624:	f800283a 	ret

00007628 <__sinit_lock_release>:
    7628:	f800283a 	ret

0000762c <__fp_lock_all>:
    762c:	008000b4 	movhi	r2,2
    7630:	10b3c204 	addi	r2,r2,-12536
    7634:	11000017 	ldw	r4,0(r2)
    7638:	01400034 	movhi	r5,0
    763c:	295cab04 	addi	r5,r5,29356
    7640:	0007a701 	jmpi	7a70 <_fwalk>

00007644 <__fp_unlock_all>:
    7644:	008000b4 	movhi	r2,2
    7648:	10b3c204 	addi	r2,r2,-12536
    764c:	11000017 	ldw	r4,0(r2)
    7650:	01400034 	movhi	r5,0
    7654:	295cad04 	addi	r5,r5,29364
    7658:	0007a701 	jmpi	7a70 <_fwalk>

0000765c <_malloc_trim_r>:
    765c:	defffb04 	addi	sp,sp,-20
    7660:	dcc00315 	stw	r19,12(sp)
    7664:	04c000b4 	movhi	r19,2
    7668:	dc800215 	stw	r18,8(sp)
    766c:	dc400115 	stw	r17,4(sp)
    7670:	dc000015 	stw	r16,0(sp)
    7674:	dfc00415 	stw	ra,16(sp)
    7678:	2821883a 	mov	r16,r5
    767c:	9ced0304 	addi	r19,r19,-19444
    7680:	2025883a 	mov	r18,r4
    7684:	000e9d00 	call	e9d0 <__malloc_lock>
    7688:	98800217 	ldw	r2,8(r19)
    768c:	14400117 	ldw	r17,4(r2)
    7690:	00bfff04 	movi	r2,-4
    7694:	88a2703a 	and	r17,r17,r2
    7698:	8c21c83a 	sub	r16,r17,r16
    769c:	8403fbc4 	addi	r16,r16,4079
    76a0:	8020d33a 	srli	r16,r16,12
    76a4:	0083ffc4 	movi	r2,4095
    76a8:	843fffc4 	addi	r16,r16,-1
    76ac:	8020933a 	slli	r16,r16,12
    76b0:	1400060e 	bge	r2,r16,76cc <_malloc_trim_r+0x70>
    76b4:	9009883a 	mov	r4,r18
    76b8:	000b883a 	mov	r5,zero
    76bc:	0009a4c0 	call	9a4c <_sbrk_r>
    76c0:	98c00217 	ldw	r3,8(r19)
    76c4:	1c47883a 	add	r3,r3,r17
    76c8:	10c00a26 	beq	r2,r3,76f4 <_malloc_trim_r+0x98>
    76cc:	9009883a 	mov	r4,r18
    76d0:	000eaf00 	call	eaf0 <__malloc_unlock>
    76d4:	0005883a 	mov	r2,zero
    76d8:	dfc00417 	ldw	ra,16(sp)
    76dc:	dcc00317 	ldw	r19,12(sp)
    76e0:	dc800217 	ldw	r18,8(sp)
    76e4:	dc400117 	ldw	r17,4(sp)
    76e8:	dc000017 	ldw	r16,0(sp)
    76ec:	dec00504 	addi	sp,sp,20
    76f0:	f800283a 	ret
    76f4:	9009883a 	mov	r4,r18
    76f8:	040bc83a 	sub	r5,zero,r16
    76fc:	0009a4c0 	call	9a4c <_sbrk_r>
    7700:	00ffffc4 	movi	r3,-1
    7704:	10c00d26 	beq	r2,r3,773c <_malloc_trim_r+0xe0>
    7708:	00c000b4 	movhi	r3,2
    770c:	18f41a04 	addi	r3,r3,-12184
    7710:	18800017 	ldw	r2,0(r3)
    7714:	99000217 	ldw	r4,8(r19)
    7718:	8c23c83a 	sub	r17,r17,r16
    771c:	8c400054 	ori	r17,r17,1
    7720:	1421c83a 	sub	r16,r2,r16
    7724:	24400115 	stw	r17,4(r4)
    7728:	9009883a 	mov	r4,r18
    772c:	1c000015 	stw	r16,0(r3)
    7730:	000eaf00 	call	eaf0 <__malloc_unlock>
    7734:	00800044 	movi	r2,1
    7738:	003fe706 	br	76d8 <_malloc_trim_r+0x7c>
    773c:	9009883a 	mov	r4,r18
    7740:	000b883a 	mov	r5,zero
    7744:	0009a4c0 	call	9a4c <_sbrk_r>
    7748:	99000217 	ldw	r4,8(r19)
    774c:	014003c4 	movi	r5,15
    7750:	1107c83a 	sub	r3,r2,r4
    7754:	28ffdd0e 	bge	r5,r3,76cc <_malloc_trim_r+0x70>
    7758:	014000b4 	movhi	r5,2
    775c:	2973c404 	addi	r5,r5,-12528
    7760:	29400017 	ldw	r5,0(r5)
    7764:	18c00054 	ori	r3,r3,1
    7768:	20c00115 	stw	r3,4(r4)
    776c:	00c000b4 	movhi	r3,2
    7770:	1145c83a 	sub	r2,r2,r5
    7774:	18f41a04 	addi	r3,r3,-12184
    7778:	18800015 	stw	r2,0(r3)
    777c:	003fd306 	br	76cc <_malloc_trim_r+0x70>

00007780 <_free_r>:
    7780:	28004c26 	beq	r5,zero,78b4 <_free_r+0x134>
    7784:	defffd04 	addi	sp,sp,-12
    7788:	dc400115 	stw	r17,4(sp)
    778c:	dc000015 	stw	r16,0(sp)
    7790:	2023883a 	mov	r17,r4
    7794:	2821883a 	mov	r16,r5
    7798:	dfc00215 	stw	ra,8(sp)
    779c:	000e9d00 	call	e9d0 <__malloc_lock>
    77a0:	813fff17 	ldw	r4,-4(r16)
    77a4:	00bfff84 	movi	r2,-2
    77a8:	024000b4 	movhi	r9,2
    77ac:	81bffe04 	addi	r6,r16,-8
    77b0:	2084703a 	and	r2,r4,r2
    77b4:	4a6d0304 	addi	r9,r9,-19444
    77b8:	308b883a 	add	r5,r6,r2
    77bc:	2a000117 	ldw	r8,4(r5)
    77c0:	49c00217 	ldw	r7,8(r9)
    77c4:	00ffff04 	movi	r3,-4
    77c8:	40c6703a 	and	r3,r8,r3
    77cc:	39405326 	beq	r7,r5,791c <_free_r+0x19c>
    77d0:	28c00115 	stw	r3,4(r5)
    77d4:	2100004c 	andi	r4,r4,1
    77d8:	2000091e 	bne	r4,zero,7800 <_free_r+0x80>
    77dc:	81fffe17 	ldw	r7,-8(r16)
    77e0:	4a000204 	addi	r8,r9,8
    77e4:	31cdc83a 	sub	r6,r6,r7
    77e8:	31000217 	ldw	r4,8(r6)
    77ec:	11c5883a 	add	r2,r2,r7
    77f0:	22006126 	beq	r4,r8,7978 <_free_r+0x1f8>
    77f4:	31c00317 	ldw	r7,12(r6)
    77f8:	21c00315 	stw	r7,12(r4)
    77fc:	39000215 	stw	r4,8(r7)
    7800:	28c9883a 	add	r4,r5,r3
    7804:	21c00117 	ldw	r7,4(r4)
    7808:	39c0004c 	andi	r7,r7,1
    780c:	38000d1e 	bne	r7,zero,7844 <_free_r+0xc4>
    7810:	29000217 	ldw	r4,8(r5)
    7814:	10c5883a 	add	r2,r2,r3
    7818:	00c000b4 	movhi	r3,2
    781c:	18ed0504 	addi	r3,r3,-19436
    7820:	20c07526 	beq	r4,r3,79f8 <_free_r+0x278>
    7824:	29c00317 	ldw	r7,12(r5)
    7828:	11400054 	ori	r5,r2,1
    782c:	3087883a 	add	r3,r6,r2
    7830:	21c00315 	stw	r7,12(r4)
    7834:	39000215 	stw	r4,8(r7)
    7838:	31400115 	stw	r5,4(r6)
    783c:	18800015 	stw	r2,0(r3)
    7840:	00000406 	br	7854 <_free_r+0xd4>
    7844:	10c00054 	ori	r3,r2,1
    7848:	30c00115 	stw	r3,4(r6)
    784c:	3087883a 	add	r3,r6,r2
    7850:	18800015 	stw	r2,0(r3)
    7854:	00c07fc4 	movi	r3,511
    7858:	18801736 	bltu	r3,r2,78b8 <_free_r+0x138>
    785c:	1004d0fa 	srli	r2,r2,3
    7860:	01400044 	movi	r5,1
    7864:	49000117 	ldw	r4,4(r9)
    7868:	1087883a 	add	r3,r2,r2
    786c:	18c7883a 	add	r3,r3,r3
    7870:	1005d0ba 	srai	r2,r2,2
    7874:	18c7883a 	add	r3,r3,r3
    7878:	1a47883a 	add	r3,r3,r9
    787c:	19c00217 	ldw	r7,8(r3)
    7880:	2884983a 	sll	r2,r5,r2
    7884:	30c00315 	stw	r3,12(r6)
    7888:	31c00215 	stw	r7,8(r6)
    788c:	1104b03a 	or	r2,r2,r4
    7890:	19800215 	stw	r6,8(r3)
    7894:	48800115 	stw	r2,4(r9)
    7898:	39800315 	stw	r6,12(r7)
    789c:	8809883a 	mov	r4,r17
    78a0:	dfc00217 	ldw	ra,8(sp)
    78a4:	dc400117 	ldw	r17,4(sp)
    78a8:	dc000017 	ldw	r16,0(sp)
    78ac:	dec00304 	addi	sp,sp,12
    78b0:	000eaf01 	jmpi	eaf0 <__malloc_unlock>
    78b4:	f800283a 	ret
    78b8:	1006d27a 	srli	r3,r2,9
    78bc:	01000104 	movi	r4,4
    78c0:	20c04036 	bltu	r4,r3,79c4 <_free_r+0x244>
    78c4:	1006d1ba 	srli	r3,r2,6
    78c8:	19400e04 	addi	r5,r3,56
    78cc:	2947883a 	add	r3,r5,r5
    78d0:	18c7883a 	add	r3,r3,r3
    78d4:	18c7883a 	add	r3,r3,r3
    78d8:	1a49883a 	add	r4,r3,r9
    78dc:	20c00217 	ldw	r3,8(r4)
    78e0:	01c000b4 	movhi	r7,2
    78e4:	39ed0304 	addi	r7,r7,-19444
    78e8:	19003b26 	beq	r3,r4,79d8 <_free_r+0x258>
    78ec:	01ffff04 	movi	r7,-4
    78f0:	19400117 	ldw	r5,4(r3)
    78f4:	29ca703a 	and	r5,r5,r7
    78f8:	1140022e 	bgeu	r2,r5,7904 <_free_r+0x184>
    78fc:	18c00217 	ldw	r3,8(r3)
    7900:	20fffb1e 	bne	r4,r3,78f0 <_free_r+0x170>
    7904:	18800317 	ldw	r2,12(r3)
    7908:	30800315 	stw	r2,12(r6)
    790c:	30c00215 	stw	r3,8(r6)
    7910:	11800215 	stw	r6,8(r2)
    7914:	19800315 	stw	r6,12(r3)
    7918:	003fe006 	br	789c <_free_r+0x11c>
    791c:	2100004c 	andi	r4,r4,1
    7920:	1885883a 	add	r2,r3,r2
    7924:	2000071e 	bne	r4,zero,7944 <_free_r+0x1c4>
    7928:	817ffe17 	ldw	r5,-8(r16)
    792c:	314dc83a 	sub	r6,r6,r5
    7930:	30c00317 	ldw	r3,12(r6)
    7934:	31000217 	ldw	r4,8(r6)
    7938:	1145883a 	add	r2,r2,r5
    793c:	20c00315 	stw	r3,12(r4)
    7940:	19000215 	stw	r4,8(r3)
    7944:	10c00054 	ori	r3,r2,1
    7948:	30c00115 	stw	r3,4(r6)
    794c:	00c000b4 	movhi	r3,2
    7950:	18f3c504 	addi	r3,r3,-12524
    7954:	18c00017 	ldw	r3,0(r3)
    7958:	49800215 	stw	r6,8(r9)
    795c:	10ffcf36 	bltu	r2,r3,789c <_free_r+0x11c>
    7960:	008000b4 	movhi	r2,2
    7964:	10b3f904 	addi	r2,r2,-12316
    7968:	11400017 	ldw	r5,0(r2)
    796c:	8809883a 	mov	r4,r17
    7970:	000765c0 	call	765c <_malloc_trim_r>
    7974:	003fc906 	br	789c <_free_r+0x11c>
    7978:	28c9883a 	add	r4,r5,r3
    797c:	21000117 	ldw	r4,4(r4)
    7980:	2100004c 	andi	r4,r4,1
    7984:	20000a1e 	bne	r4,zero,79b0 <_free_r+0x230>
    7988:	29000317 	ldw	r4,12(r5)
    798c:	29400217 	ldw	r5,8(r5)
    7990:	10c5883a 	add	r2,r2,r3
    7994:	10c00054 	ori	r3,r2,1
    7998:	29000315 	stw	r4,12(r5)
    799c:	21400215 	stw	r5,8(r4)
    79a0:	30c00115 	stw	r3,4(r6)
    79a4:	308d883a 	add	r6,r6,r2
    79a8:	30800015 	stw	r2,0(r6)
    79ac:	003fbb06 	br	789c <_free_r+0x11c>
    79b0:	10c00054 	ori	r3,r2,1
    79b4:	30c00115 	stw	r3,4(r6)
    79b8:	308d883a 	add	r6,r6,r2
    79bc:	30800015 	stw	r2,0(r6)
    79c0:	003fb606 	br	789c <_free_r+0x11c>
    79c4:	01000504 	movi	r4,20
    79c8:	20c01436 	bltu	r4,r3,7a1c <_free_r+0x29c>
    79cc:	194016c4 	addi	r5,r3,91
    79d0:	2947883a 	add	r3,r5,r5
    79d4:	003fbe06 	br	78d0 <_free_r+0x150>
    79d8:	280bd0ba 	srai	r5,r5,2
    79dc:	00800044 	movi	r2,1
    79e0:	39000117 	ldw	r4,4(r7)
    79e4:	114a983a 	sll	r5,r2,r5
    79e8:	1805883a 	mov	r2,r3
    79ec:	2908b03a 	or	r4,r5,r4
    79f0:	39000115 	stw	r4,4(r7)
    79f4:	003fc406 	br	7908 <_free_r+0x188>
    79f8:	49800515 	stw	r6,20(r9)
    79fc:	49800415 	stw	r6,16(r9)
    7a00:	10c00054 	ori	r3,r2,1
    7a04:	31000315 	stw	r4,12(r6)
    7a08:	31000215 	stw	r4,8(r6)
    7a0c:	30c00115 	stw	r3,4(r6)
    7a10:	308d883a 	add	r6,r6,r2
    7a14:	30800015 	stw	r2,0(r6)
    7a18:	003fa006 	br	789c <_free_r+0x11c>
    7a1c:	01001504 	movi	r4,84
    7a20:	20c00436 	bltu	r4,r3,7a34 <_free_r+0x2b4>
    7a24:	1006d33a 	srli	r3,r2,12
    7a28:	19401b84 	addi	r5,r3,110
    7a2c:	2947883a 	add	r3,r5,r5
    7a30:	003fa706 	br	78d0 <_free_r+0x150>
    7a34:	01005504 	movi	r4,340
    7a38:	20c00436 	bltu	r4,r3,7a4c <_free_r+0x2cc>
    7a3c:	1006d3fa 	srli	r3,r2,15
    7a40:	19401dc4 	addi	r5,r3,119
    7a44:	2947883a 	add	r3,r5,r5
    7a48:	003fa106 	br	78d0 <_free_r+0x150>
    7a4c:	01015504 	movi	r4,1364
    7a50:	20c00436 	bltu	r4,r3,7a64 <_free_r+0x2e4>
    7a54:	1006d4ba 	srli	r3,r2,18
    7a58:	19401f04 	addi	r5,r3,124
    7a5c:	2947883a 	add	r3,r5,r5
    7a60:	003f9b06 	br	78d0 <_free_r+0x150>
    7a64:	00c03f04 	movi	r3,252
    7a68:	01401f84 	movi	r5,126
    7a6c:	003f9806 	br	78d0 <_free_r+0x150>

00007a70 <_fwalk>:
    7a70:	defff704 	addi	sp,sp,-36
    7a74:	dd000415 	stw	r20,16(sp)
    7a78:	dfc00815 	stw	ra,32(sp)
    7a7c:	ddc00715 	stw	r23,28(sp)
    7a80:	dd800615 	stw	r22,24(sp)
    7a84:	dd400515 	stw	r21,20(sp)
    7a88:	dcc00315 	stw	r19,12(sp)
    7a8c:	dc800215 	stw	r18,8(sp)
    7a90:	dc400115 	stw	r17,4(sp)
    7a94:	dc000015 	stw	r16,0(sp)
    7a98:	2500b804 	addi	r20,r4,736
    7a9c:	a0002326 	beq	r20,zero,7b2c <_fwalk+0xbc>
    7aa0:	282b883a 	mov	r21,r5
    7aa4:	002f883a 	mov	r23,zero
    7aa8:	05800044 	movi	r22,1
    7aac:	04ffffc4 	movi	r19,-1
    7ab0:	a4400117 	ldw	r17,4(r20)
    7ab4:	a4800217 	ldw	r18,8(r20)
    7ab8:	8c7fffc4 	addi	r17,r17,-1
    7abc:	88000d16 	blt	r17,zero,7af4 <_fwalk+0x84>
    7ac0:	94000304 	addi	r16,r18,12
    7ac4:	94800384 	addi	r18,r18,14
    7ac8:	80c0000b 	ldhu	r3,0(r16)
    7acc:	8c7fffc4 	addi	r17,r17,-1
    7ad0:	813ffd04 	addi	r4,r16,-12
    7ad4:	b0c0042e 	bgeu	r22,r3,7ae8 <_fwalk+0x78>
    7ad8:	90c0000f 	ldh	r3,0(r18)
    7adc:	1cc00226 	beq	r3,r19,7ae8 <_fwalk+0x78>
    7ae0:	a83ee83a 	callr	r21
    7ae4:	b8aeb03a 	or	r23,r23,r2
    7ae8:	84001a04 	addi	r16,r16,104
    7aec:	94801a04 	addi	r18,r18,104
    7af0:	8cfff51e 	bne	r17,r19,7ac8 <_fwalk+0x58>
    7af4:	a5000017 	ldw	r20,0(r20)
    7af8:	a03fed1e 	bne	r20,zero,7ab0 <_fwalk+0x40>
    7afc:	b805883a 	mov	r2,r23
    7b00:	dfc00817 	ldw	ra,32(sp)
    7b04:	ddc00717 	ldw	r23,28(sp)
    7b08:	dd800617 	ldw	r22,24(sp)
    7b0c:	dd400517 	ldw	r21,20(sp)
    7b10:	dd000417 	ldw	r20,16(sp)
    7b14:	dcc00317 	ldw	r19,12(sp)
    7b18:	dc800217 	ldw	r18,8(sp)
    7b1c:	dc400117 	ldw	r17,4(sp)
    7b20:	dc000017 	ldw	r16,0(sp)
    7b24:	dec00904 	addi	sp,sp,36
    7b28:	f800283a 	ret
    7b2c:	002f883a 	mov	r23,zero
    7b30:	003ff206 	br	7afc <_fwalk+0x8c>

00007b34 <_fwalk_reent>:
    7b34:	defff704 	addi	sp,sp,-36
    7b38:	dd400515 	stw	r21,20(sp)
    7b3c:	dfc00815 	stw	ra,32(sp)
    7b40:	ddc00715 	stw	r23,28(sp)
    7b44:	dd800615 	stw	r22,24(sp)
    7b48:	dd000415 	stw	r20,16(sp)
    7b4c:	dcc00315 	stw	r19,12(sp)
    7b50:	dc800215 	stw	r18,8(sp)
    7b54:	dc400115 	stw	r17,4(sp)
    7b58:	dc000015 	stw	r16,0(sp)
    7b5c:	2540b804 	addi	r21,r4,736
    7b60:	a8002326 	beq	r21,zero,7bf0 <_fwalk_reent+0xbc>
    7b64:	2829883a 	mov	r20,r5
    7b68:	202d883a 	mov	r22,r4
    7b6c:	002f883a 	mov	r23,zero
    7b70:	04c00044 	movi	r19,1
    7b74:	04bfffc4 	movi	r18,-1
    7b78:	ac400117 	ldw	r17,4(r21)
    7b7c:	ac000217 	ldw	r16,8(r21)
    7b80:	8c7fffc4 	addi	r17,r17,-1
    7b84:	88000c16 	blt	r17,zero,7bb8 <_fwalk_reent+0x84>
    7b88:	84000304 	addi	r16,r16,12
    7b8c:	80c0000b 	ldhu	r3,0(r16)
    7b90:	8c7fffc4 	addi	r17,r17,-1
    7b94:	817ffd04 	addi	r5,r16,-12
    7b98:	98c0052e 	bgeu	r19,r3,7bb0 <_fwalk_reent+0x7c>
    7b9c:	80c0008f 	ldh	r3,2(r16)
    7ba0:	b009883a 	mov	r4,r22
    7ba4:	1c800226 	beq	r3,r18,7bb0 <_fwalk_reent+0x7c>
    7ba8:	a03ee83a 	callr	r20
    7bac:	b8aeb03a 	or	r23,r23,r2
    7bb0:	84001a04 	addi	r16,r16,104
    7bb4:	8cbff51e 	bne	r17,r18,7b8c <_fwalk_reent+0x58>
    7bb8:	ad400017 	ldw	r21,0(r21)
    7bbc:	a83fee1e 	bne	r21,zero,7b78 <_fwalk_reent+0x44>
    7bc0:	b805883a 	mov	r2,r23
    7bc4:	dfc00817 	ldw	ra,32(sp)
    7bc8:	ddc00717 	ldw	r23,28(sp)
    7bcc:	dd800617 	ldw	r22,24(sp)
    7bd0:	dd400517 	ldw	r21,20(sp)
    7bd4:	dd000417 	ldw	r20,16(sp)
    7bd8:	dcc00317 	ldw	r19,12(sp)
    7bdc:	dc800217 	ldw	r18,8(sp)
    7be0:	dc400117 	ldw	r17,4(sp)
    7be4:	dc000017 	ldw	r16,0(sp)
    7be8:	dec00904 	addi	sp,sp,36
    7bec:	f800283a 	ret
    7bf0:	002f883a 	mov	r23,zero
    7bf4:	003ff206 	br	7bc0 <_fwalk_reent+0x8c>

00007bf8 <_setlocale_r>:
    7bf8:	30001b26 	beq	r6,zero,7c68 <_setlocale_r+0x70>
    7bfc:	014000b4 	movhi	r5,2
    7c00:	defffe04 	addi	sp,sp,-8
    7c04:	296b0f04 	addi	r5,r5,-21444
    7c08:	3009883a 	mov	r4,r6
    7c0c:	dc000015 	stw	r16,0(sp)
    7c10:	dfc00115 	stw	ra,4(sp)
    7c14:	3021883a 	mov	r16,r6
    7c18:	0009bdc0 	call	9bdc <strcmp>
    7c1c:	1000061e 	bne	r2,zero,7c38 <_setlocale_r+0x40>
    7c20:	008000b4 	movhi	r2,2
    7c24:	10ab0e04 	addi	r2,r2,-21448
    7c28:	dfc00117 	ldw	ra,4(sp)
    7c2c:	dc000017 	ldw	r16,0(sp)
    7c30:	dec00204 	addi	sp,sp,8
    7c34:	f800283a 	ret
    7c38:	014000b4 	movhi	r5,2
    7c3c:	296b0e04 	addi	r5,r5,-21448
    7c40:	8009883a 	mov	r4,r16
    7c44:	0009bdc0 	call	9bdc <strcmp>
    7c48:	103ff526 	beq	r2,zero,7c20 <_setlocale_r+0x28>
    7c4c:	014000b4 	movhi	r5,2
    7c50:	296af904 	addi	r5,r5,-21532
    7c54:	8009883a 	mov	r4,r16
    7c58:	0009bdc0 	call	9bdc <strcmp>
    7c5c:	103ff026 	beq	r2,zero,7c20 <_setlocale_r+0x28>
    7c60:	0005883a 	mov	r2,zero
    7c64:	003ff006 	br	7c28 <_setlocale_r+0x30>
    7c68:	008000b4 	movhi	r2,2
    7c6c:	10ab0e04 	addi	r2,r2,-21448
    7c70:	f800283a 	ret

00007c74 <__locale_charset>:
    7c74:	008000b4 	movhi	r2,2
    7c78:	10aced04 	addi	r2,r2,-19532
    7c7c:	f800283a 	ret

00007c80 <__locale_mb_cur_max>:
    7c80:	008000b4 	movhi	r2,2
    7c84:	10b3c304 	addi	r2,r2,-12532
    7c88:	10800017 	ldw	r2,0(r2)
    7c8c:	f800283a 	ret

00007c90 <__locale_msgcharset>:
    7c90:	008000b4 	movhi	r2,2
    7c94:	10ace504 	addi	r2,r2,-19564
    7c98:	f800283a 	ret

00007c9c <__locale_cjk_lang>:
    7c9c:	0005883a 	mov	r2,zero
    7ca0:	f800283a 	ret

00007ca4 <_localeconv_r>:
    7ca4:	008000b4 	movhi	r2,2
    7ca8:	10acf504 	addi	r2,r2,-19500
    7cac:	f800283a 	ret

00007cb0 <setlocale>:
    7cb0:	00c000b4 	movhi	r3,2
    7cb4:	18f3c204 	addi	r3,r3,-12536
    7cb8:	2005883a 	mov	r2,r4
    7cbc:	19000017 	ldw	r4,0(r3)
    7cc0:	280d883a 	mov	r6,r5
    7cc4:	100b883a 	mov	r5,r2
    7cc8:	0007bf81 	jmpi	7bf8 <_setlocale_r>

00007ccc <localeconv>:
    7ccc:	008000b4 	movhi	r2,2
    7cd0:	10acf504 	addi	r2,r2,-19500
    7cd4:	f800283a 	ret

00007cd8 <__smakebuf_r>:
    7cd8:	2880030b 	ldhu	r2,12(r5)
    7cdc:	10c0008c 	andi	r3,r2,2
    7ce0:	1800401e 	bne	r3,zero,7de4 <__smakebuf_r+0x10c>
    7ce4:	deffec04 	addi	sp,sp,-80
    7ce8:	dc000f15 	stw	r16,60(sp)
    7cec:	2821883a 	mov	r16,r5
    7cf0:	2940038f 	ldh	r5,14(r5)
    7cf4:	dc401015 	stw	r17,64(sp)
    7cf8:	dfc01315 	stw	ra,76(sp)
    7cfc:	dcc01215 	stw	r19,72(sp)
    7d00:	dc801115 	stw	r18,68(sp)
    7d04:	2023883a 	mov	r17,r4
    7d08:	28001b16 	blt	r5,zero,7d78 <__smakebuf_r+0xa0>
    7d0c:	d80d883a 	mov	r6,sp
    7d10:	000b6680 	call	b668 <_fstat_r>
    7d14:	10001716 	blt	r2,zero,7d74 <__smakebuf_r+0x9c>
    7d18:	d8800117 	ldw	r2,4(sp)
    7d1c:	00e00014 	movui	r3,32768
    7d20:	10bc000c 	andi	r2,r2,61440
    7d24:	10c03726 	beq	r2,r3,7e04 <__smakebuf_r+0x12c>
    7d28:	80c0030b 	ldhu	r3,12(r16)
    7d2c:	18c20014 	ori	r3,r3,2048
    7d30:	80c0030d 	sth	r3,12(r16)
    7d34:	00c80004 	movi	r3,8192
    7d38:	10c03c1e 	bne	r2,r3,7e2c <__smakebuf_r+0x154>
    7d3c:	8140038f 	ldh	r5,14(r16)
    7d40:	8809883a 	mov	r4,r17
    7d44:	000bb8c0 	call	bb8c <_isatty_r>
    7d48:	10004e26 	beq	r2,zero,7e84 <__smakebuf_r+0x1ac>
    7d4c:	8080030b 	ldhu	r2,12(r16)
    7d50:	04c00044 	movi	r19,1
    7d54:	80c010c4 	addi	r3,r16,67
    7d58:	14c4b03a 	or	r2,r2,r19
    7d5c:	8080030d 	sth	r2,12(r16)
    7d60:	80c00015 	stw	r3,0(r16)
    7d64:	80c00415 	stw	r3,16(r16)
    7d68:	84c00515 	stw	r19,20(r16)
    7d6c:	04810004 	movi	r18,1024
    7d70:	00000706 	br	7d90 <__smakebuf_r+0xb8>
    7d74:	8080030b 	ldhu	r2,12(r16)
    7d78:	10c0200c 	andi	r3,r2,128
    7d7c:	18001f1e 	bne	r3,zero,7dfc <__smakebuf_r+0x124>
    7d80:	04810004 	movi	r18,1024
    7d84:	10820014 	ori	r2,r2,2048
    7d88:	8080030d 	sth	r2,12(r16)
    7d8c:	0027883a 	mov	r19,zero
    7d90:	8809883a 	mov	r4,r17
    7d94:	900b883a 	mov	r5,r18
    7d98:	0007e900 	call	7e90 <_malloc_r>
    7d9c:	10002e26 	beq	r2,zero,7e58 <__smakebuf_r+0x180>
    7da0:	80c0030b 	ldhu	r3,12(r16)
    7da4:	01000034 	movhi	r4,0
    7da8:	211caf04 	addi	r4,r4,29372
    7dac:	89000f15 	stw	r4,60(r17)
    7db0:	18c02014 	ori	r3,r3,128
    7db4:	80c0030d 	sth	r3,12(r16)
    7db8:	80800015 	stw	r2,0(r16)
    7dbc:	80800415 	stw	r2,16(r16)
    7dc0:	84800515 	stw	r18,20(r16)
    7dc4:	98001c1e 	bne	r19,zero,7e38 <__smakebuf_r+0x160>
    7dc8:	dfc01317 	ldw	ra,76(sp)
    7dcc:	dcc01217 	ldw	r19,72(sp)
    7dd0:	dc801117 	ldw	r18,68(sp)
    7dd4:	dc401017 	ldw	r17,64(sp)
    7dd8:	dc000f17 	ldw	r16,60(sp)
    7ddc:	dec01404 	addi	sp,sp,80
    7de0:	f800283a 	ret
    7de4:	288010c4 	addi	r2,r5,67
    7de8:	28800015 	stw	r2,0(r5)
    7dec:	28800415 	stw	r2,16(r5)
    7df0:	00800044 	movi	r2,1
    7df4:	28800515 	stw	r2,20(r5)
    7df8:	f800283a 	ret
    7dfc:	04801004 	movi	r18,64
    7e00:	003fe006 	br	7d84 <__smakebuf_r+0xac>
    7e04:	81000a17 	ldw	r4,40(r16)
    7e08:	00c00074 	movhi	r3,1
    7e0c:	18e6de04 	addi	r3,r3,-25736
    7e10:	20ffc51e 	bne	r4,r3,7d28 <__smakebuf_r+0x50>
    7e14:	80c0030b 	ldhu	r3,12(r16)
    7e18:	01010004 	movi	r4,1024
    7e1c:	81001315 	stw	r4,76(r16)
    7e20:	1906b03a 	or	r3,r3,r4
    7e24:	80c0030d 	sth	r3,12(r16)
    7e28:	003fc206 	br	7d34 <__smakebuf_r+0x5c>
    7e2c:	0027883a 	mov	r19,zero
    7e30:	04810004 	movi	r18,1024
    7e34:	003fd606 	br	7d90 <__smakebuf_r+0xb8>
    7e38:	8140038f 	ldh	r5,14(r16)
    7e3c:	8809883a 	mov	r4,r17
    7e40:	000bb8c0 	call	bb8c <_isatty_r>
    7e44:	103fe026 	beq	r2,zero,7dc8 <__smakebuf_r+0xf0>
    7e48:	8080030b 	ldhu	r2,12(r16)
    7e4c:	10800054 	ori	r2,r2,1
    7e50:	8080030d 	sth	r2,12(r16)
    7e54:	003fdc06 	br	7dc8 <__smakebuf_r+0xf0>
    7e58:	8080030b 	ldhu	r2,12(r16)
    7e5c:	10c0800c 	andi	r3,r2,512
    7e60:	183fd91e 	bne	r3,zero,7dc8 <__smakebuf_r+0xf0>
    7e64:	10800094 	ori	r2,r2,2
    7e68:	80c010c4 	addi	r3,r16,67
    7e6c:	8080030d 	sth	r2,12(r16)
    7e70:	00800044 	movi	r2,1
    7e74:	80c00015 	stw	r3,0(r16)
    7e78:	80c00415 	stw	r3,16(r16)
    7e7c:	80800515 	stw	r2,20(r16)
    7e80:	003fd106 	br	7dc8 <__smakebuf_r+0xf0>
    7e84:	04c00044 	movi	r19,1
    7e88:	04810004 	movi	r18,1024
    7e8c:	003fc006 	br	7d90 <__smakebuf_r+0xb8>

00007e90 <_malloc_r>:
    7e90:	defff504 	addi	sp,sp,-44
    7e94:	dc800315 	stw	r18,12(sp)
    7e98:	dfc00a15 	stw	ra,40(sp)
    7e9c:	df000915 	stw	fp,36(sp)
    7ea0:	ddc00815 	stw	r23,32(sp)
    7ea4:	dd800715 	stw	r22,28(sp)
    7ea8:	dd400615 	stw	r21,24(sp)
    7eac:	dd000515 	stw	r20,20(sp)
    7eb0:	dcc00415 	stw	r19,16(sp)
    7eb4:	dc400215 	stw	r17,8(sp)
    7eb8:	dc000115 	stw	r16,4(sp)
    7ebc:	288002c4 	addi	r2,r5,11
    7ec0:	00c00584 	movi	r3,22
    7ec4:	2025883a 	mov	r18,r4
    7ec8:	18802a2e 	bgeu	r3,r2,7f74 <_malloc_r+0xe4>
    7ecc:	047ffe04 	movi	r17,-8
    7ed0:	1462703a 	and	r17,r2,r17
    7ed4:	88009e16 	blt	r17,zero,8150 <_malloc_r+0x2c0>
    7ed8:	89409d36 	bltu	r17,r5,8150 <_malloc_r+0x2c0>
    7edc:	000e9d00 	call	e9d0 <__malloc_lock>
    7ee0:	00807dc4 	movi	r2,503
    7ee4:	14402736 	bltu	r2,r17,7f84 <_malloc_r+0xf4>
    7ee8:	8806d0fa 	srli	r3,r17,3
    7eec:	04c000b4 	movhi	r19,2
    7ef0:	9ced0304 	addi	r19,r19,-19444
    7ef4:	18c5883a 	add	r2,r3,r3
    7ef8:	1085883a 	add	r2,r2,r2
    7efc:	1085883a 	add	r2,r2,r2
    7f00:	9885883a 	add	r2,r19,r2
    7f04:	14000317 	ldw	r16,12(r2)
    7f08:	80814a26 	beq	r16,r2,8434 <_malloc_r+0x5a4>
    7f0c:	80c00117 	ldw	r3,4(r16)
    7f10:	81000317 	ldw	r4,12(r16)
    7f14:	00bfff04 	movi	r2,-4
    7f18:	1884703a 	and	r2,r3,r2
    7f1c:	81400217 	ldw	r5,8(r16)
    7f20:	8085883a 	add	r2,r16,r2
    7f24:	10c00117 	ldw	r3,4(r2)
    7f28:	29000315 	stw	r4,12(r5)
    7f2c:	21400215 	stw	r5,8(r4)
    7f30:	18c00054 	ori	r3,r3,1
    7f34:	10c00115 	stw	r3,4(r2)
    7f38:	9009883a 	mov	r4,r18
    7f3c:	000eaf00 	call	eaf0 <__malloc_unlock>
    7f40:	80800204 	addi	r2,r16,8
    7f44:	dfc00a17 	ldw	ra,40(sp)
    7f48:	df000917 	ldw	fp,36(sp)
    7f4c:	ddc00817 	ldw	r23,32(sp)
    7f50:	dd800717 	ldw	r22,28(sp)
    7f54:	dd400617 	ldw	r21,24(sp)
    7f58:	dd000517 	ldw	r20,20(sp)
    7f5c:	dcc00417 	ldw	r19,16(sp)
    7f60:	dc800317 	ldw	r18,12(sp)
    7f64:	dc400217 	ldw	r17,8(sp)
    7f68:	dc000117 	ldw	r16,4(sp)
    7f6c:	dec00b04 	addi	sp,sp,44
    7f70:	f800283a 	ret
    7f74:	04400404 	movi	r17,16
    7f78:	89407536 	bltu	r17,r5,8150 <_malloc_r+0x2c0>
    7f7c:	000e9d00 	call	e9d0 <__malloc_lock>
    7f80:	003fd906 	br	7ee8 <_malloc_r+0x58>
    7f84:	8806d27a 	srli	r3,r17,9
    7f88:	18007526 	beq	r3,zero,8160 <_malloc_r+0x2d0>
    7f8c:	00800104 	movi	r2,4
    7f90:	10c0ef36 	bltu	r2,r3,8350 <_malloc_r+0x4c0>
    7f94:	8806d1ba 	srli	r3,r17,6
    7f98:	19c00e04 	addi	r7,r3,56
    7f9c:	39cb883a 	add	r5,r7,r7
    7fa0:	04c000b4 	movhi	r19,2
    7fa4:	294b883a 	add	r5,r5,r5
    7fa8:	9ced0304 	addi	r19,r19,-19444
    7fac:	294b883a 	add	r5,r5,r5
    7fb0:	994b883a 	add	r5,r19,r5
    7fb4:	2c000317 	ldw	r16,12(r5)
    7fb8:	2c000e26 	beq	r5,r16,7ff4 <_malloc_r+0x164>
    7fbc:	80800117 	ldw	r2,4(r16)
    7fc0:	01bfff04 	movi	r6,-4
    7fc4:	010003c4 	movi	r4,15
    7fc8:	1184703a 	and	r2,r2,r6
    7fcc:	1447c83a 	sub	r3,r2,r17
    7fd0:	20c00716 	blt	r4,r3,7ff0 <_malloc_r+0x160>
    7fd4:	1800650e 	bge	r3,zero,816c <_malloc_r+0x2dc>
    7fd8:	84000317 	ldw	r16,12(r16)
    7fdc:	2c000526 	beq	r5,r16,7ff4 <_malloc_r+0x164>
    7fe0:	80800117 	ldw	r2,4(r16)
    7fe4:	1184703a 	and	r2,r2,r6
    7fe8:	1447c83a 	sub	r3,r2,r17
    7fec:	20fff90e 	bge	r4,r3,7fd4 <_malloc_r+0x144>
    7ff0:	39ffffc4 	addi	r7,r7,-1
    7ff4:	38c00044 	addi	r3,r7,1
    7ff8:	018000b4 	movhi	r6,2
    7ffc:	9c000417 	ldw	r16,16(r19)
    8000:	31ad0304 	addi	r6,r6,-19444
    8004:	32400204 	addi	r9,r6,8
    8008:	82410326 	beq	r16,r9,8418 <_malloc_r+0x588>
    800c:	81000117 	ldw	r4,4(r16)
    8010:	00bfff04 	movi	r2,-4
    8014:	208e703a 	and	r7,r4,r2
    8018:	3c45c83a 	sub	r2,r7,r17
    801c:	010003c4 	movi	r4,15
    8020:	2080ee16 	blt	r4,r2,83dc <_malloc_r+0x54c>
    8024:	32400515 	stw	r9,20(r6)
    8028:	32400415 	stw	r9,16(r6)
    802c:	1000510e 	bge	r2,zero,8174 <_malloc_r+0x2e4>
    8030:	00807fc4 	movi	r2,511
    8034:	11c0ce36 	bltu	r2,r7,8370 <_malloc_r+0x4e0>
    8038:	3808d0fa 	srli	r4,r7,3
    803c:	01c00044 	movi	r7,1
    8040:	30800117 	ldw	r2,4(r6)
    8044:	210b883a 	add	r5,r4,r4
    8048:	294b883a 	add	r5,r5,r5
    804c:	2009d0ba 	srai	r4,r4,2
    8050:	294b883a 	add	r5,r5,r5
    8054:	298b883a 	add	r5,r5,r6
    8058:	2a000217 	ldw	r8,8(r5)
    805c:	3908983a 	sll	r4,r7,r4
    8060:	81400315 	stw	r5,12(r16)
    8064:	82000215 	stw	r8,8(r16)
    8068:	2088b03a 	or	r4,r4,r2
    806c:	2c000215 	stw	r16,8(r5)
    8070:	31000115 	stw	r4,4(r6)
    8074:	44000315 	stw	r16,12(r8)
    8078:	1805d0ba 	srai	r2,r3,2
    807c:	01400044 	movi	r5,1
    8080:	288a983a 	sll	r5,r5,r2
    8084:	21404336 	bltu	r4,r5,8194 <_malloc_r+0x304>
    8088:	2144703a 	and	r2,r4,r5
    808c:	10000a1e 	bne	r2,zero,80b8 <_malloc_r+0x228>
    8090:	00bfff04 	movi	r2,-4
    8094:	294b883a 	add	r5,r5,r5
    8098:	1886703a 	and	r3,r3,r2
    809c:	2144703a 	and	r2,r4,r5
    80a0:	18c00104 	addi	r3,r3,4
    80a4:	1000041e 	bne	r2,zero,80b8 <_malloc_r+0x228>
    80a8:	294b883a 	add	r5,r5,r5
    80ac:	2144703a 	and	r2,r4,r5
    80b0:	18c00104 	addi	r3,r3,4
    80b4:	103ffc26 	beq	r2,zero,80a8 <_malloc_r+0x218>
    80b8:	023fff04 	movi	r8,-4
    80bc:	01c003c4 	movi	r7,15
    80c0:	18c5883a 	add	r2,r3,r3
    80c4:	1085883a 	add	r2,r2,r2
    80c8:	1085883a 	add	r2,r2,r2
    80cc:	9895883a 	add	r10,r19,r2
    80d0:	52c00304 	addi	r11,r10,12
    80d4:	1819883a 	mov	r12,r3
    80d8:	5c000017 	ldw	r16,0(r11)
    80dc:	59bffd04 	addi	r6,r11,-12
    80e0:	8180041e 	bne	r16,r6,80f4 <_malloc_r+0x264>
    80e4:	0000ce06 	br	8420 <_malloc_r+0x590>
    80e8:	2000d70e 	bge	r4,zero,8448 <_malloc_r+0x5b8>
    80ec:	84000317 	ldw	r16,12(r16)
    80f0:	8180cb26 	beq	r16,r6,8420 <_malloc_r+0x590>
    80f4:	80800117 	ldw	r2,4(r16)
    80f8:	1204703a 	and	r2,r2,r8
    80fc:	1449c83a 	sub	r4,r2,r17
    8100:	393ff90e 	bge	r7,r4,80e8 <_malloc_r+0x258>
    8104:	80800317 	ldw	r2,12(r16)
    8108:	80c00217 	ldw	r3,8(r16)
    810c:	89400054 	ori	r5,r17,1
    8110:	81400115 	stw	r5,4(r16)
    8114:	18800315 	stw	r2,12(r3)
    8118:	10c00215 	stw	r3,8(r2)
    811c:	8463883a 	add	r17,r16,r17
    8120:	9c400515 	stw	r17,20(r19)
    8124:	9c400415 	stw	r17,16(r19)
    8128:	20800054 	ori	r2,r4,1
    812c:	88800115 	stw	r2,4(r17)
    8130:	8a400315 	stw	r9,12(r17)
    8134:	8a400215 	stw	r9,8(r17)
    8138:	8923883a 	add	r17,r17,r4
    813c:	89000015 	stw	r4,0(r17)
    8140:	9009883a 	mov	r4,r18
    8144:	000eaf00 	call	eaf0 <__malloc_unlock>
    8148:	80800204 	addi	r2,r16,8
    814c:	003f7d06 	br	7f44 <_malloc_r+0xb4>
    8150:	00800304 	movi	r2,12
    8154:	90800015 	stw	r2,0(r18)
    8158:	0005883a 	mov	r2,zero
    815c:	003f7906 	br	7f44 <_malloc_r+0xb4>
    8160:	01401f84 	movi	r5,126
    8164:	01c00fc4 	movi	r7,63
    8168:	003f8d06 	br	7fa0 <_malloc_r+0x110>
    816c:	81000317 	ldw	r4,12(r16)
    8170:	003f6a06 	br	7f1c <_malloc_r+0x8c>
    8174:	81c5883a 	add	r2,r16,r7
    8178:	10c00117 	ldw	r3,4(r2)
    817c:	9009883a 	mov	r4,r18
    8180:	18c00054 	ori	r3,r3,1
    8184:	10c00115 	stw	r3,4(r2)
    8188:	000eaf00 	call	eaf0 <__malloc_unlock>
    818c:	80800204 	addi	r2,r16,8
    8190:	003f6c06 	br	7f44 <_malloc_r+0xb4>
    8194:	9c000217 	ldw	r16,8(r19)
    8198:	00bfff04 	movi	r2,-4
    819c:	85800117 	ldw	r22,4(r16)
    81a0:	b0ac703a 	and	r22,r22,r2
    81a4:	b4400336 	bltu	r22,r17,81b4 <_malloc_r+0x324>
    81a8:	b445c83a 	sub	r2,r22,r17
    81ac:	00c003c4 	movi	r3,15
    81b0:	18805d16 	blt	r3,r2,8328 <_malloc_r+0x498>
    81b4:	05c000b4 	movhi	r23,2
    81b8:	008000b4 	movhi	r2,2
    81bc:	bdf3c404 	addi	r23,r23,-12528
    81c0:	10b3f904 	addi	r2,r2,-12316
    81c4:	15400017 	ldw	r21,0(r2)
    81c8:	b9000017 	ldw	r4,0(r23)
    81cc:	00ffffc4 	movi	r3,-1
    81d0:	858d883a 	add	r6,r16,r22
    81d4:	8d6b883a 	add	r21,r17,r21
    81d8:	20c0e426 	beq	r4,r3,856c <_malloc_r+0x6dc>
    81dc:	ad4403c4 	addi	r21,r21,4111
    81e0:	00fc0004 	movi	r3,-4096
    81e4:	a8ea703a 	and	r21,r21,r3
    81e8:	9009883a 	mov	r4,r18
    81ec:	a80b883a 	mov	r5,r21
    81f0:	d9800015 	stw	r6,0(sp)
    81f4:	0009a4c0 	call	9a4c <_sbrk_r>
    81f8:	00ffffc4 	movi	r3,-1
    81fc:	1029883a 	mov	r20,r2
    8200:	d9800017 	ldw	r6,0(sp)
    8204:	10c0a426 	beq	r2,r3,8498 <_malloc_r+0x608>
    8208:	1180a236 	bltu	r2,r6,8494 <_malloc_r+0x604>
    820c:	070000b4 	movhi	fp,2
    8210:	e7341a04 	addi	fp,fp,-12184
    8214:	e0c00017 	ldw	r3,0(fp)
    8218:	a8c7883a 	add	r3,r21,r3
    821c:	e0c00015 	stw	r3,0(fp)
    8220:	3500da26 	beq	r6,r20,858c <_malloc_r+0x6fc>
    8224:	b9000017 	ldw	r4,0(r23)
    8228:	00bfffc4 	movi	r2,-1
    822c:	2080e426 	beq	r4,r2,85c0 <_malloc_r+0x730>
    8230:	a185c83a 	sub	r2,r20,r6
    8234:	1885883a 	add	r2,r3,r2
    8238:	e0800015 	stw	r2,0(fp)
    823c:	a0c001cc 	andi	r3,r20,7
    8240:	1800b526 	beq	r3,zero,8518 <_malloc_r+0x688>
    8244:	a0e9c83a 	sub	r20,r20,r3
    8248:	00840204 	movi	r2,4104
    824c:	a5000204 	addi	r20,r20,8
    8250:	10c7c83a 	sub	r3,r2,r3
    8254:	a545883a 	add	r2,r20,r21
    8258:	1083ffcc 	andi	r2,r2,4095
    825c:	18abc83a 	sub	r21,r3,r2
    8260:	9009883a 	mov	r4,r18
    8264:	a80b883a 	mov	r5,r21
    8268:	0009a4c0 	call	9a4c <_sbrk_r>
    826c:	00ffffc4 	movi	r3,-1
    8270:	10c0d026 	beq	r2,r3,85b4 <_malloc_r+0x724>
    8274:	1507c83a 	sub	r3,r2,r20
    8278:	a8c7883a 	add	r3,r21,r3
    827c:	18c00054 	ori	r3,r3,1
    8280:	e0800017 	ldw	r2,0(fp)
    8284:	9d000215 	stw	r20,8(r19)
    8288:	a0c00115 	stw	r3,4(r20)
    828c:	a887883a 	add	r3,r21,r2
    8290:	e0c00015 	stw	r3,0(fp)
    8294:	84c00e26 	beq	r16,r19,82d0 <_malloc_r+0x440>
    8298:	018003c4 	movi	r6,15
    829c:	3580a02e 	bgeu	r6,r22,8520 <_malloc_r+0x690>
    82a0:	81400117 	ldw	r5,4(r16)
    82a4:	013ffe04 	movi	r4,-8
    82a8:	b0bffd04 	addi	r2,r22,-12
    82ac:	1104703a 	and	r2,r2,r4
    82b0:	2900004c 	andi	r4,r5,1
    82b4:	1108b03a 	or	r4,r2,r4
    82b8:	81000115 	stw	r4,4(r16)
    82bc:	01400144 	movi	r5,5
    82c0:	8089883a 	add	r4,r16,r2
    82c4:	21400115 	stw	r5,4(r4)
    82c8:	21400215 	stw	r5,8(r4)
    82cc:	3080c036 	bltu	r6,r2,85d0 <_malloc_r+0x740>
    82d0:	008000b4 	movhi	r2,2
    82d4:	10b3f804 	addi	r2,r2,-12320
    82d8:	11000017 	ldw	r4,0(r2)
    82dc:	20c0012e 	bgeu	r4,r3,82e4 <_malloc_r+0x454>
    82e0:	10c00015 	stw	r3,0(r2)
    82e4:	008000b4 	movhi	r2,2
    82e8:	10b3f704 	addi	r2,r2,-12324
    82ec:	11000017 	ldw	r4,0(r2)
    82f0:	9c000217 	ldw	r16,8(r19)
    82f4:	20c0012e 	bgeu	r4,r3,82fc <_malloc_r+0x46c>
    82f8:	10c00015 	stw	r3,0(r2)
    82fc:	80c00117 	ldw	r3,4(r16)
    8300:	00bfff04 	movi	r2,-4
    8304:	1886703a 	and	r3,r3,r2
    8308:	1c45c83a 	sub	r2,r3,r17
    830c:	1c400236 	bltu	r3,r17,8318 <_malloc_r+0x488>
    8310:	00c003c4 	movi	r3,15
    8314:	18800416 	blt	r3,r2,8328 <_malloc_r+0x498>
    8318:	9009883a 	mov	r4,r18
    831c:	000eaf00 	call	eaf0 <__malloc_unlock>
    8320:	0005883a 	mov	r2,zero
    8324:	003f0706 	br	7f44 <_malloc_r+0xb4>
    8328:	88c00054 	ori	r3,r17,1
    832c:	80c00115 	stw	r3,4(r16)
    8330:	8463883a 	add	r17,r16,r17
    8334:	10800054 	ori	r2,r2,1
    8338:	9c400215 	stw	r17,8(r19)
    833c:	88800115 	stw	r2,4(r17)
    8340:	9009883a 	mov	r4,r18
    8344:	000eaf00 	call	eaf0 <__malloc_unlock>
    8348:	80800204 	addi	r2,r16,8
    834c:	003efd06 	br	7f44 <_malloc_r+0xb4>
    8350:	00800504 	movi	r2,20
    8354:	10c0482e 	bgeu	r2,r3,8478 <_malloc_r+0x5e8>
    8358:	00801504 	movi	r2,84
    835c:	10c06836 	bltu	r2,r3,8500 <_malloc_r+0x670>
    8360:	8806d33a 	srli	r3,r17,12
    8364:	19c01b84 	addi	r7,r3,110
    8368:	39cb883a 	add	r5,r7,r7
    836c:	003f0c06 	br	7fa0 <_malloc_r+0x110>
    8370:	3804d27a 	srli	r2,r7,9
    8374:	01000104 	movi	r4,4
    8378:	2080422e 	bgeu	r4,r2,8484 <_malloc_r+0x5f4>
    837c:	01000504 	movi	r4,20
    8380:	20807c36 	bltu	r4,r2,8574 <_malloc_r+0x6e4>
    8384:	110016c4 	addi	r4,r2,91
    8388:	210b883a 	add	r5,r4,r4
    838c:	294b883a 	add	r5,r5,r5
    8390:	294b883a 	add	r5,r5,r5
    8394:	994b883a 	add	r5,r19,r5
    8398:	28800217 	ldw	r2,8(r5)
    839c:	020000b4 	movhi	r8,2
    83a0:	422d0304 	addi	r8,r8,-19444
    83a4:	11406326 	beq	r2,r5,8534 <_malloc_r+0x6a4>
    83a8:	01bfff04 	movi	r6,-4
    83ac:	11000117 	ldw	r4,4(r2)
    83b0:	2188703a 	and	r4,r4,r6
    83b4:	3900022e 	bgeu	r7,r4,83c0 <_malloc_r+0x530>
    83b8:	10800217 	ldw	r2,8(r2)
    83bc:	28bffb1e 	bne	r5,r2,83ac <_malloc_r+0x51c>
    83c0:	11800317 	ldw	r6,12(r2)
    83c4:	99000117 	ldw	r4,4(r19)
    83c8:	81800315 	stw	r6,12(r16)
    83cc:	80800215 	stw	r2,8(r16)
    83d0:	34000215 	stw	r16,8(r6)
    83d4:	14000315 	stw	r16,12(r2)
    83d8:	003f2706 	br	8078 <_malloc_r+0x1e8>
    83dc:	88c00054 	ori	r3,r17,1
    83e0:	80c00115 	stw	r3,4(r16)
    83e4:	8463883a 	add	r17,r16,r17
    83e8:	34400515 	stw	r17,20(r6)
    83ec:	34400415 	stw	r17,16(r6)
    83f0:	10c00054 	ori	r3,r2,1
    83f4:	8a400315 	stw	r9,12(r17)
    83f8:	8a400215 	stw	r9,8(r17)
    83fc:	88c00115 	stw	r3,4(r17)
    8400:	88a3883a 	add	r17,r17,r2
    8404:	88800015 	stw	r2,0(r17)
    8408:	9009883a 	mov	r4,r18
    840c:	000eaf00 	call	eaf0 <__malloc_unlock>
    8410:	80800204 	addi	r2,r16,8
    8414:	003ecb06 	br	7f44 <_malloc_r+0xb4>
    8418:	31000117 	ldw	r4,4(r6)
    841c:	003f1606 	br	8078 <_malloc_r+0x1e8>
    8420:	63000044 	addi	r12,r12,1
    8424:	608000cc 	andi	r2,r12,3
    8428:	5ac00204 	addi	r11,r11,8
    842c:	103f2a1e 	bne	r2,zero,80d8 <_malloc_r+0x248>
    8430:	00002106 	br	84b8 <_malloc_r+0x628>
    8434:	80800204 	addi	r2,r16,8
    8438:	84000517 	ldw	r16,20(r16)
    843c:	143eb31e 	bne	r2,r16,7f0c <_malloc_r+0x7c>
    8440:	18c00084 	addi	r3,r3,2
    8444:	003eec06 	br	7ff8 <_malloc_r+0x168>
    8448:	8085883a 	add	r2,r16,r2
    844c:	10c00117 	ldw	r3,4(r2)
    8450:	81000317 	ldw	r4,12(r16)
    8454:	81400217 	ldw	r5,8(r16)
    8458:	18c00054 	ori	r3,r3,1
    845c:	10c00115 	stw	r3,4(r2)
    8460:	29000315 	stw	r4,12(r5)
    8464:	21400215 	stw	r5,8(r4)
    8468:	9009883a 	mov	r4,r18
    846c:	000eaf00 	call	eaf0 <__malloc_unlock>
    8470:	80800204 	addi	r2,r16,8
    8474:	003eb306 	br	7f44 <_malloc_r+0xb4>
    8478:	19c016c4 	addi	r7,r3,91
    847c:	39cb883a 	add	r5,r7,r7
    8480:	003ec706 	br	7fa0 <_malloc_r+0x110>
    8484:	3804d1ba 	srli	r2,r7,6
    8488:	11000e04 	addi	r4,r2,56
    848c:	210b883a 	add	r5,r4,r4
    8490:	003fbe06 	br	838c <_malloc_r+0x4fc>
    8494:	84ff5d26 	beq	r16,r19,820c <_malloc_r+0x37c>
    8498:	9c000217 	ldw	r16,8(r19)
    849c:	00bfff04 	movi	r2,-4
    84a0:	80c00117 	ldw	r3,4(r16)
    84a4:	1886703a 	and	r3,r3,r2
    84a8:	003f9706 	br	8308 <_malloc_r+0x478>
    84ac:	52800017 	ldw	r10,0(r10)
    84b0:	18ffffc4 	addi	r3,r3,-1
    84b4:	50805c1e 	bne	r10,r2,8628 <_malloc_r+0x798>
    84b8:	190000cc 	andi	r4,r3,3
    84bc:	50bffe04 	addi	r2,r10,-8
    84c0:	203ffa1e 	bne	r4,zero,84ac <_malloc_r+0x61c>
    84c4:	98800117 	ldw	r2,4(r19)
    84c8:	0146303a 	nor	r3,zero,r5
    84cc:	1884703a 	and	r2,r3,r2
    84d0:	98800115 	stw	r2,4(r19)
    84d4:	294b883a 	add	r5,r5,r5
    84d8:	117f2e36 	bltu	r2,r5,8194 <_malloc_r+0x304>
    84dc:	283f2d26 	beq	r5,zero,8194 <_malloc_r+0x304>
    84e0:	1146703a 	and	r3,r2,r5
    84e4:	1800521e 	bne	r3,zero,8630 <_malloc_r+0x7a0>
    84e8:	6007883a 	mov	r3,r12
    84ec:	294b883a 	add	r5,r5,r5
    84f0:	1148703a 	and	r4,r2,r5
    84f4:	18c00104 	addi	r3,r3,4
    84f8:	203ffc26 	beq	r4,zero,84ec <_malloc_r+0x65c>
    84fc:	003ef006 	br	80c0 <_malloc_r+0x230>
    8500:	00805504 	movi	r2,340
    8504:	10c01336 	bltu	r2,r3,8554 <_malloc_r+0x6c4>
    8508:	8806d3fa 	srli	r3,r17,15
    850c:	19c01dc4 	addi	r7,r3,119
    8510:	39cb883a 	add	r5,r7,r7
    8514:	003ea206 	br	7fa0 <_malloc_r+0x110>
    8518:	00c40004 	movi	r3,4096
    851c:	003f4d06 	br	8254 <_malloc_r+0x3c4>
    8520:	00800044 	movi	r2,1
    8524:	a0800115 	stw	r2,4(r20)
    8528:	a021883a 	mov	r16,r20
    852c:	0007883a 	mov	r3,zero
    8530:	003f7506 	br	8308 <_malloc_r+0x478>
    8534:	200bd0ba 	srai	r5,r4,2
    8538:	01800044 	movi	r6,1
    853c:	41000117 	ldw	r4,4(r8)
    8540:	314a983a 	sll	r5,r6,r5
    8544:	100d883a 	mov	r6,r2
    8548:	2908b03a 	or	r4,r5,r4
    854c:	41000115 	stw	r4,4(r8)
    8550:	003f9d06 	br	83c8 <_malloc_r+0x538>
    8554:	00815504 	movi	r2,1364
    8558:	10c01336 	bltu	r2,r3,85a8 <_malloc_r+0x718>
    855c:	8806d4ba 	srli	r3,r17,18
    8560:	19c01f04 	addi	r7,r3,124
    8564:	39cb883a 	add	r5,r7,r7
    8568:	003e8d06 	br	7fa0 <_malloc_r+0x110>
    856c:	ad400404 	addi	r21,r21,16
    8570:	003f1d06 	br	81e8 <_malloc_r+0x358>
    8574:	01001504 	movi	r4,84
    8578:	20801c36 	bltu	r4,r2,85ec <_malloc_r+0x75c>
    857c:	3804d33a 	srli	r2,r7,12
    8580:	11001b84 	addi	r4,r2,110
    8584:	210b883a 	add	r5,r4,r4
    8588:	003f8006 	br	838c <_malloc_r+0x4fc>
    858c:	3083ffcc 	andi	r2,r6,4095
    8590:	103f241e 	bne	r2,zero,8224 <_malloc_r+0x394>
    8594:	99000217 	ldw	r4,8(r19)
    8598:	ad85883a 	add	r2,r21,r22
    859c:	10800054 	ori	r2,r2,1
    85a0:	20800115 	stw	r2,4(r4)
    85a4:	003f4a06 	br	82d0 <_malloc_r+0x440>
    85a8:	01403f04 	movi	r5,252
    85ac:	01c01f84 	movi	r7,126
    85b0:	003e7b06 	br	7fa0 <_malloc_r+0x110>
    85b4:	00c00044 	movi	r3,1
    85b8:	002b883a 	mov	r21,zero
    85bc:	003f3006 	br	8280 <_malloc_r+0x3f0>
    85c0:	008000b4 	movhi	r2,2
    85c4:	10b3c404 	addi	r2,r2,-12528
    85c8:	15000015 	stw	r20,0(r2)
    85cc:	003f1b06 	br	823c <_malloc_r+0x3ac>
    85d0:	9009883a 	mov	r4,r18
    85d4:	81400204 	addi	r5,r16,8
    85d8:	00077800 	call	7780 <_free_r>
    85dc:	008000b4 	movhi	r2,2
    85e0:	10b41a04 	addi	r2,r2,-12184
    85e4:	10c00017 	ldw	r3,0(r2)
    85e8:	003f3906 	br	82d0 <_malloc_r+0x440>
    85ec:	01005504 	movi	r4,340
    85f0:	20800436 	bltu	r4,r2,8604 <_malloc_r+0x774>
    85f4:	3804d3fa 	srli	r2,r7,15
    85f8:	11001dc4 	addi	r4,r2,119
    85fc:	210b883a 	add	r5,r4,r4
    8600:	003f6206 	br	838c <_malloc_r+0x4fc>
    8604:	01015504 	movi	r4,1364
    8608:	20800436 	bltu	r4,r2,861c <_malloc_r+0x78c>
    860c:	3804d4ba 	srli	r2,r7,18
    8610:	11001f04 	addi	r4,r2,124
    8614:	210b883a 	add	r5,r4,r4
    8618:	003f5c06 	br	838c <_malloc_r+0x4fc>
    861c:	01403f04 	movi	r5,252
    8620:	01001f84 	movi	r4,126
    8624:	003f5906 	br	838c <_malloc_r+0x4fc>
    8628:	98800117 	ldw	r2,4(r19)
    862c:	003fa906 	br	84d4 <_malloc_r+0x644>
    8630:	6007883a 	mov	r3,r12
    8634:	003ea206 	br	80c0 <_malloc_r+0x230>

00008638 <memchr>:
    8638:	208000cc 	andi	r2,r4,3
    863c:	280f883a 	mov	r7,r5
    8640:	10003526 	beq	r2,zero,8718 <memchr+0xe0>
    8644:	30bfffc4 	addi	r2,r6,-1
    8648:	30001b26 	beq	r6,zero,86b8 <memchr+0x80>
    864c:	21800003 	ldbu	r6,0(r4)
    8650:	28c03fcc 	andi	r3,r5,255
    8654:	30c01a26 	beq	r6,r3,86c0 <memchr+0x88>
    8658:	180d883a 	mov	r6,r3
    865c:	00000406 	br	8670 <memchr+0x38>
    8660:	10001526 	beq	r2,zero,86b8 <memchr+0x80>
    8664:	20c00003 	ldbu	r3,0(r4)
    8668:	10bfffc4 	addi	r2,r2,-1
    866c:	19801426 	beq	r3,r6,86c0 <memchr+0x88>
    8670:	21000044 	addi	r4,r4,1
    8674:	20c000cc 	andi	r3,r4,3
    8678:	183ff91e 	bne	r3,zero,8660 <memchr+0x28>
    867c:	024000c4 	movi	r9,3
    8680:	48801136 	bltu	r9,r2,86c8 <memchr+0x90>
    8684:	10000c26 	beq	r2,zero,86b8 <memchr+0x80>
    8688:	20c00003 	ldbu	r3,0(r4)
    868c:	29403fcc 	andi	r5,r5,255
    8690:	19400b26 	beq	r3,r5,86c0 <memchr+0x88>
    8694:	20c00044 	addi	r3,r4,1
    8698:	2085883a 	add	r2,r4,r2
    869c:	39803fcc 	andi	r6,r7,255
    86a0:	00000306 	br	86b0 <memchr+0x78>
    86a4:	18c00044 	addi	r3,r3,1
    86a8:	197fffc3 	ldbu	r5,-1(r3)
    86ac:	29800426 	beq	r5,r6,86c0 <memchr+0x88>
    86b0:	1809883a 	mov	r4,r3
    86b4:	18bffb1e 	bne	r3,r2,86a4 <memchr+0x6c>
    86b8:	0005883a 	mov	r2,zero
    86bc:	f800283a 	ret
    86c0:	2005883a 	mov	r2,r4
    86c4:	f800283a 	ret
    86c8:	28c03fcc 	andi	r3,r5,255
    86cc:	1810923a 	slli	r8,r3,8
    86d0:	02ffbff4 	movhi	r11,65279
    86d4:	02a02074 	movhi	r10,32897
    86d8:	40c6b03a 	or	r3,r8,r3
    86dc:	1810943a 	slli	r8,r3,16
    86e0:	5affbfc4 	addi	r11,r11,-257
    86e4:	52a02004 	addi	r10,r10,-32640
    86e8:	40d0b03a 	or	r8,r8,r3
    86ec:	20c00017 	ldw	r3,0(r4)
    86f0:	40c6f03a 	xor	r3,r8,r3
    86f4:	1acd883a 	add	r6,r3,r11
    86f8:	00c6303a 	nor	r3,zero,r3
    86fc:	30c6703a 	and	r3,r6,r3
    8700:	1a86703a 	and	r3,r3,r10
    8704:	183fdf1e 	bne	r3,zero,8684 <memchr+0x4c>
    8708:	10bfff04 	addi	r2,r2,-4
    870c:	21000104 	addi	r4,r4,4
    8710:	48bff636 	bltu	r9,r2,86ec <memchr+0xb4>
    8714:	003fdb06 	br	8684 <memchr+0x4c>
    8718:	3005883a 	mov	r2,r6
    871c:	003fd706 	br	867c <memchr+0x44>

00008720 <memcpy>:
    8720:	deffff04 	addi	sp,sp,-4
    8724:	dc000015 	stw	r16,0(sp)
    8728:	00c003c4 	movi	r3,15
    872c:	2005883a 	mov	r2,r4
    8730:	1980432e 	bgeu	r3,r6,8840 <memcpy+0x120>
    8734:	2146b03a 	or	r3,r4,r5
    8738:	18c000cc 	andi	r3,r3,3
    873c:	1800421e 	bne	r3,zero,8848 <memcpy+0x128>
    8740:	343ffc04 	addi	r16,r6,-16
    8744:	8020d13a 	srli	r16,r16,4
    8748:	28c00104 	addi	r3,r5,4
    874c:	23400104 	addi	r13,r4,4
    8750:	801e913a 	slli	r15,r16,4
    8754:	2b000204 	addi	r12,r5,8
    8758:	22c00204 	addi	r11,r4,8
    875c:	7bc00504 	addi	r15,r15,20
    8760:	2a800304 	addi	r10,r5,12
    8764:	22400304 	addi	r9,r4,12
    8768:	2bdf883a 	add	r15,r5,r15
    876c:	2811883a 	mov	r8,r5
    8770:	200f883a 	mov	r7,r4
    8774:	41000017 	ldw	r4,0(r8)
    8778:	39c00404 	addi	r7,r7,16
    877c:	18c00404 	addi	r3,r3,16
    8780:	393ffc15 	stw	r4,-16(r7)
    8784:	1bbffc17 	ldw	r14,-16(r3)
    8788:	6b400404 	addi	r13,r13,16
    878c:	5ac00404 	addi	r11,r11,16
    8790:	6bbffc15 	stw	r14,-16(r13)
    8794:	63800017 	ldw	r14,0(r12)
    8798:	4a400404 	addi	r9,r9,16
    879c:	42000404 	addi	r8,r8,16
    87a0:	5bbffc15 	stw	r14,-16(r11)
    87a4:	53800017 	ldw	r14,0(r10)
    87a8:	63000404 	addi	r12,r12,16
    87ac:	52800404 	addi	r10,r10,16
    87b0:	4bbffc15 	stw	r14,-16(r9)
    87b4:	1bffef1e 	bne	r3,r15,8774 <memcpy+0x54>
    87b8:	81c00044 	addi	r7,r16,1
    87bc:	380e913a 	slli	r7,r7,4
    87c0:	310003cc 	andi	r4,r6,15
    87c4:	02c000c4 	movi	r11,3
    87c8:	11c7883a 	add	r3,r2,r7
    87cc:	29cb883a 	add	r5,r5,r7
    87d0:	59001f2e 	bgeu	r11,r4,8850 <memcpy+0x130>
    87d4:	1813883a 	mov	r9,r3
    87d8:	2811883a 	mov	r8,r5
    87dc:	200f883a 	mov	r7,r4
    87e0:	42800017 	ldw	r10,0(r8)
    87e4:	4a400104 	addi	r9,r9,4
    87e8:	39ffff04 	addi	r7,r7,-4
    87ec:	4abfff15 	stw	r10,-4(r9)
    87f0:	42000104 	addi	r8,r8,4
    87f4:	59fffa36 	bltu	r11,r7,87e0 <memcpy+0xc0>
    87f8:	213fff04 	addi	r4,r4,-4
    87fc:	2008d0ba 	srli	r4,r4,2
    8800:	318000cc 	andi	r6,r6,3
    8804:	21000044 	addi	r4,r4,1
    8808:	2109883a 	add	r4,r4,r4
    880c:	2109883a 	add	r4,r4,r4
    8810:	1907883a 	add	r3,r3,r4
    8814:	290b883a 	add	r5,r5,r4
    8818:	30000626 	beq	r6,zero,8834 <memcpy+0x114>
    881c:	198d883a 	add	r6,r3,r6
    8820:	29c00003 	ldbu	r7,0(r5)
    8824:	18c00044 	addi	r3,r3,1
    8828:	29400044 	addi	r5,r5,1
    882c:	19ffffc5 	stb	r7,-1(r3)
    8830:	19bffb1e 	bne	r3,r6,8820 <memcpy+0x100>
    8834:	dc000017 	ldw	r16,0(sp)
    8838:	dec00104 	addi	sp,sp,4
    883c:	f800283a 	ret
    8840:	2007883a 	mov	r3,r4
    8844:	003ff406 	br	8818 <memcpy+0xf8>
    8848:	2007883a 	mov	r3,r4
    884c:	003ff306 	br	881c <memcpy+0xfc>
    8850:	200d883a 	mov	r6,r4
    8854:	003ff006 	br	8818 <memcpy+0xf8>

00008858 <memset>:
    8858:	20c000cc 	andi	r3,r4,3
    885c:	2005883a 	mov	r2,r4
    8860:	18004326 	beq	r3,zero,8970 <memset+0x118>
    8864:	31ffffc4 	addi	r7,r6,-1
    8868:	30004026 	beq	r6,zero,896c <memset+0x114>
    886c:	2813883a 	mov	r9,r5
    8870:	200d883a 	mov	r6,r4
    8874:	2007883a 	mov	r3,r4
    8878:	00000406 	br	888c <memset+0x34>
    887c:	3a3fffc4 	addi	r8,r7,-1
    8880:	31800044 	addi	r6,r6,1
    8884:	38003926 	beq	r7,zero,896c <memset+0x114>
    8888:	400f883a 	mov	r7,r8
    888c:	18c00044 	addi	r3,r3,1
    8890:	32400005 	stb	r9,0(r6)
    8894:	1a0000cc 	andi	r8,r3,3
    8898:	403ff81e 	bne	r8,zero,887c <memset+0x24>
    889c:	010000c4 	movi	r4,3
    88a0:	21c02d2e 	bgeu	r4,r7,8958 <memset+0x100>
    88a4:	29803fcc 	andi	r6,r5,255
    88a8:	3008923a 	slli	r4,r6,8
    88ac:	218cb03a 	or	r6,r4,r6
    88b0:	3008943a 	slli	r4,r6,16
    88b4:	218cb03a 	or	r6,r4,r6
    88b8:	010003c4 	movi	r4,15
    88bc:	21c0182e 	bgeu	r4,r7,8920 <memset+0xc8>
    88c0:	3b3ffc04 	addi	r12,r7,-16
    88c4:	6018d13a 	srli	r12,r12,4
    88c8:	1a000104 	addi	r8,r3,4
    88cc:	1ac00204 	addi	r11,r3,8
    88d0:	6008913a 	slli	r4,r12,4
    88d4:	1a800304 	addi	r10,r3,12
    88d8:	1813883a 	mov	r9,r3
    88dc:	21000504 	addi	r4,r4,20
    88e0:	1909883a 	add	r4,r3,r4
    88e4:	49800015 	stw	r6,0(r9)
    88e8:	41800015 	stw	r6,0(r8)
    88ec:	59800015 	stw	r6,0(r11)
    88f0:	51800015 	stw	r6,0(r10)
    88f4:	42000404 	addi	r8,r8,16
    88f8:	4a400404 	addi	r9,r9,16
    88fc:	5ac00404 	addi	r11,r11,16
    8900:	52800404 	addi	r10,r10,16
    8904:	413ff71e 	bne	r8,r4,88e4 <memset+0x8c>
    8908:	63000044 	addi	r12,r12,1
    890c:	6018913a 	slli	r12,r12,4
    8910:	39c003cc 	andi	r7,r7,15
    8914:	010000c4 	movi	r4,3
    8918:	1b07883a 	add	r3,r3,r12
    891c:	21c00e2e 	bgeu	r4,r7,8958 <memset+0x100>
    8920:	1813883a 	mov	r9,r3
    8924:	3811883a 	mov	r8,r7
    8928:	010000c4 	movi	r4,3
    892c:	49800015 	stw	r6,0(r9)
    8930:	423fff04 	addi	r8,r8,-4
    8934:	4a400104 	addi	r9,r9,4
    8938:	223ffc36 	bltu	r4,r8,892c <memset+0xd4>
    893c:	393fff04 	addi	r4,r7,-4
    8940:	2008d0ba 	srli	r4,r4,2
    8944:	39c000cc 	andi	r7,r7,3
    8948:	21000044 	addi	r4,r4,1
    894c:	2109883a 	add	r4,r4,r4
    8950:	2109883a 	add	r4,r4,r4
    8954:	1907883a 	add	r3,r3,r4
    8958:	38000426 	beq	r7,zero,896c <memset+0x114>
    895c:	19cf883a 	add	r7,r3,r7
    8960:	19400005 	stb	r5,0(r3)
    8964:	18c00044 	addi	r3,r3,1
    8968:	19fffd1e 	bne	r3,r7,8960 <memset+0x108>
    896c:	f800283a 	ret
    8970:	2007883a 	mov	r3,r4
    8974:	300f883a 	mov	r7,r6
    8978:	003fc806 	br	889c <memset+0x44>

0000897c <_Balloc>:
    897c:	20801317 	ldw	r2,76(r4)
    8980:	defffc04 	addi	sp,sp,-16
    8984:	dc400115 	stw	r17,4(sp)
    8988:	dc000015 	stw	r16,0(sp)
    898c:	dfc00315 	stw	ra,12(sp)
    8990:	dc800215 	stw	r18,8(sp)
    8994:	2023883a 	mov	r17,r4
    8998:	2821883a 	mov	r16,r5
    899c:	10000f26 	beq	r2,zero,89dc <_Balloc+0x60>
    89a0:	8407883a 	add	r3,r16,r16
    89a4:	18c7883a 	add	r3,r3,r3
    89a8:	10c7883a 	add	r3,r2,r3
    89ac:	18800017 	ldw	r2,0(r3)
    89b0:	10001126 	beq	r2,zero,89f8 <_Balloc+0x7c>
    89b4:	11000017 	ldw	r4,0(r2)
    89b8:	19000015 	stw	r4,0(r3)
    89bc:	10000415 	stw	zero,16(r2)
    89c0:	10000315 	stw	zero,12(r2)
    89c4:	dfc00317 	ldw	ra,12(sp)
    89c8:	dc800217 	ldw	r18,8(sp)
    89cc:	dc400117 	ldw	r17,4(sp)
    89d0:	dc000017 	ldw	r16,0(sp)
    89d4:	dec00404 	addi	sp,sp,16
    89d8:	f800283a 	ret
    89dc:	01400104 	movi	r5,4
    89e0:	01800844 	movi	r6,33
    89e4:	000b2ac0 	call	b2ac <_calloc_r>
    89e8:	88801315 	stw	r2,76(r17)
    89ec:	103fec1e 	bne	r2,zero,89a0 <_Balloc+0x24>
    89f0:	0005883a 	mov	r2,zero
    89f4:	003ff306 	br	89c4 <_Balloc+0x48>
    89f8:	01400044 	movi	r5,1
    89fc:	2c24983a 	sll	r18,r5,r16
    8a00:	8809883a 	mov	r4,r17
    8a04:	91800144 	addi	r6,r18,5
    8a08:	318d883a 	add	r6,r6,r6
    8a0c:	318d883a 	add	r6,r6,r6
    8a10:	000b2ac0 	call	b2ac <_calloc_r>
    8a14:	103ff626 	beq	r2,zero,89f0 <_Balloc+0x74>
    8a18:	14000115 	stw	r16,4(r2)
    8a1c:	14800215 	stw	r18,8(r2)
    8a20:	003fe606 	br	89bc <_Balloc+0x40>

00008a24 <_Bfree>:
    8a24:	28000826 	beq	r5,zero,8a48 <_Bfree+0x24>
    8a28:	28c00117 	ldw	r3,4(r5)
    8a2c:	20801317 	ldw	r2,76(r4)
    8a30:	18c7883a 	add	r3,r3,r3
    8a34:	18c7883a 	add	r3,r3,r3
    8a38:	10c5883a 	add	r2,r2,r3
    8a3c:	10c00017 	ldw	r3,0(r2)
    8a40:	28c00015 	stw	r3,0(r5)
    8a44:	11400015 	stw	r5,0(r2)
    8a48:	f800283a 	ret

00008a4c <__multadd>:
    8a4c:	defff704 	addi	sp,sp,-36
    8a50:	dc800215 	stw	r18,8(sp)
    8a54:	2c800417 	ldw	r18,16(r5)
    8a58:	ddc00715 	stw	r23,28(sp)
    8a5c:	dd800615 	stw	r22,24(sp)
    8a60:	dd000415 	stw	r20,16(sp)
    8a64:	dcc00315 	stw	r19,12(sp)
    8a68:	dc400115 	stw	r17,4(sp)
    8a6c:	dc000015 	stw	r16,0(sp)
    8a70:	dfc00815 	stw	ra,32(sp)
    8a74:	dd400515 	stw	r21,20(sp)
    8a78:	2827883a 	mov	r19,r5
    8a7c:	2029883a 	mov	r20,r4
    8a80:	3023883a 	mov	r17,r6
    8a84:	3821883a 	mov	r16,r7
    8a88:	2d800504 	addi	r22,r5,20
    8a8c:	002f883a 	mov	r23,zero
    8a90:	b5400017 	ldw	r21,0(r22)
    8a94:	880b883a 	mov	r5,r17
    8a98:	bdc00044 	addi	r23,r23,1
    8a9c:	a93fffcc 	andi	r4,r21,65535
    8aa0:	000129c0 	call	129c <__mulsi3>
    8aa4:	1421883a 	add	r16,r2,r16
    8aa8:	a808d43a 	srli	r4,r21,16
    8aac:	802ad43a 	srli	r21,r16,16
    8ab0:	880b883a 	mov	r5,r17
    8ab4:	000129c0 	call	129c <__mulsi3>
    8ab8:	a88f883a 	add	r7,r21,r2
    8abc:	3804943a 	slli	r2,r7,16
    8ac0:	80ffffcc 	andi	r3,r16,65535
    8ac4:	b5800104 	addi	r22,r22,4
    8ac8:	10c7883a 	add	r3,r2,r3
    8acc:	b0ffff15 	stw	r3,-4(r22)
    8ad0:	3820d43a 	srli	r16,r7,16
    8ad4:	bcbfee16 	blt	r23,r18,8a90 <__multadd+0x44>
    8ad8:	80000926 	beq	r16,zero,8b00 <__multadd+0xb4>
    8adc:	98800217 	ldw	r2,8(r19)
    8ae0:	9080130e 	bge	r18,r2,8b30 <__multadd+0xe4>
    8ae4:	90800144 	addi	r2,r18,5
    8ae8:	1085883a 	add	r2,r2,r2
    8aec:	1085883a 	add	r2,r2,r2
    8af0:	9885883a 	add	r2,r19,r2
    8af4:	14000015 	stw	r16,0(r2)
    8af8:	94800044 	addi	r18,r18,1
    8afc:	9c800415 	stw	r18,16(r19)
    8b00:	9805883a 	mov	r2,r19
    8b04:	dfc00817 	ldw	ra,32(sp)
    8b08:	ddc00717 	ldw	r23,28(sp)
    8b0c:	dd800617 	ldw	r22,24(sp)
    8b10:	dd400517 	ldw	r21,20(sp)
    8b14:	dd000417 	ldw	r20,16(sp)
    8b18:	dcc00317 	ldw	r19,12(sp)
    8b1c:	dc800217 	ldw	r18,8(sp)
    8b20:	dc400117 	ldw	r17,4(sp)
    8b24:	dc000017 	ldw	r16,0(sp)
    8b28:	dec00904 	addi	sp,sp,36
    8b2c:	f800283a 	ret
    8b30:	99400117 	ldw	r5,4(r19)
    8b34:	a009883a 	mov	r4,r20
    8b38:	29400044 	addi	r5,r5,1
    8b3c:	000897c0 	call	897c <_Balloc>
    8b40:	99800417 	ldw	r6,16(r19)
    8b44:	11000304 	addi	r4,r2,12
    8b48:	99400304 	addi	r5,r19,12
    8b4c:	31800084 	addi	r6,r6,2
    8b50:	318d883a 	add	r6,r6,r6
    8b54:	318d883a 	add	r6,r6,r6
    8b58:	1023883a 	mov	r17,r2
    8b5c:	00087200 	call	8720 <memcpy>
    8b60:	98000a26 	beq	r19,zero,8b8c <__multadd+0x140>
    8b64:	99000117 	ldw	r4,4(r19)
    8b68:	a0c01317 	ldw	r3,76(r20)
    8b6c:	2109883a 	add	r4,r4,r4
    8b70:	2109883a 	add	r4,r4,r4
    8b74:	1907883a 	add	r3,r3,r4
    8b78:	18800017 	ldw	r2,0(r3)
    8b7c:	98800015 	stw	r2,0(r19)
    8b80:	1cc00015 	stw	r19,0(r3)
    8b84:	8827883a 	mov	r19,r17
    8b88:	003fd606 	br	8ae4 <__multadd+0x98>
    8b8c:	8827883a 	mov	r19,r17
    8b90:	003fd406 	br	8ae4 <__multadd+0x98>

00008b94 <__s2b>:
    8b94:	defff904 	addi	sp,sp,-28
    8b98:	dc400115 	stw	r17,4(sp)
    8b9c:	dc000015 	stw	r16,0(sp)
    8ba0:	2023883a 	mov	r17,r4
    8ba4:	2821883a 	mov	r16,r5
    8ba8:	39000204 	addi	r4,r7,8
    8bac:	01400244 	movi	r5,9
    8bb0:	dcc00315 	stw	r19,12(sp)
    8bb4:	dc800215 	stw	r18,8(sp)
    8bb8:	dfc00615 	stw	ra,24(sp)
    8bbc:	dd400515 	stw	r21,20(sp)
    8bc0:	dd000415 	stw	r20,16(sp)
    8bc4:	3825883a 	mov	r18,r7
    8bc8:	3027883a 	mov	r19,r6
    8bcc:	00031680 	call	3168 <__divsi3>
    8bd0:	00c00044 	movi	r3,1
    8bd4:	000b883a 	mov	r5,zero
    8bd8:	1880030e 	bge	r3,r2,8be8 <__s2b+0x54>
    8bdc:	18c7883a 	add	r3,r3,r3
    8be0:	29400044 	addi	r5,r5,1
    8be4:	18bffd16 	blt	r3,r2,8bdc <__s2b+0x48>
    8be8:	8809883a 	mov	r4,r17
    8bec:	000897c0 	call	897c <_Balloc>
    8bf0:	d8c00717 	ldw	r3,28(sp)
    8bf4:	10c00515 	stw	r3,20(r2)
    8bf8:	00c00044 	movi	r3,1
    8bfc:	10c00415 	stw	r3,16(r2)
    8c00:	00c00244 	movi	r3,9
    8c04:	1cc0210e 	bge	r3,r19,8c8c <__s2b+0xf8>
    8c08:	80eb883a 	add	r21,r16,r3
    8c0c:	a829883a 	mov	r20,r21
    8c10:	84e1883a 	add	r16,r16,r19
    8c14:	a1c00007 	ldb	r7,0(r20)
    8c18:	8809883a 	mov	r4,r17
    8c1c:	a5000044 	addi	r20,r20,1
    8c20:	100b883a 	mov	r5,r2
    8c24:	01800284 	movi	r6,10
    8c28:	39fff404 	addi	r7,r7,-48
    8c2c:	0008a4c0 	call	8a4c <__multadd>
    8c30:	a43ff81e 	bne	r20,r16,8c14 <__s2b+0x80>
    8c34:	ace1883a 	add	r16,r21,r19
    8c38:	843ffe04 	addi	r16,r16,-8
    8c3c:	9c800a0e 	bge	r19,r18,8c68 <__s2b+0xd4>
    8c40:	94e5c83a 	sub	r18,r18,r19
    8c44:	84a5883a 	add	r18,r16,r18
    8c48:	81c00007 	ldb	r7,0(r16)
    8c4c:	8809883a 	mov	r4,r17
    8c50:	84000044 	addi	r16,r16,1
    8c54:	100b883a 	mov	r5,r2
    8c58:	01800284 	movi	r6,10
    8c5c:	39fff404 	addi	r7,r7,-48
    8c60:	0008a4c0 	call	8a4c <__multadd>
    8c64:	84bff81e 	bne	r16,r18,8c48 <__s2b+0xb4>
    8c68:	dfc00617 	ldw	ra,24(sp)
    8c6c:	dd400517 	ldw	r21,20(sp)
    8c70:	dd000417 	ldw	r20,16(sp)
    8c74:	dcc00317 	ldw	r19,12(sp)
    8c78:	dc800217 	ldw	r18,8(sp)
    8c7c:	dc400117 	ldw	r17,4(sp)
    8c80:	dc000017 	ldw	r16,0(sp)
    8c84:	dec00704 	addi	sp,sp,28
    8c88:	f800283a 	ret
    8c8c:	84000284 	addi	r16,r16,10
    8c90:	1827883a 	mov	r19,r3
    8c94:	003fe906 	br	8c3c <__s2b+0xa8>

00008c98 <__hi0bits>:
    8c98:	20bfffec 	andhi	r2,r4,65535
    8c9c:	1000141e 	bne	r2,zero,8cf0 <__hi0bits+0x58>
    8ca0:	2008943a 	slli	r4,r4,16
    8ca4:	00800404 	movi	r2,16
    8ca8:	20ffc02c 	andhi	r3,r4,65280
    8cac:	1800021e 	bne	r3,zero,8cb8 <__hi0bits+0x20>
    8cb0:	2008923a 	slli	r4,r4,8
    8cb4:	10800204 	addi	r2,r2,8
    8cb8:	20fc002c 	andhi	r3,r4,61440
    8cbc:	1800021e 	bne	r3,zero,8cc8 <__hi0bits+0x30>
    8cc0:	2008913a 	slli	r4,r4,4
    8cc4:	10800104 	addi	r2,r2,4
    8cc8:	20f0002c 	andhi	r3,r4,49152
    8ccc:	1800031e 	bne	r3,zero,8cdc <__hi0bits+0x44>
    8cd0:	2109883a 	add	r4,r4,r4
    8cd4:	10800084 	addi	r2,r2,2
    8cd8:	2109883a 	add	r4,r4,r4
    8cdc:	20000316 	blt	r4,zero,8cec <__hi0bits+0x54>
    8ce0:	2110002c 	andhi	r4,r4,16384
    8ce4:	2000041e 	bne	r4,zero,8cf8 <__hi0bits+0x60>
    8ce8:	00800804 	movi	r2,32
    8cec:	f800283a 	ret
    8cf0:	0005883a 	mov	r2,zero
    8cf4:	003fec06 	br	8ca8 <__hi0bits+0x10>
    8cf8:	10800044 	addi	r2,r2,1
    8cfc:	f800283a 	ret

00008d00 <__lo0bits>:
    8d00:	20c00017 	ldw	r3,0(r4)
    8d04:	188001cc 	andi	r2,r3,7
    8d08:	10000826 	beq	r2,zero,8d2c <__lo0bits+0x2c>
    8d0c:	1880004c 	andi	r2,r3,1
    8d10:	1000211e 	bne	r2,zero,8d98 <__lo0bits+0x98>
    8d14:	1880008c 	andi	r2,r3,2
    8d18:	1000211e 	bne	r2,zero,8da0 <__lo0bits+0xa0>
    8d1c:	1806d0ba 	srli	r3,r3,2
    8d20:	00800084 	movi	r2,2
    8d24:	20c00015 	stw	r3,0(r4)
    8d28:	f800283a 	ret
    8d2c:	18bfffcc 	andi	r2,r3,65535
    8d30:	10001326 	beq	r2,zero,8d80 <__lo0bits+0x80>
    8d34:	0005883a 	mov	r2,zero
    8d38:	19403fcc 	andi	r5,r3,255
    8d3c:	2800021e 	bne	r5,zero,8d48 <__lo0bits+0x48>
    8d40:	1806d23a 	srli	r3,r3,8
    8d44:	10800204 	addi	r2,r2,8
    8d48:	194003cc 	andi	r5,r3,15
    8d4c:	2800021e 	bne	r5,zero,8d58 <__lo0bits+0x58>
    8d50:	1806d13a 	srli	r3,r3,4
    8d54:	10800104 	addi	r2,r2,4
    8d58:	194000cc 	andi	r5,r3,3
    8d5c:	2800021e 	bne	r5,zero,8d68 <__lo0bits+0x68>
    8d60:	1806d0ba 	srli	r3,r3,2
    8d64:	10800084 	addi	r2,r2,2
    8d68:	1940004c 	andi	r5,r3,1
    8d6c:	2800081e 	bne	r5,zero,8d90 <__lo0bits+0x90>
    8d70:	1806d07a 	srli	r3,r3,1
    8d74:	1800051e 	bne	r3,zero,8d8c <__lo0bits+0x8c>
    8d78:	00800804 	movi	r2,32
    8d7c:	f800283a 	ret
    8d80:	1806d43a 	srli	r3,r3,16
    8d84:	00800404 	movi	r2,16
    8d88:	003feb06 	br	8d38 <__lo0bits+0x38>
    8d8c:	10800044 	addi	r2,r2,1
    8d90:	20c00015 	stw	r3,0(r4)
    8d94:	f800283a 	ret
    8d98:	0005883a 	mov	r2,zero
    8d9c:	f800283a 	ret
    8da0:	1806d07a 	srli	r3,r3,1
    8da4:	00800044 	movi	r2,1
    8da8:	20c00015 	stw	r3,0(r4)
    8dac:	f800283a 	ret

00008db0 <__i2b>:
    8db0:	defffd04 	addi	sp,sp,-12
    8db4:	dc000015 	stw	r16,0(sp)
    8db8:	04000044 	movi	r16,1
    8dbc:	dc400115 	stw	r17,4(sp)
    8dc0:	2823883a 	mov	r17,r5
    8dc4:	800b883a 	mov	r5,r16
    8dc8:	dfc00215 	stw	ra,8(sp)
    8dcc:	000897c0 	call	897c <_Balloc>
    8dd0:	14400515 	stw	r17,20(r2)
    8dd4:	14000415 	stw	r16,16(r2)
    8dd8:	dfc00217 	ldw	ra,8(sp)
    8ddc:	dc400117 	ldw	r17,4(sp)
    8de0:	dc000017 	ldw	r16,0(sp)
    8de4:	dec00304 	addi	sp,sp,12
    8de8:	f800283a 	ret

00008dec <__multiply>:
    8dec:	deffef04 	addi	sp,sp,-68
    8df0:	dc400815 	stw	r17,32(sp)
    8df4:	dc000715 	stw	r16,28(sp)
    8df8:	2c400417 	ldw	r17,16(r5)
    8dfc:	34000417 	ldw	r16,16(r6)
    8e00:	dd800d15 	stw	r22,52(sp)
    8e04:	dc800915 	stw	r18,36(sp)
    8e08:	dfc01015 	stw	ra,64(sp)
    8e0c:	df000f15 	stw	fp,60(sp)
    8e10:	ddc00e15 	stw	r23,56(sp)
    8e14:	dd400c15 	stw	r21,48(sp)
    8e18:	dd000b15 	stw	r20,44(sp)
    8e1c:	dcc00a15 	stw	r19,40(sp)
    8e20:	2825883a 	mov	r18,r5
    8e24:	302d883a 	mov	r22,r6
    8e28:	8c009116 	blt	r17,r16,9070 <__multiply+0x284>
    8e2c:	8005883a 	mov	r2,r16
    8e30:	8821883a 	mov	r16,r17
    8e34:	1023883a 	mov	r17,r2
    8e38:	90800217 	ldw	r2,8(r18)
    8e3c:	8447883a 	add	r3,r16,r17
    8e40:	d8c00215 	stw	r3,8(sp)
    8e44:	91400117 	ldw	r5,4(r18)
    8e48:	10c0010e 	bge	r2,r3,8e50 <__multiply+0x64>
    8e4c:	29400044 	addi	r5,r5,1
    8e50:	000897c0 	call	897c <_Balloc>
    8e54:	d8c00217 	ldw	r3,8(sp)
    8e58:	d8800615 	stw	r2,24(sp)
    8e5c:	18eb883a 	add	r21,r3,r3
    8e60:	ad6b883a 	add	r21,r21,r21
    8e64:	10c00504 	addi	r3,r2,20
    8e68:	1d6b883a 	add	r21,r3,r21
    8e6c:	d8c00115 	stw	r3,4(sp)
    8e70:	dd400315 	stw	r21,12(sp)
    8e74:	1805883a 	mov	r2,r3
    8e78:	1d40042e 	bgeu	r3,r21,8e8c <__multiply+0xa0>
    8e7c:	d8c00317 	ldw	r3,12(sp)
    8e80:	10000015 	stw	zero,0(r2)
    8e84:	10800104 	addi	r2,r2,4
    8e88:	10fffc36 	bltu	r2,r3,8e7c <__multiply+0x90>
    8e8c:	8c63883a 	add	r17,r17,r17
    8e90:	b5800504 	addi	r22,r22,20
    8e94:	8c63883a 	add	r17,r17,r17
    8e98:	94800504 	addi	r18,r18,20
    8e9c:	8421883a 	add	r16,r16,r16
    8ea0:	b463883a 	add	r17,r22,r17
    8ea4:	8421883a 	add	r16,r16,r16
    8ea8:	dd800015 	stw	r22,0(sp)
    8eac:	dc800415 	stw	r18,16(sp)
    8eb0:	dc400515 	stw	r17,20(sp)
    8eb4:	9429883a 	add	r20,r18,r16
    8eb8:	b4404f2e 	bgeu	r22,r17,8ff8 <__multiply+0x20c>
    8ebc:	d8c00017 	ldw	r3,0(sp)
    8ec0:	1c800017 	ldw	r18,0(r3)
    8ec4:	943fffcc 	andi	r16,r18,65535
    8ec8:	80001e26 	beq	r16,zero,8f44 <__multiply+0x158>
    8ecc:	dd800117 	ldw	r22,4(sp)
    8ed0:	dd400417 	ldw	r21,16(sp)
    8ed4:	0025883a 	mov	r18,zero
    8ed8:	adc00017 	ldw	r23,0(r21)
    8edc:	b4c00017 	ldw	r19,0(r22)
    8ee0:	800b883a 	mov	r5,r16
    8ee4:	b93fffcc 	andi	r4,r23,65535
    8ee8:	000129c0 	call	129c <__mulsi3>
    8eec:	9c7fffcc 	andi	r17,r19,65535
    8ef0:	8885883a 	add	r2,r17,r2
    8ef4:	b808d43a 	srli	r4,r23,16
    8ef8:	14a3883a 	add	r17,r2,r18
    8efc:	9826d43a 	srli	r19,r19,16
    8f00:	8824d43a 	srli	r18,r17,16
    8f04:	800b883a 	mov	r5,r16
    8f08:	000129c0 	call	129c <__mulsi3>
    8f0c:	9885883a 	add	r2,r19,r2
    8f10:	14a7883a 	add	r19,r2,r18
    8f14:	88ffffcc 	andi	r3,r17,65535
    8f18:	9822943a 	slli	r17,r19,16
    8f1c:	ad400104 	addi	r21,r21,4
    8f20:	b005883a 	mov	r2,r22
    8f24:	88c6b03a 	or	r3,r17,r3
    8f28:	b0c00015 	stw	r3,0(r22)
    8f2c:	9824d43a 	srli	r18,r19,16
    8f30:	b5800104 	addi	r22,r22,4
    8f34:	ad3fe836 	bltu	r21,r20,8ed8 <__multiply+0xec>
    8f38:	d8c00017 	ldw	r3,0(sp)
    8f3c:	14800115 	stw	r18,4(r2)
    8f40:	1c800017 	ldw	r18,0(r3)
    8f44:	9024d43a 	srli	r18,r18,16
    8f48:	90002226 	beq	r18,zero,8fd4 <__multiply+0x1e8>
    8f4c:	d8c00117 	ldw	r3,4(sp)
    8f50:	dd800417 	ldw	r22,16(sp)
    8f54:	002f883a 	mov	r23,zero
    8f58:	1f000017 	ldw	fp,0(r3)
    8f5c:	1823883a 	mov	r17,r3
    8f60:	182b883a 	mov	r21,r3
    8f64:	e021883a 	mov	r16,fp
    8f68:	00000106 	br	8f70 <__multiply+0x184>
    8f6c:	982b883a 	mov	r21,r19
    8f70:	b100000b 	ldhu	r4,0(r22)
    8f74:	8020d43a 	srli	r16,r16,16
    8f78:	900b883a 	mov	r5,r18
    8f7c:	000129c0 	call	129c <__mulsi3>
    8f80:	1405883a 	add	r2,r2,r16
    8f84:	15ef883a 	add	r23,r2,r23
    8f88:	b804943a 	slli	r2,r23,16
    8f8c:	e0ffffcc 	andi	r3,fp,65535
    8f90:	8c400104 	addi	r17,r17,4
    8f94:	10c6b03a 	or	r3,r2,r3
    8f98:	88ffff15 	stw	r3,-4(r17)
    8f9c:	b5800104 	addi	r22,r22,4
    8fa0:	b13fff17 	ldw	r4,-4(r22)
    8fa4:	acc00104 	addi	r19,r21,4
    8fa8:	900b883a 	mov	r5,r18
    8fac:	2008d43a 	srli	r4,r4,16
    8fb0:	9c000017 	ldw	r16,0(r19)
    8fb4:	000129c0 	call	129c <__mulsi3>
    8fb8:	b806d43a 	srli	r3,r23,16
    8fbc:	813fffcc 	andi	r4,r16,65535
    8fc0:	1105883a 	add	r2,r2,r4
    8fc4:	10f9883a 	add	fp,r2,r3
    8fc8:	e02ed43a 	srli	r23,fp,16
    8fcc:	b53fe736 	bltu	r22,r20,8f6c <__multiply+0x180>
    8fd0:	af000115 	stw	fp,4(r21)
    8fd4:	d8c00017 	ldw	r3,0(sp)
    8fd8:	d9000517 	ldw	r4,20(sp)
    8fdc:	18c00104 	addi	r3,r3,4
    8fe0:	d8c00015 	stw	r3,0(sp)
    8fe4:	d8c00117 	ldw	r3,4(sp)
    8fe8:	18c00104 	addi	r3,r3,4
    8fec:	d8c00115 	stw	r3,4(sp)
    8ff0:	d8c00017 	ldw	r3,0(sp)
    8ff4:	193fb136 	bltu	r3,r4,8ebc <__multiply+0xd0>
    8ff8:	d8c00217 	ldw	r3,8(sp)
    8ffc:	00c00c0e 	bge	zero,r3,9030 <__multiply+0x244>
    9000:	d8c00317 	ldw	r3,12(sp)
    9004:	18bfff17 	ldw	r2,-4(r3)
    9008:	1d7fff04 	addi	r21,r3,-4
    900c:	10000326 	beq	r2,zero,901c <__multiply+0x230>
    9010:	00000706 	br	9030 <__multiply+0x244>
    9014:	a8800017 	ldw	r2,0(r21)
    9018:	1000051e 	bne	r2,zero,9030 <__multiply+0x244>
    901c:	d8c00217 	ldw	r3,8(sp)
    9020:	ad7fff04 	addi	r21,r21,-4
    9024:	18ffffc4 	addi	r3,r3,-1
    9028:	d8c00215 	stw	r3,8(sp)
    902c:	183ff91e 	bne	r3,zero,9014 <__multiply+0x228>
    9030:	d8c00617 	ldw	r3,24(sp)
    9034:	d9000217 	ldw	r4,8(sp)
    9038:	1805883a 	mov	r2,r3
    903c:	19000415 	stw	r4,16(r3)
    9040:	dfc01017 	ldw	ra,64(sp)
    9044:	df000f17 	ldw	fp,60(sp)
    9048:	ddc00e17 	ldw	r23,56(sp)
    904c:	dd800d17 	ldw	r22,52(sp)
    9050:	dd400c17 	ldw	r21,48(sp)
    9054:	dd000b17 	ldw	r20,44(sp)
    9058:	dcc00a17 	ldw	r19,40(sp)
    905c:	dc800917 	ldw	r18,36(sp)
    9060:	dc400817 	ldw	r17,32(sp)
    9064:	dc000717 	ldw	r16,28(sp)
    9068:	dec01104 	addi	sp,sp,68
    906c:	f800283a 	ret
    9070:	3025883a 	mov	r18,r6
    9074:	282d883a 	mov	r22,r5
    9078:	003f6f06 	br	8e38 <__multiply+0x4c>

0000907c <__pow5mult>:
    907c:	defffa04 	addi	sp,sp,-24
    9080:	dcc00315 	stw	r19,12(sp)
    9084:	dc800215 	stw	r18,8(sp)
    9088:	dc000015 	stw	r16,0(sp)
    908c:	dfc00515 	stw	ra,20(sp)
    9090:	dd000415 	stw	r20,16(sp)
    9094:	dc400115 	stw	r17,4(sp)
    9098:	308000cc 	andi	r2,r6,3
    909c:	3021883a 	mov	r16,r6
    90a0:	2027883a 	mov	r19,r4
    90a4:	2825883a 	mov	r18,r5
    90a8:	10002e1e 	bne	r2,zero,9164 <__pow5mult+0xe8>
    90ac:	8021d0ba 	srai	r16,r16,2
    90b0:	80001a26 	beq	r16,zero,911c <__pow5mult+0xa0>
    90b4:	9c401217 	ldw	r17,72(r19)
    90b8:	8800061e 	bne	r17,zero,90d4 <__pow5mult+0x58>
    90bc:	00003406 	br	9190 <__pow5mult+0x114>
    90c0:	8021d07a 	srai	r16,r16,1
    90c4:	80001526 	beq	r16,zero,911c <__pow5mult+0xa0>
    90c8:	88800017 	ldw	r2,0(r17)
    90cc:	10001c26 	beq	r2,zero,9140 <__pow5mult+0xc4>
    90d0:	1023883a 	mov	r17,r2
    90d4:	80c0004c 	andi	r3,r16,1
    90d8:	183ff926 	beq	r3,zero,90c0 <__pow5mult+0x44>
    90dc:	900b883a 	mov	r5,r18
    90e0:	880d883a 	mov	r6,r17
    90e4:	9809883a 	mov	r4,r19
    90e8:	0008dec0 	call	8dec <__multiply>
    90ec:	90001b26 	beq	r18,zero,915c <__pow5mult+0xe0>
    90f0:	91c00117 	ldw	r7,4(r18)
    90f4:	98c01317 	ldw	r3,76(r19)
    90f8:	8021d07a 	srai	r16,r16,1
    90fc:	39cf883a 	add	r7,r7,r7
    9100:	39cf883a 	add	r7,r7,r7
    9104:	19c7883a 	add	r3,r3,r7
    9108:	19000017 	ldw	r4,0(r3)
    910c:	91000015 	stw	r4,0(r18)
    9110:	1c800015 	stw	r18,0(r3)
    9114:	1025883a 	mov	r18,r2
    9118:	803feb1e 	bne	r16,zero,90c8 <__pow5mult+0x4c>
    911c:	9005883a 	mov	r2,r18
    9120:	dfc00517 	ldw	ra,20(sp)
    9124:	dd000417 	ldw	r20,16(sp)
    9128:	dcc00317 	ldw	r19,12(sp)
    912c:	dc800217 	ldw	r18,8(sp)
    9130:	dc400117 	ldw	r17,4(sp)
    9134:	dc000017 	ldw	r16,0(sp)
    9138:	dec00604 	addi	sp,sp,24
    913c:	f800283a 	ret
    9140:	9809883a 	mov	r4,r19
    9144:	880b883a 	mov	r5,r17
    9148:	880d883a 	mov	r6,r17
    914c:	0008dec0 	call	8dec <__multiply>
    9150:	88800015 	stw	r2,0(r17)
    9154:	10000015 	stw	zero,0(r2)
    9158:	003fdd06 	br	90d0 <__pow5mult+0x54>
    915c:	1025883a 	mov	r18,r2
    9160:	003fd706 	br	90c0 <__pow5mult+0x44>
    9164:	10bfffc4 	addi	r2,r2,-1
    9168:	1085883a 	add	r2,r2,r2
    916c:	00c000b4 	movhi	r3,2
    9170:	18eb1204 	addi	r3,r3,-21432
    9174:	1085883a 	add	r2,r2,r2
    9178:	1885883a 	add	r2,r3,r2
    917c:	11800017 	ldw	r6,0(r2)
    9180:	000f883a 	mov	r7,zero
    9184:	0008a4c0 	call	8a4c <__multadd>
    9188:	1025883a 	mov	r18,r2
    918c:	003fc706 	br	90ac <__pow5mult+0x30>
    9190:	05000044 	movi	r20,1
    9194:	9809883a 	mov	r4,r19
    9198:	a00b883a 	mov	r5,r20
    919c:	000897c0 	call	897c <_Balloc>
    91a0:	1023883a 	mov	r17,r2
    91a4:	00809c44 	movi	r2,625
    91a8:	88800515 	stw	r2,20(r17)
    91ac:	8d000415 	stw	r20,16(r17)
    91b0:	9c401215 	stw	r17,72(r19)
    91b4:	88000015 	stw	zero,0(r17)
    91b8:	003fc606 	br	90d4 <__pow5mult+0x58>

000091bc <__lshift>:
    91bc:	defff904 	addi	sp,sp,-28
    91c0:	dd000415 	stw	r20,16(sp)
    91c4:	dcc00315 	stw	r19,12(sp)
    91c8:	3029d17a 	srai	r20,r6,5
    91cc:	2cc00417 	ldw	r19,16(r5)
    91d0:	28800217 	ldw	r2,8(r5)
    91d4:	dd400515 	stw	r21,20(sp)
    91d8:	a4e7883a 	add	r19,r20,r19
    91dc:	dc800215 	stw	r18,8(sp)
    91e0:	dc400115 	stw	r17,4(sp)
    91e4:	dc000015 	stw	r16,0(sp)
    91e8:	dfc00615 	stw	ra,24(sp)
    91ec:	9c000044 	addi	r16,r19,1
    91f0:	2823883a 	mov	r17,r5
    91f4:	302b883a 	mov	r21,r6
    91f8:	2025883a 	mov	r18,r4
    91fc:	29400117 	ldw	r5,4(r5)
    9200:	1400030e 	bge	r2,r16,9210 <__lshift+0x54>
    9204:	1085883a 	add	r2,r2,r2
    9208:	29400044 	addi	r5,r5,1
    920c:	143ffd16 	blt	r2,r16,9204 <__lshift+0x48>
    9210:	9009883a 	mov	r4,r18
    9214:	000897c0 	call	897c <_Balloc>
    9218:	11c00504 	addi	r7,r2,20
    921c:	0500090e 	bge	zero,r20,9244 <__lshift+0x88>
    9220:	3811883a 	mov	r8,r7
    9224:	0007883a 	mov	r3,zero
    9228:	40000015 	stw	zero,0(r8)
    922c:	18c00044 	addi	r3,r3,1
    9230:	42000104 	addi	r8,r8,4
    9234:	1d3ffc1e 	bne	r3,r20,9228 <__lshift+0x6c>
    9238:	18c7883a 	add	r3,r3,r3
    923c:	18c7883a 	add	r3,r3,r3
    9240:	38cf883a 	add	r7,r7,r3
    9244:	89000417 	ldw	r4,16(r17)
    9248:	88c00504 	addi	r3,r17,20
    924c:	a98007cc 	andi	r6,r21,31
    9250:	2109883a 	add	r4,r4,r4
    9254:	2109883a 	add	r4,r4,r4
    9258:	1909883a 	add	r4,r3,r4
    925c:	30002326 	beq	r6,zero,92ec <__lshift+0x130>
    9260:	01400804 	movi	r5,32
    9264:	298bc83a 	sub	r5,r5,r6
    9268:	0013883a 	mov	r9,zero
    926c:	1a000017 	ldw	r8,0(r3)
    9270:	3815883a 	mov	r10,r7
    9274:	39c00104 	addi	r7,r7,4
    9278:	4190983a 	sll	r8,r8,r6
    927c:	18c00104 	addi	r3,r3,4
    9280:	4a10b03a 	or	r8,r9,r8
    9284:	3a3fff15 	stw	r8,-4(r7)
    9288:	1a3fff17 	ldw	r8,-4(r3)
    928c:	4152d83a 	srl	r9,r8,r5
    9290:	193ff636 	bltu	r3,r4,926c <__lshift+0xb0>
    9294:	52400115 	stw	r9,4(r10)
    9298:	48001a1e 	bne	r9,zero,9304 <__lshift+0x148>
    929c:	843fffc4 	addi	r16,r16,-1
    92a0:	14000415 	stw	r16,16(r2)
    92a4:	88000826 	beq	r17,zero,92c8 <__lshift+0x10c>
    92a8:	89000117 	ldw	r4,4(r17)
    92ac:	90c01317 	ldw	r3,76(r18)
    92b0:	2109883a 	add	r4,r4,r4
    92b4:	2109883a 	add	r4,r4,r4
    92b8:	1907883a 	add	r3,r3,r4
    92bc:	19000017 	ldw	r4,0(r3)
    92c0:	89000015 	stw	r4,0(r17)
    92c4:	1c400015 	stw	r17,0(r3)
    92c8:	dfc00617 	ldw	ra,24(sp)
    92cc:	dd400517 	ldw	r21,20(sp)
    92d0:	dd000417 	ldw	r20,16(sp)
    92d4:	dcc00317 	ldw	r19,12(sp)
    92d8:	dc800217 	ldw	r18,8(sp)
    92dc:	dc400117 	ldw	r17,4(sp)
    92e0:	dc000017 	ldw	r16,0(sp)
    92e4:	dec00704 	addi	sp,sp,28
    92e8:	f800283a 	ret
    92ec:	19400017 	ldw	r5,0(r3)
    92f0:	39c00104 	addi	r7,r7,4
    92f4:	18c00104 	addi	r3,r3,4
    92f8:	397fff15 	stw	r5,-4(r7)
    92fc:	193ffb36 	bltu	r3,r4,92ec <__lshift+0x130>
    9300:	003fe606 	br	929c <__lshift+0xe0>
    9304:	9c000084 	addi	r16,r19,2
    9308:	003fe406 	br	929c <__lshift+0xe0>

0000930c <__mcmp>:
    930c:	20800417 	ldw	r2,16(r4)
    9310:	28c00417 	ldw	r3,16(r5)
    9314:	10c5c83a 	sub	r2,r2,r3
    9318:	1000111e 	bne	r2,zero,9360 <__mcmp+0x54>
    931c:	18c7883a 	add	r3,r3,r3
    9320:	18c7883a 	add	r3,r3,r3
    9324:	21000504 	addi	r4,r4,20
    9328:	29400504 	addi	r5,r5,20
    932c:	20c5883a 	add	r2,r4,r3
    9330:	28cb883a 	add	r5,r5,r3
    9334:	00000106 	br	933c <__mcmp+0x30>
    9338:	20800a2e 	bgeu	r4,r2,9364 <__mcmp+0x58>
    933c:	10bfff04 	addi	r2,r2,-4
    9340:	297fff04 	addi	r5,r5,-4
    9344:	11800017 	ldw	r6,0(r2)
    9348:	28c00017 	ldw	r3,0(r5)
    934c:	30fffa26 	beq	r6,r3,9338 <__mcmp+0x2c>
    9350:	30c00236 	bltu	r6,r3,935c <__mcmp+0x50>
    9354:	00800044 	movi	r2,1
    9358:	f800283a 	ret
    935c:	00bfffc4 	movi	r2,-1
    9360:	f800283a 	ret
    9364:	0005883a 	mov	r2,zero
    9368:	f800283a 	ret

0000936c <__mdiff>:
    936c:	defffb04 	addi	sp,sp,-20
    9370:	dc000015 	stw	r16,0(sp)
    9374:	2821883a 	mov	r16,r5
    9378:	dcc00315 	stw	r19,12(sp)
    937c:	300b883a 	mov	r5,r6
    9380:	2027883a 	mov	r19,r4
    9384:	8009883a 	mov	r4,r16
    9388:	dc800215 	stw	r18,8(sp)
    938c:	dfc00415 	stw	ra,16(sp)
    9390:	dc400115 	stw	r17,4(sp)
    9394:	3025883a 	mov	r18,r6
    9398:	000930c0 	call	930c <__mcmp>
    939c:	10005226 	beq	r2,zero,94e8 <__mdiff+0x17c>
    93a0:	10004c16 	blt	r2,zero,94d4 <__mdiff+0x168>
    93a4:	0023883a 	mov	r17,zero
    93a8:	81400117 	ldw	r5,4(r16)
    93ac:	9809883a 	mov	r4,r19
    93b0:	000897c0 	call	897c <_Balloc>
    93b4:	83400417 	ldw	r13,16(r16)
    93b8:	93800417 	ldw	r14,16(r18)
    93bc:	81000504 	addi	r4,r16,20
    93c0:	6b59883a 	add	r12,r13,r13
    93c4:	739d883a 	add	r14,r14,r14
    93c8:	6319883a 	add	r12,r12,r12
    93cc:	91800504 	addi	r6,r18,20
    93d0:	739d883a 	add	r14,r14,r14
    93d4:	14400315 	stw	r17,12(r2)
    93d8:	2319883a 	add	r12,r4,r12
    93dc:	339d883a 	add	r14,r6,r14
    93e0:	12400504 	addi	r9,r2,20
    93e4:	0007883a 	mov	r3,zero
    93e8:	22000017 	ldw	r8,0(r4)
    93ec:	32800017 	ldw	r10,0(r6)
    93f0:	4ac00104 	addi	r11,r9,4
    93f4:	41ffffcc 	andi	r7,r8,65535
    93f8:	38c7883a 	add	r3,r7,r3
    93fc:	51ffffcc 	andi	r7,r10,65535
    9400:	19cfc83a 	sub	r7,r3,r7
    9404:	4010d43a 	srli	r8,r8,16
    9408:	5014d43a 	srli	r10,r10,16
    940c:	3807d43a 	srai	r3,r7,16
    9410:	39ffffcc 	andi	r7,r7,65535
    9414:	4291c83a 	sub	r8,r8,r10
    9418:	40c7883a 	add	r3,r8,r3
    941c:	1810943a 	slli	r8,r3,16
    9420:	31800104 	addi	r6,r6,4
    9424:	21000104 	addi	r4,r4,4
    9428:	41ceb03a 	or	r7,r8,r7
    942c:	49c00015 	stw	r7,0(r9)
    9430:	1807d43a 	srai	r3,r3,16
    9434:	580b883a 	mov	r5,r11
    9438:	5813883a 	mov	r9,r11
    943c:	33bfea36 	bltu	r6,r14,93e8 <__mdiff+0x7c>
    9440:	2011883a 	mov	r8,r4
    9444:	2300152e 	bgeu	r4,r12,949c <__mdiff+0x130>
    9448:	21400017 	ldw	r5,0(r4)
    944c:	4a400104 	addi	r9,r9,4
    9450:	21000104 	addi	r4,r4,4
    9454:	29ffffcc 	andi	r7,r5,65535
    9458:	38c7883a 	add	r3,r7,r3
    945c:	280ad43a 	srli	r5,r5,16
    9460:	180dd43a 	srai	r6,r3,16
    9464:	19ffffcc 	andi	r7,r3,65535
    9468:	3147883a 	add	r3,r6,r5
    946c:	180a943a 	slli	r5,r3,16
    9470:	1807d43a 	srai	r3,r3,16
    9474:	29ceb03a 	or	r7,r5,r7
    9478:	49ffff15 	stw	r7,-4(r9)
    947c:	233ff236 	bltu	r4,r12,9448 <__mdiff+0xdc>
    9480:	0206303a 	nor	r3,zero,r8
    9484:	1b07883a 	add	r3,r3,r12
    9488:	1806d0ba 	srli	r3,r3,2
    948c:	18c00044 	addi	r3,r3,1
    9490:	18c7883a 	add	r3,r3,r3
    9494:	18c7883a 	add	r3,r3,r3
    9498:	58cb883a 	add	r5,r11,r3
    949c:	28ffff04 	addi	r3,r5,-4
    94a0:	3800041e 	bne	r7,zero,94b4 <__mdiff+0x148>
    94a4:	18ffff04 	addi	r3,r3,-4
    94a8:	19000017 	ldw	r4,0(r3)
    94ac:	6b7fffc4 	addi	r13,r13,-1
    94b0:	203ffc26 	beq	r4,zero,94a4 <__mdiff+0x138>
    94b4:	13400415 	stw	r13,16(r2)
    94b8:	dfc00417 	ldw	ra,16(sp)
    94bc:	dcc00317 	ldw	r19,12(sp)
    94c0:	dc800217 	ldw	r18,8(sp)
    94c4:	dc400117 	ldw	r17,4(sp)
    94c8:	dc000017 	ldw	r16,0(sp)
    94cc:	dec00504 	addi	sp,sp,20
    94d0:	f800283a 	ret
    94d4:	8005883a 	mov	r2,r16
    94d8:	04400044 	movi	r17,1
    94dc:	9021883a 	mov	r16,r18
    94e0:	1025883a 	mov	r18,r2
    94e4:	003fb006 	br	93a8 <__mdiff+0x3c>
    94e8:	9809883a 	mov	r4,r19
    94ec:	000b883a 	mov	r5,zero
    94f0:	000897c0 	call	897c <_Balloc>
    94f4:	00c00044 	movi	r3,1
    94f8:	10c00415 	stw	r3,16(r2)
    94fc:	10000515 	stw	zero,20(r2)
    9500:	003fed06 	br	94b8 <__mdiff+0x14c>

00009504 <__ulp>:
    9504:	295ffc2c 	andhi	r5,r5,32752
    9508:	00bf3034 	movhi	r2,64704
    950c:	2887883a 	add	r3,r5,r2
    9510:	00c0020e 	bge	zero,r3,951c <__ulp+0x18>
    9514:	0005883a 	mov	r2,zero
    9518:	f800283a 	ret
    951c:	00c7c83a 	sub	r3,zero,r3
    9520:	180bd53a 	srai	r5,r3,20
    9524:	008004c4 	movi	r2,19
    9528:	11400a0e 	bge	r2,r5,9554 <__ulp+0x50>
    952c:	00800c84 	movi	r2,50
    9530:	0007883a 	mov	r3,zero
    9534:	11400516 	blt	r2,r5,954c <__ulp+0x48>
    9538:	00800cc4 	movi	r2,51
    953c:	114bc83a 	sub	r5,r2,r5
    9540:	00800044 	movi	r2,1
    9544:	1144983a 	sll	r2,r2,r5
    9548:	f800283a 	ret
    954c:	00800044 	movi	r2,1
    9550:	f800283a 	ret
    9554:	00800234 	movhi	r2,8
    9558:	1147d83a 	sra	r3,r2,r5
    955c:	0005883a 	mov	r2,zero
    9560:	f800283a 	ret

00009564 <__b2d>:
    9564:	defffa04 	addi	sp,sp,-24
    9568:	dc000015 	stw	r16,0(sp)
    956c:	24000417 	ldw	r16,16(r4)
    9570:	dc400115 	stw	r17,4(sp)
    9574:	24400504 	addi	r17,r4,20
    9578:	8421883a 	add	r16,r16,r16
    957c:	8421883a 	add	r16,r16,r16
    9580:	8c21883a 	add	r16,r17,r16
    9584:	dc800215 	stw	r18,8(sp)
    9588:	84bfff17 	ldw	r18,-4(r16)
    958c:	dd000415 	stw	r20,16(sp)
    9590:	dcc00315 	stw	r19,12(sp)
    9594:	9009883a 	mov	r4,r18
    9598:	2829883a 	mov	r20,r5
    959c:	dfc00515 	stw	ra,20(sp)
    95a0:	0008c980 	call	8c98 <__hi0bits>
    95a4:	00c00804 	movi	r3,32
    95a8:	1887c83a 	sub	r3,r3,r2
    95ac:	a0c00015 	stw	r3,0(r20)
    95b0:	00c00284 	movi	r3,10
    95b4:	84ffff04 	addi	r19,r16,-4
    95b8:	18801216 	blt	r3,r2,9604 <__b2d+0xa0>
    95bc:	014002c4 	movi	r5,11
    95c0:	2889c83a 	sub	r4,r5,r2
    95c4:	9106d83a 	srl	r3,r18,r4
    95c8:	18cffc34 	orhi	r3,r3,16368
    95cc:	8cc0282e 	bgeu	r17,r19,9670 <__b2d+0x10c>
    95d0:	817ffe17 	ldw	r5,-8(r16)
    95d4:	290ad83a 	srl	r5,r5,r4
    95d8:	10800544 	addi	r2,r2,21
    95dc:	9084983a 	sll	r2,r18,r2
    95e0:	2884b03a 	or	r2,r5,r2
    95e4:	dfc00517 	ldw	ra,20(sp)
    95e8:	dd000417 	ldw	r20,16(sp)
    95ec:	dcc00317 	ldw	r19,12(sp)
    95f0:	dc800217 	ldw	r18,8(sp)
    95f4:	dc400117 	ldw	r17,4(sp)
    95f8:	dc000017 	ldw	r16,0(sp)
    95fc:	dec00604 	addi	sp,sp,24
    9600:	f800283a 	ret
    9604:	113ffd44 	addi	r4,r2,-11
    9608:	8cc00f2e 	bgeu	r17,r19,9648 <__b2d+0xe4>
    960c:	81bffe04 	addi	r6,r16,-8
    9610:	817ffe17 	ldw	r5,-8(r16)
    9614:	20001326 	beq	r4,zero,9664 <__b2d+0x100>
    9618:	00c00ac4 	movi	r3,43
    961c:	1885c83a 	sub	r2,r3,r2
    9620:	2886d83a 	srl	r3,r5,r2
    9624:	9124983a 	sll	r18,r18,r4
    9628:	90e4b03a 	or	r18,r18,r3
    962c:	90cffc34 	orhi	r3,r18,16368
    9630:	8980112e 	bgeu	r17,r6,9678 <__b2d+0x114>
    9634:	81bffd17 	ldw	r6,-12(r16)
    9638:	308cd83a 	srl	r6,r6,r2
    963c:	2904983a 	sll	r2,r5,r4
    9640:	1184b03a 	or	r2,r2,r6
    9644:	003fe706 	br	95e4 <__b2d+0x80>
    9648:	20000526 	beq	r4,zero,9660 <__b2d+0xfc>
    964c:	9124983a 	sll	r18,r18,r4
    9650:	000d883a 	mov	r6,zero
    9654:	000b883a 	mov	r5,zero
    9658:	90cffc34 	orhi	r3,r18,16368
    965c:	003ff706 	br	963c <__b2d+0xd8>
    9660:	000b883a 	mov	r5,zero
    9664:	90cffc34 	orhi	r3,r18,16368
    9668:	2805883a 	mov	r2,r5
    966c:	003fdd06 	br	95e4 <__b2d+0x80>
    9670:	000b883a 	mov	r5,zero
    9674:	003fd806 	br	95d8 <__b2d+0x74>
    9678:	000d883a 	mov	r6,zero
    967c:	003fef06 	br	963c <__b2d+0xd8>

00009680 <__d2b>:
    9680:	defff704 	addi	sp,sp,-36
    9684:	dc000215 	stw	r16,8(sp)
    9688:	3021883a 	mov	r16,r6
    968c:	dc400315 	stw	r17,12(sp)
    9690:	8022907a 	slli	r17,r16,1
    9694:	dd400715 	stw	r21,28(sp)
    9698:	282b883a 	mov	r21,r5
    969c:	01400044 	movi	r5,1
    96a0:	dd000615 	stw	r20,24(sp)
    96a4:	dcc00515 	stw	r19,20(sp)
    96a8:	dc800415 	stw	r18,16(sp)
    96ac:	dfc00815 	stw	ra,32(sp)
    96b0:	3829883a 	mov	r20,r7
    96b4:	dc800917 	ldw	r18,36(sp)
    96b8:	8822d57a 	srli	r17,r17,21
    96bc:	000897c0 	call	897c <_Balloc>
    96c0:	1027883a 	mov	r19,r2
    96c4:	00800434 	movhi	r2,16
    96c8:	10bfffc4 	addi	r2,r2,-1
    96cc:	808c703a 	and	r6,r16,r2
    96d0:	88000126 	beq	r17,zero,96d8 <__d2b+0x58>
    96d4:	31800434 	orhi	r6,r6,16
    96d8:	d9800015 	stw	r6,0(sp)
    96dc:	a8001f26 	beq	r21,zero,975c <__d2b+0xdc>
    96e0:	d9000104 	addi	r4,sp,4
    96e4:	dd400115 	stw	r21,4(sp)
    96e8:	0008d000 	call	8d00 <__lo0bits>
    96ec:	d8c00017 	ldw	r3,0(sp)
    96f0:	1000291e 	bne	r2,zero,9798 <__d2b+0x118>
    96f4:	d9000117 	ldw	r4,4(sp)
    96f8:	99000515 	stw	r4,20(r19)
    96fc:	1820c03a 	cmpne	r16,r3,zero
    9700:	84000044 	addi	r16,r16,1
    9704:	98c00615 	stw	r3,24(r19)
    9708:	9c000415 	stw	r16,16(r19)
    970c:	88001b1e 	bne	r17,zero,977c <__d2b+0xfc>
    9710:	800690ba 	slli	r3,r16,2
    9714:	10bef384 	addi	r2,r2,-1074
    9718:	a0800015 	stw	r2,0(r20)
    971c:	98c5883a 	add	r2,r19,r3
    9720:	11000417 	ldw	r4,16(r2)
    9724:	8020917a 	slli	r16,r16,5
    9728:	0008c980 	call	8c98 <__hi0bits>
    972c:	8085c83a 	sub	r2,r16,r2
    9730:	90800015 	stw	r2,0(r18)
    9734:	9805883a 	mov	r2,r19
    9738:	dfc00817 	ldw	ra,32(sp)
    973c:	dd400717 	ldw	r21,28(sp)
    9740:	dd000617 	ldw	r20,24(sp)
    9744:	dcc00517 	ldw	r19,20(sp)
    9748:	dc800417 	ldw	r18,16(sp)
    974c:	dc400317 	ldw	r17,12(sp)
    9750:	dc000217 	ldw	r16,8(sp)
    9754:	dec00904 	addi	sp,sp,36
    9758:	f800283a 	ret
    975c:	d809883a 	mov	r4,sp
    9760:	0008d000 	call	8d00 <__lo0bits>
    9764:	d8c00017 	ldw	r3,0(sp)
    9768:	04000044 	movi	r16,1
    976c:	9c000415 	stw	r16,16(r19)
    9770:	98c00515 	stw	r3,20(r19)
    9774:	10800804 	addi	r2,r2,32
    9778:	883fe526 	beq	r17,zero,9710 <__d2b+0x90>
    977c:	8c7ef344 	addi	r17,r17,-1075
    9780:	88a3883a 	add	r17,r17,r2
    9784:	00c00d44 	movi	r3,53
    9788:	a4400015 	stw	r17,0(r20)
    978c:	1885c83a 	sub	r2,r3,r2
    9790:	90800015 	stw	r2,0(r18)
    9794:	003fe706 	br	9734 <__d2b+0xb4>
    9798:	01000804 	movi	r4,32
    979c:	2089c83a 	sub	r4,r4,r2
    97a0:	1908983a 	sll	r4,r3,r4
    97a4:	d9400117 	ldw	r5,4(sp)
    97a8:	1886d83a 	srl	r3,r3,r2
    97ac:	2148b03a 	or	r4,r4,r5
    97b0:	99000515 	stw	r4,20(r19)
    97b4:	d8c00015 	stw	r3,0(sp)
    97b8:	003fd006 	br	96fc <__d2b+0x7c>

000097bc <__ratio>:
    97bc:	defff904 	addi	sp,sp,-28
    97c0:	dc400315 	stw	r17,12(sp)
    97c4:	2823883a 	mov	r17,r5
    97c8:	d9400104 	addi	r5,sp,4
    97cc:	dfc00615 	stw	ra,24(sp)
    97d0:	dcc00515 	stw	r19,20(sp)
    97d4:	dc800415 	stw	r18,16(sp)
    97d8:	2027883a 	mov	r19,r4
    97dc:	dc000215 	stw	r16,8(sp)
    97e0:	00095640 	call	9564 <__b2d>
    97e4:	8809883a 	mov	r4,r17
    97e8:	d80b883a 	mov	r5,sp
    97ec:	1025883a 	mov	r18,r2
    97f0:	1821883a 	mov	r16,r3
    97f4:	00095640 	call	9564 <__b2d>
    97f8:	8a400417 	ldw	r9,16(r17)
    97fc:	9a000417 	ldw	r8,16(r19)
    9800:	100d883a 	mov	r6,r2
    9804:	d8800017 	ldw	r2,0(sp)
    9808:	4251c83a 	sub	r8,r8,r9
    980c:	4012917a 	slli	r9,r8,5
    9810:	da000117 	ldw	r8,4(sp)
    9814:	4091c83a 	sub	r8,r8,r2
    9818:	4251883a 	add	r8,r8,r9
    981c:	02000d0e 	bge	zero,r8,9854 <__ratio+0x98>
    9820:	4010953a 	slli	r8,r8,20
    9824:	4421883a 	add	r16,r8,r16
    9828:	9009883a 	mov	r4,r18
    982c:	800b883a 	mov	r5,r16
    9830:	180f883a 	mov	r7,r3
    9834:	00012c40 	call	12c4 <__divdf3>
    9838:	dfc00617 	ldw	ra,24(sp)
    983c:	dcc00517 	ldw	r19,20(sp)
    9840:	dc800417 	ldw	r18,16(sp)
    9844:	dc400317 	ldw	r17,12(sp)
    9848:	dc000217 	ldw	r16,8(sp)
    984c:	dec00704 	addi	sp,sp,28
    9850:	f800283a 	ret
    9854:	4010953a 	slli	r8,r8,20
    9858:	1a07c83a 	sub	r3,r3,r8
    985c:	003ff206 	br	9828 <__ratio+0x6c>

00009860 <_mprec_log10>:
    9860:	defffe04 	addi	sp,sp,-8
    9864:	dc000015 	stw	r16,0(sp)
    9868:	dfc00115 	stw	ra,4(sp)
    986c:	008005c4 	movi	r2,23
    9870:	2021883a 	mov	r16,r4
    9874:	11000d0e 	bge	r2,r4,98ac <_mprec_log10+0x4c>
    9878:	0005883a 	mov	r2,zero
    987c:	00cffc34 	movhi	r3,16368
    9880:	843fffc4 	addi	r16,r16,-1
    9884:	1009883a 	mov	r4,r2
    9888:	180b883a 	mov	r5,r3
    988c:	000d883a 	mov	r6,zero
    9890:	01d00934 	movhi	r7,16420
    9894:	0001e040 	call	1e04 <__muldf3>
    9898:	803ff91e 	bne	r16,zero,9880 <_mprec_log10+0x20>
    989c:	dfc00117 	ldw	ra,4(sp)
    98a0:	dc000017 	ldw	r16,0(sp)
    98a4:	dec00204 	addi	sp,sp,8
    98a8:	f800283a 	ret
    98ac:	202090fa 	slli	r16,r4,3
    98b0:	008000b4 	movhi	r2,2
    98b4:	10ab2904 	addi	r2,r2,-21340
    98b8:	1421883a 	add	r16,r2,r16
    98bc:	80800017 	ldw	r2,0(r16)
    98c0:	80c00117 	ldw	r3,4(r16)
    98c4:	dfc00117 	ldw	ra,4(sp)
    98c8:	dc000017 	ldw	r16,0(sp)
    98cc:	dec00204 	addi	sp,sp,8
    98d0:	f800283a 	ret

000098d4 <__copybits>:
    98d4:	297fffc4 	addi	r5,r5,-1
    98d8:	280fd17a 	srai	r7,r5,5
    98dc:	30c00417 	ldw	r3,16(r6)
    98e0:	30800504 	addi	r2,r6,20
    98e4:	39c00044 	addi	r7,r7,1
    98e8:	18c7883a 	add	r3,r3,r3
    98ec:	39cf883a 	add	r7,r7,r7
    98f0:	18c7883a 	add	r3,r3,r3
    98f4:	39cf883a 	add	r7,r7,r7
    98f8:	10c7883a 	add	r3,r2,r3
    98fc:	21cf883a 	add	r7,r4,r7
    9900:	10c00d2e 	bgeu	r2,r3,9938 <__copybits+0x64>
    9904:	200b883a 	mov	r5,r4
    9908:	12000017 	ldw	r8,0(r2)
    990c:	29400104 	addi	r5,r5,4
    9910:	10800104 	addi	r2,r2,4
    9914:	2a3fff15 	stw	r8,-4(r5)
    9918:	10fffb36 	bltu	r2,r3,9908 <__copybits+0x34>
    991c:	1985c83a 	sub	r2,r3,r6
    9920:	10bffac4 	addi	r2,r2,-21
    9924:	1004d0ba 	srli	r2,r2,2
    9928:	10800044 	addi	r2,r2,1
    992c:	1085883a 	add	r2,r2,r2
    9930:	1085883a 	add	r2,r2,r2
    9934:	2089883a 	add	r4,r4,r2
    9938:	21c0032e 	bgeu	r4,r7,9948 <__copybits+0x74>
    993c:	20000015 	stw	zero,0(r4)
    9940:	21000104 	addi	r4,r4,4
    9944:	21fffd36 	bltu	r4,r7,993c <__copybits+0x68>
    9948:	f800283a 	ret

0000994c <__any_on>:
    994c:	20c00417 	ldw	r3,16(r4)
    9950:	2805d17a 	srai	r2,r5,5
    9954:	21000504 	addi	r4,r4,20
    9958:	18800d0e 	bge	r3,r2,9990 <__any_on+0x44>
    995c:	18c7883a 	add	r3,r3,r3
    9960:	18c7883a 	add	r3,r3,r3
    9964:	20c7883a 	add	r3,r4,r3
    9968:	20c0192e 	bgeu	r4,r3,99d0 <__any_on+0x84>
    996c:	18bfff17 	ldw	r2,-4(r3)
    9970:	18ffff04 	addi	r3,r3,-4
    9974:	1000041e 	bne	r2,zero,9988 <__any_on+0x3c>
    9978:	20c0142e 	bgeu	r4,r3,99cc <__any_on+0x80>
    997c:	18ffff04 	addi	r3,r3,-4
    9980:	19400017 	ldw	r5,0(r3)
    9984:	283ffc26 	beq	r5,zero,9978 <__any_on+0x2c>
    9988:	00800044 	movi	r2,1
    998c:	f800283a 	ret
    9990:	10c00a0e 	bge	r2,r3,99bc <__any_on+0x70>
    9994:	1085883a 	add	r2,r2,r2
    9998:	1085883a 	add	r2,r2,r2
    999c:	294007cc 	andi	r5,r5,31
    99a0:	2087883a 	add	r3,r4,r2
    99a4:	283ff026 	beq	r5,zero,9968 <__any_on+0x1c>
    99a8:	19800017 	ldw	r6,0(r3)
    99ac:	3144d83a 	srl	r2,r6,r5
    99b0:	114a983a 	sll	r5,r2,r5
    99b4:	29bff41e 	bne	r5,r6,9988 <__any_on+0x3c>
    99b8:	003feb06 	br	9968 <__any_on+0x1c>
    99bc:	1085883a 	add	r2,r2,r2
    99c0:	1085883a 	add	r2,r2,r2
    99c4:	2087883a 	add	r3,r4,r2
    99c8:	003fe706 	br	9968 <__any_on+0x1c>
    99cc:	f800283a 	ret
    99d0:	0005883a 	mov	r2,zero
    99d4:	f800283a 	ret

000099d8 <__fpclassifyd>:
    99d8:	00a00034 	movhi	r2,32768
    99dc:	10bfffc4 	addi	r2,r2,-1
    99e0:	2884703a 	and	r2,r5,r2
    99e4:	10000726 	beq	r2,zero,9a04 <__fpclassifyd+0x2c>
    99e8:	00fffc34 	movhi	r3,65520
    99ec:	019ff834 	movhi	r6,32736
    99f0:	28c7883a 	add	r3,r5,r3
    99f4:	31bfffc4 	addi	r6,r6,-1
    99f8:	30c00536 	bltu	r6,r3,9a10 <__fpclassifyd+0x38>
    99fc:	00800104 	movi	r2,4
    9a00:	f800283a 	ret
    9a04:	2000021e 	bne	r4,zero,9a10 <__fpclassifyd+0x38>
    9a08:	00800084 	movi	r2,2
    9a0c:	f800283a 	ret
    9a10:	00dffc34 	movhi	r3,32752
    9a14:	019ff834 	movhi	r6,32736
    9a18:	28cb883a 	add	r5,r5,r3
    9a1c:	31bfffc4 	addi	r6,r6,-1
    9a20:	317ff62e 	bgeu	r6,r5,99fc <__fpclassifyd+0x24>
    9a24:	01400434 	movhi	r5,16
    9a28:	297fffc4 	addi	r5,r5,-1
    9a2c:	28800236 	bltu	r5,r2,9a38 <__fpclassifyd+0x60>
    9a30:	008000c4 	movi	r2,3
    9a34:	f800283a 	ret
    9a38:	10c00226 	beq	r2,r3,9a44 <__fpclassifyd+0x6c>
    9a3c:	0005883a 	mov	r2,zero
    9a40:	f800283a 	ret
    9a44:	2005003a 	cmpeq	r2,r4,zero
    9a48:	f800283a 	ret

00009a4c <_sbrk_r>:
    9a4c:	defffd04 	addi	sp,sp,-12
    9a50:	dc000015 	stw	r16,0(sp)
    9a54:	040000b4 	movhi	r16,2
    9a58:	dc400115 	stw	r17,4(sp)
    9a5c:	8433fa04 	addi	r16,r16,-12312
    9a60:	2023883a 	mov	r17,r4
    9a64:	2809883a 	mov	r4,r5
    9a68:	dfc00215 	stw	ra,8(sp)
    9a6c:	80000015 	stw	zero,0(r16)
    9a70:	000e6b40 	call	e6b4 <sbrk>
    9a74:	00ffffc4 	movi	r3,-1
    9a78:	10c00526 	beq	r2,r3,9a90 <_sbrk_r+0x44>
    9a7c:	dfc00217 	ldw	ra,8(sp)
    9a80:	dc400117 	ldw	r17,4(sp)
    9a84:	dc000017 	ldw	r16,0(sp)
    9a88:	dec00304 	addi	sp,sp,12
    9a8c:	f800283a 	ret
    9a90:	80c00017 	ldw	r3,0(r16)
    9a94:	183ff926 	beq	r3,zero,9a7c <_sbrk_r+0x30>
    9a98:	88c00015 	stw	r3,0(r17)
    9a9c:	003ff706 	br	9a7c <_sbrk_r+0x30>

00009aa0 <__sread>:
    9aa0:	defffe04 	addi	sp,sp,-8
    9aa4:	dc000015 	stw	r16,0(sp)
    9aa8:	2821883a 	mov	r16,r5
    9aac:	2940038f 	ldh	r5,14(r5)
    9ab0:	dfc00115 	stw	ra,4(sp)
    9ab4:	000bd980 	call	bd98 <_read_r>
    9ab8:	10000716 	blt	r2,zero,9ad8 <__sread+0x38>
    9abc:	80c01417 	ldw	r3,80(r16)
    9ac0:	1887883a 	add	r3,r3,r2
    9ac4:	80c01415 	stw	r3,80(r16)
    9ac8:	dfc00117 	ldw	ra,4(sp)
    9acc:	dc000017 	ldw	r16,0(sp)
    9ad0:	dec00204 	addi	sp,sp,8
    9ad4:	f800283a 	ret
    9ad8:	80c0030b 	ldhu	r3,12(r16)
    9adc:	18fbffcc 	andi	r3,r3,61439
    9ae0:	80c0030d 	sth	r3,12(r16)
    9ae4:	dfc00117 	ldw	ra,4(sp)
    9ae8:	dc000017 	ldw	r16,0(sp)
    9aec:	dec00204 	addi	sp,sp,8
    9af0:	f800283a 	ret

00009af4 <__seofread>:
    9af4:	0005883a 	mov	r2,zero
    9af8:	f800283a 	ret

00009afc <__swrite>:
    9afc:	2880030b 	ldhu	r2,12(r5)
    9b00:	defffb04 	addi	sp,sp,-20
    9b04:	dcc00315 	stw	r19,12(sp)
    9b08:	dc800215 	stw	r18,8(sp)
    9b0c:	dc400115 	stw	r17,4(sp)
    9b10:	dc000015 	stw	r16,0(sp)
    9b14:	dfc00415 	stw	ra,16(sp)
    9b18:	10c0400c 	andi	r3,r2,256
    9b1c:	2821883a 	mov	r16,r5
    9b20:	2027883a 	mov	r19,r4
    9b24:	3025883a 	mov	r18,r6
    9b28:	3823883a 	mov	r17,r7
    9b2c:	18000526 	beq	r3,zero,9b44 <__swrite+0x48>
    9b30:	2940038f 	ldh	r5,14(r5)
    9b34:	000d883a 	mov	r6,zero
    9b38:	01c00084 	movi	r7,2
    9b3c:	000bbe00 	call	bbe0 <_lseek_r>
    9b40:	8080030b 	ldhu	r2,12(r16)
    9b44:	8140038f 	ldh	r5,14(r16)
    9b48:	10bbffcc 	andi	r2,r2,61439
    9b4c:	9809883a 	mov	r4,r19
    9b50:	900d883a 	mov	r6,r18
    9b54:	880f883a 	mov	r7,r17
    9b58:	8080030d 	sth	r2,12(r16)
    9b5c:	dfc00417 	ldw	ra,16(sp)
    9b60:	dcc00317 	ldw	r19,12(sp)
    9b64:	dc800217 	ldw	r18,8(sp)
    9b68:	dc400117 	ldw	r17,4(sp)
    9b6c:	dc000017 	ldw	r16,0(sp)
    9b70:	dec00504 	addi	sp,sp,20
    9b74:	000b1fc1 	jmpi	b1fc <_write_r>

00009b78 <__sseek>:
    9b78:	defffe04 	addi	sp,sp,-8
    9b7c:	dc000015 	stw	r16,0(sp)
    9b80:	2821883a 	mov	r16,r5
    9b84:	2940038f 	ldh	r5,14(r5)
    9b88:	dfc00115 	stw	ra,4(sp)
    9b8c:	000bbe00 	call	bbe0 <_lseek_r>
    9b90:	00ffffc4 	movi	r3,-1
    9b94:	10c00826 	beq	r2,r3,9bb8 <__sseek+0x40>
    9b98:	80c0030b 	ldhu	r3,12(r16)
    9b9c:	80801415 	stw	r2,80(r16)
    9ba0:	18c40014 	ori	r3,r3,4096
    9ba4:	80c0030d 	sth	r3,12(r16)
    9ba8:	dfc00117 	ldw	ra,4(sp)
    9bac:	dc000017 	ldw	r16,0(sp)
    9bb0:	dec00204 	addi	sp,sp,8
    9bb4:	f800283a 	ret
    9bb8:	80c0030b 	ldhu	r3,12(r16)
    9bbc:	18fbffcc 	andi	r3,r3,61439
    9bc0:	80c0030d 	sth	r3,12(r16)
    9bc4:	dfc00117 	ldw	ra,4(sp)
    9bc8:	dc000017 	ldw	r16,0(sp)
    9bcc:	dec00204 	addi	sp,sp,8
    9bd0:	f800283a 	ret

00009bd4 <__sclose>:
    9bd4:	2940038f 	ldh	r5,14(r5)
    9bd8:	000b2581 	jmpi	b258 <_close_r>

00009bdc <strcmp>:
    9bdc:	2144b03a 	or	r2,r4,r5
    9be0:	108000cc 	andi	r2,r2,3
    9be4:	1000171e 	bne	r2,zero,9c44 <strcmp+0x68>
    9be8:	20800017 	ldw	r2,0(r4)
    9bec:	28c00017 	ldw	r3,0(r5)
    9bf0:	10c0141e 	bne	r2,r3,9c44 <strcmp+0x68>
    9bf4:	027fbff4 	movhi	r9,65279
    9bf8:	4a7fbfc4 	addi	r9,r9,-257
    9bfc:	0086303a 	nor	r3,zero,r2
    9c00:	02202074 	movhi	r8,32897
    9c04:	1245883a 	add	r2,r2,r9
    9c08:	42202004 	addi	r8,r8,-32640
    9c0c:	10c4703a 	and	r2,r2,r3
    9c10:	1204703a 	and	r2,r2,r8
    9c14:	10000226 	beq	r2,zero,9c20 <strcmp+0x44>
    9c18:	00001706 	br	9c78 <strcmp+0x9c>
    9c1c:	1000161e 	bne	r2,zero,9c78 <strcmp+0x9c>
    9c20:	21000104 	addi	r4,r4,4
    9c24:	20c00017 	ldw	r3,0(r4)
    9c28:	29400104 	addi	r5,r5,4
    9c2c:	29800017 	ldw	r6,0(r5)
    9c30:	1a4f883a 	add	r7,r3,r9
    9c34:	00c4303a 	nor	r2,zero,r3
    9c38:	3884703a 	and	r2,r7,r2
    9c3c:	1204703a 	and	r2,r2,r8
    9c40:	19bff626 	beq	r3,r6,9c1c <strcmp+0x40>
    9c44:	20800007 	ldb	r2,0(r4)
    9c48:	1000051e 	bne	r2,zero,9c60 <strcmp+0x84>
    9c4c:	00000606 	br	9c68 <strcmp+0x8c>
    9c50:	21000044 	addi	r4,r4,1
    9c54:	20800007 	ldb	r2,0(r4)
    9c58:	29400044 	addi	r5,r5,1
    9c5c:	10000226 	beq	r2,zero,9c68 <strcmp+0x8c>
    9c60:	28c00007 	ldb	r3,0(r5)
    9c64:	10fffa26 	beq	r2,r3,9c50 <strcmp+0x74>
    9c68:	20800003 	ldbu	r2,0(r4)
    9c6c:	28c00003 	ldbu	r3,0(r5)
    9c70:	10c5c83a 	sub	r2,r2,r3
    9c74:	f800283a 	ret
    9c78:	0005883a 	mov	r2,zero
    9c7c:	f800283a 	ret

00009c80 <strlen>:
    9c80:	208000cc 	andi	r2,r4,3
    9c84:	10002026 	beq	r2,zero,9d08 <strlen+0x88>
    9c88:	20800007 	ldb	r2,0(r4)
    9c8c:	10002026 	beq	r2,zero,9d10 <strlen+0x90>
    9c90:	2005883a 	mov	r2,r4
    9c94:	00000206 	br	9ca0 <strlen+0x20>
    9c98:	10c00007 	ldb	r3,0(r2)
    9c9c:	18001826 	beq	r3,zero,9d00 <strlen+0x80>
    9ca0:	10800044 	addi	r2,r2,1
    9ca4:	10c000cc 	andi	r3,r2,3
    9ca8:	183ffb1e 	bne	r3,zero,9c98 <strlen+0x18>
    9cac:	10c00017 	ldw	r3,0(r2)
    9cb0:	01ffbff4 	movhi	r7,65279
    9cb4:	39ffbfc4 	addi	r7,r7,-257
    9cb8:	00ca303a 	nor	r5,zero,r3
    9cbc:	01a02074 	movhi	r6,32897
    9cc0:	19c7883a 	add	r3,r3,r7
    9cc4:	31a02004 	addi	r6,r6,-32640
    9cc8:	1946703a 	and	r3,r3,r5
    9ccc:	1986703a 	and	r3,r3,r6
    9cd0:	1800091e 	bne	r3,zero,9cf8 <strlen+0x78>
    9cd4:	10800104 	addi	r2,r2,4
    9cd8:	10c00017 	ldw	r3,0(r2)
    9cdc:	19cb883a 	add	r5,r3,r7
    9ce0:	00c6303a 	nor	r3,zero,r3
    9ce4:	28c6703a 	and	r3,r5,r3
    9ce8:	1986703a 	and	r3,r3,r6
    9cec:	183ff926 	beq	r3,zero,9cd4 <strlen+0x54>
    9cf0:	00000106 	br	9cf8 <strlen+0x78>
    9cf4:	10800044 	addi	r2,r2,1
    9cf8:	10c00007 	ldb	r3,0(r2)
    9cfc:	183ffd1e 	bne	r3,zero,9cf4 <strlen+0x74>
    9d00:	1105c83a 	sub	r2,r2,r4
    9d04:	f800283a 	ret
    9d08:	2005883a 	mov	r2,r4
    9d0c:	003fe706 	br	9cac <strlen+0x2c>
    9d10:	0005883a 	mov	r2,zero
    9d14:	f800283a 	ret

00009d18 <__sprint_r.part.0>:
    9d18:	28801917 	ldw	r2,100(r5)
    9d1c:	defff604 	addi	sp,sp,-40
    9d20:	dd400515 	stw	r21,20(sp)
    9d24:	dcc00315 	stw	r19,12(sp)
    9d28:	dfc00915 	stw	ra,36(sp)
    9d2c:	df000815 	stw	fp,32(sp)
    9d30:	ddc00715 	stw	r23,28(sp)
    9d34:	dd800615 	stw	r22,24(sp)
    9d38:	dd000415 	stw	r20,16(sp)
    9d3c:	dc800215 	stw	r18,8(sp)
    9d40:	dc400115 	stw	r17,4(sp)
    9d44:	dc000015 	stw	r16,0(sp)
    9d48:	1088000c 	andi	r2,r2,8192
    9d4c:	2827883a 	mov	r19,r5
    9d50:	302b883a 	mov	r21,r6
    9d54:	10002d26 	beq	r2,zero,9e0c <__sprint_r.part.0+0xf4>
    9d58:	30800217 	ldw	r2,8(r6)
    9d5c:	35800017 	ldw	r22,0(r6)
    9d60:	10002826 	beq	r2,zero,9e04 <__sprint_r.part.0+0xec>
    9d64:	2029883a 	mov	r20,r4
    9d68:	b5c00104 	addi	r23,r22,4
    9d6c:	04bfffc4 	movi	r18,-1
    9d70:	bc400017 	ldw	r17,0(r23)
    9d74:	b4000017 	ldw	r16,0(r22)
    9d78:	0039883a 	mov	fp,zero
    9d7c:	8822d0ba 	srli	r17,r17,2
    9d80:	04400316 	blt	zero,r17,9d90 <__sprint_r.part.0+0x78>
    9d84:	00001806 	br	9de8 <__sprint_r.part.0+0xd0>
    9d88:	84000104 	addi	r16,r16,4
    9d8c:	8f001526 	beq	r17,fp,9de4 <__sprint_r.part.0+0xcc>
    9d90:	81400017 	ldw	r5,0(r16)
    9d94:	a009883a 	mov	r4,r20
    9d98:	980d883a 	mov	r6,r19
    9d9c:	000b4880 	call	b488 <_fputwc_r>
    9da0:	e7000044 	addi	fp,fp,1
    9da4:	14bff81e 	bne	r2,r18,9d88 <__sprint_r.part.0+0x70>
    9da8:	9005883a 	mov	r2,r18
    9dac:	a8000215 	stw	zero,8(r21)
    9db0:	a8000115 	stw	zero,4(r21)
    9db4:	dfc00917 	ldw	ra,36(sp)
    9db8:	df000817 	ldw	fp,32(sp)
    9dbc:	ddc00717 	ldw	r23,28(sp)
    9dc0:	dd800617 	ldw	r22,24(sp)
    9dc4:	dd400517 	ldw	r21,20(sp)
    9dc8:	dd000417 	ldw	r20,16(sp)
    9dcc:	dcc00317 	ldw	r19,12(sp)
    9dd0:	dc800217 	ldw	r18,8(sp)
    9dd4:	dc400117 	ldw	r17,4(sp)
    9dd8:	dc000017 	ldw	r16,0(sp)
    9ddc:	dec00a04 	addi	sp,sp,40
    9de0:	f800283a 	ret
    9de4:	a8800217 	ldw	r2,8(r21)
    9de8:	8c63883a 	add	r17,r17,r17
    9dec:	8c63883a 	add	r17,r17,r17
    9df0:	1445c83a 	sub	r2,r2,r17
    9df4:	a8800215 	stw	r2,8(r21)
    9df8:	b5800204 	addi	r22,r22,8
    9dfc:	bdc00204 	addi	r23,r23,8
    9e00:	103fdb1e 	bne	r2,zero,9d70 <__sprint_r.part.0+0x58>
    9e04:	0005883a 	mov	r2,zero
    9e08:	003fe806 	br	9dac <__sprint_r.part.0+0x94>
    9e0c:	000b6c00 	call	b6c0 <__sfvwrite_r>
    9e10:	003fe606 	br	9dac <__sprint_r.part.0+0x94>

00009e14 <__sprint_r>:
    9e14:	30c00217 	ldw	r3,8(r6)
    9e18:	18000126 	beq	r3,zero,9e20 <__sprint_r+0xc>
    9e1c:	0009d181 	jmpi	9d18 <__sprint_r.part.0>
    9e20:	30000115 	stw	zero,4(r6)
    9e24:	0005883a 	mov	r2,zero
    9e28:	f800283a 	ret

00009e2c <___vfiprintf_internal_r>:
    9e2c:	deffca04 	addi	sp,sp,-216
    9e30:	dcc02f15 	stw	r19,188(sp)
    9e34:	dfc03515 	stw	ra,212(sp)
    9e38:	df003415 	stw	fp,208(sp)
    9e3c:	ddc03315 	stw	r23,204(sp)
    9e40:	dd803215 	stw	r22,200(sp)
    9e44:	dd403115 	stw	r21,196(sp)
    9e48:	dd003015 	stw	r20,192(sp)
    9e4c:	dc802e15 	stw	r18,184(sp)
    9e50:	dc402d15 	stw	r17,180(sp)
    9e54:	dc002c15 	stw	r16,176(sp)
    9e58:	d9002215 	stw	r4,136(sp)
    9e5c:	d9402115 	stw	r5,132(sp)
    9e60:	d9c02315 	stw	r7,140(sp)
    9e64:	3027883a 	mov	r19,r6
    9e68:	20000226 	beq	r4,zero,9e74 <___vfiprintf_internal_r+0x48>
    9e6c:	20800e17 	ldw	r2,56(r4)
    9e70:	10018d26 	beq	r2,zero,a4a8 <___vfiprintf_internal_r+0x67c>
    9e74:	d8c02117 	ldw	r3,132(sp)
    9e78:	1880030b 	ldhu	r2,12(r3)
    9e7c:	10c8000c 	andi	r3,r2,8192
    9e80:	1800071e 	bne	r3,zero,9ea0 <___vfiprintf_internal_r+0x74>
    9e84:	d9402117 	ldw	r5,132(sp)
    9e88:	00f7ffc4 	movi	r3,-8193
    9e8c:	10880014 	ori	r2,r2,8192
    9e90:	29001917 	ldw	r4,100(r5)
    9e94:	2880030d 	sth	r2,12(r5)
    9e98:	20c6703a 	and	r3,r4,r3
    9e9c:	28c01915 	stw	r3,100(r5)
    9ea0:	10c0020c 	andi	r3,r2,8
    9ea4:	18016126 	beq	r3,zero,a42c <___vfiprintf_internal_r+0x600>
    9ea8:	d9002117 	ldw	r4,132(sp)
    9eac:	20c00417 	ldw	r3,16(r4)
    9eb0:	18015e26 	beq	r3,zero,a42c <___vfiprintf_internal_r+0x600>
    9eb4:	1080068c 	andi	r2,r2,26
    9eb8:	00c00284 	movi	r3,10
    9ebc:	10c16426 	beq	r2,r3,a450 <___vfiprintf_internal_r+0x624>
    9ec0:	d9001a04 	addi	r4,sp,104
    9ec4:	d94019c4 	addi	r5,sp,103
    9ec8:	044000b4 	movhi	r17,2
    9ecc:	2145c83a 	sub	r2,r4,r5
    9ed0:	8c6b5b04 	addi	r17,r17,-21140
    9ed4:	d9001e15 	stw	r4,120(sp)
    9ed8:	d9401f15 	stw	r5,124(sp)
    9edc:	dec01a15 	stw	sp,104(sp)
    9ee0:	d8001c15 	stw	zero,112(sp)
    9ee4:	d8001b15 	stw	zero,108(sp)
    9ee8:	d8002715 	stw	zero,156(sp)
    9eec:	d8002515 	stw	zero,148(sp)
    9ef0:	d8802815 	stw	r2,160(sp)
    9ef4:	d829883a 	mov	r20,sp
    9ef8:	982d883a 	mov	r22,r19
    9efc:	b0800007 	ldb	r2,0(r22)
    9f00:	10038126 	beq	r2,zero,ad08 <___vfiprintf_internal_r+0xedc>
    9f04:	01000944 	movi	r4,37
    9f08:	11037f26 	beq	r2,r4,ad08 <___vfiprintf_internal_r+0xedc>
    9f0c:	b005883a 	mov	r2,r22
    9f10:	00000106 	br	9f18 <___vfiprintf_internal_r+0xec>
    9f14:	19000326 	beq	r3,r4,9f24 <___vfiprintf_internal_r+0xf8>
    9f18:	10800044 	addi	r2,r2,1
    9f1c:	10c00007 	ldb	r3,0(r2)
    9f20:	183ffc1e 	bne	r3,zero,9f14 <___vfiprintf_internal_r+0xe8>
    9f24:	15a1c83a 	sub	r16,r2,r22
    9f28:	102b883a 	mov	r21,r2
    9f2c:	80001026 	beq	r16,zero,9f70 <___vfiprintf_internal_r+0x144>
    9f30:	d8c01c17 	ldw	r3,112(sp)
    9f34:	d8801b17 	ldw	r2,108(sp)
    9f38:	a5800015 	stw	r22,0(r20)
    9f3c:	80c7883a 	add	r3,r16,r3
    9f40:	10800044 	addi	r2,r2,1
    9f44:	a4000115 	stw	r16,4(r20)
    9f48:	d8c01c15 	stw	r3,112(sp)
    9f4c:	d8801b15 	stw	r2,108(sp)
    9f50:	010001c4 	movi	r4,7
    9f54:	2080730e 	bge	r4,r2,a124 <___vfiprintf_internal_r+0x2f8>
    9f58:	1803781e 	bne	r3,zero,ad3c <___vfiprintf_internal_r+0xf10>
    9f5c:	d8c02517 	ldw	r3,148(sp)
    9f60:	d8001b15 	stw	zero,108(sp)
    9f64:	d829883a 	mov	r20,sp
    9f68:	1c07883a 	add	r3,r3,r16
    9f6c:	d8c02515 	stw	r3,148(sp)
    9f70:	a8800007 	ldb	r2,0(r21)
    9f74:	1002a126 	beq	r2,zero,a9fc <___vfiprintf_internal_r+0xbd0>
    9f78:	a8800044 	addi	r2,r21,1
    9f7c:	a9800047 	ldb	r6,1(r21)
    9f80:	d8001d85 	stb	zero,118(sp)
    9f84:	d8002005 	stb	zero,128(sp)
    9f88:	043fffc4 	movi	r16,-1
    9f8c:	d8002415 	stw	zero,144(sp)
    9f90:	0025883a 	mov	r18,zero
    9f94:	05401604 	movi	r21,88
    9f98:	04c00244 	movi	r19,9
    9f9c:	15800044 	addi	r22,r2,1
    9fa0:	30bff804 	addi	r2,r6,-32
    9fa4:	a8823d36 	bltu	r21,r2,a89c <___vfiprintf_internal_r+0xa70>
    9fa8:	100490ba 	slli	r2,r2,2
    9fac:	01000074 	movhi	r4,1
    9fb0:	2127f004 	addi	r4,r4,-24640
    9fb4:	1105883a 	add	r2,r2,r4
    9fb8:	10800017 	ldw	r2,0(r2)
    9fbc:	1000683a 	jmp	r2
    9fc0:	0000a6dc 	xori	zero,zero,667
    9fc4:	0000a89c 	xori	zero,zero,674
    9fc8:	0000a89c 	xori	zero,zero,674
    9fcc:	0000a6f8 	rdprs	zero,zero,667
    9fd0:	0000a89c 	xori	zero,zero,674
    9fd4:	0000a89c 	xori	zero,zero,674
    9fd8:	0000a89c 	xori	zero,zero,674
    9fdc:	0000a89c 	xori	zero,zero,674
    9fe0:	0000a89c 	xori	zero,zero,674
    9fe4:	0000a89c 	xori	zero,zero,674
    9fe8:	0000a708 	cmpgei	zero,zero,668
    9fec:	0000a730 	cmpltui	zero,zero,668
    9ff0:	0000a89c 	xori	zero,zero,674
    9ff4:	0000a4b0 	cmpltui	zero,zero,658
    9ff8:	0000a634 	movhi	zero,664
    9ffc:	0000a89c 	xori	zero,zero,674
    a000:	0000a5a4 	muli	zero,zero,662
    a004:	0000a5b4 	movhi	zero,662
    a008:	0000a5b4 	movhi	zero,662
    a00c:	0000a5b4 	movhi	zero,662
    a010:	0000a5b4 	movhi	zero,662
    a014:	0000a5b4 	movhi	zero,662
    a018:	0000a5b4 	movhi	zero,662
    a01c:	0000a5b4 	movhi	zero,662
    a020:	0000a5b4 	movhi	zero,662
    a024:	0000a5b4 	movhi	zero,662
    a028:	0000a89c 	xori	zero,zero,674
    a02c:	0000a89c 	xori	zero,zero,674
    a030:	0000a89c 	xori	zero,zero,674
    a034:	0000a89c 	xori	zero,zero,674
    a038:	0000a89c 	xori	zero,zero,674
    a03c:	0000a89c 	xori	zero,zero,674
    a040:	0000a89c 	xori	zero,zero,674
    a044:	0000a89c 	xori	zero,zero,674
    a048:	0000a89c 	xori	zero,zero,674
    a04c:	0000a89c 	xori	zero,zero,674
    a050:	0000a5ec 	andhi	zero,zero,663
    a054:	0000a89c 	xori	zero,zero,674
    a058:	0000a89c 	xori	zero,zero,674
    a05c:	0000a89c 	xori	zero,zero,674
    a060:	0000a89c 	xori	zero,zero,674
    a064:	0000a89c 	xori	zero,zero,674
    a068:	0000a89c 	xori	zero,zero,674
    a06c:	0000a89c 	xori	zero,zero,674
    a070:	0000a89c 	xori	zero,zero,674
    a074:	0000a89c 	xori	zero,zero,674
    a078:	0000a89c 	xori	zero,zero,674
    a07c:	0000a16c 	andhi	zero,zero,645
    a080:	0000a89c 	xori	zero,zero,674
    a084:	0000a89c 	xori	zero,zero,674
    a088:	0000a89c 	xori	zero,zero,674
    a08c:	0000a89c 	xori	zero,zero,674
    a090:	0000a89c 	xori	zero,zero,674
    a094:	0000a138 	rdprs	zero,zero,644
    a098:	0000a89c 	xori	zero,zero,674
    a09c:	0000a89c 	xori	zero,zero,674
    a0a0:	0000a520 	cmpeqi	zero,zero,660
    a0a4:	0000a89c 	xori	zero,zero,674
    a0a8:	0000a89c 	xori	zero,zero,674
    a0ac:	0000a89c 	xori	zero,zero,674
    a0b0:	0000a89c 	xori	zero,zero,674
    a0b4:	0000a89c 	xori	zero,zero,674
    a0b8:	0000a89c 	xori	zero,zero,674
    a0bc:	0000a89c 	xori	zero,zero,674
    a0c0:	0000a89c 	xori	zero,zero,674
    a0c4:	0000a89c 	xori	zero,zero,674
    a0c8:	0000a89c 	xori	zero,zero,674
    a0cc:	0000a578 	rdprs	zero,zero,661
    a0d0:	0000a744 	movi	zero,669
    a0d4:	0000a89c 	xori	zero,zero,674
    a0d8:	0000a89c 	xori	zero,zero,674
    a0dc:	0000a89c 	xori	zero,zero,674
    a0e0:	0000a800 	call	a80 <main+0xdc>
    a0e4:	0000a744 	movi	zero,669
    a0e8:	0000a89c 	xori	zero,zero,674
    a0ec:	0000a89c 	xori	zero,zero,674
    a0f0:	0000a810 	cmplti	zero,zero,672
    a0f4:	0000a89c 	xori	zero,zero,674
    a0f8:	0000a684 	movi	zero,666
    a0fc:	0000a170 	cmpltui	zero,zero,645
    a100:	0000a828 	cmpgeui	zero,zero,672
    a104:	0000a868 	cmpgeui	zero,zero,673
    a108:	0000a89c 	xori	zero,zero,674
    a10c:	0000a77c 	xorhi	zero,zero,669
    a110:	0000a89c 	xori	zero,zero,674
    a114:	0000a13c 	xorhi	zero,zero,644
    a118:	0000a89c 	xori	zero,zero,674
    a11c:	0000a89c 	xori	zero,zero,674
    a120:	0000a7c4 	movi	zero,671
    a124:	a5000204 	addi	r20,r20,8
    a128:	d8c02517 	ldw	r3,148(sp)
    a12c:	1c07883a 	add	r3,r3,r16
    a130:	d8c02515 	stw	r3,148(sp)
    a134:	003f8e06 	br	9f70 <___vfiprintf_internal_r+0x144>
    a138:	94800414 	ori	r18,r18,16
    a13c:	9080080c 	andi	r2,r18,32
    a140:	1001cd1e 	bne	r2,zero,a878 <___vfiprintf_internal_r+0xa4c>
    a144:	9080040c 	andi	r2,r18,16
    a148:	10034e26 	beq	r2,zero,ae84 <___vfiprintf_internal_r+0x1058>
    a14c:	d9002317 	ldw	r4,140(sp)
    a150:	002f883a 	mov	r23,zero
    a154:	00800044 	movi	r2,1
    a158:	24c00017 	ldw	r19,0(r4)
    a15c:	21000104 	addi	r4,r4,4
    a160:	d9002315 	stw	r4,140(sp)
    a164:	9807883a 	mov	r3,r19
    a168:	00000c06 	br	a19c <___vfiprintf_internal_r+0x370>
    a16c:	94800414 	ori	r18,r18,16
    a170:	9080080c 	andi	r2,r18,32
    a174:	1001501e 	bne	r2,zero,a6b8 <___vfiprintf_internal_r+0x88c>
    a178:	9080040c 	andi	r2,r18,16
    a17c:	10033726 	beq	r2,zero,ae5c <___vfiprintf_internal_r+0x1030>
    a180:	d9002317 	ldw	r4,140(sp)
    a184:	002f883a 	mov	r23,zero
    a188:	0005883a 	mov	r2,zero
    a18c:	24c00017 	ldw	r19,0(r4)
    a190:	21000104 	addi	r4,r4,4
    a194:	d9002315 	stw	r4,140(sp)
    a198:	9807883a 	mov	r3,r19
    a19c:	d8001d85 	stb	zero,118(sp)
    a1a0:	dc002015 	stw	r16,128(sp)
    a1a4:	0015883a 	mov	r10,zero
    a1a8:	80000216 	blt	r16,zero,a1b4 <___vfiprintf_internal_r+0x388>
    a1ac:	013fdfc4 	movi	r4,-129
    a1b0:	9124703a 	and	r18,r18,r4
    a1b4:	1801ec1e 	bne	r3,zero,a968 <___vfiprintf_internal_r+0xb3c>
    a1b8:	8002b826 	beq	r16,zero,ac9c <___vfiprintf_internal_r+0xe70>
    a1bc:	10803fcc 	andi	r2,r2,255
    a1c0:	00c00044 	movi	r3,1
    a1c4:	10c20726 	beq	r2,r3,a9e4 <___vfiprintf_internal_r+0xbb8>
    a1c8:	00c00084 	movi	r3,2
    a1cc:	df001a04 	addi	fp,sp,104
    a1d0:	10c0bb1e 	bne	r2,r3,a4c0 <___vfiprintf_internal_r+0x694>
    a1d4:	d9002717 	ldw	r4,156(sp)
    a1d8:	988003cc 	andi	r2,r19,15
    a1dc:	b806973a 	slli	r3,r23,28
    a1e0:	2085883a 	add	r2,r4,r2
    a1e4:	9826d13a 	srli	r19,r19,4
    a1e8:	10800003 	ldbu	r2,0(r2)
    a1ec:	b82ed13a 	srli	r23,r23,4
    a1f0:	e73fffc4 	addi	fp,fp,-1
    a1f4:	1ce6b03a 	or	r19,r3,r19
    a1f8:	e0800005 	stb	r2,0(fp)
    a1fc:	9dc4b03a 	or	r2,r19,r23
    a200:	103ff51e 	bne	r2,zero,a1d8 <___vfiprintf_internal_r+0x3ac>
    a204:	d8c01e17 	ldw	r3,120(sp)
    a208:	1f07c83a 	sub	r3,r3,fp
    a20c:	d8c02015 	stw	r3,128(sp)
    a210:	dd402017 	ldw	r21,128(sp)
    a214:	ac00010e 	bge	r21,r16,a21c <___vfiprintf_internal_r+0x3f0>
    a218:	802b883a 	mov	r21,r16
    a21c:	52803fcc 	andi	r10,r10,255
    a220:	5280201c 	xori	r10,r10,128
    a224:	52bfe004 	addi	r10,r10,-128
    a228:	50000126 	beq	r10,zero,a230 <___vfiprintf_internal_r+0x404>
    a22c:	ad400044 	addi	r21,r21,1
    a230:	91c0008c 	andi	r7,r18,2
    a234:	38000126 	beq	r7,zero,a23c <___vfiprintf_internal_r+0x410>
    a238:	ad400084 	addi	r21,r21,2
    a23c:	95c0210c 	andi	r23,r18,132
    a240:	b801ad1e 	bne	r23,zero,a8f8 <___vfiprintf_internal_r+0xacc>
    a244:	d9002417 	ldw	r4,144(sp)
    a248:	2567c83a 	sub	r19,r4,r21
    a24c:	04c1aa0e 	bge	zero,r19,a8f8 <___vfiprintf_internal_r+0xacc>
    a250:	00c00404 	movi	r3,16
    a254:	d8801c17 	ldw	r2,112(sp)
    a258:	1cc37f0e 	bge	r3,r19,b058 <___vfiprintf_internal_r+0x122c>
    a25c:	010000b4 	movhi	r4,2
    a260:	212b5f04 	addi	r4,r4,-21124
    a264:	dc002915 	stw	r16,164(sp)
    a268:	d9801b17 	ldw	r6,108(sp)
    a26c:	9821883a 	mov	r16,r19
    a270:	d9002615 	stw	r4,152(sp)
    a274:	02c001c4 	movi	r11,7
    a278:	3827883a 	mov	r19,r7
    a27c:	00000506 	br	a294 <___vfiprintf_internal_r+0x468>
    a280:	31400084 	addi	r5,r6,2
    a284:	a5000204 	addi	r20,r20,8
    a288:	200d883a 	mov	r6,r4
    a28c:	843ffc04 	addi	r16,r16,-16
    a290:	1c000f0e 	bge	r3,r16,a2d0 <___vfiprintf_internal_r+0x4a4>
    a294:	014000b4 	movhi	r5,2
    a298:	10800404 	addi	r2,r2,16
    a29c:	31000044 	addi	r4,r6,1
    a2a0:	296b5f04 	addi	r5,r5,-21124
    a2a4:	a1400015 	stw	r5,0(r20)
    a2a8:	a0c00115 	stw	r3,4(r20)
    a2ac:	d8801c15 	stw	r2,112(sp)
    a2b0:	d9001b15 	stw	r4,108(sp)
    a2b4:	593ff20e 	bge	r11,r4,a280 <___vfiprintf_internal_r+0x454>
    a2b8:	1001811e 	bne	r2,zero,a8c0 <___vfiprintf_internal_r+0xa94>
    a2bc:	843ffc04 	addi	r16,r16,-16
    a2c0:	000d883a 	mov	r6,zero
    a2c4:	01400044 	movi	r5,1
    a2c8:	d829883a 	mov	r20,sp
    a2cc:	1c3ff116 	blt	r3,r16,a294 <___vfiprintf_internal_r+0x468>
    a2d0:	980f883a 	mov	r7,r19
    a2d4:	8027883a 	mov	r19,r16
    a2d8:	dc002917 	ldw	r16,164(sp)
    a2dc:	d8c02617 	ldw	r3,152(sp)
    a2e0:	9885883a 	add	r2,r19,r2
    a2e4:	a4c00115 	stw	r19,4(r20)
    a2e8:	a0c00015 	stw	r3,0(r20)
    a2ec:	d8801c15 	stw	r2,112(sp)
    a2f0:	d9401b15 	stw	r5,108(sp)
    a2f4:	00c001c4 	movi	r3,7
    a2f8:	19427416 	blt	r3,r5,accc <___vfiprintf_internal_r+0xea0>
    a2fc:	d8c01d87 	ldb	r3,118(sp)
    a300:	a5000204 	addi	r20,r20,8
    a304:	29000044 	addi	r4,r5,1
    a308:	1801801e 	bne	r3,zero,a90c <___vfiprintf_internal_r+0xae0>
    a30c:	38000c26 	beq	r7,zero,a340 <___vfiprintf_internal_r+0x514>
    a310:	d8c01d04 	addi	r3,sp,116
    a314:	10800084 	addi	r2,r2,2
    a318:	a0c00015 	stw	r3,0(r20)
    a31c:	00c00084 	movi	r3,2
    a320:	a0c00115 	stw	r3,4(r20)
    a324:	d8801c15 	stw	r2,112(sp)
    a328:	d9001b15 	stw	r4,108(sp)
    a32c:	00c001c4 	movi	r3,7
    a330:	19025516 	blt	r3,r4,ac88 <___vfiprintf_internal_r+0xe5c>
    a334:	200b883a 	mov	r5,r4
    a338:	a5000204 	addi	r20,r20,8
    a33c:	21000044 	addi	r4,r4,1
    a340:	00c02004 	movi	r3,128
    a344:	b8c21326 	beq	r23,r3,ab94 <___vfiprintf_internal_r+0xd68>
    a348:	d8c02017 	ldw	r3,128(sp)
    a34c:	80e1c83a 	sub	r16,r16,r3
    a350:	0400230e 	bge	zero,r16,a3e0 <___vfiprintf_internal_r+0x5b4>
    a354:	04c00404 	movi	r19,16
    a358:	9c03240e 	bge	r19,r16,afec <___vfiprintf_internal_r+0x11c0>
    a35c:	00c000b4 	movhi	r3,2
    a360:	18eb5b04 	addi	r3,r3,-21140
    a364:	d8c02615 	stw	r3,152(sp)
    a368:	05c001c4 	movi	r23,7
    a36c:	00000506 	br	a384 <___vfiprintf_internal_r+0x558>
    a370:	29000084 	addi	r4,r5,2
    a374:	a5000204 	addi	r20,r20,8
    a378:	180b883a 	mov	r5,r3
    a37c:	843ffc04 	addi	r16,r16,-16
    a380:	9c000d0e 	bge	r19,r16,a3b8 <___vfiprintf_internal_r+0x58c>
    a384:	10800404 	addi	r2,r2,16
    a388:	28c00044 	addi	r3,r5,1
    a38c:	a4400015 	stw	r17,0(r20)
    a390:	a4c00115 	stw	r19,4(r20)
    a394:	d8801c15 	stw	r2,112(sp)
    a398:	d8c01b15 	stw	r3,108(sp)
    a39c:	b8fff40e 	bge	r23,r3,a370 <___vfiprintf_internal_r+0x544>
    a3a0:	1001671e 	bne	r2,zero,a940 <___vfiprintf_internal_r+0xb14>
    a3a4:	843ffc04 	addi	r16,r16,-16
    a3a8:	01000044 	movi	r4,1
    a3ac:	000b883a 	mov	r5,zero
    a3b0:	d829883a 	mov	r20,sp
    a3b4:	9c3ff316 	blt	r19,r16,a384 <___vfiprintf_internal_r+0x558>
    a3b8:	d8c02617 	ldw	r3,152(sp)
    a3bc:	1405883a 	add	r2,r2,r16
    a3c0:	a4000115 	stw	r16,4(r20)
    a3c4:	a0c00015 	stw	r3,0(r20)
    a3c8:	d8801c15 	stw	r2,112(sp)
    a3cc:	d9001b15 	stw	r4,108(sp)
    a3d0:	00c001c4 	movi	r3,7
    a3d4:	19019516 	blt	r3,r4,aa2c <___vfiprintf_internal_r+0xc00>
    a3d8:	a5000204 	addi	r20,r20,8
    a3dc:	21000044 	addi	r4,r4,1
    a3e0:	d8c02017 	ldw	r3,128(sp)
    a3e4:	a7000015 	stw	fp,0(r20)
    a3e8:	d9001b15 	stw	r4,108(sp)
    a3ec:	10c5883a 	add	r2,r2,r3
    a3f0:	a0c00115 	stw	r3,4(r20)
    a3f4:	d8801c15 	stw	r2,112(sp)
    a3f8:	00c001c4 	movi	r3,7
    a3fc:	1901930e 	bge	r3,r4,aa4c <___vfiprintf_internal_r+0xc20>
    a400:	1002431e 	bne	r2,zero,ad10 <___vfiprintf_internal_r+0xee4>
    a404:	d8001b15 	stw	zero,108(sp)
    a408:	9480010c 	andi	r18,r18,4
    a40c:	9002391e 	bne	r18,zero,acf4 <___vfiprintf_internal_r+0xec8>
    a410:	d8802417 	ldw	r2,144(sp)
    a414:	a880010e 	bge	r21,r2,a41c <___vfiprintf_internal_r+0x5f0>
    a418:	102b883a 	mov	r21,r2
    a41c:	d8c02517 	ldw	r3,148(sp)
    a420:	1d47883a 	add	r3,r3,r21
    a424:	d8c02515 	stw	r3,148(sp)
    a428:	0001cd06 	br	ab60 <___vfiprintf_internal_r+0xd34>
    a42c:	d9002217 	ldw	r4,136(sp)
    a430:	d9402117 	ldw	r5,132(sp)
    a434:	00055740 	call	5574 <__swsetup_r>
    a438:	10000e1e 	bne	r2,zero,a474 <___vfiprintf_internal_r+0x648>
    a43c:	d9402117 	ldw	r5,132(sp)
    a440:	00c00284 	movi	r3,10
    a444:	2880030b 	ldhu	r2,12(r5)
    a448:	1080068c 	andi	r2,r2,26
    a44c:	10fe9c1e 	bne	r2,r3,9ec0 <___vfiprintf_internal_r+0x94>
    a450:	d8c02117 	ldw	r3,132(sp)
    a454:	1880038f 	ldh	r2,14(r3)
    a458:	103e9916 	blt	r2,zero,9ec0 <___vfiprintf_internal_r+0x94>
    a45c:	d9002217 	ldw	r4,136(sp)
    a460:	d9c02317 	ldw	r7,140(sp)
    a464:	180b883a 	mov	r5,r3
    a468:	980d883a 	mov	r6,r19
    a46c:	000b1400 	call	b140 <__sbprintf>
    a470:	00000106 	br	a478 <___vfiprintf_internal_r+0x64c>
    a474:	00bfffc4 	movi	r2,-1
    a478:	dfc03517 	ldw	ra,212(sp)
    a47c:	df003417 	ldw	fp,208(sp)
    a480:	ddc03317 	ldw	r23,204(sp)
    a484:	dd803217 	ldw	r22,200(sp)
    a488:	dd403117 	ldw	r21,196(sp)
    a48c:	dd003017 	ldw	r20,192(sp)
    a490:	dcc02f17 	ldw	r19,188(sp)
    a494:	dc802e17 	ldw	r18,184(sp)
    a498:	dc402d17 	ldw	r17,180(sp)
    a49c:	dc002c17 	ldw	r16,176(sp)
    a4a0:	dec03604 	addi	sp,sp,216
    a4a4:	f800283a 	ret
    a4a8:	000760c0 	call	760c <__sinit>
    a4ac:	003e7106 	br	9e74 <___vfiprintf_internal_r+0x48>
    a4b0:	b005883a 	mov	r2,r22
    a4b4:	94800114 	ori	r18,r18,4
    a4b8:	b1800007 	ldb	r6,0(r22)
    a4bc:	003eb706 	br	9f9c <___vfiprintf_internal_r+0x170>
    a4c0:	9806d0fa 	srli	r3,r19,3
    a4c4:	b808977a 	slli	r4,r23,29
    a4c8:	b82ed0fa 	srli	r23,r23,3
    a4cc:	9cc001cc 	andi	r19,r19,7
    a4d0:	98800c04 	addi	r2,r19,48
    a4d4:	e73fffc4 	addi	fp,fp,-1
    a4d8:	20e6b03a 	or	r19,r4,r3
    a4dc:	e0800005 	stb	r2,0(fp)
    a4e0:	9dc6b03a 	or	r3,r19,r23
    a4e4:	183ff61e 	bne	r3,zero,a4c0 <___vfiprintf_internal_r+0x694>
    a4e8:	90c0004c 	andi	r3,r18,1
    a4ec:	e009883a 	mov	r4,fp
    a4f0:	183f4426 	beq	r3,zero,a204 <___vfiprintf_internal_r+0x3d8>
    a4f4:	10803fcc 	andi	r2,r2,255
    a4f8:	1080201c 	xori	r2,r2,128
    a4fc:	10bfe004 	addi	r2,r2,-128
    a500:	00c00c04 	movi	r3,48
    a504:	10ff3f26 	beq	r2,r3,a204 <___vfiprintf_internal_r+0x3d8>
    a508:	20ffffc5 	stb	r3,-1(r4)
    a50c:	d8c01e17 	ldw	r3,120(sp)
    a510:	e73fffc4 	addi	fp,fp,-1
    a514:	1f07c83a 	sub	r3,r3,fp
    a518:	d8c02015 	stw	r3,128(sp)
    a51c:	003f3c06 	br	a210 <___vfiprintf_internal_r+0x3e4>
    a520:	d8c02003 	ldbu	r3,128(sp)
    a524:	010000b4 	movhi	r4,2
    a528:	212af504 	addi	r4,r4,-21548
    a52c:	d8c01d85 	stb	r3,118(sp)
    a530:	d9002715 	stw	r4,156(sp)
    a534:	9080080c 	andi	r2,r18,32
    a538:	1000a926 	beq	r2,zero,a7e0 <___vfiprintf_internal_r+0x9b4>
    a53c:	d9002317 	ldw	r4,140(sp)
    a540:	24c00017 	ldw	r19,0(r4)
    a544:	25c00117 	ldw	r23,4(r4)
    a548:	21000204 	addi	r4,r4,8
    a54c:	d9002315 	stw	r4,140(sp)
    a550:	9080004c 	andi	r2,r18,1
    a554:	1001f626 	beq	r2,zero,ad30 <___vfiprintf_internal_r+0xf04>
    a558:	9dc6b03a 	or	r3,r19,r23
    a55c:	18023d26 	beq	r3,zero,ae54 <___vfiprintf_internal_r+0x1028>
    a560:	00800c04 	movi	r2,48
    a564:	d8801d05 	stb	r2,116(sp)
    a568:	d9801d45 	stb	r6,117(sp)
    a56c:	94800094 	ori	r18,r18,2
    a570:	00800084 	movi	r2,2
    a574:	003f0906 	br	a19c <___vfiprintf_internal_r+0x370>
    a578:	d9002317 	ldw	r4,140(sp)
    a57c:	05400044 	movi	r21,1
    a580:	d8001d85 	stb	zero,118(sp)
    a584:	20800017 	ldw	r2,0(r4)
    a588:	21000104 	addi	r4,r4,4
    a58c:	d9002315 	stw	r4,140(sp)
    a590:	d8801005 	stb	r2,64(sp)
    a594:	dd402015 	stw	r21,128(sp)
    a598:	df001004 	addi	fp,sp,64
    a59c:	0021883a 	mov	r16,zero
    a5a0:	003f2306 	br	a230 <___vfiprintf_internal_r+0x404>
    a5a4:	94802014 	ori	r18,r18,128
    a5a8:	b005883a 	mov	r2,r22
    a5ac:	b1800007 	ldb	r6,0(r22)
    a5b0:	003e7a06 	br	9f9c <___vfiprintf_internal_r+0x170>
    a5b4:	b039883a 	mov	fp,r22
    a5b8:	d8002415 	stw	zero,144(sp)
    a5bc:	35fff404 	addi	r23,r6,-48
    a5c0:	0009883a 	mov	r4,zero
    a5c4:	01400284 	movi	r5,10
    a5c8:	000129c0 	call	129c <__mulsi3>
    a5cc:	e1800007 	ldb	r6,0(fp)
    a5d0:	15c9883a 	add	r4,r2,r23
    a5d4:	b5800044 	addi	r22,r22,1
    a5d8:	35fff404 	addi	r23,r6,-48
    a5dc:	b039883a 	mov	fp,r22
    a5e0:	9dfff82e 	bgeu	r19,r23,a5c4 <___vfiprintf_internal_r+0x798>
    a5e4:	d9002415 	stw	r4,144(sp)
    a5e8:	003e6d06 	br	9fa0 <___vfiprintf_internal_r+0x174>
    a5ec:	d8c02003 	ldbu	r3,128(sp)
    a5f0:	94800414 	ori	r18,r18,16
    a5f4:	9080080c 	andi	r2,r18,32
    a5f8:	d8c01d85 	stb	r3,118(sp)
    a5fc:	d8c02317 	ldw	r3,140(sp)
    a600:	10005526 	beq	r2,zero,a758 <___vfiprintf_internal_r+0x92c>
    a604:	d9002317 	ldw	r4,140(sp)
    a608:	18800117 	ldw	r2,4(r3)
    a60c:	1cc00017 	ldw	r19,0(r3)
    a610:	21000204 	addi	r4,r4,8
    a614:	d9002315 	stw	r4,140(sp)
    a618:	102f883a 	mov	r23,r2
    a61c:	1001f716 	blt	r2,zero,adfc <___vfiprintf_internal_r+0xfd0>
    a620:	da801d83 	ldbu	r10,118(sp)
    a624:	dc002015 	stw	r16,128(sp)
    a628:	00800044 	movi	r2,1
    a62c:	9dc6b03a 	or	r3,r19,r23
    a630:	003edd06 	br	a1a8 <___vfiprintf_internal_r+0x37c>
    a634:	b1800007 	ldb	r6,0(r22)
    a638:	01000a84 	movi	r4,42
    a63c:	b0800044 	addi	r2,r22,1
    a640:	3102ae26 	beq	r6,r4,b0fc <___vfiprintf_internal_r+0x12d0>
    a644:	35fff404 	addi	r23,r6,-48
    a648:	102d883a 	mov	r22,r2
    a64c:	0021883a 	mov	r16,zero
    a650:	9dfe5336 	bltu	r19,r23,9fa0 <___vfiprintf_internal_r+0x174>
    a654:	0009883a 	mov	r4,zero
    a658:	01400284 	movi	r5,10
    a65c:	000129c0 	call	129c <__mulsi3>
    a660:	b1800007 	ldb	r6,0(r22)
    a664:	b889883a 	add	r4,r23,r2
    a668:	b5800044 	addi	r22,r22,1
    a66c:	35fff404 	addi	r23,r6,-48
    a670:	9dfff92e 	bgeu	r19,r23,a658 <___vfiprintf_internal_r+0x82c>
    a674:	2021883a 	mov	r16,r4
    a678:	203e490e 	bge	r4,zero,9fa0 <___vfiprintf_internal_r+0x174>
    a67c:	043fffc4 	movi	r16,-1
    a680:	003e4706 	br	9fa0 <___vfiprintf_internal_r+0x174>
    a684:	d8c02003 	ldbu	r3,128(sp)
    a688:	9080080c 	andi	r2,r18,32
    a68c:	d8c01d85 	stb	r3,118(sp)
    a690:	10020e26 	beq	r2,zero,aecc <___vfiprintf_internal_r+0x10a0>
    a694:	d9002317 	ldw	r4,140(sp)
    a698:	d9402517 	ldw	r5,148(sp)
    a69c:	20800017 	ldw	r2,0(r4)
    a6a0:	2807d7fa 	srai	r3,r5,31
    a6a4:	21000104 	addi	r4,r4,4
    a6a8:	d9002315 	stw	r4,140(sp)
    a6ac:	11400015 	stw	r5,0(r2)
    a6b0:	10c00115 	stw	r3,4(r2)
    a6b4:	003e1106 	br	9efc <___vfiprintf_internal_r+0xd0>
    a6b8:	d8802317 	ldw	r2,140(sp)
    a6bc:	d8c02317 	ldw	r3,140(sp)
    a6c0:	14c00017 	ldw	r19,0(r2)
    a6c4:	15c00117 	ldw	r23,4(r2)
    a6c8:	18c00204 	addi	r3,r3,8
    a6cc:	d8c02315 	stw	r3,140(sp)
    a6d0:	0005883a 	mov	r2,zero
    a6d4:	9dc6b03a 	or	r3,r19,r23
    a6d8:	003eb006 	br	a19c <___vfiprintf_internal_r+0x370>
    a6dc:	d8802007 	ldb	r2,128(sp)
    a6e0:	1001d91e 	bne	r2,zero,ae48 <___vfiprintf_internal_r+0x101c>
    a6e4:	00c00804 	movi	r3,32
    a6e8:	d8c02005 	stb	r3,128(sp)
    a6ec:	b005883a 	mov	r2,r22
    a6f0:	b1800007 	ldb	r6,0(r22)
    a6f4:	003e2906 	br	9f9c <___vfiprintf_internal_r+0x170>
    a6f8:	94800054 	ori	r18,r18,1
    a6fc:	b005883a 	mov	r2,r22
    a700:	b1800007 	ldb	r6,0(r22)
    a704:	003e2506 	br	9f9c <___vfiprintf_internal_r+0x170>
    a708:	d9002317 	ldw	r4,140(sp)
    a70c:	d9402317 	ldw	r5,140(sp)
    a710:	21000017 	ldw	r4,0(r4)
    a714:	28c00104 	addi	r3,r5,4
    a718:	d9002415 	stw	r4,144(sp)
    a71c:	20023b16 	blt	r4,zero,b00c <___vfiprintf_internal_r+0x11e0>
    a720:	d8c02315 	stw	r3,140(sp)
    a724:	b005883a 	mov	r2,r22
    a728:	b1800007 	ldb	r6,0(r22)
    a72c:	003e1b06 	br	9f9c <___vfiprintf_internal_r+0x170>
    a730:	00c00ac4 	movi	r3,43
    a734:	d8c02005 	stb	r3,128(sp)
    a738:	b005883a 	mov	r2,r22
    a73c:	b1800007 	ldb	r6,0(r22)
    a740:	003e1606 	br	9f9c <___vfiprintf_internal_r+0x170>
    a744:	d8c02003 	ldbu	r3,128(sp)
    a748:	9080080c 	andi	r2,r18,32
    a74c:	d8c01d85 	stb	r3,118(sp)
    a750:	d8c02317 	ldw	r3,140(sp)
    a754:	103fab1e 	bne	r2,zero,a604 <___vfiprintf_internal_r+0x7d8>
    a758:	9080040c 	andi	r2,r18,16
    a75c:	1001e626 	beq	r2,zero,aef8 <___vfiprintf_internal_r+0x10cc>
    a760:	1cc00017 	ldw	r19,0(r3)
    a764:	d9402317 	ldw	r5,140(sp)
    a768:	982fd7fa 	srai	r23,r19,31
    a76c:	29400104 	addi	r5,r5,4
    a770:	d9402315 	stw	r5,140(sp)
    a774:	b805883a 	mov	r2,r23
    a778:	003fa806 	br	a61c <___vfiprintf_internal_r+0x7f0>
    a77c:	d9402317 	ldw	r5,140(sp)
    a780:	d8001d85 	stb	zero,118(sp)
    a784:	2f000017 	ldw	fp,0(r5)
    a788:	2cc00104 	addi	r19,r5,4
    a78c:	e0023826 	beq	fp,zero,b070 <___vfiprintf_internal_r+0x1244>
    a790:	e009883a 	mov	r4,fp
    a794:	80022316 	blt	r16,zero,b024 <___vfiprintf_internal_r+0x11f8>
    a798:	000b883a 	mov	r5,zero
    a79c:	800d883a 	mov	r6,r16
    a7a0:	00086380 	call	8638 <memchr>
    a7a4:	10024e26 	beq	r2,zero,b0e0 <___vfiprintf_internal_r+0x12b4>
    a7a8:	1705c83a 	sub	r2,r2,fp
    a7ac:	d8802015 	stw	r2,128(sp)
    a7b0:	8081e816 	blt	r16,r2,af54 <___vfiprintf_internal_r+0x1128>
    a7b4:	da801d83 	ldbu	r10,118(sp)
    a7b8:	dcc02315 	stw	r19,140(sp)
    a7bc:	0021883a 	mov	r16,zero
    a7c0:	003e9306 	br	a210 <___vfiprintf_internal_r+0x3e4>
    a7c4:	00c000b4 	movhi	r3,2
    a7c8:	18eafa04 	addi	r3,r3,-21528
    a7cc:	d8c02715 	stw	r3,156(sp)
    a7d0:	d8c02003 	ldbu	r3,128(sp)
    a7d4:	9080080c 	andi	r2,r18,32
    a7d8:	d8c01d85 	stb	r3,118(sp)
    a7dc:	103f571e 	bne	r2,zero,a53c <___vfiprintf_internal_r+0x710>
    a7e0:	9080040c 	andi	r2,r18,16
    a7e4:	1001b126 	beq	r2,zero,aeac <___vfiprintf_internal_r+0x1080>
    a7e8:	d9402317 	ldw	r5,140(sp)
    a7ec:	002f883a 	mov	r23,zero
    a7f0:	2cc00017 	ldw	r19,0(r5)
    a7f4:	29400104 	addi	r5,r5,4
    a7f8:	d9402315 	stw	r5,140(sp)
    a7fc:	003f5406 	br	a550 <___vfiprintf_internal_r+0x724>
    a800:	94801014 	ori	r18,r18,64
    a804:	b005883a 	mov	r2,r22
    a808:	b1800007 	ldb	r6,0(r22)
    a80c:	003de306 	br	9f9c <___vfiprintf_internal_r+0x170>
    a810:	b1800007 	ldb	r6,0(r22)
    a814:	00c01b04 	movi	r3,108
    a818:	b005883a 	mov	r2,r22
    a81c:	30c1f726 	beq	r6,r3,affc <___vfiprintf_internal_r+0x11d0>
    a820:	94800414 	ori	r18,r18,16
    a824:	003ddd06 	br	9f9c <___vfiprintf_internal_r+0x170>
    a828:	d8c02317 	ldw	r3,140(sp)
    a82c:	00800c04 	movi	r2,48
    a830:	010000b4 	movhi	r4,2
    a834:	1cc00017 	ldw	r19,0(r3)
    a838:	d8801d05 	stb	r2,116(sp)
    a83c:	18c00104 	addi	r3,r3,4
    a840:	00801e04 	movi	r2,120
    a844:	212afa04 	addi	r4,r4,-21528
    a848:	d8801d45 	stb	r2,117(sp)
    a84c:	d8c02315 	stw	r3,140(sp)
    a850:	002f883a 	mov	r23,zero
    a854:	94800094 	ori	r18,r18,2
    a858:	d9002715 	stw	r4,156(sp)
    a85c:	00800084 	movi	r2,2
    a860:	9807883a 	mov	r3,r19
    a864:	003e4d06 	br	a19c <___vfiprintf_internal_r+0x370>
    a868:	94800814 	ori	r18,r18,32
    a86c:	b005883a 	mov	r2,r22
    a870:	b1800007 	ldb	r6,0(r22)
    a874:	003dc906 	br	9f9c <___vfiprintf_internal_r+0x170>
    a878:	d8802317 	ldw	r2,140(sp)
    a87c:	d8c02317 	ldw	r3,140(sp)
    a880:	14c00017 	ldw	r19,0(r2)
    a884:	15c00117 	ldw	r23,4(r2)
    a888:	18c00204 	addi	r3,r3,8
    a88c:	d8c02315 	stw	r3,140(sp)
    a890:	00800044 	movi	r2,1
    a894:	9dc6b03a 	or	r3,r19,r23
    a898:	003e4006 	br	a19c <___vfiprintf_internal_r+0x370>
    a89c:	d8c02003 	ldbu	r3,128(sp)
    a8a0:	d8c01d85 	stb	r3,118(sp)
    a8a4:	30005526 	beq	r6,zero,a9fc <___vfiprintf_internal_r+0xbd0>
    a8a8:	05400044 	movi	r21,1
    a8ac:	d9801005 	stb	r6,64(sp)
    a8b0:	d8001d85 	stb	zero,118(sp)
    a8b4:	dd402015 	stw	r21,128(sp)
    a8b8:	df001004 	addi	fp,sp,64
    a8bc:	003f3706 	br	a59c <___vfiprintf_internal_r+0x770>
    a8c0:	d9002217 	ldw	r4,136(sp)
    a8c4:	d9402117 	ldw	r5,132(sp)
    a8c8:	d9801a04 	addi	r6,sp,104
    a8cc:	d8c02a15 	stw	r3,168(sp)
    a8d0:	dac02b15 	stw	r11,172(sp)
    a8d4:	0009d180 	call	9d18 <__sprint_r.part.0>
    a8d8:	d8c02a17 	ldw	r3,168(sp)
    a8dc:	dac02b17 	ldw	r11,172(sp)
    a8e0:	10004c1e 	bne	r2,zero,aa14 <___vfiprintf_internal_r+0xbe8>
    a8e4:	d9801b17 	ldw	r6,108(sp)
    a8e8:	d8801c17 	ldw	r2,112(sp)
    a8ec:	d829883a 	mov	r20,sp
    a8f0:	31400044 	addi	r5,r6,1
    a8f4:	003e6506 	br	a28c <___vfiprintf_internal_r+0x460>
    a8f8:	d9401b17 	ldw	r5,108(sp)
    a8fc:	d8801c17 	ldw	r2,112(sp)
    a900:	29000044 	addi	r4,r5,1
    a904:	d8c01d87 	ldb	r3,118(sp)
    a908:	183e8026 	beq	r3,zero,a30c <___vfiprintf_internal_r+0x4e0>
    a90c:	00c00044 	movi	r3,1
    a910:	d9401d84 	addi	r5,sp,118
    a914:	10c5883a 	add	r2,r2,r3
    a918:	a1400015 	stw	r5,0(r20)
    a91c:	a0c00115 	stw	r3,4(r20)
    a920:	d8801c15 	stw	r2,112(sp)
    a924:	d9001b15 	stw	r4,108(sp)
    a928:	014001c4 	movi	r5,7
    a92c:	2900cd16 	blt	r5,r4,ac64 <___vfiprintf_internal_r+0xe38>
    a930:	200b883a 	mov	r5,r4
    a934:	a5000204 	addi	r20,r20,8
    a938:	21000044 	addi	r4,r4,1
    a93c:	003e7306 	br	a30c <___vfiprintf_internal_r+0x4e0>
    a940:	d9002217 	ldw	r4,136(sp)
    a944:	d9402117 	ldw	r5,132(sp)
    a948:	d9801a04 	addi	r6,sp,104
    a94c:	0009d180 	call	9d18 <__sprint_r.part.0>
    a950:	1000301e 	bne	r2,zero,aa14 <___vfiprintf_internal_r+0xbe8>
    a954:	d9401b17 	ldw	r5,108(sp)
    a958:	d8801c17 	ldw	r2,112(sp)
    a95c:	d829883a 	mov	r20,sp
    a960:	29000044 	addi	r4,r5,1
    a964:	003e8506 	br	a37c <___vfiprintf_internal_r+0x550>
    a968:	10803fcc 	andi	r2,r2,255
    a96c:	00c00044 	movi	r3,1
    a970:	10fe151e 	bne	r2,r3,a1c8 <___vfiprintf_internal_r+0x39c>
    a974:	b800021e 	bne	r23,zero,a980 <___vfiprintf_internal_r+0xb54>
    a978:	00800244 	movi	r2,9
    a97c:	14c0192e 	bgeu	r2,r19,a9e4 <___vfiprintf_internal_r+0xbb8>
    a980:	dd401a04 	addi	r21,sp,104
    a984:	5039883a 	mov	fp,r10
    a988:	9809883a 	mov	r4,r19
    a98c:	b80b883a 	mov	r5,r23
    a990:	01800284 	movi	r6,10
    a994:	000f883a 	mov	r7,zero
    a998:	000ccd80 	call	ccd8 <__umoddi3>
    a99c:	10800c04 	addi	r2,r2,48
    a9a0:	ad7fffc4 	addi	r21,r21,-1
    a9a4:	9809883a 	mov	r4,r19
    a9a8:	b80b883a 	mov	r5,r23
    a9ac:	01800284 	movi	r6,10
    a9b0:	000f883a 	mov	r7,zero
    a9b4:	a8800005 	stb	r2,0(r21)
    a9b8:	000c6980 	call	c698 <__udivdi3>
    a9bc:	1027883a 	mov	r19,r2
    a9c0:	10c4b03a 	or	r2,r2,r3
    a9c4:	182f883a 	mov	r23,r3
    a9c8:	103fef1e 	bne	r2,zero,a988 <___vfiprintf_internal_r+0xb5c>
    a9cc:	d8c01e17 	ldw	r3,120(sp)
    a9d0:	e015883a 	mov	r10,fp
    a9d4:	a839883a 	mov	fp,r21
    a9d8:	1d47c83a 	sub	r3,r3,r21
    a9dc:	d8c02015 	stw	r3,128(sp)
    a9e0:	003e0b06 	br	a210 <___vfiprintf_internal_r+0x3e4>
    a9e4:	d9002817 	ldw	r4,160(sp)
    a9e8:	9cc00c04 	addi	r19,r19,48
    a9ec:	dcc019c5 	stb	r19,103(sp)
    a9f0:	d9002015 	stw	r4,128(sp)
    a9f4:	df0019c4 	addi	fp,sp,103
    a9f8:	003e0506 	br	a210 <___vfiprintf_internal_r+0x3e4>
    a9fc:	d8801c17 	ldw	r2,112(sp)
    aa00:	10000426 	beq	r2,zero,aa14 <___vfiprintf_internal_r+0xbe8>
    aa04:	d9002217 	ldw	r4,136(sp)
    aa08:	d9402117 	ldw	r5,132(sp)
    aa0c:	d9801a04 	addi	r6,sp,104
    aa10:	0009d180 	call	9d18 <__sprint_r.part.0>
    aa14:	d8c02117 	ldw	r3,132(sp)
    aa18:	1880030b 	ldhu	r2,12(r3)
    aa1c:	1080100c 	andi	r2,r2,64
    aa20:	103e941e 	bne	r2,zero,a474 <___vfiprintf_internal_r+0x648>
    aa24:	d8802517 	ldw	r2,148(sp)
    aa28:	003e9306 	br	a478 <___vfiprintf_internal_r+0x64c>
    aa2c:	1000e91e 	bne	r2,zero,add4 <___vfiprintf_internal_r+0xfa8>
    aa30:	d8802017 	ldw	r2,128(sp)
    aa34:	00c00044 	movi	r3,1
    aa38:	df000015 	stw	fp,0(sp)
    aa3c:	d8800115 	stw	r2,4(sp)
    aa40:	d8801c15 	stw	r2,112(sp)
    aa44:	d8c01b15 	stw	r3,108(sp)
    aa48:	d829883a 	mov	r20,sp
    aa4c:	a2000204 	addi	r8,r20,8
    aa50:	9480010c 	andi	r18,r18,4
    aa54:	90003626 	beq	r18,zero,ab30 <___vfiprintf_internal_r+0xd04>
    aa58:	d9002417 	ldw	r4,144(sp)
    aa5c:	2565c83a 	sub	r18,r4,r21
    aa60:	0480330e 	bge	zero,r18,ab30 <___vfiprintf_internal_r+0xd04>
    aa64:	04000404 	movi	r16,16
    aa68:	84818b0e 	bge	r16,r18,b098 <___vfiprintf_internal_r+0x126c>
    aa6c:	00c000b4 	movhi	r3,2
    aa70:	18eb5f04 	addi	r3,r3,-21124
    aa74:	d9001b17 	ldw	r4,108(sp)
    aa78:	d8c02615 	stw	r3,152(sp)
    aa7c:	04c001c4 	movi	r19,7
    aa80:	dd002217 	ldw	r20,136(sp)
    aa84:	ddc02117 	ldw	r23,132(sp)
    aa88:	00000506 	br	aaa0 <___vfiprintf_internal_r+0xc74>
    aa8c:	21400084 	addi	r5,r4,2
    aa90:	42000204 	addi	r8,r8,8
    aa94:	1809883a 	mov	r4,r3
    aa98:	94bffc04 	addi	r18,r18,-16
    aa9c:	84800f0e 	bge	r16,r18,aadc <___vfiprintf_internal_r+0xcb0>
    aaa0:	014000b4 	movhi	r5,2
    aaa4:	10800404 	addi	r2,r2,16
    aaa8:	20c00044 	addi	r3,r4,1
    aaac:	296b5f04 	addi	r5,r5,-21124
    aab0:	41400015 	stw	r5,0(r8)
    aab4:	44000115 	stw	r16,4(r8)
    aab8:	d8801c15 	stw	r2,112(sp)
    aabc:	d8c01b15 	stw	r3,108(sp)
    aac0:	98fff20e 	bge	r19,r3,aa8c <___vfiprintf_internal_r+0xc60>
    aac4:	1000291e 	bne	r2,zero,ab6c <___vfiprintf_internal_r+0xd40>
    aac8:	94bffc04 	addi	r18,r18,-16
    aacc:	01400044 	movi	r5,1
    aad0:	0009883a 	mov	r4,zero
    aad4:	d811883a 	mov	r8,sp
    aad8:	84bff116 	blt	r16,r18,aaa0 <___vfiprintf_internal_r+0xc74>
    aadc:	d8c02617 	ldw	r3,152(sp)
    aae0:	1485883a 	add	r2,r2,r18
    aae4:	44800115 	stw	r18,4(r8)
    aae8:	40c00015 	stw	r3,0(r8)
    aaec:	d8801c15 	stw	r2,112(sp)
    aaf0:	d9401b15 	stw	r5,108(sp)
    aaf4:	00c001c4 	movi	r3,7
    aaf8:	19400d0e 	bge	r3,r5,ab30 <___vfiprintf_internal_r+0xd04>
    aafc:	1000061e 	bne	r2,zero,ab18 <___vfiprintf_internal_r+0xcec>
    ab00:	d9002417 	ldw	r4,144(sp)
    ab04:	a9011116 	blt	r21,r4,af4c <___vfiprintf_internal_r+0x1120>
    ab08:	d9402517 	ldw	r5,148(sp)
    ab0c:	2d4b883a 	add	r5,r5,r21
    ab10:	d9402515 	stw	r5,148(sp)
    ab14:	00001206 	br	ab60 <___vfiprintf_internal_r+0xd34>
    ab18:	d9002217 	ldw	r4,136(sp)
    ab1c:	d9402117 	ldw	r5,132(sp)
    ab20:	d9801a04 	addi	r6,sp,104
    ab24:	0009d180 	call	9d18 <__sprint_r.part.0>
    ab28:	103fba1e 	bne	r2,zero,aa14 <___vfiprintf_internal_r+0xbe8>
    ab2c:	d8801c17 	ldw	r2,112(sp)
    ab30:	d9002417 	ldw	r4,144(sp)
    ab34:	a900010e 	bge	r21,r4,ab3c <___vfiprintf_internal_r+0xd10>
    ab38:	202b883a 	mov	r21,r4
    ab3c:	d9402517 	ldw	r5,148(sp)
    ab40:	2d4b883a 	add	r5,r5,r21
    ab44:	d9402515 	stw	r5,148(sp)
    ab48:	10000526 	beq	r2,zero,ab60 <___vfiprintf_internal_r+0xd34>
    ab4c:	d9002217 	ldw	r4,136(sp)
    ab50:	d9402117 	ldw	r5,132(sp)
    ab54:	d9801a04 	addi	r6,sp,104
    ab58:	0009d180 	call	9d18 <__sprint_r.part.0>
    ab5c:	103fad1e 	bne	r2,zero,aa14 <___vfiprintf_internal_r+0xbe8>
    ab60:	d8001b15 	stw	zero,108(sp)
    ab64:	d829883a 	mov	r20,sp
    ab68:	003ce406 	br	9efc <___vfiprintf_internal_r+0xd0>
    ab6c:	a009883a 	mov	r4,r20
    ab70:	b80b883a 	mov	r5,r23
    ab74:	d9801a04 	addi	r6,sp,104
    ab78:	0009d180 	call	9d18 <__sprint_r.part.0>
    ab7c:	103fa51e 	bne	r2,zero,aa14 <___vfiprintf_internal_r+0xbe8>
    ab80:	d9001b17 	ldw	r4,108(sp)
    ab84:	d8801c17 	ldw	r2,112(sp)
    ab88:	d811883a 	mov	r8,sp
    ab8c:	21400044 	addi	r5,r4,1
    ab90:	003fc106 	br	aa98 <___vfiprintf_internal_r+0xc6c>
    ab94:	d8c02417 	ldw	r3,144(sp)
    ab98:	1d6fc83a 	sub	r23,r3,r21
    ab9c:	05fdea0e 	bge	zero,r23,a348 <___vfiprintf_internal_r+0x51c>
    aba0:	04c00404 	movi	r19,16
    aba4:	9dc1490e 	bge	r19,r23,b0cc <___vfiprintf_internal_r+0x12a0>
    aba8:	010000b4 	movhi	r4,2
    abac:	212b5b04 	addi	r4,r4,-21140
    abb0:	d9002615 	stw	r4,152(sp)
    abb4:	028001c4 	movi	r10,7
    abb8:	00000506 	br	abd0 <___vfiprintf_internal_r+0xda4>
    abbc:	29800084 	addi	r6,r5,2
    abc0:	a5000204 	addi	r20,r20,8
    abc4:	180b883a 	mov	r5,r3
    abc8:	bdfffc04 	addi	r23,r23,-16
    abcc:	9dc00d0e 	bge	r19,r23,ac04 <___vfiprintf_internal_r+0xdd8>
    abd0:	10800404 	addi	r2,r2,16
    abd4:	28c00044 	addi	r3,r5,1
    abd8:	a4400015 	stw	r17,0(r20)
    abdc:	a4c00115 	stw	r19,4(r20)
    abe0:	d8801c15 	stw	r2,112(sp)
    abe4:	d8c01b15 	stw	r3,108(sp)
    abe8:	50fff40e 	bge	r10,r3,abbc <___vfiprintf_internal_r+0xd90>
    abec:	1000111e 	bne	r2,zero,ac34 <___vfiprintf_internal_r+0xe08>
    abf0:	bdfffc04 	addi	r23,r23,-16
    abf4:	01800044 	movi	r6,1
    abf8:	000b883a 	mov	r5,zero
    abfc:	d829883a 	mov	r20,sp
    ac00:	9dfff316 	blt	r19,r23,abd0 <___vfiprintf_internal_r+0xda4>
    ac04:	d8c02617 	ldw	r3,152(sp)
    ac08:	15c5883a 	add	r2,r2,r23
    ac0c:	a5c00115 	stw	r23,4(r20)
    ac10:	a0c00015 	stw	r3,0(r20)
    ac14:	d8801c15 	stw	r2,112(sp)
    ac18:	d9801b15 	stw	r6,108(sp)
    ac1c:	00c001c4 	movi	r3,7
    ac20:	19806716 	blt	r3,r6,adc0 <___vfiprintf_internal_r+0xf94>
    ac24:	a5000204 	addi	r20,r20,8
    ac28:	31000044 	addi	r4,r6,1
    ac2c:	300b883a 	mov	r5,r6
    ac30:	003dc506 	br	a348 <___vfiprintf_internal_r+0x51c>
    ac34:	d9002217 	ldw	r4,136(sp)
    ac38:	d9402117 	ldw	r5,132(sp)
    ac3c:	d9801a04 	addi	r6,sp,104
    ac40:	da802a15 	stw	r10,168(sp)
    ac44:	0009d180 	call	9d18 <__sprint_r.part.0>
    ac48:	da802a17 	ldw	r10,168(sp)
    ac4c:	103f711e 	bne	r2,zero,aa14 <___vfiprintf_internal_r+0xbe8>
    ac50:	d9401b17 	ldw	r5,108(sp)
    ac54:	d8801c17 	ldw	r2,112(sp)
    ac58:	d829883a 	mov	r20,sp
    ac5c:	29800044 	addi	r6,r5,1
    ac60:	003fd906 	br	abc8 <___vfiprintf_internal_r+0xd9c>
    ac64:	1000401e 	bne	r2,zero,ad68 <___vfiprintf_internal_r+0xf3c>
    ac68:	38003b26 	beq	r7,zero,ad58 <___vfiprintf_internal_r+0xf2c>
    ac6c:	d9001d04 	addi	r4,sp,116
    ac70:	00800084 	movi	r2,2
    ac74:	d9000015 	stw	r4,0(sp)
    ac78:	d8800115 	stw	r2,4(sp)
    ac7c:	1809883a 	mov	r4,r3
    ac80:	d829883a 	mov	r20,sp
    ac84:	003dab06 	br	a334 <___vfiprintf_internal_r+0x508>
    ac88:	1000431e 	bne	r2,zero,ad98 <___vfiprintf_internal_r+0xf6c>
    ac8c:	01000044 	movi	r4,1
    ac90:	000b883a 	mov	r5,zero
    ac94:	d829883a 	mov	r20,sp
    ac98:	003da906 	br	a340 <___vfiprintf_internal_r+0x514>
    ac9c:	10803fcc 	andi	r2,r2,255
    aca0:	1000081e 	bne	r2,zero,acc4 <___vfiprintf_internal_r+0xe98>
    aca4:	9080004c 	andi	r2,r18,1
    aca8:	10000626 	beq	r2,zero,acc4 <___vfiprintf_internal_r+0xe98>
    acac:	d9002817 	ldw	r4,160(sp)
    acb0:	00800c04 	movi	r2,48
    acb4:	d88019c5 	stb	r2,103(sp)
    acb8:	d9002015 	stw	r4,128(sp)
    acbc:	df0019c4 	addi	fp,sp,103
    acc0:	003d5306 	br	a210 <___vfiprintf_internal_r+0x3e4>
    acc4:	df001a04 	addi	fp,sp,104
    acc8:	003d5106 	br	a210 <___vfiprintf_internal_r+0x3e4>
    accc:	1000931e 	bne	r2,zero,af1c <___vfiprintf_internal_r+0x10f0>
    acd0:	d8c01d87 	ldb	r3,118(sp)
    acd4:	18005326 	beq	r3,zero,ae24 <___vfiprintf_internal_r+0xff8>
    acd8:	00800044 	movi	r2,1
    acdc:	d8c01d84 	addi	r3,sp,118
    ace0:	1009883a 	mov	r4,r2
    ace4:	d8c00015 	stw	r3,0(sp)
    ace8:	d8800115 	stw	r2,4(sp)
    acec:	d829883a 	mov	r20,sp
    acf0:	003f0f06 	br	a930 <___vfiprintf_internal_r+0xb04>
    acf4:	d8c02417 	ldw	r3,144(sp)
    acf8:	d811883a 	mov	r8,sp
    acfc:	1d65c83a 	sub	r18,r3,r21
    ad00:	04bf5816 	blt	zero,r18,aa64 <___vfiprintf_internal_r+0xc38>
    ad04:	003f7e06 	br	ab00 <___vfiprintf_internal_r+0xcd4>
    ad08:	b02b883a 	mov	r21,r22
    ad0c:	003c9806 	br	9f70 <___vfiprintf_internal_r+0x144>
    ad10:	d9002217 	ldw	r4,136(sp)
    ad14:	d9402117 	ldw	r5,132(sp)
    ad18:	d9801a04 	addi	r6,sp,104
    ad1c:	0009d180 	call	9d18 <__sprint_r.part.0>
    ad20:	103f3c1e 	bne	r2,zero,aa14 <___vfiprintf_internal_r+0xbe8>
    ad24:	d8801c17 	ldw	r2,112(sp)
    ad28:	d811883a 	mov	r8,sp
    ad2c:	003f4806 	br	aa50 <___vfiprintf_internal_r+0xc24>
    ad30:	00800084 	movi	r2,2
    ad34:	9dc6b03a 	or	r3,r19,r23
    ad38:	003d1806 	br	a19c <___vfiprintf_internal_r+0x370>
    ad3c:	d9002217 	ldw	r4,136(sp)
    ad40:	d9402117 	ldw	r5,132(sp)
    ad44:	d9801a04 	addi	r6,sp,104
    ad48:	0009d180 	call	9d18 <__sprint_r.part.0>
    ad4c:	103f311e 	bne	r2,zero,aa14 <___vfiprintf_internal_r+0xbe8>
    ad50:	d829883a 	mov	r20,sp
    ad54:	003cf406 	br	a128 <___vfiprintf_internal_r+0x2fc>
    ad58:	000b883a 	mov	r5,zero
    ad5c:	1809883a 	mov	r4,r3
    ad60:	d829883a 	mov	r20,sp
    ad64:	003d7606 	br	a340 <___vfiprintf_internal_r+0x514>
    ad68:	d9002217 	ldw	r4,136(sp)
    ad6c:	d9402117 	ldw	r5,132(sp)
    ad70:	d9801a04 	addi	r6,sp,104
    ad74:	d9c02a15 	stw	r7,168(sp)
    ad78:	0009d180 	call	9d18 <__sprint_r.part.0>
    ad7c:	d9c02a17 	ldw	r7,168(sp)
    ad80:	103f241e 	bne	r2,zero,aa14 <___vfiprintf_internal_r+0xbe8>
    ad84:	d9401b17 	ldw	r5,108(sp)
    ad88:	d8801c17 	ldw	r2,112(sp)
    ad8c:	d829883a 	mov	r20,sp
    ad90:	29000044 	addi	r4,r5,1
    ad94:	003d5d06 	br	a30c <___vfiprintf_internal_r+0x4e0>
    ad98:	d9002217 	ldw	r4,136(sp)
    ad9c:	d9402117 	ldw	r5,132(sp)
    ada0:	d9801a04 	addi	r6,sp,104
    ada4:	0009d180 	call	9d18 <__sprint_r.part.0>
    ada8:	103f1a1e 	bne	r2,zero,aa14 <___vfiprintf_internal_r+0xbe8>
    adac:	d9401b17 	ldw	r5,108(sp)
    adb0:	d8801c17 	ldw	r2,112(sp)
    adb4:	d829883a 	mov	r20,sp
    adb8:	29000044 	addi	r4,r5,1
    adbc:	003d6006 	br	a340 <___vfiprintf_internal_r+0x514>
    adc0:	10009b1e 	bne	r2,zero,b030 <___vfiprintf_internal_r+0x1204>
    adc4:	01000044 	movi	r4,1
    adc8:	000b883a 	mov	r5,zero
    adcc:	d829883a 	mov	r20,sp
    add0:	003d5d06 	br	a348 <___vfiprintf_internal_r+0x51c>
    add4:	d9002217 	ldw	r4,136(sp)
    add8:	d9402117 	ldw	r5,132(sp)
    addc:	d9801a04 	addi	r6,sp,104
    ade0:	0009d180 	call	9d18 <__sprint_r.part.0>
    ade4:	103f0b1e 	bne	r2,zero,aa14 <___vfiprintf_internal_r+0xbe8>
    ade8:	d9001b17 	ldw	r4,108(sp)
    adec:	d8801c17 	ldw	r2,112(sp)
    adf0:	d829883a 	mov	r20,sp
    adf4:	21000044 	addi	r4,r4,1
    adf8:	003d7906 	br	a3e0 <___vfiprintf_internal_r+0x5b4>
    adfc:	04e7c83a 	sub	r19,zero,r19
    ae00:	9804c03a 	cmpne	r2,r19,zero
    ae04:	05efc83a 	sub	r23,zero,r23
    ae08:	b8afc83a 	sub	r23,r23,r2
    ae0c:	02800b44 	movi	r10,45
    ae10:	da801d85 	stb	r10,118(sp)
    ae14:	dc002015 	stw	r16,128(sp)
    ae18:	00800044 	movi	r2,1
    ae1c:	9dc6b03a 	or	r3,r19,r23
    ae20:	003ce106 	br	a1a8 <___vfiprintf_internal_r+0x37c>
    ae24:	000b883a 	mov	r5,zero
    ae28:	01000044 	movi	r4,1
    ae2c:	d829883a 	mov	r20,sp
    ae30:	383d4326 	beq	r7,zero,a340 <___vfiprintf_internal_r+0x514>
    ae34:	00800084 	movi	r2,2
    ae38:	d8c01d04 	addi	r3,sp,116
    ae3c:	d8c00015 	stw	r3,0(sp)
    ae40:	d8800115 	stw	r2,4(sp)
    ae44:	003d3b06 	br	a334 <___vfiprintf_internal_r+0x508>
    ae48:	b1800007 	ldb	r6,0(r22)
    ae4c:	b005883a 	mov	r2,r22
    ae50:	003c5206 	br	9f9c <___vfiprintf_internal_r+0x170>
    ae54:	00800084 	movi	r2,2
    ae58:	003cd006 	br	a19c <___vfiprintf_internal_r+0x370>
    ae5c:	9080100c 	andi	r2,r18,64
    ae60:	10003e26 	beq	r2,zero,af5c <___vfiprintf_internal_r+0x1130>
    ae64:	d9402317 	ldw	r5,140(sp)
    ae68:	002f883a 	mov	r23,zero
    ae6c:	0005883a 	mov	r2,zero
    ae70:	2cc0000b 	ldhu	r19,0(r5)
    ae74:	29400104 	addi	r5,r5,4
    ae78:	d9402315 	stw	r5,140(sp)
    ae7c:	9807883a 	mov	r3,r19
    ae80:	003cc606 	br	a19c <___vfiprintf_internal_r+0x370>
    ae84:	9080100c 	andi	r2,r18,64
    ae88:	10004226 	beq	r2,zero,af94 <___vfiprintf_internal_r+0x1168>
    ae8c:	d9402317 	ldw	r5,140(sp)
    ae90:	002f883a 	mov	r23,zero
    ae94:	00800044 	movi	r2,1
    ae98:	2cc0000b 	ldhu	r19,0(r5)
    ae9c:	29400104 	addi	r5,r5,4
    aea0:	d9402315 	stw	r5,140(sp)
    aea4:	9807883a 	mov	r3,r19
    aea8:	003cbc06 	br	a19c <___vfiprintf_internal_r+0x370>
    aeac:	9080100c 	andi	r2,r18,64
    aeb0:	10003226 	beq	r2,zero,af7c <___vfiprintf_internal_r+0x1150>
    aeb4:	d8802317 	ldw	r2,140(sp)
    aeb8:	002f883a 	mov	r23,zero
    aebc:	14c0000b 	ldhu	r19,0(r2)
    aec0:	10800104 	addi	r2,r2,4
    aec4:	d8802315 	stw	r2,140(sp)
    aec8:	003da106 	br	a550 <___vfiprintf_internal_r+0x724>
    aecc:	9080040c 	andi	r2,r18,16
    aed0:	10003f1e 	bne	r2,zero,afd0 <___vfiprintf_internal_r+0x11a4>
    aed4:	9480100c 	andi	r18,r18,64
    aed8:	90007526 	beq	r18,zero,b0b0 <___vfiprintf_internal_r+0x1284>
    aedc:	d9402317 	ldw	r5,140(sp)
    aee0:	d8c02517 	ldw	r3,148(sp)
    aee4:	28800017 	ldw	r2,0(r5)
    aee8:	29400104 	addi	r5,r5,4
    aeec:	d9402315 	stw	r5,140(sp)
    aef0:	10c0000d 	sth	r3,0(r2)
    aef4:	003c0106 	br	9efc <___vfiprintf_internal_r+0xd0>
    aef8:	9080100c 	andi	r2,r18,64
    aefc:	10002d26 	beq	r2,zero,afb4 <___vfiprintf_internal_r+0x1188>
    af00:	1cc0000f 	ldh	r19,0(r3)
    af04:	d8802317 	ldw	r2,140(sp)
    af08:	982fd7fa 	srai	r23,r19,31
    af0c:	10800104 	addi	r2,r2,4
    af10:	d8802315 	stw	r2,140(sp)
    af14:	b805883a 	mov	r2,r23
    af18:	003dc006 	br	a61c <___vfiprintf_internal_r+0x7f0>
    af1c:	d9002217 	ldw	r4,136(sp)
    af20:	d9402117 	ldw	r5,132(sp)
    af24:	d9801a04 	addi	r6,sp,104
    af28:	d9c02a15 	stw	r7,168(sp)
    af2c:	0009d180 	call	9d18 <__sprint_r.part.0>
    af30:	d9c02a17 	ldw	r7,168(sp)
    af34:	103eb71e 	bne	r2,zero,aa14 <___vfiprintf_internal_r+0xbe8>
    af38:	d9401b17 	ldw	r5,108(sp)
    af3c:	d8801c17 	ldw	r2,112(sp)
    af40:	d829883a 	mov	r20,sp
    af44:	29000044 	addi	r4,r5,1
    af48:	003e6e06 	br	a904 <___vfiprintf_internal_r+0xad8>
    af4c:	202b883a 	mov	r21,r4
    af50:	003eed06 	br	ab08 <___vfiprintf_internal_r+0xcdc>
    af54:	dc002015 	stw	r16,128(sp)
    af58:	003e1606 	br	a7b4 <___vfiprintf_internal_r+0x988>
    af5c:	d8802317 	ldw	r2,140(sp)
    af60:	002f883a 	mov	r23,zero
    af64:	14c00017 	ldw	r19,0(r2)
    af68:	10800104 	addi	r2,r2,4
    af6c:	d8802315 	stw	r2,140(sp)
    af70:	9807883a 	mov	r3,r19
    af74:	0005883a 	mov	r2,zero
    af78:	003c8806 	br	a19c <___vfiprintf_internal_r+0x370>
    af7c:	d8c02317 	ldw	r3,140(sp)
    af80:	002f883a 	mov	r23,zero
    af84:	1cc00017 	ldw	r19,0(r3)
    af88:	18c00104 	addi	r3,r3,4
    af8c:	d8c02315 	stw	r3,140(sp)
    af90:	003d6f06 	br	a550 <___vfiprintf_internal_r+0x724>
    af94:	d8802317 	ldw	r2,140(sp)
    af98:	002f883a 	mov	r23,zero
    af9c:	14c00017 	ldw	r19,0(r2)
    afa0:	10800104 	addi	r2,r2,4
    afa4:	d8802315 	stw	r2,140(sp)
    afa8:	9807883a 	mov	r3,r19
    afac:	00800044 	movi	r2,1
    afb0:	003c7a06 	br	a19c <___vfiprintf_internal_r+0x370>
    afb4:	1cc00017 	ldw	r19,0(r3)
    afb8:	d8c02317 	ldw	r3,140(sp)
    afbc:	982fd7fa 	srai	r23,r19,31
    afc0:	18c00104 	addi	r3,r3,4
    afc4:	d8c02315 	stw	r3,140(sp)
    afc8:	b805883a 	mov	r2,r23
    afcc:	003d9306 	br	a61c <___vfiprintf_internal_r+0x7f0>
    afd0:	d8c02317 	ldw	r3,140(sp)
    afd4:	d9002517 	ldw	r4,148(sp)
    afd8:	18800017 	ldw	r2,0(r3)
    afdc:	18c00104 	addi	r3,r3,4
    afe0:	d8c02315 	stw	r3,140(sp)
    afe4:	11000015 	stw	r4,0(r2)
    afe8:	003bc406 	br	9efc <___vfiprintf_internal_r+0xd0>
    afec:	014000b4 	movhi	r5,2
    aff0:	296b5b04 	addi	r5,r5,-21140
    aff4:	d9402615 	stw	r5,152(sp)
    aff8:	003cef06 	br	a3b8 <___vfiprintf_internal_r+0x58c>
    affc:	b0800044 	addi	r2,r22,1
    b000:	94800814 	ori	r18,r18,32
    b004:	b1800047 	ldb	r6,1(r22)
    b008:	003be406 	br	9f9c <___vfiprintf_internal_r+0x170>
    b00c:	d8802417 	ldw	r2,144(sp)
    b010:	d8c02315 	stw	r3,140(sp)
    b014:	0085c83a 	sub	r2,zero,r2
    b018:	d8802415 	stw	r2,144(sp)
    b01c:	b005883a 	mov	r2,r22
    b020:	003d2406 	br	a4b4 <___vfiprintf_internal_r+0x688>
    b024:	0009c800 	call	9c80 <strlen>
    b028:	d8802015 	stw	r2,128(sp)
    b02c:	003de106 	br	a7b4 <___vfiprintf_internal_r+0x988>
    b030:	d9002217 	ldw	r4,136(sp)
    b034:	d9402117 	ldw	r5,132(sp)
    b038:	d9801a04 	addi	r6,sp,104
    b03c:	0009d180 	call	9d18 <__sprint_r.part.0>
    b040:	103e741e 	bne	r2,zero,aa14 <___vfiprintf_internal_r+0xbe8>
    b044:	d9401b17 	ldw	r5,108(sp)
    b048:	d8801c17 	ldw	r2,112(sp)
    b04c:	d829883a 	mov	r20,sp
    b050:	29000044 	addi	r4,r5,1
    b054:	003cbc06 	br	a348 <___vfiprintf_internal_r+0x51c>
    b058:	014000b4 	movhi	r5,2
    b05c:	296b5f04 	addi	r5,r5,-21124
    b060:	d9402615 	stw	r5,152(sp)
    b064:	d9401b17 	ldw	r5,108(sp)
    b068:	29400044 	addi	r5,r5,1
    b06c:	003c9b06 	br	a2dc <___vfiprintf_internal_r+0x4b0>
    b070:	00800184 	movi	r2,6
    b074:	1400012e 	bgeu	r2,r16,b07c <___vfiprintf_internal_r+0x1250>
    b078:	1021883a 	mov	r16,r2
    b07c:	dc002015 	stw	r16,128(sp)
    b080:	802b883a 	mov	r21,r16
    b084:	80001b16 	blt	r16,zero,b0f4 <___vfiprintf_internal_r+0x12c8>
    b088:	070000b4 	movhi	fp,2
    b08c:	dcc02315 	stw	r19,140(sp)
    b090:	e72aff04 	addi	fp,fp,-21508
    b094:	003d4106 	br	a59c <___vfiprintf_internal_r+0x770>
    b098:	014000b4 	movhi	r5,2
    b09c:	296b5f04 	addi	r5,r5,-21124
    b0a0:	d9402615 	stw	r5,152(sp)
    b0a4:	d9401b17 	ldw	r5,108(sp)
    b0a8:	29400044 	addi	r5,r5,1
    b0ac:	003e8b06 	br	aadc <___vfiprintf_internal_r+0xcb0>
    b0b0:	d9002317 	ldw	r4,140(sp)
    b0b4:	d9402517 	ldw	r5,148(sp)
    b0b8:	20800017 	ldw	r2,0(r4)
    b0bc:	21000104 	addi	r4,r4,4
    b0c0:	d9002315 	stw	r4,140(sp)
    b0c4:	11400015 	stw	r5,0(r2)
    b0c8:	003b8c06 	br	9efc <___vfiprintf_internal_r+0xd0>
    b0cc:	014000b4 	movhi	r5,2
    b0d0:	296b5b04 	addi	r5,r5,-21140
    b0d4:	d9402615 	stw	r5,152(sp)
    b0d8:	200d883a 	mov	r6,r4
    b0dc:	003ec906 	br	ac04 <___vfiprintf_internal_r+0xdd8>
    b0e0:	dc002015 	stw	r16,128(sp)
    b0e4:	da801d83 	ldbu	r10,118(sp)
    b0e8:	dcc02315 	stw	r19,140(sp)
    b0ec:	0021883a 	mov	r16,zero
    b0f0:	003c4706 	br	a210 <___vfiprintf_internal_r+0x3e4>
    b0f4:	002b883a 	mov	r21,zero
    b0f8:	003fe306 	br	b088 <___vfiprintf_internal_r+0x125c>
    b0fc:	d9402317 	ldw	r5,140(sp)
    b100:	2c000017 	ldw	r16,0(r5)
    b104:	28c00104 	addi	r3,r5,4
    b108:	d8c02315 	stw	r3,140(sp)
    b10c:	803fbd0e 	bge	r16,zero,b004 <___vfiprintf_internal_r+0x11d8>
    b110:	043fffc4 	movi	r16,-1
    b114:	b1800047 	ldb	r6,1(r22)
    b118:	003ba006 	br	9f9c <___vfiprintf_internal_r+0x170>

0000b11c <__vfiprintf_internal>:
    b11c:	2007883a 	mov	r3,r4
    b120:	010000b4 	movhi	r4,2
    b124:	2133c204 	addi	r4,r4,-12536
    b128:	21000017 	ldw	r4,0(r4)
    b12c:	2805883a 	mov	r2,r5
    b130:	300f883a 	mov	r7,r6
    b134:	180b883a 	mov	r5,r3
    b138:	100d883a 	mov	r6,r2
    b13c:	0009e2c1 	jmpi	9e2c <___vfiprintf_internal_r>

0000b140 <__sbprintf>:
    b140:	2880030b 	ldhu	r2,12(r5)
    b144:	2ac01917 	ldw	r11,100(r5)
    b148:	2a80038b 	ldhu	r10,14(r5)
    b14c:	2a400717 	ldw	r9,28(r5)
    b150:	2a000917 	ldw	r8,36(r5)
    b154:	defee204 	addi	sp,sp,-1144
    b158:	00c10004 	movi	r3,1024
    b15c:	dc011a15 	stw	r16,1128(sp)
    b160:	10bfff4c 	andi	r2,r2,65533
    b164:	2821883a 	mov	r16,r5
    b168:	d8cb883a 	add	r5,sp,r3
    b16c:	dc811c15 	stw	r18,1136(sp)
    b170:	dc411b15 	stw	r17,1132(sp)
    b174:	dfc11d15 	stw	ra,1140(sp)
    b178:	2025883a 	mov	r18,r4
    b17c:	d881030d 	sth	r2,1036(sp)
    b180:	dac11915 	stw	r11,1124(sp)
    b184:	da81038d 	sth	r10,1038(sp)
    b188:	da410715 	stw	r9,1052(sp)
    b18c:	da010915 	stw	r8,1060(sp)
    b190:	dec10015 	stw	sp,1024(sp)
    b194:	dec10415 	stw	sp,1040(sp)
    b198:	d8c10215 	stw	r3,1032(sp)
    b19c:	d8c10515 	stw	r3,1044(sp)
    b1a0:	d8010615 	stw	zero,1048(sp)
    b1a4:	0009e2c0 	call	9e2c <___vfiprintf_internal_r>
    b1a8:	1023883a 	mov	r17,r2
    b1ac:	10000416 	blt	r2,zero,b1c0 <__sbprintf+0x80>
    b1b0:	9009883a 	mov	r4,r18
    b1b4:	d9410004 	addi	r5,sp,1024
    b1b8:	00072200 	call	7220 <_fflush_r>
    b1bc:	10000d1e 	bne	r2,zero,b1f4 <__sbprintf+0xb4>
    b1c0:	d8c1030b 	ldhu	r3,1036(sp)
    b1c4:	18c0100c 	andi	r3,r3,64
    b1c8:	18000326 	beq	r3,zero,b1d8 <__sbprintf+0x98>
    b1cc:	8080030b 	ldhu	r2,12(r16)
    b1d0:	10801014 	ori	r2,r2,64
    b1d4:	8080030d 	sth	r2,12(r16)
    b1d8:	8805883a 	mov	r2,r17
    b1dc:	dfc11d17 	ldw	ra,1140(sp)
    b1e0:	dc811c17 	ldw	r18,1136(sp)
    b1e4:	dc411b17 	ldw	r17,1132(sp)
    b1e8:	dc011a17 	ldw	r16,1128(sp)
    b1ec:	dec11e04 	addi	sp,sp,1144
    b1f0:	f800283a 	ret
    b1f4:	047fffc4 	movi	r17,-1
    b1f8:	003ff106 	br	b1c0 <__sbprintf+0x80>

0000b1fc <_write_r>:
    b1fc:	defffd04 	addi	sp,sp,-12
    b200:	dc000015 	stw	r16,0(sp)
    b204:	040000b4 	movhi	r16,2
    b208:	dc400115 	stw	r17,4(sp)
    b20c:	8433fa04 	addi	r16,r16,-12312
    b210:	2023883a 	mov	r17,r4
    b214:	2809883a 	mov	r4,r5
    b218:	300b883a 	mov	r5,r6
    b21c:	380d883a 	mov	r6,r7
    b220:	dfc00215 	stw	ra,8(sp)
    b224:	80000015 	stw	zero,0(r16)
    b228:	000e7b40 	call	e7b4 <write>
    b22c:	00ffffc4 	movi	r3,-1
    b230:	10c00526 	beq	r2,r3,b248 <_write_r+0x4c>
    b234:	dfc00217 	ldw	ra,8(sp)
    b238:	dc400117 	ldw	r17,4(sp)
    b23c:	dc000017 	ldw	r16,0(sp)
    b240:	dec00304 	addi	sp,sp,12
    b244:	f800283a 	ret
    b248:	80c00017 	ldw	r3,0(r16)
    b24c:	183ff926 	beq	r3,zero,b234 <_write_r+0x38>
    b250:	88c00015 	stw	r3,0(r17)
    b254:	003ff706 	br	b234 <_write_r+0x38>

0000b258 <_close_r>:
    b258:	defffd04 	addi	sp,sp,-12
    b25c:	dc000015 	stw	r16,0(sp)
    b260:	040000b4 	movhi	r16,2
    b264:	dc400115 	stw	r17,4(sp)
    b268:	8433fa04 	addi	r16,r16,-12312
    b26c:	2023883a 	mov	r17,r4
    b270:	2809883a 	mov	r4,r5
    b274:	dfc00215 	stw	ra,8(sp)
    b278:	80000015 	stw	zero,0(r16)
    b27c:	000dd080 	call	dd08 <close>
    b280:	00ffffc4 	movi	r3,-1
    b284:	10c00526 	beq	r2,r3,b29c <_close_r+0x44>
    b288:	dfc00217 	ldw	ra,8(sp)
    b28c:	dc400117 	ldw	r17,4(sp)
    b290:	dc000017 	ldw	r16,0(sp)
    b294:	dec00304 	addi	sp,sp,12
    b298:	f800283a 	ret
    b29c:	80c00017 	ldw	r3,0(r16)
    b2a0:	183ff926 	beq	r3,zero,b288 <_close_r+0x30>
    b2a4:	88c00015 	stw	r3,0(r17)
    b2a8:	003ff706 	br	b288 <_close_r+0x30>

0000b2ac <_calloc_r>:
    b2ac:	defffe04 	addi	sp,sp,-8
    b2b0:	dc000015 	stw	r16,0(sp)
    b2b4:	2021883a 	mov	r16,r4
    b2b8:	2809883a 	mov	r4,r5
    b2bc:	300b883a 	mov	r5,r6
    b2c0:	dfc00115 	stw	ra,4(sp)
    b2c4:	000129c0 	call	129c <__mulsi3>
    b2c8:	8009883a 	mov	r4,r16
    b2cc:	100b883a 	mov	r5,r2
    b2d0:	0007e900 	call	7e90 <_malloc_r>
    b2d4:	1021883a 	mov	r16,r2
    b2d8:	10002826 	beq	r2,zero,b37c <_calloc_r+0xd0>
    b2dc:	11bfff17 	ldw	r6,-4(r2)
    b2e0:	00bfff04 	movi	r2,-4
    b2e4:	00c00904 	movi	r3,36
    b2e8:	308c703a 	and	r6,r6,r2
    b2ec:	308d883a 	add	r6,r6,r2
    b2f0:	19801436 	bltu	r3,r6,b344 <_calloc_r+0x98>
    b2f4:	008004c4 	movi	r2,19
    b2f8:	11800936 	bltu	r2,r6,b320 <_calloc_r+0x74>
    b2fc:	8005883a 	mov	r2,r16
    b300:	10000015 	stw	zero,0(r2)
    b304:	10000115 	stw	zero,4(r2)
    b308:	10000215 	stw	zero,8(r2)
    b30c:	8005883a 	mov	r2,r16
    b310:	dfc00117 	ldw	ra,4(sp)
    b314:	dc000017 	ldw	r16,0(sp)
    b318:	dec00204 	addi	sp,sp,8
    b31c:	f800283a 	ret
    b320:	80000015 	stw	zero,0(r16)
    b324:	80000115 	stw	zero,4(r16)
    b328:	008006c4 	movi	r2,27
    b32c:	11800d2e 	bgeu	r2,r6,b364 <_calloc_r+0xb8>
    b330:	80000215 	stw	zero,8(r16)
    b334:	80000315 	stw	zero,12(r16)
    b338:	30c00c26 	beq	r6,r3,b36c <_calloc_r+0xc0>
    b33c:	80800404 	addi	r2,r16,16
    b340:	003fef06 	br	b300 <_calloc_r+0x54>
    b344:	8009883a 	mov	r4,r16
    b348:	000b883a 	mov	r5,zero
    b34c:	00088580 	call	8858 <memset>
    b350:	8005883a 	mov	r2,r16
    b354:	dfc00117 	ldw	ra,4(sp)
    b358:	dc000017 	ldw	r16,0(sp)
    b35c:	dec00204 	addi	sp,sp,8
    b360:	f800283a 	ret
    b364:	80800204 	addi	r2,r16,8
    b368:	003fe506 	br	b300 <_calloc_r+0x54>
    b36c:	80000415 	stw	zero,16(r16)
    b370:	80800604 	addi	r2,r16,24
    b374:	80000515 	stw	zero,20(r16)
    b378:	003fe106 	br	b300 <_calloc_r+0x54>
    b37c:	0005883a 	mov	r2,zero
    b380:	003fe306 	br	b310 <_calloc_r+0x64>

0000b384 <_fclose_r>:
    b384:	28003926 	beq	r5,zero,b46c <_fclose_r+0xe8>
    b388:	defffc04 	addi	sp,sp,-16
    b38c:	dc400115 	stw	r17,4(sp)
    b390:	dc000015 	stw	r16,0(sp)
    b394:	dfc00315 	stw	ra,12(sp)
    b398:	dc800215 	stw	r18,8(sp)
    b39c:	2023883a 	mov	r17,r4
    b3a0:	2821883a 	mov	r16,r5
    b3a4:	20000226 	beq	r4,zero,b3b0 <_fclose_r+0x2c>
    b3a8:	20800e17 	ldw	r2,56(r4)
    b3ac:	10002726 	beq	r2,zero,b44c <_fclose_r+0xc8>
    b3b0:	8080030f 	ldh	r2,12(r16)
    b3b4:	1000071e 	bne	r2,zero,b3d4 <_fclose_r+0x50>
    b3b8:	0005883a 	mov	r2,zero
    b3bc:	dfc00317 	ldw	ra,12(sp)
    b3c0:	dc800217 	ldw	r18,8(sp)
    b3c4:	dc400117 	ldw	r17,4(sp)
    b3c8:	dc000017 	ldw	r16,0(sp)
    b3cc:	dec00404 	addi	sp,sp,16
    b3d0:	f800283a 	ret
    b3d4:	8809883a 	mov	r4,r17
    b3d8:	800b883a 	mov	r5,r16
    b3dc:	00070180 	call	7018 <__sflush_r>
    b3e0:	1025883a 	mov	r18,r2
    b3e4:	80800b17 	ldw	r2,44(r16)
    b3e8:	10000426 	beq	r2,zero,b3fc <_fclose_r+0x78>
    b3ec:	81400717 	ldw	r5,28(r16)
    b3f0:	8809883a 	mov	r4,r17
    b3f4:	103ee83a 	callr	r2
    b3f8:	10001616 	blt	r2,zero,b454 <_fclose_r+0xd0>
    b3fc:	8080030b 	ldhu	r2,12(r16)
    b400:	1080200c 	andi	r2,r2,128
    b404:	1000151e 	bne	r2,zero,b45c <_fclose_r+0xd8>
    b408:	81400c17 	ldw	r5,48(r16)
    b40c:	28000526 	beq	r5,zero,b424 <_fclose_r+0xa0>
    b410:	80801004 	addi	r2,r16,64
    b414:	28800226 	beq	r5,r2,b420 <_fclose_r+0x9c>
    b418:	8809883a 	mov	r4,r17
    b41c:	00077800 	call	7780 <_free_r>
    b420:	80000c15 	stw	zero,48(r16)
    b424:	81401117 	ldw	r5,68(r16)
    b428:	28000326 	beq	r5,zero,b438 <_fclose_r+0xb4>
    b42c:	8809883a 	mov	r4,r17
    b430:	00077800 	call	7780 <_free_r>
    b434:	80001115 	stw	zero,68(r16)
    b438:	000761c0 	call	761c <__sfp_lock_acquire>
    b43c:	8000030d 	sth	zero,12(r16)
    b440:	00076200 	call	7620 <__sfp_lock_release>
    b444:	9005883a 	mov	r2,r18
    b448:	003fdc06 	br	b3bc <_fclose_r+0x38>
    b44c:	000760c0 	call	760c <__sinit>
    b450:	003fd706 	br	b3b0 <_fclose_r+0x2c>
    b454:	04bfffc4 	movi	r18,-1
    b458:	003fe806 	br	b3fc <_fclose_r+0x78>
    b45c:	81400417 	ldw	r5,16(r16)
    b460:	8809883a 	mov	r4,r17
    b464:	00077800 	call	7780 <_free_r>
    b468:	003fe706 	br	b408 <_fclose_r+0x84>
    b46c:	0005883a 	mov	r2,zero
    b470:	f800283a 	ret

0000b474 <fclose>:
    b474:	008000b4 	movhi	r2,2
    b478:	10b3c204 	addi	r2,r2,-12536
    b47c:	200b883a 	mov	r5,r4
    b480:	11000017 	ldw	r4,0(r2)
    b484:	000b3841 	jmpi	b384 <_fclose_r>

0000b488 <_fputwc_r>:
    b488:	3080030b 	ldhu	r2,12(r6)
    b48c:	defff804 	addi	sp,sp,-32
    b490:	dcc00415 	stw	r19,16(sp)
    b494:	dc800315 	stw	r18,12(sp)
    b498:	dc000115 	stw	r16,4(sp)
    b49c:	dfc00715 	stw	ra,28(sp)
    b4a0:	dd400615 	stw	r21,24(sp)
    b4a4:	dd000515 	stw	r20,20(sp)
    b4a8:	dc400215 	stw	r17,8(sp)
    b4ac:	10c8000c 	andi	r3,r2,8192
    b4b0:	3021883a 	mov	r16,r6
    b4b4:	2027883a 	mov	r19,r4
    b4b8:	2825883a 	mov	r18,r5
    b4bc:	1800051e 	bne	r3,zero,b4d4 <_fputwc_r+0x4c>
    b4c0:	30c01917 	ldw	r3,100(r6)
    b4c4:	10880014 	ori	r2,r2,8192
    b4c8:	3080030d 	sth	r2,12(r6)
    b4cc:	18880014 	ori	r2,r3,8192
    b4d0:	30801915 	stw	r2,100(r6)
    b4d4:	0007c800 	call	7c80 <__locale_mb_cur_max>
    b4d8:	00c00044 	movi	r3,1
    b4dc:	10c03e26 	beq	r2,r3,b5d8 <_fputwc_r+0x150>
    b4e0:	9809883a 	mov	r4,r19
    b4e4:	d80b883a 	mov	r5,sp
    b4e8:	900d883a 	mov	r6,r18
    b4ec:	81c01704 	addi	r7,r16,92
    b4f0:	000c4b00 	call	c4b0 <_wcrtomb_r>
    b4f4:	1029883a 	mov	r20,r2
    b4f8:	00bfffc4 	movi	r2,-1
    b4fc:	a0802026 	beq	r20,r2,b580 <_fputwc_r+0xf8>
    b500:	d9400003 	ldbu	r5,0(sp)
    b504:	a0001c26 	beq	r20,zero,b578 <_fputwc_r+0xf0>
    b508:	0023883a 	mov	r17,zero
    b50c:	05400284 	movi	r21,10
    b510:	00000906 	br	b538 <_fputwc_r+0xb0>
    b514:	80800017 	ldw	r2,0(r16)
    b518:	11400005 	stb	r5,0(r2)
    b51c:	80c00017 	ldw	r3,0(r16)
    b520:	18c00044 	addi	r3,r3,1
    b524:	80c00015 	stw	r3,0(r16)
    b528:	8c400044 	addi	r17,r17,1
    b52c:	dc45883a 	add	r2,sp,r17
    b530:	8d00112e 	bgeu	r17,r20,b578 <_fputwc_r+0xf0>
    b534:	11400003 	ldbu	r5,0(r2)
    b538:	80c00217 	ldw	r3,8(r16)
    b53c:	18ffffc4 	addi	r3,r3,-1
    b540:	80c00215 	stw	r3,8(r16)
    b544:	183ff30e 	bge	r3,zero,b514 <_fputwc_r+0x8c>
    b548:	80800617 	ldw	r2,24(r16)
    b54c:	18801916 	blt	r3,r2,b5b4 <_fputwc_r+0x12c>
    b550:	80800017 	ldw	r2,0(r16)
    b554:	11400005 	stb	r5,0(r2)
    b558:	80800017 	ldw	r2,0(r16)
    b55c:	10c00003 	ldbu	r3,0(r2)
    b560:	10800044 	addi	r2,r2,1
    b564:	1d402326 	beq	r3,r21,b5f4 <_fputwc_r+0x16c>
    b568:	80800015 	stw	r2,0(r16)
    b56c:	8c400044 	addi	r17,r17,1
    b570:	dc45883a 	add	r2,sp,r17
    b574:	8d3fef36 	bltu	r17,r20,b534 <_fputwc_r+0xac>
    b578:	9005883a 	mov	r2,r18
    b57c:	00000406 	br	b590 <_fputwc_r+0x108>
    b580:	80c0030b 	ldhu	r3,12(r16)
    b584:	a005883a 	mov	r2,r20
    b588:	18c01014 	ori	r3,r3,64
    b58c:	80c0030d 	sth	r3,12(r16)
    b590:	dfc00717 	ldw	ra,28(sp)
    b594:	dd400617 	ldw	r21,24(sp)
    b598:	dd000517 	ldw	r20,20(sp)
    b59c:	dcc00417 	ldw	r19,16(sp)
    b5a0:	dc800317 	ldw	r18,12(sp)
    b5a4:	dc400217 	ldw	r17,8(sp)
    b5a8:	dc000117 	ldw	r16,4(sp)
    b5ac:	dec00804 	addi	sp,sp,32
    b5b0:	f800283a 	ret
    b5b4:	9809883a 	mov	r4,r19
    b5b8:	29403fcc 	andi	r5,r5,255
    b5bc:	800d883a 	mov	r6,r16
    b5c0:	000c35c0 	call	c35c <__swbuf_r>
    b5c4:	10bfffe0 	cmpeqi	r2,r2,-1
    b5c8:	10803fcc 	andi	r2,r2,255
    b5cc:	103fd626 	beq	r2,zero,b528 <_fputwc_r+0xa0>
    b5d0:	00bfffc4 	movi	r2,-1
    b5d4:	003fee06 	br	b590 <_fputwc_r+0x108>
    b5d8:	90ffffc4 	addi	r3,r18,-1
    b5dc:	01003f84 	movi	r4,254
    b5e0:	20ffbf36 	bltu	r4,r3,b4e0 <_fputwc_r+0x58>
    b5e4:	900b883a 	mov	r5,r18
    b5e8:	dc800005 	stb	r18,0(sp)
    b5ec:	1029883a 	mov	r20,r2
    b5f0:	003fc506 	br	b508 <_fputwc_r+0x80>
    b5f4:	9809883a 	mov	r4,r19
    b5f8:	a80b883a 	mov	r5,r21
    b5fc:	800d883a 	mov	r6,r16
    b600:	000c35c0 	call	c35c <__swbuf_r>
    b604:	10bfffe0 	cmpeqi	r2,r2,-1
    b608:	003fef06 	br	b5c8 <_fputwc_r+0x140>

0000b60c <fputwc>:
    b60c:	008000b4 	movhi	r2,2
    b610:	defffc04 	addi	sp,sp,-16
    b614:	10b3c204 	addi	r2,r2,-12536
    b618:	dc000115 	stw	r16,4(sp)
    b61c:	14000017 	ldw	r16,0(r2)
    b620:	dc400215 	stw	r17,8(sp)
    b624:	dfc00315 	stw	ra,12(sp)
    b628:	2023883a 	mov	r17,r4
    b62c:	280d883a 	mov	r6,r5
    b630:	80000626 	beq	r16,zero,b64c <fputwc+0x40>
    b634:	80800e17 	ldw	r2,56(r16)
    b638:	1000041e 	bne	r2,zero,b64c <fputwc+0x40>
    b63c:	8009883a 	mov	r4,r16
    b640:	d9400015 	stw	r5,0(sp)
    b644:	000760c0 	call	760c <__sinit>
    b648:	d9800017 	ldw	r6,0(sp)
    b64c:	8009883a 	mov	r4,r16
    b650:	880b883a 	mov	r5,r17
    b654:	dfc00317 	ldw	ra,12(sp)
    b658:	dc400217 	ldw	r17,8(sp)
    b65c:	dc000117 	ldw	r16,4(sp)
    b660:	dec00404 	addi	sp,sp,16
    b664:	000b4881 	jmpi	b488 <_fputwc_r>

0000b668 <_fstat_r>:
    b668:	defffd04 	addi	sp,sp,-12
    b66c:	dc000015 	stw	r16,0(sp)
    b670:	040000b4 	movhi	r16,2
    b674:	dc400115 	stw	r17,4(sp)
    b678:	8433fa04 	addi	r16,r16,-12312
    b67c:	2023883a 	mov	r17,r4
    b680:	2809883a 	mov	r4,r5
    b684:	300b883a 	mov	r5,r6
    b688:	dfc00215 	stw	ra,8(sp)
    b68c:	80000015 	stw	zero,0(r16)
    b690:	000de5c0 	call	de5c <fstat>
    b694:	00ffffc4 	movi	r3,-1
    b698:	10c00526 	beq	r2,r3,b6b0 <_fstat_r+0x48>
    b69c:	dfc00217 	ldw	ra,8(sp)
    b6a0:	dc400117 	ldw	r17,4(sp)
    b6a4:	dc000017 	ldw	r16,0(sp)
    b6a8:	dec00304 	addi	sp,sp,12
    b6ac:	f800283a 	ret
    b6b0:	80c00017 	ldw	r3,0(r16)
    b6b4:	183ff926 	beq	r3,zero,b69c <_fstat_r+0x34>
    b6b8:	88c00015 	stw	r3,0(r17)
    b6bc:	003ff706 	br	b69c <_fstat_r+0x34>

0000b6c0 <__sfvwrite_r>:
    b6c0:	30800217 	ldw	r2,8(r6)
    b6c4:	10006726 	beq	r2,zero,b864 <__sfvwrite_r+0x1a4>
    b6c8:	defff404 	addi	sp,sp,-48
    b6cc:	dd000615 	stw	r20,24(sp)
    b6d0:	2029883a 	mov	r20,r4
    b6d4:	2900030b 	ldhu	r4,12(r5)
    b6d8:	ddc00915 	stw	r23,36(sp)
    b6dc:	dc000215 	stw	r16,8(sp)
    b6e0:	dfc00b15 	stw	ra,44(sp)
    b6e4:	df000a15 	stw	fp,40(sp)
    b6e8:	dd800815 	stw	r22,32(sp)
    b6ec:	dd400715 	stw	r21,28(sp)
    b6f0:	dcc00515 	stw	r19,20(sp)
    b6f4:	dc800415 	stw	r18,16(sp)
    b6f8:	dc400315 	stw	r17,12(sp)
    b6fc:	2080020c 	andi	r2,r4,8
    b700:	2821883a 	mov	r16,r5
    b704:	302f883a 	mov	r23,r6
    b708:	10002726 	beq	r2,zero,b7a8 <__sfvwrite_r+0xe8>
    b70c:	28800417 	ldw	r2,16(r5)
    b710:	10002526 	beq	r2,zero,b7a8 <__sfvwrite_r+0xe8>
    b714:	2080008c 	andi	r2,r4,2
    b718:	bc400017 	ldw	r17,0(r23)
    b71c:	10002a26 	beq	r2,zero,b7c8 <__sfvwrite_r+0x108>
    b720:	05600034 	movhi	r21,32768
    b724:	0027883a 	mov	r19,zero
    b728:	0025883a 	mov	r18,zero
    b72c:	ad7f0004 	addi	r21,r21,-1024
    b730:	980d883a 	mov	r6,r19
    b734:	a009883a 	mov	r4,r20
    b738:	90004626 	beq	r18,zero,b854 <__sfvwrite_r+0x194>
    b73c:	900f883a 	mov	r7,r18
    b740:	81400717 	ldw	r5,28(r16)
    b744:	ac80022e 	bgeu	r21,r18,b750 <__sfvwrite_r+0x90>
    b748:	01e00034 	movhi	r7,32768
    b74c:	39ff0004 	addi	r7,r7,-1024
    b750:	80800917 	ldw	r2,36(r16)
    b754:	103ee83a 	callr	r2
    b758:	0080550e 	bge	zero,r2,b8b0 <__sfvwrite_r+0x1f0>
    b75c:	b8c00217 	ldw	r3,8(r23)
    b760:	98a7883a 	add	r19,r19,r2
    b764:	90a5c83a 	sub	r18,r18,r2
    b768:	1885c83a 	sub	r2,r3,r2
    b76c:	b8800215 	stw	r2,8(r23)
    b770:	103fef1e 	bne	r2,zero,b730 <__sfvwrite_r+0x70>
    b774:	0005883a 	mov	r2,zero
    b778:	dfc00b17 	ldw	ra,44(sp)
    b77c:	df000a17 	ldw	fp,40(sp)
    b780:	ddc00917 	ldw	r23,36(sp)
    b784:	dd800817 	ldw	r22,32(sp)
    b788:	dd400717 	ldw	r21,28(sp)
    b78c:	dd000617 	ldw	r20,24(sp)
    b790:	dcc00517 	ldw	r19,20(sp)
    b794:	dc800417 	ldw	r18,16(sp)
    b798:	dc400317 	ldw	r17,12(sp)
    b79c:	dc000217 	ldw	r16,8(sp)
    b7a0:	dec00c04 	addi	sp,sp,48
    b7a4:	f800283a 	ret
    b7a8:	a009883a 	mov	r4,r20
    b7ac:	800b883a 	mov	r5,r16
    b7b0:	00055740 	call	5574 <__swsetup_r>
    b7b4:	1000ef1e 	bne	r2,zero,bb74 <__sfvwrite_r+0x4b4>
    b7b8:	8100030b 	ldhu	r4,12(r16)
    b7bc:	bc400017 	ldw	r17,0(r23)
    b7c0:	2080008c 	andi	r2,r4,2
    b7c4:	103fd61e 	bne	r2,zero,b720 <__sfvwrite_r+0x60>
    b7c8:	2080004c 	andi	r2,r4,1
    b7cc:	10003d1e 	bne	r2,zero,b8c4 <__sfvwrite_r+0x204>
    b7d0:	0039883a 	mov	fp,zero
    b7d4:	0025883a 	mov	r18,zero
    b7d8:	90001a26 	beq	r18,zero,b844 <__sfvwrite_r+0x184>
    b7dc:	2080800c 	andi	r2,r4,512
    b7e0:	85800217 	ldw	r22,8(r16)
    b7e4:	10007926 	beq	r2,zero,b9cc <__sfvwrite_r+0x30c>
    b7e8:	b027883a 	mov	r19,r22
    b7ec:	95809736 	bltu	r18,r22,ba4c <__sfvwrite_r+0x38c>
    b7f0:	2081200c 	andi	r2,r4,1152
    b7f4:	1000a21e 	bne	r2,zero,ba80 <__sfvwrite_r+0x3c0>
    b7f8:	81000017 	ldw	r4,0(r16)
    b7fc:	e00b883a 	mov	r5,fp
    b800:	980d883a 	mov	r6,r19
    b804:	000bc3c0 	call	bc3c <memmove>
    b808:	81000217 	ldw	r4,8(r16)
    b80c:	81400017 	ldw	r5,0(r16)
    b810:	9005883a 	mov	r2,r18
    b814:	2587c83a 	sub	r3,r4,r22
    b818:	2ce7883a 	add	r19,r5,r19
    b81c:	80c00215 	stw	r3,8(r16)
    b820:	84c00015 	stw	r19,0(r16)
    b824:	b8c00217 	ldw	r3,8(r23)
    b828:	e0b9883a 	add	fp,fp,r2
    b82c:	90a5c83a 	sub	r18,r18,r2
    b830:	1885c83a 	sub	r2,r3,r2
    b834:	b8800215 	stw	r2,8(r23)
    b838:	103fce26 	beq	r2,zero,b774 <__sfvwrite_r+0xb4>
    b83c:	8100030b 	ldhu	r4,12(r16)
    b840:	903fe61e 	bne	r18,zero,b7dc <__sfvwrite_r+0x11c>
    b844:	8f000017 	ldw	fp,0(r17)
    b848:	8c800117 	ldw	r18,4(r17)
    b84c:	8c400204 	addi	r17,r17,8
    b850:	003fe106 	br	b7d8 <__sfvwrite_r+0x118>
    b854:	8cc00017 	ldw	r19,0(r17)
    b858:	8c800117 	ldw	r18,4(r17)
    b85c:	8c400204 	addi	r17,r17,8
    b860:	003fb306 	br	b730 <__sfvwrite_r+0x70>
    b864:	0005883a 	mov	r2,zero
    b868:	f800283a 	ret
    b86c:	00a00034 	movhi	r2,32768
    b870:	10bfffc4 	addi	r2,r2,-1
    b874:	9009883a 	mov	r4,r18
    b878:	1480012e 	bgeu	r2,r18,b880 <__sfvwrite_r+0x1c0>
    b87c:	1009883a 	mov	r4,r2
    b880:	980b883a 	mov	r5,r19
    b884:	00031680 	call	3168 <__divsi3>
    b888:	9809883a 	mov	r4,r19
    b88c:	100b883a 	mov	r5,r2
    b890:	000129c0 	call	129c <__mulsi3>
    b894:	81400717 	ldw	r5,28(r16)
    b898:	80c00917 	ldw	r3,36(r16)
    b89c:	a009883a 	mov	r4,r20
    b8a0:	e00d883a 	mov	r6,fp
    b8a4:	100f883a 	mov	r7,r2
    b8a8:	183ee83a 	callr	r3
    b8ac:	00bfdd16 	blt	zero,r2,b824 <__sfvwrite_r+0x164>
    b8b0:	8080030b 	ldhu	r2,12(r16)
    b8b4:	10801014 	ori	r2,r2,64
    b8b8:	8080030d 	sth	r2,12(r16)
    b8bc:	00bfffc4 	movi	r2,-1
    b8c0:	003fad06 	br	b778 <__sfvwrite_r+0xb8>
    b8c4:	0027883a 	mov	r19,zero
    b8c8:	0011883a 	mov	r8,zero
    b8cc:	0039883a 	mov	fp,zero
    b8d0:	0025883a 	mov	r18,zero
    b8d4:	90001f26 	beq	r18,zero,b954 <__sfvwrite_r+0x294>
    b8d8:	40006026 	beq	r8,zero,ba5c <__sfvwrite_r+0x39c>
    b8dc:	982b883a 	mov	r21,r19
    b8e0:	94c0012e 	bgeu	r18,r19,b8e8 <__sfvwrite_r+0x228>
    b8e4:	902b883a 	mov	r21,r18
    b8e8:	81000017 	ldw	r4,0(r16)
    b8ec:	80800417 	ldw	r2,16(r16)
    b8f0:	a82d883a 	mov	r22,r21
    b8f4:	81800217 	ldw	r6,8(r16)
    b8f8:	81c00517 	ldw	r7,20(r16)
    b8fc:	1100022e 	bgeu	r2,r4,b908 <__sfvwrite_r+0x248>
    b900:	31c7883a 	add	r3,r6,r7
    b904:	1d401816 	blt	r3,r21,b968 <__sfvwrite_r+0x2a8>
    b908:	a9c04416 	blt	r21,r7,ba1c <__sfvwrite_r+0x35c>
    b90c:	80800917 	ldw	r2,36(r16)
    b910:	81400717 	ldw	r5,28(r16)
    b914:	a009883a 	mov	r4,r20
    b918:	da000115 	stw	r8,4(sp)
    b91c:	e00d883a 	mov	r6,fp
    b920:	103ee83a 	callr	r2
    b924:	102d883a 	mov	r22,r2
    b928:	da000117 	ldw	r8,4(sp)
    b92c:	00bfe00e 	bge	zero,r2,b8b0 <__sfvwrite_r+0x1f0>
    b930:	9da7c83a 	sub	r19,r19,r22
    b934:	98001f26 	beq	r19,zero,b9b4 <__sfvwrite_r+0x2f4>
    b938:	b8800217 	ldw	r2,8(r23)
    b93c:	e5b9883a 	add	fp,fp,r22
    b940:	95a5c83a 	sub	r18,r18,r22
    b944:	15adc83a 	sub	r22,r2,r22
    b948:	bd800215 	stw	r22,8(r23)
    b94c:	b03f8926 	beq	r22,zero,b774 <__sfvwrite_r+0xb4>
    b950:	903fe11e 	bne	r18,zero,b8d8 <__sfvwrite_r+0x218>
    b954:	8f000017 	ldw	fp,0(r17)
    b958:	8c800117 	ldw	r18,4(r17)
    b95c:	0011883a 	mov	r8,zero
    b960:	8c400204 	addi	r17,r17,8
    b964:	003fdb06 	br	b8d4 <__sfvwrite_r+0x214>
    b968:	180d883a 	mov	r6,r3
    b96c:	e00b883a 	mov	r5,fp
    b970:	da000115 	stw	r8,4(sp)
    b974:	d8c00015 	stw	r3,0(sp)
    b978:	000bc3c0 	call	bc3c <memmove>
    b97c:	d8c00017 	ldw	r3,0(sp)
    b980:	80800017 	ldw	r2,0(r16)
    b984:	a009883a 	mov	r4,r20
    b988:	800b883a 	mov	r5,r16
    b98c:	10c5883a 	add	r2,r2,r3
    b990:	80800015 	stw	r2,0(r16)
    b994:	d8c00015 	stw	r3,0(sp)
    b998:	00072200 	call	7220 <_fflush_r>
    b99c:	d8c00017 	ldw	r3,0(sp)
    b9a0:	da000117 	ldw	r8,4(sp)
    b9a4:	103fc21e 	bne	r2,zero,b8b0 <__sfvwrite_r+0x1f0>
    b9a8:	182d883a 	mov	r22,r3
    b9ac:	9da7c83a 	sub	r19,r19,r22
    b9b0:	983fe11e 	bne	r19,zero,b938 <__sfvwrite_r+0x278>
    b9b4:	a009883a 	mov	r4,r20
    b9b8:	800b883a 	mov	r5,r16
    b9bc:	00072200 	call	7220 <_fflush_r>
    b9c0:	103fbb1e 	bne	r2,zero,b8b0 <__sfvwrite_r+0x1f0>
    b9c4:	0011883a 	mov	r8,zero
    b9c8:	003fdb06 	br	b938 <__sfvwrite_r+0x278>
    b9cc:	81000017 	ldw	r4,0(r16)
    b9d0:	80800417 	ldw	r2,16(r16)
    b9d4:	11000236 	bltu	r2,r4,b9e0 <__sfvwrite_r+0x320>
    b9d8:	84c00517 	ldw	r19,20(r16)
    b9dc:	94ffa32e 	bgeu	r18,r19,b86c <__sfvwrite_r+0x1ac>
    b9e0:	9027883a 	mov	r19,r18
    b9e4:	b480012e 	bgeu	r22,r18,b9ec <__sfvwrite_r+0x32c>
    b9e8:	b027883a 	mov	r19,r22
    b9ec:	e00b883a 	mov	r5,fp
    b9f0:	980d883a 	mov	r6,r19
    b9f4:	000bc3c0 	call	bc3c <memmove>
    b9f8:	80800217 	ldw	r2,8(r16)
    b9fc:	80c00017 	ldw	r3,0(r16)
    ba00:	14c5c83a 	sub	r2,r2,r19
    ba04:	1cc7883a 	add	r3,r3,r19
    ba08:	80800215 	stw	r2,8(r16)
    ba0c:	80c00015 	stw	r3,0(r16)
    ba10:	10004326 	beq	r2,zero,bb20 <__sfvwrite_r+0x460>
    ba14:	9805883a 	mov	r2,r19
    ba18:	003f8206 	br	b824 <__sfvwrite_r+0x164>
    ba1c:	a80d883a 	mov	r6,r21
    ba20:	e00b883a 	mov	r5,fp
    ba24:	da000115 	stw	r8,4(sp)
    ba28:	000bc3c0 	call	bc3c <memmove>
    ba2c:	80800217 	ldw	r2,8(r16)
    ba30:	80c00017 	ldw	r3,0(r16)
    ba34:	da000117 	ldw	r8,4(sp)
    ba38:	1545c83a 	sub	r2,r2,r21
    ba3c:	1d6b883a 	add	r21,r3,r21
    ba40:	80800215 	stw	r2,8(r16)
    ba44:	85400015 	stw	r21,0(r16)
    ba48:	003fb906 	br	b930 <__sfvwrite_r+0x270>
    ba4c:	81000017 	ldw	r4,0(r16)
    ba50:	902d883a 	mov	r22,r18
    ba54:	9027883a 	mov	r19,r18
    ba58:	003f6806 	br	b7fc <__sfvwrite_r+0x13c>
    ba5c:	e009883a 	mov	r4,fp
    ba60:	01400284 	movi	r5,10
    ba64:	900d883a 	mov	r6,r18
    ba68:	00086380 	call	8638 <memchr>
    ba6c:	10003e26 	beq	r2,zero,bb68 <__sfvwrite_r+0x4a8>
    ba70:	10800044 	addi	r2,r2,1
    ba74:	1727c83a 	sub	r19,r2,fp
    ba78:	02000044 	movi	r8,1
    ba7c:	003f9706 	br	b8dc <__sfvwrite_r+0x21c>
    ba80:	80800517 	ldw	r2,20(r16)
    ba84:	81400417 	ldw	r5,16(r16)
    ba88:	80c00017 	ldw	r3,0(r16)
    ba8c:	10a7883a 	add	r19,r2,r2
    ba90:	9885883a 	add	r2,r19,r2
    ba94:	1026d7fa 	srli	r19,r2,31
    ba98:	196bc83a 	sub	r21,r3,r5
    ba9c:	a9800044 	addi	r6,r21,1
    baa0:	9885883a 	add	r2,r19,r2
    baa4:	1027d07a 	srai	r19,r2,1
    baa8:	3485883a 	add	r2,r6,r18
    baac:	980d883a 	mov	r6,r19
    bab0:	9880022e 	bgeu	r19,r2,babc <__sfvwrite_r+0x3fc>
    bab4:	1027883a 	mov	r19,r2
    bab8:	100d883a 	mov	r6,r2
    babc:	2101000c 	andi	r4,r4,1024
    bac0:	20001c26 	beq	r4,zero,bb34 <__sfvwrite_r+0x474>
    bac4:	a009883a 	mov	r4,r20
    bac8:	300b883a 	mov	r5,r6
    bacc:	0007e900 	call	7e90 <_malloc_r>
    bad0:	102d883a 	mov	r22,r2
    bad4:	10002926 	beq	r2,zero,bb7c <__sfvwrite_r+0x4bc>
    bad8:	81400417 	ldw	r5,16(r16)
    badc:	1009883a 	mov	r4,r2
    bae0:	a80d883a 	mov	r6,r21
    bae4:	00087200 	call	8720 <memcpy>
    bae8:	8080030b 	ldhu	r2,12(r16)
    baec:	00fedfc4 	movi	r3,-1153
    baf0:	10c4703a 	and	r2,r2,r3
    baf4:	10802014 	ori	r2,r2,128
    baf8:	8080030d 	sth	r2,12(r16)
    bafc:	b549883a 	add	r4,r22,r21
    bb00:	9d4bc83a 	sub	r5,r19,r21
    bb04:	85800415 	stw	r22,16(r16)
    bb08:	84c00515 	stw	r19,20(r16)
    bb0c:	81000015 	stw	r4,0(r16)
    bb10:	902d883a 	mov	r22,r18
    bb14:	81400215 	stw	r5,8(r16)
    bb18:	9027883a 	mov	r19,r18
    bb1c:	003f3706 	br	b7fc <__sfvwrite_r+0x13c>
    bb20:	a009883a 	mov	r4,r20
    bb24:	800b883a 	mov	r5,r16
    bb28:	00072200 	call	7220 <_fflush_r>
    bb2c:	103fb926 	beq	r2,zero,ba14 <__sfvwrite_r+0x354>
    bb30:	003f5f06 	br	b8b0 <__sfvwrite_r+0x1f0>
    bb34:	a009883a 	mov	r4,r20
    bb38:	000bdf40 	call	bdf4 <_realloc_r>
    bb3c:	102d883a 	mov	r22,r2
    bb40:	103fee1e 	bne	r2,zero,bafc <__sfvwrite_r+0x43c>
    bb44:	81400417 	ldw	r5,16(r16)
    bb48:	a009883a 	mov	r4,r20
    bb4c:	00077800 	call	7780 <_free_r>
    bb50:	8080030b 	ldhu	r2,12(r16)
    bb54:	00ffdfc4 	movi	r3,-129
    bb58:	1884703a 	and	r2,r3,r2
    bb5c:	00c00304 	movi	r3,12
    bb60:	a0c00015 	stw	r3,0(r20)
    bb64:	003f5306 	br	b8b4 <__sfvwrite_r+0x1f4>
    bb68:	94c00044 	addi	r19,r18,1
    bb6c:	02000044 	movi	r8,1
    bb70:	003f5a06 	br	b8dc <__sfvwrite_r+0x21c>
    bb74:	00bfffc4 	movi	r2,-1
    bb78:	003eff06 	br	b778 <__sfvwrite_r+0xb8>
    bb7c:	00800304 	movi	r2,12
    bb80:	a0800015 	stw	r2,0(r20)
    bb84:	8080030b 	ldhu	r2,12(r16)
    bb88:	003f4a06 	br	b8b4 <__sfvwrite_r+0x1f4>

0000bb8c <_isatty_r>:
    bb8c:	defffd04 	addi	sp,sp,-12
    bb90:	dc000015 	stw	r16,0(sp)
    bb94:	040000b4 	movhi	r16,2
    bb98:	dc400115 	stw	r17,4(sp)
    bb9c:	8433fa04 	addi	r16,r16,-12312
    bba0:	2023883a 	mov	r17,r4
    bba4:	2809883a 	mov	r4,r5
    bba8:	dfc00215 	stw	ra,8(sp)
    bbac:	80000015 	stw	zero,0(r16)
    bbb0:	000e2340 	call	e234 <isatty>
    bbb4:	00ffffc4 	movi	r3,-1
    bbb8:	10c00526 	beq	r2,r3,bbd0 <_isatty_r+0x44>
    bbbc:	dfc00217 	ldw	ra,8(sp)
    bbc0:	dc400117 	ldw	r17,4(sp)
    bbc4:	dc000017 	ldw	r16,0(sp)
    bbc8:	dec00304 	addi	sp,sp,12
    bbcc:	f800283a 	ret
    bbd0:	80c00017 	ldw	r3,0(r16)
    bbd4:	183ff926 	beq	r3,zero,bbbc <_isatty_r+0x30>
    bbd8:	88c00015 	stw	r3,0(r17)
    bbdc:	003ff706 	br	bbbc <_isatty_r+0x30>

0000bbe0 <_lseek_r>:
    bbe0:	defffd04 	addi	sp,sp,-12
    bbe4:	dc000015 	stw	r16,0(sp)
    bbe8:	040000b4 	movhi	r16,2
    bbec:	dc400115 	stw	r17,4(sp)
    bbf0:	8433fa04 	addi	r16,r16,-12312
    bbf4:	2023883a 	mov	r17,r4
    bbf8:	2809883a 	mov	r4,r5
    bbfc:	300b883a 	mov	r5,r6
    bc00:	380d883a 	mov	r6,r7
    bc04:	dfc00215 	stw	ra,8(sp)
    bc08:	80000015 	stw	zero,0(r16)
    bc0c:	000e3300 	call	e330 <lseek>
    bc10:	00ffffc4 	movi	r3,-1
    bc14:	10c00526 	beq	r2,r3,bc2c <_lseek_r+0x4c>
    bc18:	dfc00217 	ldw	ra,8(sp)
    bc1c:	dc400117 	ldw	r17,4(sp)
    bc20:	dc000017 	ldw	r16,0(sp)
    bc24:	dec00304 	addi	sp,sp,12
    bc28:	f800283a 	ret
    bc2c:	80c00017 	ldw	r3,0(r16)
    bc30:	183ff926 	beq	r3,zero,bc18 <_lseek_r+0x38>
    bc34:	88c00015 	stw	r3,0(r17)
    bc38:	003ff706 	br	bc18 <_lseek_r+0x38>

0000bc3c <memmove>:
    bc3c:	2005883a 	mov	r2,r4
    bc40:	29000b2e 	bgeu	r5,r4,bc70 <memmove+0x34>
    bc44:	298f883a 	add	r7,r5,r6
    bc48:	21c0092e 	bgeu	r4,r7,bc70 <memmove+0x34>
    bc4c:	2187883a 	add	r3,r4,r6
    bc50:	198bc83a 	sub	r5,r3,r6
    bc54:	30004b26 	beq	r6,zero,bd84 <memmove+0x148>
    bc58:	39ffffc4 	addi	r7,r7,-1
    bc5c:	39000003 	ldbu	r4,0(r7)
    bc60:	18ffffc4 	addi	r3,r3,-1
    bc64:	19000005 	stb	r4,0(r3)
    bc68:	197ffb1e 	bne	r3,r5,bc58 <memmove+0x1c>
    bc6c:	f800283a 	ret
    bc70:	00c003c4 	movi	r3,15
    bc74:	1980412e 	bgeu	r3,r6,bd7c <memmove+0x140>
    bc78:	1146b03a 	or	r3,r2,r5
    bc7c:	18c000cc 	andi	r3,r3,3
    bc80:	1800411e 	bne	r3,zero,bd88 <memmove+0x14c>
    bc84:	33fffc04 	addi	r15,r6,-16
    bc88:	781ed13a 	srli	r15,r15,4
    bc8c:	28c00104 	addi	r3,r5,4
    bc90:	13400104 	addi	r13,r2,4
    bc94:	781c913a 	slli	r14,r15,4
    bc98:	2b000204 	addi	r12,r5,8
    bc9c:	12c00204 	addi	r11,r2,8
    bca0:	73800504 	addi	r14,r14,20
    bca4:	2a800304 	addi	r10,r5,12
    bca8:	12400304 	addi	r9,r2,12
    bcac:	2b9d883a 	add	r14,r5,r14
    bcb0:	2811883a 	mov	r8,r5
    bcb4:	100f883a 	mov	r7,r2
    bcb8:	41000017 	ldw	r4,0(r8)
    bcbc:	39c00404 	addi	r7,r7,16
    bcc0:	18c00404 	addi	r3,r3,16
    bcc4:	393ffc15 	stw	r4,-16(r7)
    bcc8:	193ffc17 	ldw	r4,-16(r3)
    bccc:	6b400404 	addi	r13,r13,16
    bcd0:	5ac00404 	addi	r11,r11,16
    bcd4:	693ffc15 	stw	r4,-16(r13)
    bcd8:	61000017 	ldw	r4,0(r12)
    bcdc:	4a400404 	addi	r9,r9,16
    bce0:	42000404 	addi	r8,r8,16
    bce4:	593ffc15 	stw	r4,-16(r11)
    bce8:	51000017 	ldw	r4,0(r10)
    bcec:	63000404 	addi	r12,r12,16
    bcf0:	52800404 	addi	r10,r10,16
    bcf4:	493ffc15 	stw	r4,-16(r9)
    bcf8:	1bbfef1e 	bne	r3,r14,bcb8 <memmove+0x7c>
    bcfc:	79000044 	addi	r4,r15,1
    bd00:	2008913a 	slli	r4,r4,4
    bd04:	328003cc 	andi	r10,r6,15
    bd08:	02c000c4 	movi	r11,3
    bd0c:	1107883a 	add	r3,r2,r4
    bd10:	290b883a 	add	r5,r5,r4
    bd14:	5a801e2e 	bgeu	r11,r10,bd90 <memmove+0x154>
    bd18:	1813883a 	mov	r9,r3
    bd1c:	2811883a 	mov	r8,r5
    bd20:	500f883a 	mov	r7,r10
    bd24:	41000017 	ldw	r4,0(r8)
    bd28:	4a400104 	addi	r9,r9,4
    bd2c:	39ffff04 	addi	r7,r7,-4
    bd30:	493fff15 	stw	r4,-4(r9)
    bd34:	42000104 	addi	r8,r8,4
    bd38:	59fffa36 	bltu	r11,r7,bd24 <memmove+0xe8>
    bd3c:	513fff04 	addi	r4,r10,-4
    bd40:	2008d0ba 	srli	r4,r4,2
    bd44:	318000cc 	andi	r6,r6,3
    bd48:	21000044 	addi	r4,r4,1
    bd4c:	2109883a 	add	r4,r4,r4
    bd50:	2109883a 	add	r4,r4,r4
    bd54:	1907883a 	add	r3,r3,r4
    bd58:	290b883a 	add	r5,r5,r4
    bd5c:	30000926 	beq	r6,zero,bd84 <memmove+0x148>
    bd60:	198d883a 	add	r6,r3,r6
    bd64:	29c00003 	ldbu	r7,0(r5)
    bd68:	18c00044 	addi	r3,r3,1
    bd6c:	29400044 	addi	r5,r5,1
    bd70:	19ffffc5 	stb	r7,-1(r3)
    bd74:	19bffb1e 	bne	r3,r6,bd64 <memmove+0x128>
    bd78:	f800283a 	ret
    bd7c:	1007883a 	mov	r3,r2
    bd80:	003ff606 	br	bd5c <memmove+0x120>
    bd84:	f800283a 	ret
    bd88:	1007883a 	mov	r3,r2
    bd8c:	003ff406 	br	bd60 <memmove+0x124>
    bd90:	500d883a 	mov	r6,r10
    bd94:	003ff106 	br	bd5c <memmove+0x120>

0000bd98 <_read_r>:
    bd98:	defffd04 	addi	sp,sp,-12
    bd9c:	dc000015 	stw	r16,0(sp)
    bda0:	040000b4 	movhi	r16,2
    bda4:	dc400115 	stw	r17,4(sp)
    bda8:	8433fa04 	addi	r16,r16,-12312
    bdac:	2023883a 	mov	r17,r4
    bdb0:	2809883a 	mov	r4,r5
    bdb4:	300b883a 	mov	r5,r6
    bdb8:	380d883a 	mov	r6,r7
    bdbc:	dfc00215 	stw	ra,8(sp)
    bdc0:	80000015 	stw	zero,0(r16)
    bdc4:	000e5300 	call	e530 <read>
    bdc8:	00ffffc4 	movi	r3,-1
    bdcc:	10c00526 	beq	r2,r3,bde4 <_read_r+0x4c>
    bdd0:	dfc00217 	ldw	ra,8(sp)
    bdd4:	dc400117 	ldw	r17,4(sp)
    bdd8:	dc000017 	ldw	r16,0(sp)
    bddc:	dec00304 	addi	sp,sp,12
    bde0:	f800283a 	ret
    bde4:	80c00017 	ldw	r3,0(r16)
    bde8:	183ff926 	beq	r3,zero,bdd0 <_read_r+0x38>
    bdec:	88c00015 	stw	r3,0(r17)
    bdf0:	003ff706 	br	bdd0 <_read_r+0x38>

0000bdf4 <_realloc_r>:
    bdf4:	defff604 	addi	sp,sp,-40
    bdf8:	dd000415 	stw	r20,16(sp)
    bdfc:	dc400115 	stw	r17,4(sp)
    be00:	dfc00915 	stw	ra,36(sp)
    be04:	df000815 	stw	fp,32(sp)
    be08:	ddc00715 	stw	r23,28(sp)
    be0c:	dd800615 	stw	r22,24(sp)
    be10:	dd400515 	stw	r21,20(sp)
    be14:	dcc00315 	stw	r19,12(sp)
    be18:	dc800215 	stw	r18,8(sp)
    be1c:	dc000015 	stw	r16,0(sp)
    be20:	2829883a 	mov	r20,r5
    be24:	3023883a 	mov	r17,r6
    be28:	2800ad26 	beq	r5,zero,c0e0 <_realloc_r+0x2ec>
    be2c:	2025883a 	mov	r18,r4
    be30:	000e9d00 	call	e9d0 <__malloc_lock>
    be34:	a0ffff17 	ldw	r3,-4(r20)
    be38:	043fff04 	movi	r16,-4
    be3c:	890002c4 	addi	r4,r17,11
    be40:	01c00584 	movi	r7,22
    be44:	a57ffe04 	addi	r21,r20,-8
    be48:	1c20703a 	and	r16,r3,r16
    be4c:	39001d2e 	bgeu	r7,r4,bec4 <_realloc_r+0xd0>
    be50:	05bffe04 	movi	r22,-8
    be54:	25ac703a 	and	r22,r4,r22
    be58:	b00f883a 	mov	r7,r22
    be5c:	b0006516 	blt	r22,zero,bff4 <_realloc_r+0x200>
    be60:	b4406436 	bltu	r22,r17,bff4 <_realloc_r+0x200>
    be64:	81c01a0e 	bge	r16,r7,bed0 <_realloc_r+0xdc>
    be68:	070000b4 	movhi	fp,2
    be6c:	e72d0304 	addi	fp,fp,-19444
    be70:	e1400217 	ldw	r5,8(fp)
    be74:	ac11883a 	add	r8,r21,r16
    be78:	2a006226 	beq	r5,r8,c004 <_realloc_r+0x210>
    be7c:	41800117 	ldw	r6,4(r8)
    be80:	027fff84 	movi	r9,-2
    be84:	3252703a 	and	r9,r6,r9
    be88:	4253883a 	add	r9,r8,r9
    be8c:	49000117 	ldw	r4,4(r9)
    be90:	2100004c 	andi	r4,r4,1
    be94:	2000281e 	bne	r4,zero,bf38 <_realloc_r+0x144>
    be98:	00bfff04 	movi	r2,-4
    be9c:	3084703a 	and	r2,r6,r2
    bea0:	1409883a 	add	r4,r2,r16
    bea4:	21c05e16 	blt	r4,r7,c020 <_realloc_r+0x22c>
    bea8:	40800317 	ldw	r2,12(r8)
    beac:	41400217 	ldw	r5,8(r8)
    beb0:	a023883a 	mov	r17,r20
    beb4:	2021883a 	mov	r16,r4
    beb8:	28800315 	stw	r2,12(r5)
    bebc:	11400215 	stw	r5,8(r2)
    bec0:	00000406 	br	bed4 <_realloc_r+0xe0>
    bec4:	01c00404 	movi	r7,16
    bec8:	382d883a 	mov	r22,r7
    becc:	003fe406 	br	be60 <_realloc_r+0x6c>
    bed0:	a023883a 	mov	r17,r20
    bed4:	858fc83a 	sub	r7,r16,r22
    bed8:	008003c4 	movi	r2,15
    bedc:	18c0004c 	andi	r3,r3,1
    bee0:	11c07236 	bltu	r2,r7,c0ac <_realloc_r+0x2b8>
    bee4:	1c06b03a 	or	r3,r3,r16
    bee8:	a8c00115 	stw	r3,4(r21)
    beec:	ac21883a 	add	r16,r21,r16
    bef0:	80800117 	ldw	r2,4(r16)
    bef4:	10800054 	ori	r2,r2,1
    bef8:	80800115 	stw	r2,4(r16)
    befc:	9009883a 	mov	r4,r18
    bf00:	000eaf00 	call	eaf0 <__malloc_unlock>
    bf04:	8805883a 	mov	r2,r17
    bf08:	dfc00917 	ldw	ra,36(sp)
    bf0c:	df000817 	ldw	fp,32(sp)
    bf10:	ddc00717 	ldw	r23,28(sp)
    bf14:	dd800617 	ldw	r22,24(sp)
    bf18:	dd400517 	ldw	r21,20(sp)
    bf1c:	dd000417 	ldw	r20,16(sp)
    bf20:	dcc00317 	ldw	r19,12(sp)
    bf24:	dc800217 	ldw	r18,8(sp)
    bf28:	dc400117 	ldw	r17,4(sp)
    bf2c:	dc000017 	ldw	r16,0(sp)
    bf30:	dec00a04 	addi	sp,sp,40
    bf34:	f800283a 	ret
    bf38:	18c0004c 	andi	r3,r3,1
    bf3c:	1800081e 	bne	r3,zero,bf60 <_realloc_r+0x16c>
    bf40:	a4fffe17 	ldw	r19,-8(r20)
    bf44:	00bfff04 	movi	r2,-4
    bf48:	ace7c83a 	sub	r19,r21,r19
    bf4c:	98c00117 	ldw	r3,4(r19)
    bf50:	1886703a 	and	r3,r3,r2
    bf54:	98000226 	beq	r19,zero,bf60 <_realloc_r+0x16c>
    bf58:	1c2f883a 	add	r23,r3,r16
    bf5c:	b9c06d0e 	bge	r23,r7,c114 <_realloc_r+0x320>
    bf60:	880b883a 	mov	r5,r17
    bf64:	9009883a 	mov	r4,r18
    bf68:	0007e900 	call	7e90 <_malloc_r>
    bf6c:	1023883a 	mov	r17,r2
    bf70:	1000ef26 	beq	r2,zero,c330 <_realloc_r+0x53c>
    bf74:	a0ffff17 	ldw	r3,-4(r20)
    bf78:	113ffe04 	addi	r4,r2,-8
    bf7c:	00bfff84 	movi	r2,-2
    bf80:	1884703a 	and	r2,r3,r2
    bf84:	a885883a 	add	r2,r21,r2
    bf88:	2080bf26 	beq	r4,r2,c288 <_realloc_r+0x494>
    bf8c:	81bfff04 	addi	r6,r16,-4
    bf90:	00800904 	movi	r2,36
    bf94:	11808936 	bltu	r2,r6,c1bc <_realloc_r+0x3c8>
    bf98:	00c004c4 	movi	r3,19
    bf9c:	19806c2e 	bgeu	r3,r6,c150 <_realloc_r+0x35c>
    bfa0:	a0c00017 	ldw	r3,0(r20)
    bfa4:	88c00015 	stw	r3,0(r17)
    bfa8:	a0c00117 	ldw	r3,4(r20)
    bfac:	88c00115 	stw	r3,4(r17)
    bfb0:	00c006c4 	movi	r3,27
    bfb4:	1980ac36 	bltu	r3,r6,c268 <_realloc_r+0x474>
    bfb8:	88800204 	addi	r2,r17,8
    bfbc:	a0c00204 	addi	r3,r20,8
    bfc0:	19000017 	ldw	r4,0(r3)
    bfc4:	11000015 	stw	r4,0(r2)
    bfc8:	19000117 	ldw	r4,4(r3)
    bfcc:	11000115 	stw	r4,4(r2)
    bfd0:	18c00217 	ldw	r3,8(r3)
    bfd4:	10c00215 	stw	r3,8(r2)
    bfd8:	a00b883a 	mov	r5,r20
    bfdc:	9009883a 	mov	r4,r18
    bfe0:	00077800 	call	7780 <_free_r>
    bfe4:	9009883a 	mov	r4,r18
    bfe8:	000eaf00 	call	eaf0 <__malloc_unlock>
    bfec:	8805883a 	mov	r2,r17
    bff0:	003fc506 	br	bf08 <_realloc_r+0x114>
    bff4:	00800304 	movi	r2,12
    bff8:	90800015 	stw	r2,0(r18)
    bffc:	0005883a 	mov	r2,zero
    c000:	003fc106 	br	bf08 <_realloc_r+0x114>
    c004:	29800117 	ldw	r6,4(r5)
    c008:	00bfff04 	movi	r2,-4
    c00c:	b1000404 	addi	r4,r22,16
    c010:	3084703a 	and	r2,r6,r2
    c014:	140d883a 	add	r6,r2,r16
    c018:	31005b0e 	bge	r6,r4,c188 <_realloc_r+0x394>
    c01c:	2811883a 	mov	r8,r5
    c020:	18c0004c 	andi	r3,r3,1
    c024:	183fce1e 	bne	r3,zero,bf60 <_realloc_r+0x16c>
    c028:	a4fffe17 	ldw	r19,-8(r20)
    c02c:	00ffff04 	movi	r3,-4
    c030:	ace7c83a 	sub	r19,r21,r19
    c034:	99000117 	ldw	r4,4(r19)
    c038:	20c6703a 	and	r3,r4,r3
    c03c:	403fc526 	beq	r8,zero,bf54 <_realloc_r+0x160>
    c040:	1c2f883a 	add	r23,r3,r16
    c044:	b8af883a 	add	r23,r23,r2
    c048:	41406026 	beq	r8,r5,c1cc <_realloc_r+0x3d8>
    c04c:	b9ffc116 	blt	r23,r7,bf54 <_realloc_r+0x160>
    c050:	40c00217 	ldw	r3,8(r8)
    c054:	40800317 	ldw	r2,12(r8)
    c058:	81bfff04 	addi	r6,r16,-4
    c05c:	01000904 	movi	r4,36
    c060:	18800315 	stw	r2,12(r3)
    c064:	10c00215 	stw	r3,8(r2)
    c068:	99400217 	ldw	r5,8(r19)
    c06c:	98c00317 	ldw	r3,12(r19)
    c070:	9c400204 	addi	r17,r19,8
    c074:	28c00315 	stw	r3,12(r5)
    c078:	19400215 	stw	r5,8(r3)
    c07c:	21802d36 	bltu	r4,r6,c134 <_realloc_r+0x340>
    c080:	008004c4 	movi	r2,19
    c084:	1180352e 	bgeu	r2,r6,c15c <_realloc_r+0x368>
    c088:	a0800017 	ldw	r2,0(r20)
    c08c:	98800215 	stw	r2,8(r19)
    c090:	a0800117 	ldw	r2,4(r20)
    c094:	98800315 	stw	r2,12(r19)
    c098:	008006c4 	movi	r2,27
    c09c:	11808036 	bltu	r2,r6,c2a0 <_realloc_r+0x4ac>
    c0a0:	98c00404 	addi	r3,r19,16
    c0a4:	a5000204 	addi	r20,r20,8
    c0a8:	00002d06 	br	c160 <_realloc_r+0x36c>
    c0ac:	1d86b03a 	or	r3,r3,r22
    c0b0:	ad8b883a 	add	r5,r21,r22
    c0b4:	a8c00115 	stw	r3,4(r21)
    c0b8:	38800054 	ori	r2,r7,1
    c0bc:	28800115 	stw	r2,4(r5)
    c0c0:	29cf883a 	add	r7,r5,r7
    c0c4:	38800117 	ldw	r2,4(r7)
    c0c8:	9009883a 	mov	r4,r18
    c0cc:	29400204 	addi	r5,r5,8
    c0d0:	10800054 	ori	r2,r2,1
    c0d4:	38800115 	stw	r2,4(r7)
    c0d8:	00077800 	call	7780 <_free_r>
    c0dc:	003f8706 	br	befc <_realloc_r+0x108>
    c0e0:	300b883a 	mov	r5,r6
    c0e4:	dfc00917 	ldw	ra,36(sp)
    c0e8:	df000817 	ldw	fp,32(sp)
    c0ec:	ddc00717 	ldw	r23,28(sp)
    c0f0:	dd800617 	ldw	r22,24(sp)
    c0f4:	dd400517 	ldw	r21,20(sp)
    c0f8:	dd000417 	ldw	r20,16(sp)
    c0fc:	dcc00317 	ldw	r19,12(sp)
    c100:	dc800217 	ldw	r18,8(sp)
    c104:	dc400117 	ldw	r17,4(sp)
    c108:	dc000017 	ldw	r16,0(sp)
    c10c:	dec00a04 	addi	sp,sp,40
    c110:	0007e901 	jmpi	7e90 <_malloc_r>
    c114:	98800317 	ldw	r2,12(r19)
    c118:	98c00217 	ldw	r3,8(r19)
    c11c:	81bfff04 	addi	r6,r16,-4
    c120:	01000904 	movi	r4,36
    c124:	18800315 	stw	r2,12(r3)
    c128:	10c00215 	stw	r3,8(r2)
    c12c:	9c400204 	addi	r17,r19,8
    c130:	21bfd32e 	bgeu	r4,r6,c080 <_realloc_r+0x28c>
    c134:	8809883a 	mov	r4,r17
    c138:	a00b883a 	mov	r5,r20
    c13c:	000bc3c0 	call	bc3c <memmove>
    c140:	98c00117 	ldw	r3,4(r19)
    c144:	b821883a 	mov	r16,r23
    c148:	982b883a 	mov	r21,r19
    c14c:	003f6106 	br	bed4 <_realloc_r+0xe0>
    c150:	8805883a 	mov	r2,r17
    c154:	a007883a 	mov	r3,r20
    c158:	003f9906 	br	bfc0 <_realloc_r+0x1cc>
    c15c:	8807883a 	mov	r3,r17
    c160:	a0800017 	ldw	r2,0(r20)
    c164:	b821883a 	mov	r16,r23
    c168:	982b883a 	mov	r21,r19
    c16c:	18800015 	stw	r2,0(r3)
    c170:	a0800117 	ldw	r2,4(r20)
    c174:	18800115 	stw	r2,4(r3)
    c178:	a0800217 	ldw	r2,8(r20)
    c17c:	18800215 	stw	r2,8(r3)
    c180:	98c00117 	ldw	r3,4(r19)
    c184:	003f5306 	br	bed4 <_realloc_r+0xe0>
    c188:	adab883a 	add	r21,r21,r22
    c18c:	3585c83a 	sub	r2,r6,r22
    c190:	e5400215 	stw	r21,8(fp)
    c194:	10800054 	ori	r2,r2,1
    c198:	a8800115 	stw	r2,4(r21)
    c19c:	a0bfff17 	ldw	r2,-4(r20)
    c1a0:	9009883a 	mov	r4,r18
    c1a4:	1080004c 	andi	r2,r2,1
    c1a8:	b0acb03a 	or	r22,r22,r2
    c1ac:	a5bfff15 	stw	r22,-4(r20)
    c1b0:	000eaf00 	call	eaf0 <__malloc_unlock>
    c1b4:	a005883a 	mov	r2,r20
    c1b8:	003f5306 	br	bf08 <_realloc_r+0x114>
    c1bc:	8809883a 	mov	r4,r17
    c1c0:	a00b883a 	mov	r5,r20
    c1c4:	000bc3c0 	call	bc3c <memmove>
    c1c8:	003f8306 	br	bfd8 <_realloc_r+0x1e4>
    c1cc:	b0800404 	addi	r2,r22,16
    c1d0:	b8bf6016 	blt	r23,r2,bf54 <_realloc_r+0x160>
    c1d4:	98800317 	ldw	r2,12(r19)
    c1d8:	98c00217 	ldw	r3,8(r19)
    c1dc:	81bfff04 	addi	r6,r16,-4
    c1e0:	01000904 	movi	r4,36
    c1e4:	18800315 	stw	r2,12(r3)
    c1e8:	10c00215 	stw	r3,8(r2)
    c1ec:	9c400204 	addi	r17,r19,8
    c1f0:	21804336 	bltu	r4,r6,c300 <_realloc_r+0x50c>
    c1f4:	008004c4 	movi	r2,19
    c1f8:	11803f2e 	bgeu	r2,r6,c2f8 <_realloc_r+0x504>
    c1fc:	a0800017 	ldw	r2,0(r20)
    c200:	98800215 	stw	r2,8(r19)
    c204:	a0800117 	ldw	r2,4(r20)
    c208:	98800315 	stw	r2,12(r19)
    c20c:	008006c4 	movi	r2,27
    c210:	11803f36 	bltu	r2,r6,c310 <_realloc_r+0x51c>
    c214:	98800404 	addi	r2,r19,16
    c218:	a5000204 	addi	r20,r20,8
    c21c:	a0c00017 	ldw	r3,0(r20)
    c220:	10c00015 	stw	r3,0(r2)
    c224:	a0c00117 	ldw	r3,4(r20)
    c228:	10c00115 	stw	r3,4(r2)
    c22c:	a0c00217 	ldw	r3,8(r20)
    c230:	10c00215 	stw	r3,8(r2)
    c234:	9d87883a 	add	r3,r19,r22
    c238:	bd85c83a 	sub	r2,r23,r22
    c23c:	e0c00215 	stw	r3,8(fp)
    c240:	10800054 	ori	r2,r2,1
    c244:	18800115 	stw	r2,4(r3)
    c248:	98800117 	ldw	r2,4(r19)
    c24c:	9009883a 	mov	r4,r18
    c250:	1080004c 	andi	r2,r2,1
    c254:	b0acb03a 	or	r22,r22,r2
    c258:	9d800115 	stw	r22,4(r19)
    c25c:	000eaf00 	call	eaf0 <__malloc_unlock>
    c260:	8805883a 	mov	r2,r17
    c264:	003f2806 	br	bf08 <_realloc_r+0x114>
    c268:	a0c00217 	ldw	r3,8(r20)
    c26c:	88c00215 	stw	r3,8(r17)
    c270:	a0c00317 	ldw	r3,12(r20)
    c274:	88c00315 	stw	r3,12(r17)
    c278:	30801126 	beq	r6,r2,c2c0 <_realloc_r+0x4cc>
    c27c:	88800404 	addi	r2,r17,16
    c280:	a0c00404 	addi	r3,r20,16
    c284:	003f4e06 	br	bfc0 <_realloc_r+0x1cc>
    c288:	893fff17 	ldw	r4,-4(r17)
    c28c:	00bfff04 	movi	r2,-4
    c290:	a023883a 	mov	r17,r20
    c294:	2084703a 	and	r2,r4,r2
    c298:	80a1883a 	add	r16,r16,r2
    c29c:	003f0d06 	br	bed4 <_realloc_r+0xe0>
    c2a0:	a0800217 	ldw	r2,8(r20)
    c2a4:	98800415 	stw	r2,16(r19)
    c2a8:	a0800317 	ldw	r2,12(r20)
    c2ac:	98800515 	stw	r2,20(r19)
    c2b0:	31000a26 	beq	r6,r4,c2dc <_realloc_r+0x4e8>
    c2b4:	98c00604 	addi	r3,r19,24
    c2b8:	a5000404 	addi	r20,r20,16
    c2bc:	003fa806 	br	c160 <_realloc_r+0x36c>
    c2c0:	a1000417 	ldw	r4,16(r20)
    c2c4:	88800604 	addi	r2,r17,24
    c2c8:	a0c00604 	addi	r3,r20,24
    c2cc:	89000415 	stw	r4,16(r17)
    c2d0:	a1000517 	ldw	r4,20(r20)
    c2d4:	89000515 	stw	r4,20(r17)
    c2d8:	003f3906 	br	bfc0 <_realloc_r+0x1cc>
    c2dc:	a0800417 	ldw	r2,16(r20)
    c2e0:	a5000604 	addi	r20,r20,24
    c2e4:	98c00804 	addi	r3,r19,32
    c2e8:	98800615 	stw	r2,24(r19)
    c2ec:	a0bfff17 	ldw	r2,-4(r20)
    c2f0:	98800715 	stw	r2,28(r19)
    c2f4:	003f9a06 	br	c160 <_realloc_r+0x36c>
    c2f8:	8805883a 	mov	r2,r17
    c2fc:	003fc706 	br	c21c <_realloc_r+0x428>
    c300:	8809883a 	mov	r4,r17
    c304:	a00b883a 	mov	r5,r20
    c308:	000bc3c0 	call	bc3c <memmove>
    c30c:	003fc906 	br	c234 <_realloc_r+0x440>
    c310:	a0800217 	ldw	r2,8(r20)
    c314:	98800415 	stw	r2,16(r19)
    c318:	a0800317 	ldw	r2,12(r20)
    c31c:	98800515 	stw	r2,20(r19)
    c320:	31000726 	beq	r6,r4,c340 <_realloc_r+0x54c>
    c324:	98800604 	addi	r2,r19,24
    c328:	a5000404 	addi	r20,r20,16
    c32c:	003fbb06 	br	c21c <_realloc_r+0x428>
    c330:	9009883a 	mov	r4,r18
    c334:	000eaf00 	call	eaf0 <__malloc_unlock>
    c338:	0005883a 	mov	r2,zero
    c33c:	003ef206 	br	bf08 <_realloc_r+0x114>
    c340:	a0c00417 	ldw	r3,16(r20)
    c344:	a5000604 	addi	r20,r20,24
    c348:	98800804 	addi	r2,r19,32
    c34c:	98c00615 	stw	r3,24(r19)
    c350:	a0ffff17 	ldw	r3,-4(r20)
    c354:	98c00715 	stw	r3,28(r19)
    c358:	003fb006 	br	c21c <_realloc_r+0x428>

0000c35c <__swbuf_r>:
    c35c:	defffc04 	addi	sp,sp,-16
    c360:	dc800215 	stw	r18,8(sp)
    c364:	dc400115 	stw	r17,4(sp)
    c368:	dc000015 	stw	r16,0(sp)
    c36c:	dfc00315 	stw	ra,12(sp)
    c370:	2025883a 	mov	r18,r4
    c374:	2823883a 	mov	r17,r5
    c378:	3021883a 	mov	r16,r6
    c37c:	20000226 	beq	r4,zero,c388 <__swbuf_r+0x2c>
    c380:	20800e17 	ldw	r2,56(r4)
    c384:	10004126 	beq	r2,zero,c48c <__swbuf_r+0x130>
    c388:	80c00617 	ldw	r3,24(r16)
    c38c:	8180030b 	ldhu	r6,12(r16)
    c390:	80c00215 	stw	r3,8(r16)
    c394:	30c0020c 	andi	r3,r6,8
    c398:	18003526 	beq	r3,zero,c470 <__swbuf_r+0x114>
    c39c:	80c00417 	ldw	r3,16(r16)
    c3a0:	18003326 	beq	r3,zero,c470 <__swbuf_r+0x114>
    c3a4:	3088000c 	andi	r2,r6,8192
    c3a8:	8c403fcc 	andi	r17,r17,255
    c3ac:	10001726 	beq	r2,zero,c40c <__swbuf_r+0xb0>
    c3b0:	80800017 	ldw	r2,0(r16)
    c3b4:	81000517 	ldw	r4,20(r16)
    c3b8:	10c7c83a 	sub	r3,r2,r3
    c3bc:	19001d0e 	bge	r3,r4,c434 <__swbuf_r+0xd8>
    c3c0:	18c00044 	addi	r3,r3,1
    c3c4:	81400217 	ldw	r5,8(r16)
    c3c8:	11000044 	addi	r4,r2,1
    c3cc:	81000015 	stw	r4,0(r16)
    c3d0:	297fffc4 	addi	r5,r5,-1
    c3d4:	81400215 	stw	r5,8(r16)
    c3d8:	14400005 	stb	r17,0(r2)
    c3dc:	80800517 	ldw	r2,20(r16)
    c3e0:	10c01d26 	beq	r2,r3,c458 <__swbuf_r+0xfc>
    c3e4:	8080030b 	ldhu	r2,12(r16)
    c3e8:	1080004c 	andi	r2,r2,1
    c3ec:	1000181e 	bne	r2,zero,c450 <__swbuf_r+0xf4>
    c3f0:	8805883a 	mov	r2,r17
    c3f4:	dfc00317 	ldw	ra,12(sp)
    c3f8:	dc800217 	ldw	r18,8(sp)
    c3fc:	dc400117 	ldw	r17,4(sp)
    c400:	dc000017 	ldw	r16,0(sp)
    c404:	dec00404 	addi	sp,sp,16
    c408:	f800283a 	ret
    c40c:	81001917 	ldw	r4,100(r16)
    c410:	00b7ffc4 	movi	r2,-8193
    c414:	31880014 	ori	r6,r6,8192
    c418:	2084703a 	and	r2,r4,r2
    c41c:	80801915 	stw	r2,100(r16)
    c420:	80800017 	ldw	r2,0(r16)
    c424:	81000517 	ldw	r4,20(r16)
    c428:	8180030d 	sth	r6,12(r16)
    c42c:	10c7c83a 	sub	r3,r2,r3
    c430:	193fe316 	blt	r3,r4,c3c0 <__swbuf_r+0x64>
    c434:	9009883a 	mov	r4,r18
    c438:	800b883a 	mov	r5,r16
    c43c:	00072200 	call	7220 <_fflush_r>
    c440:	1000091e 	bne	r2,zero,c468 <__swbuf_r+0x10c>
    c444:	80800017 	ldw	r2,0(r16)
    c448:	00c00044 	movi	r3,1
    c44c:	003fdd06 	br	c3c4 <__swbuf_r+0x68>
    c450:	00800284 	movi	r2,10
    c454:	88bfe61e 	bne	r17,r2,c3f0 <__swbuf_r+0x94>
    c458:	9009883a 	mov	r4,r18
    c45c:	800b883a 	mov	r5,r16
    c460:	00072200 	call	7220 <_fflush_r>
    c464:	103fe226 	beq	r2,zero,c3f0 <__swbuf_r+0x94>
    c468:	00bfffc4 	movi	r2,-1
    c46c:	003fe106 	br	c3f4 <__swbuf_r+0x98>
    c470:	9009883a 	mov	r4,r18
    c474:	800b883a 	mov	r5,r16
    c478:	00055740 	call	5574 <__swsetup_r>
    c47c:	103ffa1e 	bne	r2,zero,c468 <__swbuf_r+0x10c>
    c480:	8180030b 	ldhu	r6,12(r16)
    c484:	80c00417 	ldw	r3,16(r16)
    c488:	003fc606 	br	c3a4 <__swbuf_r+0x48>
    c48c:	000760c0 	call	760c <__sinit>
    c490:	003fbd06 	br	c388 <__swbuf_r+0x2c>

0000c494 <__swbuf>:
    c494:	00c000b4 	movhi	r3,2
    c498:	18f3c204 	addi	r3,r3,-12536
    c49c:	2005883a 	mov	r2,r4
    c4a0:	19000017 	ldw	r4,0(r3)
    c4a4:	280d883a 	mov	r6,r5
    c4a8:	100b883a 	mov	r5,r2
    c4ac:	000c35c1 	jmpi	c35c <__swbuf_r>

0000c4b0 <_wcrtomb_r>:
    c4b0:	defff604 	addi	sp,sp,-40
    c4b4:	008000b4 	movhi	r2,2
    c4b8:	dc800815 	stw	r18,32(sp)
    c4bc:	dc400715 	stw	r17,28(sp)
    c4c0:	dc000615 	stw	r16,24(sp)
    c4c4:	10b3c604 	addi	r2,r2,-12520
    c4c8:	dfc00915 	stw	ra,36(sp)
    c4cc:	2021883a 	mov	r16,r4
    c4d0:	3823883a 	mov	r17,r7
    c4d4:	14800017 	ldw	r18,0(r2)
    c4d8:	28001426 	beq	r5,zero,c52c <_wcrtomb_r+0x7c>
    c4dc:	d9400415 	stw	r5,16(sp)
    c4e0:	d9800515 	stw	r6,20(sp)
    c4e4:	0007c740 	call	7c74 <__locale_charset>
    c4e8:	d9400417 	ldw	r5,16(sp)
    c4ec:	d9800517 	ldw	r6,20(sp)
    c4f0:	8009883a 	mov	r4,r16
    c4f4:	dc400015 	stw	r17,0(sp)
    c4f8:	100f883a 	mov	r7,r2
    c4fc:	903ee83a 	callr	r18
    c500:	00ffffc4 	movi	r3,-1
    c504:	10c0031e 	bne	r2,r3,c514 <_wcrtomb_r+0x64>
    c508:	88000015 	stw	zero,0(r17)
    c50c:	00c02284 	movi	r3,138
    c510:	80c00015 	stw	r3,0(r16)
    c514:	dfc00917 	ldw	ra,36(sp)
    c518:	dc800817 	ldw	r18,32(sp)
    c51c:	dc400717 	ldw	r17,28(sp)
    c520:	dc000617 	ldw	r16,24(sp)
    c524:	dec00a04 	addi	sp,sp,40
    c528:	f800283a 	ret
    c52c:	0007c740 	call	7c74 <__locale_charset>
    c530:	8009883a 	mov	r4,r16
    c534:	dc400015 	stw	r17,0(sp)
    c538:	d9400104 	addi	r5,sp,4
    c53c:	000d883a 	mov	r6,zero
    c540:	100f883a 	mov	r7,r2
    c544:	903ee83a 	callr	r18
    c548:	003fed06 	br	c500 <_wcrtomb_r+0x50>

0000c54c <wcrtomb>:
    c54c:	defff604 	addi	sp,sp,-40
    c550:	008000b4 	movhi	r2,2
    c554:	dc800615 	stw	r18,24(sp)
    c558:	dc400515 	stw	r17,20(sp)
    c55c:	dc000415 	stw	r16,16(sp)
    c560:	10b3c204 	addi	r2,r2,-12536
    c564:	dfc00915 	stw	ra,36(sp)
    c568:	dd000815 	stw	r20,32(sp)
    c56c:	dcc00715 	stw	r19,28(sp)
    c570:	2021883a 	mov	r16,r4
    c574:	3025883a 	mov	r18,r6
    c578:	14400017 	ldw	r17,0(r2)
    c57c:	20001826 	beq	r4,zero,c5e0 <wcrtomb+0x94>
    c580:	008000b4 	movhi	r2,2
    c584:	10b3c604 	addi	r2,r2,-12520
    c588:	15000017 	ldw	r20,0(r2)
    c58c:	2827883a 	mov	r19,r5
    c590:	0007c740 	call	7c74 <__locale_charset>
    c594:	8809883a 	mov	r4,r17
    c598:	dc800015 	stw	r18,0(sp)
    c59c:	800b883a 	mov	r5,r16
    c5a0:	980d883a 	mov	r6,r19
    c5a4:	100f883a 	mov	r7,r2
    c5a8:	a03ee83a 	callr	r20
    c5ac:	00ffffc4 	movi	r3,-1
    c5b0:	10c0031e 	bne	r2,r3,c5c0 <wcrtomb+0x74>
    c5b4:	90000015 	stw	zero,0(r18)
    c5b8:	00c02284 	movi	r3,138
    c5bc:	88c00015 	stw	r3,0(r17)
    c5c0:	dfc00917 	ldw	ra,36(sp)
    c5c4:	dd000817 	ldw	r20,32(sp)
    c5c8:	dcc00717 	ldw	r19,28(sp)
    c5cc:	dc800617 	ldw	r18,24(sp)
    c5d0:	dc400517 	ldw	r17,20(sp)
    c5d4:	dc000417 	ldw	r16,16(sp)
    c5d8:	dec00a04 	addi	sp,sp,40
    c5dc:	f800283a 	ret
    c5e0:	008000b4 	movhi	r2,2
    c5e4:	10b3c604 	addi	r2,r2,-12520
    c5e8:	14000017 	ldw	r16,0(r2)
    c5ec:	0007c740 	call	7c74 <__locale_charset>
    c5f0:	8809883a 	mov	r4,r17
    c5f4:	dc800015 	stw	r18,0(sp)
    c5f8:	d9400104 	addi	r5,sp,4
    c5fc:	000d883a 	mov	r6,zero
    c600:	100f883a 	mov	r7,r2
    c604:	803ee83a 	callr	r16
    c608:	003fe806 	br	c5ac <wcrtomb+0x60>

0000c60c <__ascii_wctomb>:
    c60c:	28000526 	beq	r5,zero,c624 <__ascii_wctomb+0x18>
    c610:	00803fc4 	movi	r2,255
    c614:	11800536 	bltu	r2,r6,c62c <__ascii_wctomb+0x20>
    c618:	29800005 	stb	r6,0(r5)
    c61c:	00800044 	movi	r2,1
    c620:	f800283a 	ret
    c624:	0005883a 	mov	r2,zero
    c628:	f800283a 	ret
    c62c:	00802284 	movi	r2,138
    c630:	20800015 	stw	r2,0(r4)
    c634:	00bfffc4 	movi	r2,-1
    c638:	f800283a 	ret

0000c63c <_wctomb_r>:
    c63c:	008000b4 	movhi	r2,2
    c640:	defff904 	addi	sp,sp,-28
    c644:	10b3c604 	addi	r2,r2,-12520
    c648:	dfc00615 	stw	ra,24(sp)
    c64c:	dc400515 	stw	r17,20(sp)
    c650:	dc000415 	stw	r16,16(sp)
    c654:	3823883a 	mov	r17,r7
    c658:	14000017 	ldw	r16,0(r2)
    c65c:	d9000115 	stw	r4,4(sp)
    c660:	d9400215 	stw	r5,8(sp)
    c664:	d9800315 	stw	r6,12(sp)
    c668:	0007c740 	call	7c74 <__locale_charset>
    c66c:	d9000117 	ldw	r4,4(sp)
    c670:	d9400217 	ldw	r5,8(sp)
    c674:	d9800317 	ldw	r6,12(sp)
    c678:	dc400015 	stw	r17,0(sp)
    c67c:	100f883a 	mov	r7,r2
    c680:	803ee83a 	callr	r16
    c684:	dfc00617 	ldw	ra,24(sp)
    c688:	dc400517 	ldw	r17,20(sp)
    c68c:	dc000417 	ldw	r16,16(sp)
    c690:	dec00704 	addi	sp,sp,28
    c694:	f800283a 	ret

0000c698 <__udivdi3>:
    c698:	defff504 	addi	sp,sp,-44
    c69c:	dcc00415 	stw	r19,16(sp)
    c6a0:	dc000115 	stw	r16,4(sp)
    c6a4:	dfc00a15 	stw	ra,40(sp)
    c6a8:	df000915 	stw	fp,36(sp)
    c6ac:	ddc00815 	stw	r23,32(sp)
    c6b0:	dd800715 	stw	r22,28(sp)
    c6b4:	dd400615 	stw	r21,24(sp)
    c6b8:	dd000515 	stw	r20,20(sp)
    c6bc:	dc800315 	stw	r18,12(sp)
    c6c0:	dc400215 	stw	r17,8(sp)
    c6c4:	2027883a 	mov	r19,r4
    c6c8:	2821883a 	mov	r16,r5
    c6cc:	3800471e 	bne	r7,zero,c7ec <__udivdi3+0x154>
    c6d0:	3025883a 	mov	r18,r6
    c6d4:	2023883a 	mov	r17,r4
    c6d8:	2980592e 	bgeu	r5,r6,c840 <__udivdi3+0x1a8>
    c6dc:	00bfffd4 	movui	r2,65535
    c6e0:	2829883a 	mov	r20,r5
    c6e4:	1180b236 	bltu	r2,r6,c9b0 <__udivdi3+0x318>
    c6e8:	00803fc4 	movi	r2,255
    c6ec:	1181622e 	bgeu	r2,r6,cc78 <__udivdi3+0x5e0>
    c6f0:	00800204 	movi	r2,8
    c6f4:	1007883a 	mov	r3,r2
    c6f8:	3084d83a 	srl	r2,r6,r2
    c6fc:	010000b4 	movhi	r4,2
    c700:	212ab104 	addi	r4,r4,-21820
    c704:	2085883a 	add	r2,r4,r2
    c708:	11000003 	ldbu	r4,0(r2)
    c70c:	20c9883a 	add	r4,r4,r3
    c710:	00c00804 	movi	r3,32
    c714:	1907c83a 	sub	r3,r3,r4
    c718:	18000526 	beq	r3,zero,c730 <__udivdi3+0x98>
    c71c:	80e0983a 	sll	r16,r16,r3
    c720:	9908d83a 	srl	r4,r19,r4
    c724:	30e4983a 	sll	r18,r6,r3
    c728:	98e2983a 	sll	r17,r19,r3
    c72c:	8128b03a 	or	r20,r16,r4
    c730:	902ad43a 	srli	r21,r18,16
    c734:	a009883a 	mov	r4,r20
    c738:	95bfffcc 	andi	r22,r18,65535
    c73c:	a80b883a 	mov	r5,r21
    c740:	00032200 	call	3220 <__umodsi3>
    c744:	a009883a 	mov	r4,r20
    c748:	a80b883a 	mov	r5,r21
    c74c:	102f883a 	mov	r23,r2
    c750:	00032180 	call	3218 <__udivsi3>
    c754:	1009883a 	mov	r4,r2
    c758:	b00b883a 	mov	r5,r22
    c75c:	1021883a 	mov	r16,r2
    c760:	000129c0 	call	129c <__mulsi3>
    c764:	b82e943a 	slli	r23,r23,16
    c768:	8808d43a 	srli	r4,r17,16
    c76c:	b906b03a 	or	r3,r23,r4
    c770:	1880052e 	bgeu	r3,r2,c788 <__udivdi3+0xf0>
    c774:	1c87883a 	add	r3,r3,r18
    c778:	813fffc4 	addi	r4,r16,-1
    c77c:	1c800136 	bltu	r3,r18,c784 <__udivdi3+0xec>
    c780:	18815236 	bltu	r3,r2,cccc <__udivdi3+0x634>
    c784:	2021883a 	mov	r16,r4
    c788:	18a7c83a 	sub	r19,r3,r2
    c78c:	9809883a 	mov	r4,r19
    c790:	a80b883a 	mov	r5,r21
    c794:	00032200 	call	3220 <__umodsi3>
    c798:	1029883a 	mov	r20,r2
    c79c:	9809883a 	mov	r4,r19
    c7a0:	a80b883a 	mov	r5,r21
    c7a4:	a028943a 	slli	r20,r20,16
    c7a8:	00032180 	call	3218 <__udivsi3>
    c7ac:	1009883a 	mov	r4,r2
    c7b0:	b00b883a 	mov	r5,r22
    c7b4:	8c7fffcc 	andi	r17,r17,65535
    c7b8:	1027883a 	mov	r19,r2
    c7bc:	a462b03a 	or	r17,r20,r17
    c7c0:	000129c0 	call	129c <__mulsi3>
    c7c4:	8880052e 	bgeu	r17,r2,c7dc <__udivdi3+0x144>
    c7c8:	8ca3883a 	add	r17,r17,r18
    c7cc:	98ffffc4 	addi	r3,r19,-1
    c7d0:	8c811036 	bltu	r17,r18,cc14 <__udivdi3+0x57c>
    c7d4:	88810f2e 	bgeu	r17,r2,cc14 <__udivdi3+0x57c>
    c7d8:	9cffff84 	addi	r19,r19,-2
    c7dc:	8020943a 	slli	r16,r16,16
    c7e0:	0007883a 	mov	r3,zero
    c7e4:	9c04b03a 	or	r2,r19,r16
    c7e8:	00006006 	br	c96c <__udivdi3+0x2d4>
    c7ec:	29c05d36 	bltu	r5,r7,c964 <__udivdi3+0x2cc>
    c7f0:	00bfffd4 	movui	r2,65535
    c7f4:	11c0692e 	bgeu	r2,r7,c99c <__udivdi3+0x304>
    c7f8:	00804034 	movhi	r2,256
    c7fc:	10bfffc4 	addi	r2,r2,-1
    c800:	11c10e2e 	bgeu	r2,r7,cc3c <__udivdi3+0x5a4>
    c804:	01400604 	movi	r5,24
    c808:	2811883a 	mov	r8,r5
    c80c:	394ad83a 	srl	r5,r7,r5
    c810:	008000b4 	movhi	r2,2
    c814:	10aab104 	addi	r2,r2,-21820
    c818:	114b883a 	add	r5,r2,r5
    c81c:	29400003 	ldbu	r5,0(r5)
    c820:	00c00804 	movi	r3,32
    c824:	2a0b883a 	add	r5,r5,r8
    c828:	196fc83a 	sub	r23,r3,r5
    c82c:	b8006b1e 	bne	r23,zero,c9dc <__udivdi3+0x344>
    c830:	3c011436 	bltu	r7,r16,cc84 <__udivdi3+0x5ec>
    c834:	9985403a 	cmpgeu	r2,r19,r6
    c838:	0007883a 	mov	r3,zero
    c83c:	00004b06 	br	c96c <__udivdi3+0x2d4>
    c840:	3000041e 	bne	r6,zero,c854 <__udivdi3+0x1bc>
    c844:	01000044 	movi	r4,1
    c848:	000b883a 	mov	r5,zero
    c84c:	00032180 	call	3218 <__udivsi3>
    c850:	1025883a 	mov	r18,r2
    c854:	00bfffd4 	movui	r2,65535
    c858:	14805b2e 	bgeu	r2,r18,c9c8 <__udivdi3+0x330>
    c85c:	00804034 	movhi	r2,256
    c860:	10bfffc4 	addi	r2,r2,-1
    c864:	1480fe2e 	bgeu	r2,r18,cc60 <__udivdi3+0x5c8>
    c868:	00800604 	movi	r2,24
    c86c:	1007883a 	mov	r3,r2
    c870:	9084d83a 	srl	r2,r18,r2
    c874:	010000b4 	movhi	r4,2
    c878:	212ab104 	addi	r4,r4,-21820
    c87c:	2085883a 	add	r2,r4,r2
    c880:	11800003 	ldbu	r6,0(r2)
    c884:	01c00804 	movi	r7,32
    c888:	30c7883a 	add	r3,r6,r3
    c88c:	38cfc83a 	sub	r7,r7,r3
    c890:	3800a71e 	bne	r7,zero,cb30 <__udivdi3+0x498>
    c894:	9028d43a 	srli	r20,r18,16
    c898:	84a1c83a 	sub	r16,r16,r18
    c89c:	957fffcc 	andi	r21,r18,65535
    c8a0:	00c00044 	movi	r3,1
    c8a4:	8009883a 	mov	r4,r16
    c8a8:	a00b883a 	mov	r5,r20
    c8ac:	d8c00015 	stw	r3,0(sp)
    c8b0:	00032200 	call	3220 <__umodsi3>
    c8b4:	8009883a 	mov	r4,r16
    c8b8:	a00b883a 	mov	r5,r20
    c8bc:	102d883a 	mov	r22,r2
    c8c0:	00032180 	call	3218 <__udivsi3>
    c8c4:	1009883a 	mov	r4,r2
    c8c8:	a80b883a 	mov	r5,r21
    c8cc:	1021883a 	mov	r16,r2
    c8d0:	000129c0 	call	129c <__mulsi3>
    c8d4:	b02c943a 	slli	r22,r22,16
    c8d8:	880ed43a 	srli	r7,r17,16
    c8dc:	d8c00017 	ldw	r3,0(sp)
    c8e0:	b1ccb03a 	or	r6,r22,r7
    c8e4:	3080052e 	bgeu	r6,r2,c8fc <__udivdi3+0x264>
    c8e8:	348d883a 	add	r6,r6,r18
    c8ec:	813fffc4 	addi	r4,r16,-1
    c8f0:	34800136 	bltu	r6,r18,c8f8 <__udivdi3+0x260>
    c8f4:	3080f236 	bltu	r6,r2,ccc0 <__udivdi3+0x628>
    c8f8:	2021883a 	mov	r16,r4
    c8fc:	30a7c83a 	sub	r19,r6,r2
    c900:	9809883a 	mov	r4,r19
    c904:	a00b883a 	mov	r5,r20
    c908:	d8c00015 	stw	r3,0(sp)
    c90c:	00032200 	call	3220 <__umodsi3>
    c910:	102d883a 	mov	r22,r2
    c914:	9809883a 	mov	r4,r19
    c918:	a00b883a 	mov	r5,r20
    c91c:	b02c943a 	slli	r22,r22,16
    c920:	00032180 	call	3218 <__udivsi3>
    c924:	1009883a 	mov	r4,r2
    c928:	a80b883a 	mov	r5,r21
    c92c:	8c7fffcc 	andi	r17,r17,65535
    c930:	1027883a 	mov	r19,r2
    c934:	b462b03a 	or	r17,r22,r17
    c938:	000129c0 	call	129c <__mulsi3>
    c93c:	d8c00017 	ldw	r3,0(sp)
    c940:	8880052e 	bgeu	r17,r2,c958 <__udivdi3+0x2c0>
    c944:	8ca3883a 	add	r17,r17,r18
    c948:	993fffc4 	addi	r4,r19,-1
    c94c:	8c80af36 	bltu	r17,r18,cc0c <__udivdi3+0x574>
    c950:	8880ae2e 	bgeu	r17,r2,cc0c <__udivdi3+0x574>
    c954:	9cffff84 	addi	r19,r19,-2
    c958:	8020943a 	slli	r16,r16,16
    c95c:	9c04b03a 	or	r2,r19,r16
    c960:	00000206 	br	c96c <__udivdi3+0x2d4>
    c964:	0007883a 	mov	r3,zero
    c968:	0005883a 	mov	r2,zero
    c96c:	dfc00a17 	ldw	ra,40(sp)
    c970:	df000917 	ldw	fp,36(sp)
    c974:	ddc00817 	ldw	r23,32(sp)
    c978:	dd800717 	ldw	r22,28(sp)
    c97c:	dd400617 	ldw	r21,24(sp)
    c980:	dd000517 	ldw	r20,20(sp)
    c984:	dcc00417 	ldw	r19,16(sp)
    c988:	dc800317 	ldw	r18,12(sp)
    c98c:	dc400217 	ldw	r17,8(sp)
    c990:	dc000117 	ldw	r16,4(sp)
    c994:	dec00b04 	addi	sp,sp,44
    c998:	f800283a 	ret
    c99c:	00803fc4 	movi	r2,255
    c9a0:	11c0a92e 	bgeu	r2,r7,cc48 <__udivdi3+0x5b0>
    c9a4:	01400204 	movi	r5,8
    c9a8:	2811883a 	mov	r8,r5
    c9ac:	003f9706 	br	c80c <__udivdi3+0x174>
    c9b0:	00804034 	movhi	r2,256
    c9b4:	10bfffc4 	addi	r2,r2,-1
    c9b8:	1180a62e 	bgeu	r2,r6,cc54 <__udivdi3+0x5bc>
    c9bc:	00800604 	movi	r2,24
    c9c0:	1007883a 	mov	r3,r2
    c9c4:	003f4c06 	br	c6f8 <__udivdi3+0x60>
    c9c8:	00803fc4 	movi	r2,255
    c9cc:	1480a72e 	bgeu	r2,r18,cc6c <__udivdi3+0x5d4>
    c9d0:	00800204 	movi	r2,8
    c9d4:	1007883a 	mov	r3,r2
    c9d8:	003fa506 	br	c870 <__udivdi3+0x1d8>
    c9dc:	3178d83a 	srl	fp,r6,r5
    c9e0:	3dce983a 	sll	r7,r7,r23
    c9e4:	8168d83a 	srl	r20,r16,r5
    c9e8:	9950d83a 	srl	r8,r19,r5
    c9ec:	3f38b03a 	or	fp,r7,fp
    c9f0:	e024d43a 	srli	r18,fp,16
    c9f4:	85e0983a 	sll	r16,r16,r23
    c9f8:	a009883a 	mov	r4,r20
    c9fc:	900b883a 	mov	r5,r18
    ca00:	8220b03a 	or	r16,r16,r8
    ca04:	35ea983a 	sll	r21,r6,r23
    ca08:	00032200 	call	3220 <__umodsi3>
    ca0c:	a009883a 	mov	r4,r20
    ca10:	900b883a 	mov	r5,r18
    ca14:	1023883a 	mov	r17,r2
    ca18:	e5bfffcc 	andi	r22,fp,65535
    ca1c:	00032180 	call	3218 <__udivsi3>
    ca20:	1009883a 	mov	r4,r2
    ca24:	b00b883a 	mov	r5,r22
    ca28:	1029883a 	mov	r20,r2
    ca2c:	000129c0 	call	129c <__mulsi3>
    ca30:	8806943a 	slli	r3,r17,16
    ca34:	8014d43a 	srli	r10,r16,16
    ca38:	1a92b03a 	or	r9,r3,r10
    ca3c:	4880042e 	bgeu	r9,r2,ca50 <__udivdi3+0x3b8>
    ca40:	4f13883a 	add	r9,r9,fp
    ca44:	a0ffffc4 	addi	r3,r20,-1
    ca48:	4f00952e 	bgeu	r9,fp,cca0 <__udivdi3+0x608>
    ca4c:	1829883a 	mov	r20,r3
    ca50:	48a3c83a 	sub	r17,r9,r2
    ca54:	8809883a 	mov	r4,r17
    ca58:	900b883a 	mov	r5,r18
    ca5c:	00032200 	call	3220 <__umodsi3>
    ca60:	8809883a 	mov	r4,r17
    ca64:	900b883a 	mov	r5,r18
    ca68:	d8800015 	stw	r2,0(sp)
    ca6c:	00032180 	call	3218 <__udivsi3>
    ca70:	1009883a 	mov	r4,r2
    ca74:	b00b883a 	mov	r5,r22
    ca78:	1023883a 	mov	r17,r2
    ca7c:	000129c0 	call	129c <__mulsi3>
    ca80:	d8c00017 	ldw	r3,0(sp)
    ca84:	823fffcc 	andi	r8,r16,65535
    ca88:	1806943a 	slli	r3,r3,16
    ca8c:	1a20b03a 	or	r16,r3,r8
    ca90:	8080042e 	bgeu	r16,r2,caa4 <__udivdi3+0x40c>
    ca94:	8721883a 	add	r16,r16,fp
    ca98:	88ffffc4 	addi	r3,r17,-1
    ca9c:	87007c2e 	bgeu	r16,fp,cc90 <__udivdi3+0x5f8>
    caa0:	1823883a 	mov	r17,r3
    caa4:	a028943a 	slli	r20,r20,16
    caa8:	acbfffcc 	andi	r18,r21,65535
    caac:	900b883a 	mov	r5,r18
    cab0:	8d28b03a 	or	r20,r17,r20
    cab4:	a022d43a 	srli	r17,r20,16
    cab8:	a5bfffcc 	andi	r22,r20,65535
    cabc:	b009883a 	mov	r4,r22
    cac0:	a82ad43a 	srli	r21,r21,16
    cac4:	80a1c83a 	sub	r16,r16,r2
    cac8:	000129c0 	call	129c <__mulsi3>
    cacc:	8809883a 	mov	r4,r17
    cad0:	900b883a 	mov	r5,r18
    cad4:	1039883a 	mov	fp,r2
    cad8:	000129c0 	call	129c <__mulsi3>
    cadc:	8809883a 	mov	r4,r17
    cae0:	a80b883a 	mov	r5,r21
    cae4:	1025883a 	mov	r18,r2
    cae8:	000129c0 	call	129c <__mulsi3>
    caec:	b009883a 	mov	r4,r22
    caf0:	a80b883a 	mov	r5,r21
    caf4:	1023883a 	mov	r17,r2
    caf8:	000129c0 	call	129c <__mulsi3>
    cafc:	e006d43a 	srli	r3,fp,16
    cb00:	9085883a 	add	r2,r18,r2
    cb04:	10c7883a 	add	r3,r2,r3
    cb08:	1c80022e 	bgeu	r3,r18,cb14 <__udivdi3+0x47c>
    cb0c:	00800074 	movhi	r2,1
    cb10:	88a3883a 	add	r17,r17,r2
    cb14:	1808d43a 	srli	r4,r3,16
    cb18:	8909883a 	add	r4,r17,r4
    cb1c:	81004436 	bltu	r16,r4,cc30 <__udivdi3+0x598>
    cb20:	81003e26 	beq	r16,r4,cc1c <__udivdi3+0x584>
    cb24:	a005883a 	mov	r2,r20
    cb28:	0007883a 	mov	r3,zero
    cb2c:	003f8f06 	br	c96c <__udivdi3+0x2d4>
    cb30:	91e4983a 	sll	r18,r18,r7
    cb34:	80eed83a 	srl	r23,r16,r3
    cb38:	81cc983a 	sll	r6,r16,r7
    cb3c:	9028d43a 	srli	r20,r18,16
    cb40:	98c6d83a 	srl	r3,r19,r3
    cb44:	b809883a 	mov	r4,r23
    cb48:	a00b883a 	mov	r5,r20
    cb4c:	30ecb03a 	or	r22,r6,r3
    cb50:	99e2983a 	sll	r17,r19,r7
    cb54:	00032200 	call	3220 <__umodsi3>
    cb58:	b809883a 	mov	r4,r23
    cb5c:	a00b883a 	mov	r5,r20
    cb60:	1021883a 	mov	r16,r2
    cb64:	957fffcc 	andi	r21,r18,65535
    cb68:	00032180 	call	3218 <__udivsi3>
    cb6c:	a80b883a 	mov	r5,r21
    cb70:	1009883a 	mov	r4,r2
    cb74:	102f883a 	mov	r23,r2
    cb78:	000129c0 	call	129c <__mulsi3>
    cb7c:	8020943a 	slli	r16,r16,16
    cb80:	b00ad43a 	srli	r5,r22,16
    cb84:	814cb03a 	or	r6,r16,r5
    cb88:	3080062e 	bgeu	r6,r2,cba4 <__udivdi3+0x50c>
    cb8c:	348d883a 	add	r6,r6,r18
    cb90:	b8ffffc4 	addi	r3,r23,-1
    cb94:	34804836 	bltu	r6,r18,ccb8 <__udivdi3+0x620>
    cb98:	3080472e 	bgeu	r6,r2,ccb8 <__udivdi3+0x620>
    cb9c:	bdffff84 	addi	r23,r23,-2
    cba0:	348d883a 	add	r6,r6,r18
    cba4:	30a7c83a 	sub	r19,r6,r2
    cba8:	9809883a 	mov	r4,r19
    cbac:	a00b883a 	mov	r5,r20
    cbb0:	00032200 	call	3220 <__umodsi3>
    cbb4:	9809883a 	mov	r4,r19
    cbb8:	a00b883a 	mov	r5,r20
    cbbc:	1039883a 	mov	fp,r2
    cbc0:	00032180 	call	3218 <__udivsi3>
    cbc4:	1009883a 	mov	r4,r2
    cbc8:	a80b883a 	mov	r5,r21
    cbcc:	e038943a 	slli	fp,fp,16
    cbd0:	1027883a 	mov	r19,r2
    cbd4:	000129c0 	call	129c <__mulsi3>
    cbd8:	b1bfffcc 	andi	r6,r22,65535
    cbdc:	e18cb03a 	or	r6,fp,r6
    cbe0:	3080062e 	bgeu	r6,r2,cbfc <__udivdi3+0x564>
    cbe4:	348d883a 	add	r6,r6,r18
    cbe8:	98ffffc4 	addi	r3,r19,-1
    cbec:	34803036 	bltu	r6,r18,ccb0 <__udivdi3+0x618>
    cbf0:	30802f2e 	bgeu	r6,r2,ccb0 <__udivdi3+0x618>
    cbf4:	9cffff84 	addi	r19,r19,-2
    cbf8:	348d883a 	add	r6,r6,r18
    cbfc:	b82e943a 	slli	r23,r23,16
    cc00:	30a1c83a 	sub	r16,r6,r2
    cc04:	9dc6b03a 	or	r3,r19,r23
    cc08:	003f2606 	br	c8a4 <__udivdi3+0x20c>
    cc0c:	2027883a 	mov	r19,r4
    cc10:	003f5106 	br	c958 <__udivdi3+0x2c0>
    cc14:	1827883a 	mov	r19,r3
    cc18:	003ef006 	br	c7dc <__udivdi3+0x144>
    cc1c:	1808943a 	slli	r4,r3,16
    cc20:	9dc6983a 	sll	r3,r19,r23
    cc24:	e73fffcc 	andi	fp,fp,65535
    cc28:	2709883a 	add	r4,r4,fp
    cc2c:	193fbd2e 	bgeu	r3,r4,cb24 <__udivdi3+0x48c>
    cc30:	a0bfffc4 	addi	r2,r20,-1
    cc34:	0007883a 	mov	r3,zero
    cc38:	003f4c06 	br	c96c <__udivdi3+0x2d4>
    cc3c:	01400404 	movi	r5,16
    cc40:	2811883a 	mov	r8,r5
    cc44:	003ef106 	br	c80c <__udivdi3+0x174>
    cc48:	000b883a 	mov	r5,zero
    cc4c:	0011883a 	mov	r8,zero
    cc50:	003eee06 	br	c80c <__udivdi3+0x174>
    cc54:	00800404 	movi	r2,16
    cc58:	1007883a 	mov	r3,r2
    cc5c:	003ea606 	br	c6f8 <__udivdi3+0x60>
    cc60:	00800404 	movi	r2,16
    cc64:	1007883a 	mov	r3,r2
    cc68:	003f0106 	br	c870 <__udivdi3+0x1d8>
    cc6c:	0005883a 	mov	r2,zero
    cc70:	0007883a 	mov	r3,zero
    cc74:	003efe06 	br	c870 <__udivdi3+0x1d8>
    cc78:	0005883a 	mov	r2,zero
    cc7c:	0007883a 	mov	r3,zero
    cc80:	003e9d06 	br	c6f8 <__udivdi3+0x60>
    cc84:	0007883a 	mov	r3,zero
    cc88:	00800044 	movi	r2,1
    cc8c:	003f3706 	br	c96c <__udivdi3+0x2d4>
    cc90:	80bf832e 	bgeu	r16,r2,caa0 <__udivdi3+0x408>
    cc94:	8c7fff84 	addi	r17,r17,-2
    cc98:	8721883a 	add	r16,r16,fp
    cc9c:	003f8106 	br	caa4 <__udivdi3+0x40c>
    cca0:	48bf6a2e 	bgeu	r9,r2,ca4c <__udivdi3+0x3b4>
    cca4:	a53fff84 	addi	r20,r20,-2
    cca8:	4f13883a 	add	r9,r9,fp
    ccac:	003f6806 	br	ca50 <__udivdi3+0x3b8>
    ccb0:	1827883a 	mov	r19,r3
    ccb4:	003fd106 	br	cbfc <__udivdi3+0x564>
    ccb8:	182f883a 	mov	r23,r3
    ccbc:	003fb906 	br	cba4 <__udivdi3+0x50c>
    ccc0:	843fff84 	addi	r16,r16,-2
    ccc4:	348d883a 	add	r6,r6,r18
    ccc8:	003f0c06 	br	c8fc <__udivdi3+0x264>
    cccc:	843fff84 	addi	r16,r16,-2
    ccd0:	1c87883a 	add	r3,r3,r18
    ccd4:	003eac06 	br	c788 <__udivdi3+0xf0>

0000ccd8 <__umoddi3>:
    ccd8:	defff404 	addi	sp,sp,-48
    ccdc:	dd800815 	stw	r22,32(sp)
    cce0:	dc400315 	stw	r17,12(sp)
    cce4:	dc000215 	stw	r16,8(sp)
    cce8:	dfc00b15 	stw	ra,44(sp)
    ccec:	df000a15 	stw	fp,40(sp)
    ccf0:	ddc00915 	stw	r23,36(sp)
    ccf4:	dd400715 	stw	r21,28(sp)
    ccf8:	dd000615 	stw	r20,24(sp)
    ccfc:	dcc00515 	stw	r19,20(sp)
    cd00:	dc800415 	stw	r18,16(sp)
    cd04:	2021883a 	mov	r16,r4
    cd08:	2823883a 	mov	r17,r5
    cd0c:	282d883a 	mov	r22,r5
    cd10:	38003c1e 	bne	r7,zero,ce04 <__umoddi3+0x12c>
    cd14:	3027883a 	mov	r19,r6
    cd18:	2029883a 	mov	r20,r4
    cd1c:	2980522e 	bgeu	r5,r6,ce68 <__umoddi3+0x190>
    cd20:	00bfffd4 	movui	r2,65535
    cd24:	1180a436 	bltu	r2,r6,cfb8 <__umoddi3+0x2e0>
    cd28:	00803fc4 	movi	r2,255
    cd2c:	11815e2e 	bgeu	r2,r6,d2a8 <__umoddi3+0x5d0>
    cd30:	01400204 	movi	r5,8
    cd34:	2805883a 	mov	r2,r5
    cd38:	314ad83a 	srl	r5,r6,r5
    cd3c:	00c000b4 	movhi	r3,2
    cd40:	18eab104 	addi	r3,r3,-21820
    cd44:	194b883a 	add	r5,r3,r5
    cd48:	29000003 	ldbu	r4,0(r5)
    cd4c:	2089883a 	add	r4,r4,r2
    cd50:	00800804 	movi	r2,32
    cd54:	1105c83a 	sub	r2,r2,r4
    cd58:	10010c26 	beq	r2,zero,d18c <__umoddi3+0x4b4>
    cd5c:	88a2983a 	sll	r17,r17,r2
    cd60:	8108d83a 	srl	r4,r16,r4
    cd64:	30a6983a 	sll	r19,r6,r2
    cd68:	80a8983a 	sll	r20,r16,r2
    cd6c:	1025883a 	mov	r18,r2
    cd70:	892cb03a 	or	r22,r17,r4
    cd74:	9822d43a 	srli	r17,r19,16
    cd78:	b009883a 	mov	r4,r22
    cd7c:	9d7fffcc 	andi	r21,r19,65535
    cd80:	880b883a 	mov	r5,r17
    cd84:	00032200 	call	3220 <__umodsi3>
    cd88:	b009883a 	mov	r4,r22
    cd8c:	880b883a 	mov	r5,r17
    cd90:	102f883a 	mov	r23,r2
    cd94:	00032180 	call	3218 <__udivsi3>
    cd98:	1009883a 	mov	r4,r2
    cd9c:	a80b883a 	mov	r5,r21
    cda0:	000129c0 	call	129c <__mulsi3>
    cda4:	b82e943a 	slli	r23,r23,16
    cda8:	a008d43a 	srli	r4,r20,16
    cdac:	b906b03a 	or	r3,r23,r4
    cdb0:	1880042e 	bgeu	r3,r2,cdc4 <__umoddi3+0xec>
    cdb4:	1cc7883a 	add	r3,r3,r19
    cdb8:	1cc00236 	bltu	r3,r19,cdc4 <__umoddi3+0xec>
    cdbc:	1880012e 	bgeu	r3,r2,cdc4 <__umoddi3+0xec>
    cdc0:	1cc7883a 	add	r3,r3,r19
    cdc4:	18a1c83a 	sub	r16,r3,r2
    cdc8:	8009883a 	mov	r4,r16
    cdcc:	880b883a 	mov	r5,r17
    cdd0:	00032200 	call	3220 <__umodsi3>
    cdd4:	8009883a 	mov	r4,r16
    cdd8:	880b883a 	mov	r5,r17
    cddc:	102d883a 	mov	r22,r2
    cde0:	00032180 	call	3218 <__udivsi3>
    cde4:	1009883a 	mov	r4,r2
    cde8:	a80b883a 	mov	r5,r21
    cdec:	b02c943a 	slli	r22,r22,16
    cdf0:	000129c0 	call	129c <__mulsi3>
    cdf4:	a13fffcc 	andi	r4,r20,65535
    cdf8:	b106b03a 	or	r3,r22,r4
    cdfc:	1880572e 	bgeu	r3,r2,cf5c <__umoddi3+0x284>
    ce00:	00005206 	br	cf4c <__umoddi3+0x274>
    ce04:	29c05936 	bltu	r5,r7,cf6c <__umoddi3+0x294>
    ce08:	00bfffd4 	movui	r2,65535
    ce0c:	11c0652e 	bgeu	r2,r7,cfa4 <__umoddi3+0x2cc>
    ce10:	00804034 	movhi	r2,256
    ce14:	10bfffc4 	addi	r2,r2,-1
    ce18:	11c1172e 	bgeu	r2,r7,d278 <__umoddi3+0x5a0>
    ce1c:	01400604 	movi	r5,24
    ce20:	282b883a 	mov	r21,r5
    ce24:	394ad83a 	srl	r5,r7,r5
    ce28:	00c000b4 	movhi	r3,2
    ce2c:	18eab104 	addi	r3,r3,-21820
    ce30:	194b883a 	add	r5,r3,r5
    ce34:	28800003 	ldbu	r2,0(r5)
    ce38:	00c00804 	movi	r3,32
    ce3c:	156b883a 	add	r21,r2,r21
    ce40:	1d69c83a 	sub	r20,r3,r21
    ce44:	a000671e 	bne	r20,zero,cfe4 <__umoddi3+0x30c>
    ce48:	3c400136 	bltu	r7,r17,ce50 <__umoddi3+0x178>
    ce4c:	81812336 	bltu	r16,r6,d2dc <__umoddi3+0x604>
    ce50:	8185c83a 	sub	r2,r16,r6
    ce54:	89e3c83a 	sub	r17,r17,r7
    ce58:	8087803a 	cmpltu	r3,r16,r2
    ce5c:	88edc83a 	sub	r22,r17,r3
    ce60:	b007883a 	mov	r3,r22
    ce64:	00004306 	br	cf74 <__umoddi3+0x29c>
    ce68:	3000041e 	bne	r6,zero,ce7c <__umoddi3+0x1a4>
    ce6c:	01000044 	movi	r4,1
    ce70:	000b883a 	mov	r5,zero
    ce74:	00032180 	call	3218 <__udivsi3>
    ce78:	1027883a 	mov	r19,r2
    ce7c:	00bfffd4 	movui	r2,65535
    ce80:	14c0532e 	bgeu	r2,r19,cfd0 <__umoddi3+0x2f8>
    ce84:	00804034 	movhi	r2,256
    ce88:	10bfffc4 	addi	r2,r2,-1
    ce8c:	14c1032e 	bgeu	r2,r19,d29c <__umoddi3+0x5c4>
    ce90:	00800604 	movi	r2,24
    ce94:	1007883a 	mov	r3,r2
    ce98:	9884d83a 	srl	r2,r19,r2
    ce9c:	010000b4 	movhi	r4,2
    cea0:	212ab104 	addi	r4,r4,-21820
    cea4:	2085883a 	add	r2,r4,r2
    cea8:	11000003 	ldbu	r4,0(r2)
    ceac:	00800804 	movi	r2,32
    ceb0:	20c7883a 	add	r3,r4,r3
    ceb4:	10c5c83a 	sub	r2,r2,r3
    ceb8:	1000b61e 	bne	r2,zero,d194 <__umoddi3+0x4bc>
    cebc:	982ad43a 	srli	r21,r19,16
    cec0:	8ce3c83a 	sub	r17,r17,r19
    cec4:	9dbfffcc 	andi	r22,r19,65535
    cec8:	0025883a 	mov	r18,zero
    cecc:	8809883a 	mov	r4,r17
    ced0:	a80b883a 	mov	r5,r21
    ced4:	00032200 	call	3220 <__umodsi3>
    ced8:	8809883a 	mov	r4,r17
    cedc:	a80b883a 	mov	r5,r21
    cee0:	102f883a 	mov	r23,r2
    cee4:	00032180 	call	3218 <__udivsi3>
    cee8:	1009883a 	mov	r4,r2
    ceec:	b00b883a 	mov	r5,r22
    cef0:	000129c0 	call	129c <__mulsi3>
    cef4:	b82e943a 	slli	r23,r23,16
    cef8:	a008d43a 	srli	r4,r20,16
    cefc:	b906b03a 	or	r3,r23,r4
    cf00:	1880032e 	bgeu	r3,r2,cf10 <__umoddi3+0x238>
    cf04:	1cc7883a 	add	r3,r3,r19
    cf08:	1cc00136 	bltu	r3,r19,cf10 <__umoddi3+0x238>
    cf0c:	1880f136 	bltu	r3,r2,d2d4 <__umoddi3+0x5fc>
    cf10:	18a1c83a 	sub	r16,r3,r2
    cf14:	8009883a 	mov	r4,r16
    cf18:	a80b883a 	mov	r5,r21
    cf1c:	00032200 	call	3220 <__umodsi3>
    cf20:	8009883a 	mov	r4,r16
    cf24:	a80b883a 	mov	r5,r21
    cf28:	1023883a 	mov	r17,r2
    cf2c:	00032180 	call	3218 <__udivsi3>
    cf30:	1009883a 	mov	r4,r2
    cf34:	b00b883a 	mov	r5,r22
    cf38:	8822943a 	slli	r17,r17,16
    cf3c:	000129c0 	call	129c <__mulsi3>
    cf40:	a13fffcc 	andi	r4,r20,65535
    cf44:	8906b03a 	or	r3,r17,r4
    cf48:	1880042e 	bgeu	r3,r2,cf5c <__umoddi3+0x284>
    cf4c:	1cc7883a 	add	r3,r3,r19
    cf50:	1cc00236 	bltu	r3,r19,cf5c <__umoddi3+0x284>
    cf54:	1880012e 	bgeu	r3,r2,cf5c <__umoddi3+0x284>
    cf58:	1cc7883a 	add	r3,r3,r19
    cf5c:	1887c83a 	sub	r3,r3,r2
    cf60:	1c84d83a 	srl	r2,r3,r18
    cf64:	0007883a 	mov	r3,zero
    cf68:	00000206 	br	cf74 <__umoddi3+0x29c>
    cf6c:	2005883a 	mov	r2,r4
    cf70:	2807883a 	mov	r3,r5
    cf74:	dfc00b17 	ldw	ra,44(sp)
    cf78:	df000a17 	ldw	fp,40(sp)
    cf7c:	ddc00917 	ldw	r23,36(sp)
    cf80:	dd800817 	ldw	r22,32(sp)
    cf84:	dd400717 	ldw	r21,28(sp)
    cf88:	dd000617 	ldw	r20,24(sp)
    cf8c:	dcc00517 	ldw	r19,20(sp)
    cf90:	dc800417 	ldw	r18,16(sp)
    cf94:	dc400317 	ldw	r17,12(sp)
    cf98:	dc000217 	ldw	r16,8(sp)
    cf9c:	dec00c04 	addi	sp,sp,48
    cfa0:	f800283a 	ret
    cfa4:	00803fc4 	movi	r2,255
    cfa8:	11c0b02e 	bgeu	r2,r7,d26c <__umoddi3+0x594>
    cfac:	01400204 	movi	r5,8
    cfb0:	282b883a 	mov	r21,r5
    cfb4:	003f9b06 	br	ce24 <__umoddi3+0x14c>
    cfb8:	00804034 	movhi	r2,256
    cfbc:	10bfffc4 	addi	r2,r2,-1
    cfc0:	1180b02e 	bgeu	r2,r6,d284 <__umoddi3+0x5ac>
    cfc4:	01400604 	movi	r5,24
    cfc8:	2805883a 	mov	r2,r5
    cfcc:	003f5a06 	br	cd38 <__umoddi3+0x60>
    cfd0:	00803fc4 	movi	r2,255
    cfd4:	14c0ae2e 	bgeu	r2,r19,d290 <__umoddi3+0x5b8>
    cfd8:	00800204 	movi	r2,8
    cfdc:	1007883a 	mov	r3,r2
    cfe0:	003fad06 	br	ce98 <__umoddi3+0x1c0>
    cfe4:	3d0a983a 	sll	r5,r7,r20
    cfe8:	356cd83a 	srl	r22,r6,r21
    cfec:	8d78d83a 	srl	fp,r17,r21
    cff0:	8d10983a 	sll	r8,r17,r20
    cff4:	2dacb03a 	or	r22,r5,r22
    cff8:	b02ed43a 	srli	r23,r22,16
    cffc:	8564d83a 	srl	r18,r16,r21
    d000:	e009883a 	mov	r4,fp
    d004:	b80b883a 	mov	r5,r23
    d008:	44a4b03a 	or	r18,r8,r18
    d00c:	3526983a 	sll	r19,r6,r20
    d010:	00032200 	call	3220 <__umodsi3>
    d014:	e009883a 	mov	r4,fp
    d018:	b80b883a 	mov	r5,r23
    d01c:	b47fffcc 	andi	r17,r22,65535
    d020:	d8800015 	stw	r2,0(sp)
    d024:	00032180 	call	3218 <__udivsi3>
    d028:	1009883a 	mov	r4,r2
    d02c:	880b883a 	mov	r5,r17
    d030:	1039883a 	mov	fp,r2
    d034:	000129c0 	call	129c <__mulsi3>
    d038:	d9800017 	ldw	r6,0(sp)
    d03c:	9008d43a 	srli	r4,r18,16
    d040:	8520983a 	sll	r16,r16,r20
    d044:	300c943a 	slli	r6,r6,16
    d048:	3106b03a 	or	r3,r6,r4
    d04c:	1880042e 	bgeu	r3,r2,d060 <__umoddi3+0x388>
    d050:	1d87883a 	add	r3,r3,r22
    d054:	e13fffc4 	addi	r4,fp,-1
    d058:	1d809a2e 	bgeu	r3,r22,d2c4 <__umoddi3+0x5ec>
    d05c:	2039883a 	mov	fp,r4
    d060:	1887c83a 	sub	r3,r3,r2
    d064:	1809883a 	mov	r4,r3
    d068:	b80b883a 	mov	r5,r23
    d06c:	d8c00115 	stw	r3,4(sp)
    d070:	00032200 	call	3220 <__umodsi3>
    d074:	d8c00117 	ldw	r3,4(sp)
    d078:	b80b883a 	mov	r5,r23
    d07c:	d8800015 	stw	r2,0(sp)
    d080:	1809883a 	mov	r4,r3
    d084:	00032180 	call	3218 <__udivsi3>
    d088:	880b883a 	mov	r5,r17
    d08c:	1009883a 	mov	r4,r2
    d090:	102f883a 	mov	r23,r2
    d094:	000129c0 	call	129c <__mulsi3>
    d098:	d9800017 	ldw	r6,0(sp)
    d09c:	947fffcc 	andi	r17,r18,65535
    d0a0:	300c943a 	slli	r6,r6,16
    d0a4:	3464b03a 	or	r18,r6,r17
    d0a8:	9080042e 	bgeu	r18,r2,d0bc <__umoddi3+0x3e4>
    d0ac:	95a5883a 	add	r18,r18,r22
    d0b0:	b8ffffc4 	addi	r3,r23,-1
    d0b4:	95807f2e 	bgeu	r18,r22,d2b4 <__umoddi3+0x5dc>
    d0b8:	182f883a 	mov	r23,r3
    d0bc:	e038943a 	slli	fp,fp,16
    d0c0:	980cd43a 	srli	r6,r19,16
    d0c4:	98ffffcc 	andi	r3,r19,65535
    d0c8:	bf38b03a 	or	fp,r23,fp
    d0cc:	e02ed43a 	srli	r23,fp,16
    d0d0:	e73fffcc 	andi	fp,fp,65535
    d0d4:	180b883a 	mov	r5,r3
    d0d8:	e009883a 	mov	r4,fp
    d0dc:	d9800015 	stw	r6,0(sp)
    d0e0:	d8c00115 	stw	r3,4(sp)
    d0e4:	90a5c83a 	sub	r18,r18,r2
    d0e8:	000129c0 	call	129c <__mulsi3>
    d0ec:	d8c00117 	ldw	r3,4(sp)
    d0f0:	b809883a 	mov	r4,r23
    d0f4:	1023883a 	mov	r17,r2
    d0f8:	180b883a 	mov	r5,r3
    d0fc:	000129c0 	call	129c <__mulsi3>
    d100:	d9800017 	ldw	r6,0(sp)
    d104:	b809883a 	mov	r4,r23
    d108:	d8800115 	stw	r2,4(sp)
    d10c:	300b883a 	mov	r5,r6
    d110:	302f883a 	mov	r23,r6
    d114:	000129c0 	call	129c <__mulsi3>
    d118:	e009883a 	mov	r4,fp
    d11c:	b80b883a 	mov	r5,r23
    d120:	d8800015 	stw	r2,0(sp)
    d124:	000129c0 	call	129c <__mulsi3>
    d128:	d8c00117 	ldw	r3,4(sp)
    d12c:	880cd43a 	srli	r6,r17,16
    d130:	d9c00017 	ldw	r7,0(sp)
    d134:	1885883a 	add	r2,r3,r2
    d138:	118d883a 	add	r6,r2,r6
    d13c:	30c0022e 	bgeu	r6,r3,d148 <__umoddi3+0x470>
    d140:	00800074 	movhi	r2,1
    d144:	388f883a 	add	r7,r7,r2
    d148:	3006d43a 	srli	r3,r6,16
    d14c:	300c943a 	slli	r6,r6,16
    d150:	8c7fffcc 	andi	r17,r17,65535
    d154:	38c7883a 	add	r3,r7,r3
    d158:	3463883a 	add	r17,r6,r17
    d15c:	90c03d36 	bltu	r18,r3,d254 <__umoddi3+0x57c>
    d160:	90c06026 	beq	r18,r3,d2e4 <__umoddi3+0x60c>
    d164:	90c9c83a 	sub	r4,r18,r3
    d168:	880f883a 	mov	r7,r17
    d16c:	81cfc83a 	sub	r7,r16,r7
    d170:	81c7803a 	cmpltu	r3,r16,r7
    d174:	20c7c83a 	sub	r3,r4,r3
    d178:	1d44983a 	sll	r2,r3,r21
    d17c:	3d0ed83a 	srl	r7,r7,r20
    d180:	1d06d83a 	srl	r3,r3,r20
    d184:	11c4b03a 	or	r2,r2,r7
    d188:	003f7a06 	br	cf74 <__umoddi3+0x29c>
    d18c:	0025883a 	mov	r18,zero
    d190:	003ef806 	br	cd74 <__umoddi3+0x9c>
    d194:	98a6983a 	sll	r19,r19,r2
    d198:	88e8d83a 	srl	r20,r17,r3
    d19c:	80c6d83a 	srl	r3,r16,r3
    d1a0:	982ad43a 	srli	r21,r19,16
    d1a4:	88a2983a 	sll	r17,r17,r2
    d1a8:	a009883a 	mov	r4,r20
    d1ac:	a80b883a 	mov	r5,r21
    d1b0:	88eeb03a 	or	r23,r17,r3
    d1b4:	1025883a 	mov	r18,r2
    d1b8:	00032200 	call	3220 <__umodsi3>
    d1bc:	a009883a 	mov	r4,r20
    d1c0:	a80b883a 	mov	r5,r21
    d1c4:	1023883a 	mov	r17,r2
    d1c8:	9dbfffcc 	andi	r22,r19,65535
    d1cc:	00032180 	call	3218 <__udivsi3>
    d1d0:	1009883a 	mov	r4,r2
    d1d4:	b00b883a 	mov	r5,r22
    d1d8:	000129c0 	call	129c <__mulsi3>
    d1dc:	8822943a 	slli	r17,r17,16
    d1e0:	b808d43a 	srli	r4,r23,16
    d1e4:	84a8983a 	sll	r20,r16,r18
    d1e8:	8906b03a 	or	r3,r17,r4
    d1ec:	1880042e 	bgeu	r3,r2,d200 <__umoddi3+0x528>
    d1f0:	1cc7883a 	add	r3,r3,r19
    d1f4:	1cc00236 	bltu	r3,r19,d200 <__umoddi3+0x528>
    d1f8:	1880012e 	bgeu	r3,r2,d200 <__umoddi3+0x528>
    d1fc:	1cc7883a 	add	r3,r3,r19
    d200:	18a1c83a 	sub	r16,r3,r2
    d204:	8009883a 	mov	r4,r16
    d208:	a80b883a 	mov	r5,r21
    d20c:	00032200 	call	3220 <__umodsi3>
    d210:	8009883a 	mov	r4,r16
    d214:	a80b883a 	mov	r5,r21
    d218:	1039883a 	mov	fp,r2
    d21c:	00032180 	call	3218 <__udivsi3>
    d220:	1009883a 	mov	r4,r2
    d224:	b00b883a 	mov	r5,r22
    d228:	000129c0 	call	129c <__mulsi3>
    d22c:	e006943a 	slli	r3,fp,16
    d230:	b93fffcc 	andi	r4,r23,65535
    d234:	1906b03a 	or	r3,r3,r4
    d238:	1880042e 	bgeu	r3,r2,d24c <__umoddi3+0x574>
    d23c:	1cc7883a 	add	r3,r3,r19
    d240:	1cc00236 	bltu	r3,r19,d24c <__umoddi3+0x574>
    d244:	1880012e 	bgeu	r3,r2,d24c <__umoddi3+0x574>
    d248:	1cc7883a 	add	r3,r3,r19
    d24c:	18a3c83a 	sub	r17,r3,r2
    d250:	003f1e06 	br	cecc <__umoddi3+0x1f4>
    d254:	8ccfc83a 	sub	r7,r17,r19
    d258:	1d89c83a 	sub	r4,r3,r22
    d25c:	89e3803a 	cmpltu	r17,r17,r7
    d260:	2463c83a 	sub	r17,r4,r17
    d264:	9449c83a 	sub	r4,r18,r17
    d268:	003fc006 	br	d16c <__umoddi3+0x494>
    d26c:	000b883a 	mov	r5,zero
    d270:	002b883a 	mov	r21,zero
    d274:	003eeb06 	br	ce24 <__umoddi3+0x14c>
    d278:	01400404 	movi	r5,16
    d27c:	282b883a 	mov	r21,r5
    d280:	003ee806 	br	ce24 <__umoddi3+0x14c>
    d284:	01400404 	movi	r5,16
    d288:	2805883a 	mov	r2,r5
    d28c:	003eaa06 	br	cd38 <__umoddi3+0x60>
    d290:	0005883a 	mov	r2,zero
    d294:	0007883a 	mov	r3,zero
    d298:	003eff06 	br	ce98 <__umoddi3+0x1c0>
    d29c:	00800404 	movi	r2,16
    d2a0:	1007883a 	mov	r3,r2
    d2a4:	003efc06 	br	ce98 <__umoddi3+0x1c0>
    d2a8:	000b883a 	mov	r5,zero
    d2ac:	0005883a 	mov	r2,zero
    d2b0:	003ea106 	br	cd38 <__umoddi3+0x60>
    d2b4:	90bf802e 	bgeu	r18,r2,d0b8 <__umoddi3+0x3e0>
    d2b8:	bdffff84 	addi	r23,r23,-2
    d2bc:	95a5883a 	add	r18,r18,r22
    d2c0:	003f7e06 	br	d0bc <__umoddi3+0x3e4>
    d2c4:	18bf652e 	bgeu	r3,r2,d05c <__umoddi3+0x384>
    d2c8:	e73fff84 	addi	fp,fp,-2
    d2cc:	1d87883a 	add	r3,r3,r22
    d2d0:	003f6306 	br	d060 <__umoddi3+0x388>
    d2d4:	1cc7883a 	add	r3,r3,r19
    d2d8:	003f0d06 	br	cf10 <__umoddi3+0x238>
    d2dc:	8005883a 	mov	r2,r16
    d2e0:	003edf06 	br	ce60 <__umoddi3+0x188>
    d2e4:	847fdb36 	bltu	r16,r17,d254 <__umoddi3+0x57c>
    d2e8:	880f883a 	mov	r7,r17
    d2ec:	0009883a 	mov	r4,zero
    d2f0:	003f9e06 	br	d16c <__umoddi3+0x494>

0000d2f4 <__adddf3>:
    d2f4:	02000434 	movhi	r8,16
    d2f8:	423fffc4 	addi	r8,r8,-1
    d2fc:	defffb04 	addi	sp,sp,-20
    d300:	2a12703a 	and	r9,r5,r8
    d304:	2806d7fa 	srli	r3,r5,31
    d308:	3a10703a 	and	r8,r7,r8
    d30c:	3804d53a 	srli	r2,r7,20
    d310:	3014d77a 	srli	r10,r6,29
    d314:	dc000015 	stw	r16,0(sp)
    d318:	481290fa 	slli	r9,r9,3
    d31c:	2820d53a 	srli	r16,r5,20
    d320:	401090fa 	slli	r8,r8,3
    d324:	200ad77a 	srli	r5,r4,29
    d328:	380ed7fa 	srli	r7,r7,31
    d32c:	dc800215 	stw	r18,8(sp)
    d330:	dc400115 	stw	r17,4(sp)
    d334:	dfc00415 	stw	ra,16(sp)
    d338:	dcc00315 	stw	r19,12(sp)
    d33c:	1c803fcc 	andi	r18,r3,255
    d340:	8401ffcc 	andi	r16,r16,2047
    d344:	494ab03a 	or	r5,r9,r5
    d348:	202290fa 	slli	r17,r4,3
    d34c:	1081ffcc 	andi	r2,r2,2047
    d350:	4290b03a 	or	r8,r8,r10
    d354:	300c90fa 	slli	r6,r6,3
    d358:	91c07026 	beq	r18,r7,d51c <__adddf3+0x228>
    d35c:	8087c83a 	sub	r3,r16,r2
    d360:	00c0b30e 	bge	zero,r3,d630 <__adddf3+0x33c>
    d364:	10002a1e 	bne	r2,zero,d410 <__adddf3+0x11c>
    d368:	4184b03a 	or	r2,r8,r6
    d36c:	1000991e 	bne	r2,zero,d5d4 <__adddf3+0x2e0>
    d370:	888001cc 	andi	r2,r17,7
    d374:	10005b26 	beq	r2,zero,d4e4 <__adddf3+0x1f0>
    d378:	88c003cc 	andi	r3,r17,15
    d37c:	00800104 	movi	r2,4
    d380:	18805826 	beq	r3,r2,d4e4 <__adddf3+0x1f0>
    d384:	89800104 	addi	r6,r17,4
    d388:	3463803a 	cmpltu	r17,r6,r17
    d38c:	2c4b883a 	add	r5,r5,r17
    d390:	2880202c 	andhi	r2,r5,128
    d394:	9007883a 	mov	r3,r18
    d398:	3023883a 	mov	r17,r6
    d39c:	10005426 	beq	r2,zero,d4f0 <__adddf3+0x1fc>
    d3a0:	84000044 	addi	r16,r16,1
    d3a4:	0081ffc4 	movi	r2,2047
    d3a8:	8080c126 	beq	r16,r2,d6b0 <__adddf3+0x3bc>
    d3ac:	013fe034 	movhi	r4,65408
    d3b0:	213fffc4 	addi	r4,r4,-1
    d3b4:	290a703a 	and	r5,r5,r4
    d3b8:	2804977a 	slli	r2,r5,29
    d3bc:	280a927a 	slli	r5,r5,9
    d3c0:	8822d0fa 	srli	r17,r17,3
    d3c4:	8401ffcc 	andi	r16,r16,2047
    d3c8:	2808d33a 	srli	r4,r5,12
    d3cc:	1444b03a 	or	r2,r2,r17
    d3d0:	8401ffcc 	andi	r16,r16,2047
    d3d4:	800a953a 	slli	r5,r16,20
    d3d8:	18c03fcc 	andi	r3,r3,255
    d3dc:	04000434 	movhi	r16,16
    d3e0:	180697fa 	slli	r3,r3,31
    d3e4:	843fffc4 	addi	r16,r16,-1
    d3e8:	2420703a 	and	r16,r4,r16
    d3ec:	8160b03a 	or	r16,r16,r5
    d3f0:	80c6b03a 	or	r3,r16,r3
    d3f4:	dfc00417 	ldw	ra,16(sp)
    d3f8:	dcc00317 	ldw	r19,12(sp)
    d3fc:	dc800217 	ldw	r18,8(sp)
    d400:	dc400117 	ldw	r17,4(sp)
    d404:	dc000017 	ldw	r16,0(sp)
    d408:	dec00504 	addi	sp,sp,20
    d40c:	f800283a 	ret
    d410:	0081ffc4 	movi	r2,2047
    d414:	80bfd626 	beq	r16,r2,d370 <__adddf3+0x7c>
    d418:	42002034 	orhi	r8,r8,128
    d41c:	00800e04 	movi	r2,56
    d420:	10c0a616 	blt	r2,r3,d6bc <__adddf3+0x3c8>
    d424:	008007c4 	movi	r2,31
    d428:	10c0c916 	blt	r2,r3,d750 <__adddf3+0x45c>
    d42c:	00800804 	movi	r2,32
    d430:	10c5c83a 	sub	r2,r2,r3
    d434:	408e983a 	sll	r7,r8,r2
    d438:	30c8d83a 	srl	r4,r6,r3
    d43c:	3084983a 	sll	r2,r6,r2
    d440:	40c6d83a 	srl	r3,r8,r3
    d444:	390cb03a 	or	r6,r7,r4
    d448:	1004c03a 	cmpne	r2,r2,zero
    d44c:	308cb03a 	or	r6,r6,r2
    d450:	898dc83a 	sub	r6,r17,r6
    d454:	89a3803a 	cmpltu	r17,r17,r6
    d458:	28cbc83a 	sub	r5,r5,r3
    d45c:	2c4bc83a 	sub	r5,r5,r17
    d460:	3023883a 	mov	r17,r6
    d464:	2880202c 	andhi	r2,r5,128
    d468:	10006d26 	beq	r2,zero,d620 <__adddf3+0x32c>
    d46c:	04c02034 	movhi	r19,128
    d470:	9cffffc4 	addi	r19,r19,-1
    d474:	2ce6703a 	and	r19,r5,r19
    d478:	98007e26 	beq	r19,zero,d674 <__adddf3+0x380>
    d47c:	9809883a 	mov	r4,r19
    d480:	00030980 	call	3098 <__clzsi2>
    d484:	10fffe04 	addi	r3,r2,-8
    d488:	010007c4 	movi	r4,31
    d48c:	20c07f16 	blt	r4,r3,d68c <__adddf3+0x398>
    d490:	01400a04 	movi	r5,40
    d494:	2885c83a 	sub	r2,r5,r2
    d498:	888ad83a 	srl	r5,r17,r2
    d49c:	98e6983a 	sll	r19,r19,r3
    d4a0:	88e2983a 	sll	r17,r17,r3
    d4a4:	2ce6b03a 	or	r19,r5,r19
    d4a8:	1c007c16 	blt	r3,r16,d69c <__adddf3+0x3a8>
    d4ac:	1c21c83a 	sub	r16,r3,r16
    d4b0:	81400044 	addi	r5,r16,1
    d4b4:	00c007c4 	movi	r3,31
    d4b8:	19409816 	blt	r3,r5,d71c <__adddf3+0x428>
    d4bc:	1c21c83a 	sub	r16,r3,r16
    d4c0:	8c08983a 	sll	r4,r17,r16
    d4c4:	8946d83a 	srl	r3,r17,r5
    d4c8:	9c20983a 	sll	r16,r19,r16
    d4cc:	2008c03a 	cmpne	r4,r4,zero
    d4d0:	994ad83a 	srl	r5,r19,r5
    d4d4:	1c06b03a 	or	r3,r3,r16
    d4d8:	1922b03a 	or	r17,r3,r4
    d4dc:	0021883a 	mov	r16,zero
    d4e0:	003fa306 	br	d370 <__adddf3+0x7c>
    d4e4:	2880202c 	andhi	r2,r5,128
    d4e8:	9007883a 	mov	r3,r18
    d4ec:	103fac1e 	bne	r2,zero,d3a0 <__adddf3+0xac>
    d4f0:	2804977a 	slli	r2,r5,29
    d4f4:	8822d0fa 	srli	r17,r17,3
    d4f8:	0101ffc4 	movi	r4,2047
    d4fc:	280ad0fa 	srli	r5,r5,3
    d500:	1444b03a 	or	r2,r2,r17
    d504:	81002c26 	beq	r16,r4,d5b8 <__adddf3+0x2c4>
    d508:	8120703a 	and	r16,r16,r4
    d50c:	01000434 	movhi	r4,16
    d510:	213fffc4 	addi	r4,r4,-1
    d514:	2908703a 	and	r4,r5,r4
    d518:	003fad06 	br	d3d0 <__adddf3+0xdc>
    d51c:	8089c83a 	sub	r4,r16,r2
    d520:	01006a0e 	bge	zero,r4,d6cc <__adddf3+0x3d8>
    d524:	10003326 	beq	r2,zero,d5f4 <__adddf3+0x300>
    d528:	0081ffc4 	movi	r2,2047
    d52c:	80bf9026 	beq	r16,r2,d370 <__adddf3+0x7c>
    d530:	42002034 	orhi	r8,r8,128
    d534:	00800e04 	movi	r2,56
    d538:	1100b116 	blt	r2,r4,d800 <__adddf3+0x50c>
    d53c:	008007c4 	movi	r2,31
    d540:	1100e216 	blt	r2,r4,d8cc <__adddf3+0x5d8>
    d544:	00800804 	movi	r2,32
    d548:	1105c83a 	sub	r2,r2,r4
    d54c:	4092983a 	sll	r9,r8,r2
    d550:	310ed83a 	srl	r7,r6,r4
    d554:	3084983a 	sll	r2,r6,r2
    d558:	4110d83a 	srl	r8,r8,r4
    d55c:	49ccb03a 	or	r6,r9,r7
    d560:	1004c03a 	cmpne	r2,r2,zero
    d564:	308cb03a 	or	r6,r6,r2
    d568:	344d883a 	add	r6,r6,r17
    d56c:	3463803a 	cmpltu	r17,r6,r17
    d570:	414b883a 	add	r5,r8,r5
    d574:	2c4b883a 	add	r5,r5,r17
    d578:	3023883a 	mov	r17,r6
    d57c:	2880202c 	andhi	r2,r5,128
    d580:	10002726 	beq	r2,zero,d620 <__adddf3+0x32c>
    d584:	84000044 	addi	r16,r16,1
    d588:	0081ffc4 	movi	r2,2047
    d58c:	8080ae26 	beq	r16,r2,d848 <__adddf3+0x554>
    d590:	00bfe034 	movhi	r2,65408
    d594:	10bfffc4 	addi	r2,r2,-1
    d598:	288a703a 	and	r5,r5,r2
    d59c:	880cd07a 	srli	r6,r17,1
    d5a0:	280897fa 	slli	r4,r5,31
    d5a4:	88c0004c 	andi	r3,r17,1
    d5a8:	30e2b03a 	or	r17,r6,r3
    d5ac:	280ad07a 	srli	r5,r5,1
    d5b0:	8922b03a 	or	r17,r17,r4
    d5b4:	003f6e06 	br	d370 <__adddf3+0x7c>
    d5b8:	1148b03a 	or	r4,r2,r5
    d5bc:	20003c26 	beq	r4,zero,d6b0 <__adddf3+0x3bc>
    d5c0:	29000234 	orhi	r4,r5,8
    d5c4:	01400434 	movhi	r5,16
    d5c8:	297fffc4 	addi	r5,r5,-1
    d5cc:	2148703a 	and	r4,r4,r5
    d5d0:	003f7f06 	br	d3d0 <__adddf3+0xdc>
    d5d4:	18ffffc4 	addi	r3,r3,-1
    d5d8:	18004d1e 	bne	r3,zero,d710 <__adddf3+0x41c>
    d5dc:	898dc83a 	sub	r6,r17,r6
    d5e0:	89a3803a 	cmpltu	r17,r17,r6
    d5e4:	2a0bc83a 	sub	r5,r5,r8
    d5e8:	2c4bc83a 	sub	r5,r5,r17
    d5ec:	3023883a 	mov	r17,r6
    d5f0:	003f9c06 	br	d464 <__adddf3+0x170>
    d5f4:	4184b03a 	or	r2,r8,r6
    d5f8:	103f5d26 	beq	r2,zero,d370 <__adddf3+0x7c>
    d5fc:	213fffc4 	addi	r4,r4,-1
    d600:	203fd926 	beq	r4,zero,d568 <__adddf3+0x274>
    d604:	0081ffc4 	movi	r2,2047
    d608:	80bfca1e 	bne	r16,r2,d534 <__adddf3+0x240>
    d60c:	003f5806 	br	d370 <__adddf3+0x7c>
    d610:	10c8b03a 	or	r4,r2,r3
    d614:	20008b26 	beq	r4,zero,d844 <__adddf3+0x550>
    d618:	100b883a 	mov	r5,r2
    d61c:	1823883a 	mov	r17,r3
    d620:	888001cc 	andi	r2,r17,7
    d624:	103f541e 	bne	r2,zero,d378 <__adddf3+0x84>
    d628:	9007883a 	mov	r3,r18
    d62c:	003fb006 	br	d4f0 <__adddf3+0x1fc>
    d630:	1800531e 	bne	r3,zero,d780 <__adddf3+0x48c>
    d634:	80800044 	addi	r2,r16,1
    d638:	1081ffcc 	andi	r2,r2,2047
    d63c:	00c00044 	movi	r3,1
    d640:	1880990e 	bge	r3,r2,d8a8 <__adddf3+0x5b4>
    d644:	8985c83a 	sub	r2,r17,r6
    d648:	8887803a 	cmpltu	r3,r17,r2
    d64c:	2a27c83a 	sub	r19,r5,r8
    d650:	98e7c83a 	sub	r19,r19,r3
    d654:	98c0202c 	andhi	r3,r19,128
    d658:	18006226 	beq	r3,zero,d7e4 <__adddf3+0x4f0>
    d65c:	3463c83a 	sub	r17,r6,r17
    d660:	4151c83a 	sub	r8,r8,r5
    d664:	344d803a 	cmpltu	r6,r6,r17
    d668:	41a7c83a 	sub	r19,r8,r6
    d66c:	3825883a 	mov	r18,r7
    d670:	983f821e 	bne	r19,zero,d47c <__adddf3+0x188>
    d674:	8809883a 	mov	r4,r17
    d678:	00030980 	call	3098 <__clzsi2>
    d67c:	10800804 	addi	r2,r2,32
    d680:	10fffe04 	addi	r3,r2,-8
    d684:	010007c4 	movi	r4,31
    d688:	20ff810e 	bge	r4,r3,d490 <__adddf3+0x19c>
    d68c:	14fff604 	addi	r19,r2,-40
    d690:	8ce6983a 	sll	r19,r17,r19
    d694:	0023883a 	mov	r17,zero
    d698:	1c3f840e 	bge	r3,r16,d4ac <__adddf3+0x1b8>
    d69c:	017fe034 	movhi	r5,65408
    d6a0:	297fffc4 	addi	r5,r5,-1
    d6a4:	80e1c83a 	sub	r16,r16,r3
    d6a8:	994a703a 	and	r5,r19,r5
    d6ac:	003f3006 	br	d370 <__adddf3+0x7c>
    d6b0:	0009883a 	mov	r4,zero
    d6b4:	0005883a 	mov	r2,zero
    d6b8:	003f4506 	br	d3d0 <__adddf3+0xdc>
    d6bc:	418cb03a 	or	r6,r8,r6
    d6c0:	300cc03a 	cmpne	r6,r6,zero
    d6c4:	0007883a 	mov	r3,zero
    d6c8:	003f6106 	br	d450 <__adddf3+0x15c>
    d6cc:	2000921e 	bne	r4,zero,d918 <__adddf3+0x624>
    d6d0:	80800044 	addi	r2,r16,1
    d6d4:	11c1ffcc 	andi	r7,r2,2047
    d6d8:	01000044 	movi	r4,1
    d6dc:	21c0610e 	bge	r4,r7,d864 <__adddf3+0x570>
    d6e0:	0101ffc4 	movi	r4,2047
    d6e4:	1100a326 	beq	r2,r4,d974 <__adddf3+0x680>
    d6e8:	344d883a 	add	r6,r6,r17
    d6ec:	3463803a 	cmpltu	r17,r6,r17
    d6f0:	414b883a 	add	r5,r8,r5
    d6f4:	2c4b883a 	add	r5,r5,r17
    d6f8:	282297fa 	slli	r17,r5,31
    d6fc:	300cd07a 	srli	r6,r6,1
    d700:	280ad07a 	srli	r5,r5,1
    d704:	1021883a 	mov	r16,r2
    d708:	89a2b03a 	or	r17,r17,r6
    d70c:	003f1806 	br	d370 <__adddf3+0x7c>
    d710:	0081ffc4 	movi	r2,2047
    d714:	80bf411e 	bne	r16,r2,d41c <__adddf3+0x128>
    d718:	003f1506 	br	d370 <__adddf3+0x7c>
    d71c:	80bff844 	addi	r2,r16,-31
    d720:	00c00804 	movi	r3,32
    d724:	9884d83a 	srl	r2,r19,r2
    d728:	28c04a26 	beq	r5,r3,d854 <__adddf3+0x560>
    d72c:	00c00fc4 	movi	r3,63
    d730:	1c21c83a 	sub	r16,r3,r16
    d734:	9c26983a 	sll	r19,r19,r16
    d738:	9c62b03a 	or	r17,r19,r17
    d73c:	8822c03a 	cmpne	r17,r17,zero
    d740:	88a2b03a 	or	r17,r17,r2
    d744:	000b883a 	mov	r5,zero
    d748:	0021883a 	mov	r16,zero
    d74c:	003fb406 	br	d620 <__adddf3+0x32c>
    d750:	18bff804 	addi	r2,r3,-32
    d754:	01000804 	movi	r4,32
    d758:	4084d83a 	srl	r2,r8,r2
    d75c:	19003f26 	beq	r3,r4,d85c <__adddf3+0x568>
    d760:	01001004 	movi	r4,64
    d764:	20c7c83a 	sub	r3,r4,r3
    d768:	40d0983a 	sll	r8,r8,r3
    d76c:	418cb03a 	or	r6,r8,r6
    d770:	300cc03a 	cmpne	r6,r6,zero
    d774:	308cb03a 	or	r6,r6,r2
    d778:	0007883a 	mov	r3,zero
    d77c:	003f3406 	br	d450 <__adddf3+0x15c>
    d780:	80002326 	beq	r16,zero,d810 <__adddf3+0x51c>
    d784:	0101ffc4 	movi	r4,2047
    d788:	11005e26 	beq	r2,r4,d904 <__adddf3+0x610>
    d78c:	00c7c83a 	sub	r3,zero,r3
    d790:	29402034 	orhi	r5,r5,128
    d794:	01000e04 	movi	r4,56
    d798:	20c07216 	blt	r4,r3,d964 <__adddf3+0x670>
    d79c:	010007c4 	movi	r4,31
    d7a0:	20c0ce16 	blt	r4,r3,dadc <__adddf3+0x7e8>
    d7a4:	01000804 	movi	r4,32
    d7a8:	20c9c83a 	sub	r4,r4,r3
    d7ac:	2914983a 	sll	r10,r5,r4
    d7b0:	88d2d83a 	srl	r9,r17,r3
    d7b4:	8908983a 	sll	r4,r17,r4
    d7b8:	28c6d83a 	srl	r3,r5,r3
    d7bc:	5262b03a 	or	r17,r10,r9
    d7c0:	2008c03a 	cmpne	r4,r4,zero
    d7c4:	8922b03a 	or	r17,r17,r4
    d7c8:	3463c83a 	sub	r17,r6,r17
    d7cc:	40c7c83a 	sub	r3,r8,r3
    d7d0:	344d803a 	cmpltu	r6,r6,r17
    d7d4:	198bc83a 	sub	r5,r3,r6
    d7d8:	1021883a 	mov	r16,r2
    d7dc:	3825883a 	mov	r18,r7
    d7e0:	003f2006 	br	d464 <__adddf3+0x170>
    d7e4:	9886b03a 	or	r3,r19,r2
    d7e8:	1800141e 	bne	r3,zero,d83c <__adddf3+0x548>
    d7ec:	0007883a 	mov	r3,zero
    d7f0:	000b883a 	mov	r5,zero
    d7f4:	0023883a 	mov	r17,zero
    d7f8:	0021883a 	mov	r16,zero
    d7fc:	003f3c06 	br	d4f0 <__adddf3+0x1fc>
    d800:	418cb03a 	or	r6,r8,r6
    d804:	300cc03a 	cmpne	r6,r6,zero
    d808:	0011883a 	mov	r8,zero
    d80c:	003f5606 	br	d568 <__adddf3+0x274>
    d810:	2c48b03a 	or	r4,r5,r17
    d814:	20003b26 	beq	r4,zero,d904 <__adddf3+0x610>
    d818:	00c6303a 	nor	r3,zero,r3
    d81c:	1800371e 	bne	r3,zero,d8fc <__adddf3+0x608>
    d820:	3463c83a 	sub	r17,r6,r17
    d824:	414bc83a 	sub	r5,r8,r5
    d828:	344d803a 	cmpltu	r6,r6,r17
    d82c:	298bc83a 	sub	r5,r5,r6
    d830:	1021883a 	mov	r16,r2
    d834:	3825883a 	mov	r18,r7
    d838:	003f0a06 	br	d464 <__adddf3+0x170>
    d83c:	1023883a 	mov	r17,r2
    d840:	003f0d06 	br	d478 <__adddf3+0x184>
    d844:	0007883a 	mov	r3,zero
    d848:	000b883a 	mov	r5,zero
    d84c:	0023883a 	mov	r17,zero
    d850:	003f2706 	br	d4f0 <__adddf3+0x1fc>
    d854:	0027883a 	mov	r19,zero
    d858:	003fb706 	br	d738 <__adddf3+0x444>
    d85c:	0011883a 	mov	r8,zero
    d860:	003fc206 	br	d76c <__adddf3+0x478>
    d864:	2c44b03a 	or	r2,r5,r17
    d868:	8000871e 	bne	r16,zero,da88 <__adddf3+0x794>
    d86c:	1000b126 	beq	r2,zero,db34 <__adddf3+0x840>
    d870:	4184b03a 	or	r2,r8,r6
    d874:	103ebe26 	beq	r2,zero,d370 <__adddf3+0x7c>
    d878:	3445883a 	add	r2,r6,r17
    d87c:	1463803a 	cmpltu	r17,r2,r17
    d880:	414b883a 	add	r5,r8,r5
    d884:	2c4b883a 	add	r5,r5,r17
    d888:	28c0202c 	andhi	r3,r5,128
    d88c:	1023883a 	mov	r17,r2
    d890:	183f6326 	beq	r3,zero,d620 <__adddf3+0x32c>
    d894:	00bfe034 	movhi	r2,65408
    d898:	10bfffc4 	addi	r2,r2,-1
    d89c:	2021883a 	mov	r16,r4
    d8a0:	288a703a 	and	r5,r5,r2
    d8a4:	003eb206 	br	d370 <__adddf3+0x7c>
    d8a8:	2c44b03a 	or	r2,r5,r17
    d8ac:	8000251e 	bne	r16,zero,d944 <__adddf3+0x650>
    d8b0:	10004b1e 	bne	r2,zero,d9e0 <__adddf3+0x6ec>
    d8b4:	4184b03a 	or	r2,r8,r6
    d8b8:	103fe226 	beq	r2,zero,d844 <__adddf3+0x550>
    d8bc:	400b883a 	mov	r5,r8
    d8c0:	3023883a 	mov	r17,r6
    d8c4:	3825883a 	mov	r18,r7
    d8c8:	003ea906 	br	d370 <__adddf3+0x7c>
    d8cc:	20bff804 	addi	r2,r4,-32
    d8d0:	01c00804 	movi	r7,32
    d8d4:	4084d83a 	srl	r2,r8,r2
    d8d8:	21c07e26 	beq	r4,r7,dad4 <__adddf3+0x7e0>
    d8dc:	01c01004 	movi	r7,64
    d8e0:	3909c83a 	sub	r4,r7,r4
    d8e4:	4110983a 	sll	r8,r8,r4
    d8e8:	418cb03a 	or	r6,r8,r6
    d8ec:	300cc03a 	cmpne	r6,r6,zero
    d8f0:	308cb03a 	or	r6,r6,r2
    d8f4:	0011883a 	mov	r8,zero
    d8f8:	003f1b06 	br	d568 <__adddf3+0x274>
    d8fc:	0101ffc4 	movi	r4,2047
    d900:	113fa41e 	bne	r2,r4,d794 <__adddf3+0x4a0>
    d904:	400b883a 	mov	r5,r8
    d908:	3023883a 	mov	r17,r6
    d90c:	1021883a 	mov	r16,r2
    d910:	3825883a 	mov	r18,r7
    d914:	003e9606 	br	d370 <__adddf3+0x7c>
    d918:	80001a1e 	bne	r16,zero,d984 <__adddf3+0x690>
    d91c:	2c4eb03a 	or	r7,r5,r17
    d920:	38005526 	beq	r7,zero,da78 <__adddf3+0x784>
    d924:	0108303a 	nor	r4,zero,r4
    d928:	2000511e 	bne	r4,zero,da70 <__adddf3+0x77c>
    d92c:	89a3883a 	add	r17,r17,r6
    d930:	414b883a 	add	r5,r8,r5
    d934:	898d803a 	cmpltu	r6,r17,r6
    d938:	298b883a 	add	r5,r5,r6
    d93c:	1021883a 	mov	r16,r2
    d940:	003f0e06 	br	d57c <__adddf3+0x288>
    d944:	1000341e 	bne	r2,zero,da18 <__adddf3+0x724>
    d948:	4184b03a 	or	r2,r8,r6
    d94c:	10006f26 	beq	r2,zero,db0c <__adddf3+0x818>
    d950:	400b883a 	mov	r5,r8
    d954:	3023883a 	mov	r17,r6
    d958:	3825883a 	mov	r18,r7
    d95c:	0401ffc4 	movi	r16,2047
    d960:	003e8306 	br	d370 <__adddf3+0x7c>
    d964:	2c62b03a 	or	r17,r5,r17
    d968:	8822c03a 	cmpne	r17,r17,zero
    d96c:	0007883a 	mov	r3,zero
    d970:	003f9506 	br	d7c8 <__adddf3+0x4d4>
    d974:	1021883a 	mov	r16,r2
    d978:	000b883a 	mov	r5,zero
    d97c:	0023883a 	mov	r17,zero
    d980:	003edb06 	br	d4f0 <__adddf3+0x1fc>
    d984:	01c1ffc4 	movi	r7,2047
    d988:	11c03b26 	beq	r2,r7,da78 <__adddf3+0x784>
    d98c:	0109c83a 	sub	r4,zero,r4
    d990:	29402034 	orhi	r5,r5,128
    d994:	01c00e04 	movi	r7,56
    d998:	39006216 	blt	r7,r4,db24 <__adddf3+0x830>
    d99c:	01c007c4 	movi	r7,31
    d9a0:	39006b16 	blt	r7,r4,db50 <__adddf3+0x85c>
    d9a4:	01c00804 	movi	r7,32
    d9a8:	390fc83a 	sub	r7,r7,r4
    d9ac:	29d4983a 	sll	r10,r5,r7
    d9b0:	8912d83a 	srl	r9,r17,r4
    d9b4:	89ce983a 	sll	r7,r17,r7
    d9b8:	2908d83a 	srl	r4,r5,r4
    d9bc:	5262b03a 	or	r17,r10,r9
    d9c0:	380ac03a 	cmpne	r5,r7,zero
    d9c4:	8962b03a 	or	r17,r17,r5
    d9c8:	89a3883a 	add	r17,r17,r6
    d9cc:	2211883a 	add	r8,r4,r8
    d9d0:	898d803a 	cmpltu	r6,r17,r6
    d9d4:	418b883a 	add	r5,r8,r6
    d9d8:	1021883a 	mov	r16,r2
    d9dc:	003ee706 	br	d57c <__adddf3+0x288>
    d9e0:	4184b03a 	or	r2,r8,r6
    d9e4:	103e6226 	beq	r2,zero,d370 <__adddf3+0x7c>
    d9e8:	8987c83a 	sub	r3,r17,r6
    d9ec:	88c9803a 	cmpltu	r4,r17,r3
    d9f0:	2a05c83a 	sub	r2,r5,r8
    d9f4:	1105c83a 	sub	r2,r2,r4
    d9f8:	1100202c 	andhi	r4,r2,128
    d9fc:	203f0426 	beq	r4,zero,d610 <__adddf3+0x31c>
    da00:	3463c83a 	sub	r17,r6,r17
    da04:	414bc83a 	sub	r5,r8,r5
    da08:	344d803a 	cmpltu	r6,r6,r17
    da0c:	298bc83a 	sub	r5,r5,r6
    da10:	3825883a 	mov	r18,r7
    da14:	003e5606 	br	d370 <__adddf3+0x7c>
    da18:	4184b03a 	or	r2,r8,r6
    da1c:	10002b26 	beq	r2,zero,dacc <__adddf3+0x7d8>
    da20:	2804d0fa 	srli	r2,r5,3
    da24:	8822d0fa 	srli	r17,r17,3
    da28:	280a977a 	slli	r5,r5,29
    da2c:	10c0022c 	andhi	r3,r2,8
    da30:	2c62b03a 	or	r17,r5,r17
    da34:	18000826 	beq	r3,zero,da58 <__adddf3+0x764>
    da38:	4008d0fa 	srli	r4,r8,3
    da3c:	20c0022c 	andhi	r3,r4,8
    da40:	1800051e 	bne	r3,zero,da58 <__adddf3+0x764>
    da44:	300cd0fa 	srli	r6,r6,3
    da48:	4010977a 	slli	r8,r8,29
    da4c:	2005883a 	mov	r2,r4
    da50:	3825883a 	mov	r18,r7
    da54:	41a2b03a 	or	r17,r8,r6
    da58:	880ad77a 	srli	r5,r17,29
    da5c:	100490fa 	slli	r2,r2,3
    da60:	882290fa 	slli	r17,r17,3
    da64:	0401ffc4 	movi	r16,2047
    da68:	288ab03a 	or	r5,r5,r2
    da6c:	003e4006 	br	d370 <__adddf3+0x7c>
    da70:	01c1ffc4 	movi	r7,2047
    da74:	11ffc71e 	bne	r2,r7,d994 <__adddf3+0x6a0>
    da78:	400b883a 	mov	r5,r8
    da7c:	3023883a 	mov	r17,r6
    da80:	1021883a 	mov	r16,r2
    da84:	003e3a06 	br	d370 <__adddf3+0x7c>
    da88:	10002d26 	beq	r2,zero,db40 <__adddf3+0x84c>
    da8c:	4184b03a 	or	r2,r8,r6
    da90:	10000e26 	beq	r2,zero,dacc <__adddf3+0x7d8>
    da94:	2804d0fa 	srli	r2,r5,3
    da98:	8822d0fa 	srli	r17,r17,3
    da9c:	280a977a 	slli	r5,r5,29
    daa0:	10c0022c 	andhi	r3,r2,8
    daa4:	2c62b03a 	or	r17,r5,r17
    daa8:	183feb26 	beq	r3,zero,da58 <__adddf3+0x764>
    daac:	4008d0fa 	srli	r4,r8,3
    dab0:	20c0022c 	andhi	r3,r4,8
    dab4:	183fe81e 	bne	r3,zero,da58 <__adddf3+0x764>
    dab8:	300cd0fa 	srli	r6,r6,3
    dabc:	4010977a 	slli	r8,r8,29
    dac0:	2005883a 	mov	r2,r4
    dac4:	41a2b03a 	or	r17,r8,r6
    dac8:	003fe306 	br	da58 <__adddf3+0x764>
    dacc:	0401ffc4 	movi	r16,2047
    dad0:	003e2706 	br	d370 <__adddf3+0x7c>
    dad4:	0011883a 	mov	r8,zero
    dad8:	003f8306 	br	d8e8 <__adddf3+0x5f4>
    dadc:	193ff804 	addi	r4,r3,-32
    dae0:	02400804 	movi	r9,32
    dae4:	2908d83a 	srl	r4,r5,r4
    dae8:	1a402526 	beq	r3,r9,db80 <__adddf3+0x88c>
    daec:	02401004 	movi	r9,64
    daf0:	48c7c83a 	sub	r3,r9,r3
    daf4:	28ca983a 	sll	r5,r5,r3
    daf8:	2c62b03a 	or	r17,r5,r17
    dafc:	8822c03a 	cmpne	r17,r17,zero
    db00:	8922b03a 	or	r17,r17,r4
    db04:	0007883a 	mov	r3,zero
    db08:	003f2f06 	br	d7c8 <__adddf3+0x4d4>
    db0c:	01402034 	movhi	r5,128
    db10:	0007883a 	mov	r3,zero
    db14:	297fffc4 	addi	r5,r5,-1
    db18:	047ffe04 	movi	r17,-8
    db1c:	0401ffc4 	movi	r16,2047
    db20:	003e7306 	br	d4f0 <__adddf3+0x1fc>
    db24:	2c62b03a 	or	r17,r5,r17
    db28:	8822c03a 	cmpne	r17,r17,zero
    db2c:	0009883a 	mov	r4,zero
    db30:	003fa506 	br	d9c8 <__adddf3+0x6d4>
    db34:	400b883a 	mov	r5,r8
    db38:	3023883a 	mov	r17,r6
    db3c:	003e0c06 	br	d370 <__adddf3+0x7c>
    db40:	400b883a 	mov	r5,r8
    db44:	3023883a 	mov	r17,r6
    db48:	0401ffc4 	movi	r16,2047
    db4c:	003e0806 	br	d370 <__adddf3+0x7c>
    db50:	21fff804 	addi	r7,r4,-32
    db54:	02400804 	movi	r9,32
    db58:	29ced83a 	srl	r7,r5,r7
    db5c:	22400a26 	beq	r4,r9,db88 <__adddf3+0x894>
    db60:	02401004 	movi	r9,64
    db64:	4909c83a 	sub	r4,r9,r4
    db68:	290a983a 	sll	r5,r5,r4
    db6c:	2c62b03a 	or	r17,r5,r17
    db70:	8822c03a 	cmpne	r17,r17,zero
    db74:	89e2b03a 	or	r17,r17,r7
    db78:	0009883a 	mov	r4,zero
    db7c:	003f9206 	br	d9c8 <__adddf3+0x6d4>
    db80:	000b883a 	mov	r5,zero
    db84:	003fdc06 	br	daf8 <__adddf3+0x804>
    db88:	000b883a 	mov	r5,zero
    db8c:	003ff706 	br	db6c <__adddf3+0x878>

0000db90 <__eqdf2>:
    db90:	2804d53a 	srli	r2,r5,20
    db94:	3806d53a 	srli	r3,r7,20
    db98:	02000434 	movhi	r8,16
    db9c:	423fffc4 	addi	r8,r8,-1
    dba0:	1081ffcc 	andi	r2,r2,2047
    dba4:	0241ffc4 	movi	r9,2047
    dba8:	2a14703a 	and	r10,r5,r8
    dbac:	18c1ffcc 	andi	r3,r3,2047
    dbb0:	3a10703a 	and	r8,r7,r8
    dbb4:	280ad7fa 	srli	r5,r5,31
    dbb8:	380ed7fa 	srli	r7,r7,31
    dbbc:	12400f26 	beq	r2,r9,dbfc <__eqdf2+0x6c>
    dbc0:	0241ffc4 	movi	r9,2047
    dbc4:	1a400326 	beq	r3,r9,dbd4 <__eqdf2+0x44>
    dbc8:	10c00526 	beq	r2,r3,dbe0 <__eqdf2+0x50>
    dbcc:	00800044 	movi	r2,1
    dbd0:	f800283a 	ret
    dbd4:	4192b03a 	or	r9,r8,r6
    dbd8:	483ffc1e 	bne	r9,zero,dbcc <__eqdf2+0x3c>
    dbdc:	10fffb1e 	bne	r2,r3,dbcc <__eqdf2+0x3c>
    dbe0:	523ffa1e 	bne	r10,r8,dbcc <__eqdf2+0x3c>
    dbe4:	21bff91e 	bne	r4,r6,dbcc <__eqdf2+0x3c>
    dbe8:	29c00826 	beq	r5,r7,dc0c <__eqdf2+0x7c>
    dbec:	103ff71e 	bne	r2,zero,dbcc <__eqdf2+0x3c>
    dbf0:	5104b03a 	or	r2,r10,r4
    dbf4:	1004c03a 	cmpne	r2,r2,zero
    dbf8:	f800283a 	ret
    dbfc:	5112b03a 	or	r9,r10,r4
    dc00:	483fef26 	beq	r9,zero,dbc0 <__eqdf2+0x30>
    dc04:	00800044 	movi	r2,1
    dc08:	f800283a 	ret
    dc0c:	0005883a 	mov	r2,zero
    dc10:	f800283a 	ret

0000dc14 <__floatunsidf>:
    dc14:	defffe04 	addi	sp,sp,-8
    dc18:	dc000015 	stw	r16,0(sp)
    dc1c:	dfc00115 	stw	ra,4(sp)
    dc20:	2021883a 	mov	r16,r4
    dc24:	20001026 	beq	r4,zero,dc68 <__floatunsidf+0x54>
    dc28:	00030980 	call	3098 <__clzsi2>
    dc2c:	01410784 	movi	r5,1054
    dc30:	100d883a 	mov	r6,r2
    dc34:	288bc83a 	sub	r5,r5,r2
    dc38:	00800284 	movi	r2,10
    dc3c:	11801616 	blt	r2,r6,dc98 <__floatunsidf+0x84>
    dc40:	008002c4 	movi	r2,11
    dc44:	1185c83a 	sub	r2,r2,r6
    dc48:	8084d83a 	srl	r2,r16,r2
    dc4c:	00c00434 	movhi	r3,16
    dc50:	31c00544 	addi	r7,r6,21
    dc54:	18ffffc4 	addi	r3,r3,-1
    dc58:	81e0983a 	sll	r16,r16,r7
    dc5c:	10cc703a 	and	r6,r2,r3
    dc60:	2941ffcc 	andi	r5,r5,2047
    dc64:	00000206 	br	dc70 <__floatunsidf+0x5c>
    dc68:	000b883a 	mov	r5,zero
    dc6c:	000d883a 	mov	r6,zero
    dc70:	280a953a 	slli	r5,r5,20
    dc74:	00c00434 	movhi	r3,16
    dc78:	18ffffc4 	addi	r3,r3,-1
    dc7c:	30c6703a 	and	r3,r6,r3
    dc80:	8005883a 	mov	r2,r16
    dc84:	1946b03a 	or	r3,r3,r5
    dc88:	dfc00117 	ldw	ra,4(sp)
    dc8c:	dc000017 	ldw	r16,0(sp)
    dc90:	dec00204 	addi	sp,sp,8
    dc94:	f800283a 	ret
    dc98:	31bffd44 	addi	r6,r6,-11
    dc9c:	818c983a 	sll	r6,r16,r6
    dca0:	00800434 	movhi	r2,16
    dca4:	10bfffc4 	addi	r2,r2,-1
    dca8:	2941ffcc 	andi	r5,r5,2047
    dcac:	0021883a 	mov	r16,zero
    dcb0:	308c703a 	and	r6,r6,r2
    dcb4:	003fee06 	br	dc70 <__floatunsidf+0x5c>

0000dcb8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    dcb8:	defffe04 	addi	sp,sp,-8
    dcbc:	dfc00115 	stw	ra,4(sp)
    dcc0:	df000015 	stw	fp,0(sp)
    dcc4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    dcc8:	008000b4 	movhi	r2,2
    dccc:	10b3cc04 	addi	r2,r2,-12496
    dcd0:	10800017 	ldw	r2,0(r2)
    dcd4:	10000526 	beq	r2,zero,dcec <alt_get_errno+0x34>
    dcd8:	008000b4 	movhi	r2,2
    dcdc:	10b3cc04 	addi	r2,r2,-12496
    dce0:	10800017 	ldw	r2,0(r2)
    dce4:	103ee83a 	callr	r2
    dce8:	00000206 	br	dcf4 <alt_get_errno+0x3c>
    dcec:	008000b4 	movhi	r2,2
    dcf0:	10b3fa04 	addi	r2,r2,-12312
}
    dcf4:	e037883a 	mov	sp,fp
    dcf8:	dfc00117 	ldw	ra,4(sp)
    dcfc:	df000017 	ldw	fp,0(sp)
    dd00:	dec00204 	addi	sp,sp,8
    dd04:	f800283a 	ret

0000dd08 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    dd08:	defffb04 	addi	sp,sp,-20
    dd0c:	dfc00415 	stw	ra,16(sp)
    dd10:	df000315 	stw	fp,12(sp)
    dd14:	df000304 	addi	fp,sp,12
    dd18:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    dd1c:	e0bfff17 	ldw	r2,-4(fp)
    dd20:	10000816 	blt	r2,zero,dd44 <close+0x3c>
    dd24:	e13fff17 	ldw	r4,-4(fp)
    dd28:	01400304 	movi	r5,12
    dd2c:	000129c0 	call	129c <__mulsi3>
    dd30:	1007883a 	mov	r3,r2
    dd34:	008000b4 	movhi	r2,2
    dd38:	10ae0f04 	addi	r2,r2,-18372
    dd3c:	1885883a 	add	r2,r3,r2
    dd40:	00000106 	br	dd48 <close+0x40>
    dd44:	0005883a 	mov	r2,zero
    dd48:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    dd4c:	e0bffd17 	ldw	r2,-12(fp)
    dd50:	10001926 	beq	r2,zero,ddb8 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    dd54:	e0bffd17 	ldw	r2,-12(fp)
    dd58:	10800017 	ldw	r2,0(r2)
    dd5c:	10800417 	ldw	r2,16(r2)
    dd60:	10000626 	beq	r2,zero,dd7c <close+0x74>
    dd64:	e0bffd17 	ldw	r2,-12(fp)
    dd68:	10800017 	ldw	r2,0(r2)
    dd6c:	10800417 	ldw	r2,16(r2)
    dd70:	e13ffd17 	ldw	r4,-12(fp)
    dd74:	103ee83a 	callr	r2
    dd78:	00000106 	br	dd80 <close+0x78>
    dd7c:	0005883a 	mov	r2,zero
    dd80:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    dd84:	e13fff17 	ldw	r4,-4(fp)
    dd88:	000e6340 	call	e634 <alt_release_fd>
    if (rval < 0)
    dd8c:	e0bffe17 	ldw	r2,-8(fp)
    dd90:	1000070e 	bge	r2,zero,ddb0 <close+0xa8>
    {
      ALT_ERRNO = -rval;
    dd94:	000dcb80 	call	dcb8 <alt_get_errno>
    dd98:	1007883a 	mov	r3,r2
    dd9c:	e0bffe17 	ldw	r2,-8(fp)
    dda0:	0085c83a 	sub	r2,zero,r2
    dda4:	18800015 	stw	r2,0(r3)
      return -1;
    dda8:	00bfffc4 	movi	r2,-1
    ddac:	00000706 	br	ddcc <close+0xc4>
    }
    return 0;
    ddb0:	0005883a 	mov	r2,zero
    ddb4:	00000506 	br	ddcc <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    ddb8:	000dcb80 	call	dcb8 <alt_get_errno>
    ddbc:	1007883a 	mov	r3,r2
    ddc0:	00801444 	movi	r2,81
    ddc4:	18800015 	stw	r2,0(r3)
    return -1;
    ddc8:	00bfffc4 	movi	r2,-1
  }
}
    ddcc:	e037883a 	mov	sp,fp
    ddd0:	dfc00117 	ldw	ra,4(sp)
    ddd4:	df000017 	ldw	fp,0(sp)
    ddd8:	dec00204 	addi	sp,sp,8
    dddc:	f800283a 	ret

0000dde0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    dde0:	defffc04 	addi	sp,sp,-16
    dde4:	df000315 	stw	fp,12(sp)
    dde8:	df000304 	addi	fp,sp,12
    ddec:	e13ffd15 	stw	r4,-12(fp)
    ddf0:	e17ffe15 	stw	r5,-8(fp)
    ddf4:	e1bfff15 	stw	r6,-4(fp)
  return len;
    ddf8:	e0bfff17 	ldw	r2,-4(fp)
}
    ddfc:	e037883a 	mov	sp,fp
    de00:	df000017 	ldw	fp,0(sp)
    de04:	dec00104 	addi	sp,sp,4
    de08:	f800283a 	ret

0000de0c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    de0c:	defffe04 	addi	sp,sp,-8
    de10:	dfc00115 	stw	ra,4(sp)
    de14:	df000015 	stw	fp,0(sp)
    de18:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    de1c:	008000b4 	movhi	r2,2
    de20:	10b3cc04 	addi	r2,r2,-12496
    de24:	10800017 	ldw	r2,0(r2)
    de28:	10000526 	beq	r2,zero,de40 <alt_get_errno+0x34>
    de2c:	008000b4 	movhi	r2,2
    de30:	10b3cc04 	addi	r2,r2,-12496
    de34:	10800017 	ldw	r2,0(r2)
    de38:	103ee83a 	callr	r2
    de3c:	00000206 	br	de48 <alt_get_errno+0x3c>
    de40:	008000b4 	movhi	r2,2
    de44:	10b3fa04 	addi	r2,r2,-12312
}
    de48:	e037883a 	mov	sp,fp
    de4c:	dfc00117 	ldw	ra,4(sp)
    de50:	df000017 	ldw	fp,0(sp)
    de54:	dec00204 	addi	sp,sp,8
    de58:	f800283a 	ret

0000de5c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    de5c:	defffb04 	addi	sp,sp,-20
    de60:	dfc00415 	stw	ra,16(sp)
    de64:	df000315 	stw	fp,12(sp)
    de68:	df000304 	addi	fp,sp,12
    de6c:	e13ffe15 	stw	r4,-8(fp)
    de70:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    de74:	e0bffe17 	ldw	r2,-8(fp)
    de78:	10000816 	blt	r2,zero,de9c <fstat+0x40>
    de7c:	e13ffe17 	ldw	r4,-8(fp)
    de80:	01400304 	movi	r5,12
    de84:	000129c0 	call	129c <__mulsi3>
    de88:	1007883a 	mov	r3,r2
    de8c:	008000b4 	movhi	r2,2
    de90:	10ae0f04 	addi	r2,r2,-18372
    de94:	1885883a 	add	r2,r3,r2
    de98:	00000106 	br	dea0 <fstat+0x44>
    de9c:	0005883a 	mov	r2,zero
    dea0:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    dea4:	e0bffd17 	ldw	r2,-12(fp)
    dea8:	10001026 	beq	r2,zero,deec <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    deac:	e0bffd17 	ldw	r2,-12(fp)
    deb0:	10800017 	ldw	r2,0(r2)
    deb4:	10800817 	ldw	r2,32(r2)
    deb8:	10000726 	beq	r2,zero,ded8 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
    debc:	e0bffd17 	ldw	r2,-12(fp)
    dec0:	10800017 	ldw	r2,0(r2)
    dec4:	10800817 	ldw	r2,32(r2)
    dec8:	e13ffd17 	ldw	r4,-12(fp)
    decc:	e17fff17 	ldw	r5,-4(fp)
    ded0:	103ee83a 	callr	r2
    ded4:	00000a06 	br	df00 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    ded8:	e0bfff17 	ldw	r2,-4(fp)
    dedc:	00c80004 	movi	r3,8192
    dee0:	10c00115 	stw	r3,4(r2)
      return 0;
    dee4:	0005883a 	mov	r2,zero
    dee8:	00000506 	br	df00 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    deec:	000de0c0 	call	de0c <alt_get_errno>
    def0:	1007883a 	mov	r3,r2
    def4:	00801444 	movi	r2,81
    def8:	18800015 	stw	r2,0(r3)
    return -1;
    defc:	00bfffc4 	movi	r2,-1
  }
}
    df00:	e037883a 	mov	sp,fp
    df04:	dfc00117 	ldw	ra,4(sp)
    df08:	df000017 	ldw	fp,0(sp)
    df0c:	dec00204 	addi	sp,sp,8
    df10:	f800283a 	ret

0000df14 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    df14:	defff904 	addi	sp,sp,-28
    df18:	dfc00615 	stw	ra,24(sp)
    df1c:	df000515 	stw	fp,20(sp)
    df20:	df000504 	addi	fp,sp,20
    df24:	e13ffc15 	stw	r4,-16(fp)
    df28:	e17ffd15 	stw	r5,-12(fp)
    df2c:	e1bffe15 	stw	r6,-8(fp)
    df30:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    df34:	e0800217 	ldw	r2,8(fp)
    df38:	d8800015 	stw	r2,0(sp)
    df3c:	e13ffc17 	ldw	r4,-16(fp)
    df40:	e17ffd17 	ldw	r5,-12(fp)
    df44:	e1bffe17 	ldw	r6,-8(fp)
    df48:	e1ffff17 	ldw	r7,-4(fp)
    df4c:	000e0f40 	call	e0f4 <alt_iic_isr_register>
}  
    df50:	e037883a 	mov	sp,fp
    df54:	dfc00117 	ldw	ra,4(sp)
    df58:	df000017 	ldw	fp,0(sp)
    df5c:	dec00204 	addi	sp,sp,8
    df60:	f800283a 	ret

0000df64 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    df64:	defff904 	addi	sp,sp,-28
    df68:	df000615 	stw	fp,24(sp)
    df6c:	df000604 	addi	fp,sp,24
    df70:	e13ffe15 	stw	r4,-8(fp)
    df74:	e17fff15 	stw	r5,-4(fp)
    df78:	e0bfff17 	ldw	r2,-4(fp)
    df7c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    df80:	0005303a 	rdctl	r2,status
    df84:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    df88:	e0fffb17 	ldw	r3,-20(fp)
    df8c:	00bfff84 	movi	r2,-2
    df90:	1884703a 	and	r2,r3,r2
    df94:	1001703a 	wrctl	status,r2
  
  return context;
    df98:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    df9c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
    dfa0:	e0bffa17 	ldw	r2,-24(fp)
    dfa4:	00c00044 	movi	r3,1
    dfa8:	1884983a 	sll	r2,r3,r2
    dfac:	1007883a 	mov	r3,r2
    dfb0:	008000b4 	movhi	r2,2
    dfb4:	10b3fc04 	addi	r2,r2,-12304
    dfb8:	10800017 	ldw	r2,0(r2)
    dfbc:	1886b03a 	or	r3,r3,r2
    dfc0:	008000b4 	movhi	r2,2
    dfc4:	10b3fc04 	addi	r2,r2,-12304
    dfc8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    dfcc:	008000b4 	movhi	r2,2
    dfd0:	10b3fc04 	addi	r2,r2,-12304
    dfd4:	10800017 	ldw	r2,0(r2)
    dfd8:	100170fa 	wrctl	ienable,r2
    dfdc:	e0bffc17 	ldw	r2,-16(fp)
    dfe0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    dfe4:	e0bffd17 	ldw	r2,-12(fp)
    dfe8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    dfec:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
    dff0:	0001883a 	nop
}
    dff4:	e037883a 	mov	sp,fp
    dff8:	df000017 	ldw	fp,0(sp)
    dffc:	dec00104 	addi	sp,sp,4
    e000:	f800283a 	ret

0000e004 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    e004:	defff904 	addi	sp,sp,-28
    e008:	df000615 	stw	fp,24(sp)
    e00c:	df000604 	addi	fp,sp,24
    e010:	e13ffe15 	stw	r4,-8(fp)
    e014:	e17fff15 	stw	r5,-4(fp)
    e018:	e0bfff17 	ldw	r2,-4(fp)
    e01c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e020:	0005303a 	rdctl	r2,status
    e024:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e028:	e0fffb17 	ldw	r3,-20(fp)
    e02c:	00bfff84 	movi	r2,-2
    e030:	1884703a 	and	r2,r3,r2
    e034:	1001703a 	wrctl	status,r2
  
  return context;
    e038:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    e03c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
    e040:	e0bffa17 	ldw	r2,-24(fp)
    e044:	00c00044 	movi	r3,1
    e048:	1884983a 	sll	r2,r3,r2
    e04c:	0084303a 	nor	r2,zero,r2
    e050:	1007883a 	mov	r3,r2
    e054:	008000b4 	movhi	r2,2
    e058:	10b3fc04 	addi	r2,r2,-12304
    e05c:	10800017 	ldw	r2,0(r2)
    e060:	1886703a 	and	r3,r3,r2
    e064:	008000b4 	movhi	r2,2
    e068:	10b3fc04 	addi	r2,r2,-12304
    e06c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    e070:	008000b4 	movhi	r2,2
    e074:	10b3fc04 	addi	r2,r2,-12304
    e078:	10800017 	ldw	r2,0(r2)
    e07c:	100170fa 	wrctl	ienable,r2
    e080:	e0bffc17 	ldw	r2,-16(fp)
    e084:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e088:	e0bffd17 	ldw	r2,-12(fp)
    e08c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    e090:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
    e094:	0001883a 	nop
}
    e098:	e037883a 	mov	sp,fp
    e09c:	df000017 	ldw	fp,0(sp)
    e0a0:	dec00104 	addi	sp,sp,4
    e0a4:	f800283a 	ret

0000e0a8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    e0a8:	defffc04 	addi	sp,sp,-16
    e0ac:	df000315 	stw	fp,12(sp)
    e0b0:	df000304 	addi	fp,sp,12
    e0b4:	e13ffe15 	stw	r4,-8(fp)
    e0b8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    e0bc:	000530fa 	rdctl	r2,ienable
    e0c0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    e0c4:	e0bfff17 	ldw	r2,-4(fp)
    e0c8:	00c00044 	movi	r3,1
    e0cc:	1884983a 	sll	r2,r3,r2
    e0d0:	1007883a 	mov	r3,r2
    e0d4:	e0bffd17 	ldw	r2,-12(fp)
    e0d8:	1884703a 	and	r2,r3,r2
    e0dc:	1004c03a 	cmpne	r2,r2,zero
    e0e0:	10803fcc 	andi	r2,r2,255
}
    e0e4:	e037883a 	mov	sp,fp
    e0e8:	df000017 	ldw	fp,0(sp)
    e0ec:	dec00104 	addi	sp,sp,4
    e0f0:	f800283a 	ret

0000e0f4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    e0f4:	defff504 	addi	sp,sp,-44
    e0f8:	dfc00a15 	stw	ra,40(sp)
    e0fc:	df000915 	stw	fp,36(sp)
    e100:	df000904 	addi	fp,sp,36
    e104:	e13ffc15 	stw	r4,-16(fp)
    e108:	e17ffd15 	stw	r5,-12(fp)
    e10c:	e1bffe15 	stw	r6,-8(fp)
    e110:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
    e114:	00bffa84 	movi	r2,-22
    e118:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    e11c:	e0bffd17 	ldw	r2,-12(fp)
    e120:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    e124:	e0bff817 	ldw	r2,-32(fp)
    e128:	10800808 	cmpgei	r2,r2,32
    e12c:	1000271e 	bne	r2,zero,e1cc <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e130:	0005303a 	rdctl	r2,status
    e134:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e138:	e0fffa17 	ldw	r3,-24(fp)
    e13c:	00bfff84 	movi	r2,-2
    e140:	1884703a 	and	r2,r3,r2
    e144:	1001703a 	wrctl	status,r2
  
  return context;
    e148:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    e14c:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
    e150:	008000b4 	movhi	r2,2
    e154:	108c2404 	addi	r2,r2,12432
    e158:	e0fff817 	ldw	r3,-32(fp)
    e15c:	180690fa 	slli	r3,r3,3
    e160:	10c5883a 	add	r2,r2,r3
    e164:	e0fffe17 	ldw	r3,-8(fp)
    e168:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
    e16c:	008000b4 	movhi	r2,2
    e170:	108c2404 	addi	r2,r2,12432
    e174:	e0fff817 	ldw	r3,-32(fp)
    e178:	180690fa 	slli	r3,r3,3
    e17c:	18c00104 	addi	r3,r3,4
    e180:	10c5883a 	add	r2,r2,r3
    e184:	e0ffff17 	ldw	r3,-4(fp)
    e188:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    e18c:	e0bffe17 	ldw	r2,-8(fp)
    e190:	10000526 	beq	r2,zero,e1a8 <alt_iic_isr_register+0xb4>
    e194:	e0bff817 	ldw	r2,-32(fp)
    e198:	e13ffc17 	ldw	r4,-16(fp)
    e19c:	100b883a 	mov	r5,r2
    e1a0:	000df640 	call	df64 <alt_ic_irq_enable>
    e1a4:	00000406 	br	e1b8 <alt_iic_isr_register+0xc4>
    e1a8:	e0bff817 	ldw	r2,-32(fp)
    e1ac:	e13ffc17 	ldw	r4,-16(fp)
    e1b0:	100b883a 	mov	r5,r2
    e1b4:	000e0040 	call	e004 <alt_ic_irq_disable>
    e1b8:	e0bff715 	stw	r2,-36(fp)
    e1bc:	e0bff917 	ldw	r2,-28(fp)
    e1c0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e1c4:	e0bffb17 	ldw	r2,-20(fp)
    e1c8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    e1cc:	e0bff717 	ldw	r2,-36(fp)
}
    e1d0:	e037883a 	mov	sp,fp
    e1d4:	dfc00117 	ldw	ra,4(sp)
    e1d8:	df000017 	ldw	fp,0(sp)
    e1dc:	dec00204 	addi	sp,sp,8
    e1e0:	f800283a 	ret

0000e1e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e1e4:	defffe04 	addi	sp,sp,-8
    e1e8:	dfc00115 	stw	ra,4(sp)
    e1ec:	df000015 	stw	fp,0(sp)
    e1f0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e1f4:	008000b4 	movhi	r2,2
    e1f8:	10b3cc04 	addi	r2,r2,-12496
    e1fc:	10800017 	ldw	r2,0(r2)
    e200:	10000526 	beq	r2,zero,e218 <alt_get_errno+0x34>
    e204:	008000b4 	movhi	r2,2
    e208:	10b3cc04 	addi	r2,r2,-12496
    e20c:	10800017 	ldw	r2,0(r2)
    e210:	103ee83a 	callr	r2
    e214:	00000206 	br	e220 <alt_get_errno+0x3c>
    e218:	008000b4 	movhi	r2,2
    e21c:	10b3fa04 	addi	r2,r2,-12312
}
    e220:	e037883a 	mov	sp,fp
    e224:	dfc00117 	ldw	ra,4(sp)
    e228:	df000017 	ldw	fp,0(sp)
    e22c:	dec00204 	addi	sp,sp,8
    e230:	f800283a 	ret

0000e234 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    e234:	deffed04 	addi	sp,sp,-76
    e238:	dfc01215 	stw	ra,72(sp)
    e23c:	df001115 	stw	fp,68(sp)
    e240:	df001104 	addi	fp,sp,68
    e244:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e248:	e0bfff17 	ldw	r2,-4(fp)
    e24c:	10000816 	blt	r2,zero,e270 <isatty+0x3c>
    e250:	e13fff17 	ldw	r4,-4(fp)
    e254:	01400304 	movi	r5,12
    e258:	000129c0 	call	129c <__mulsi3>
    e25c:	1007883a 	mov	r3,r2
    e260:	008000b4 	movhi	r2,2
    e264:	10ae0f04 	addi	r2,r2,-18372
    e268:	1885883a 	add	r2,r3,r2
    e26c:	00000106 	br	e274 <isatty+0x40>
    e270:	0005883a 	mov	r2,zero
    e274:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    e278:	e0bfef17 	ldw	r2,-68(fp)
    e27c:	10000e26 	beq	r2,zero,e2b8 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    e280:	e0bfef17 	ldw	r2,-68(fp)
    e284:	10800017 	ldw	r2,0(r2)
    e288:	10800817 	ldw	r2,32(r2)
    e28c:	1000021e 	bne	r2,zero,e298 <isatty+0x64>
    {
      return 1;
    e290:	00800044 	movi	r2,1
    e294:	00000d06 	br	e2cc <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    e298:	e0bff004 	addi	r2,fp,-64
    e29c:	e13fff17 	ldw	r4,-4(fp)
    e2a0:	100b883a 	mov	r5,r2
    e2a4:	000de5c0 	call	de5c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    e2a8:	e0bff117 	ldw	r2,-60(fp)
    e2ac:	10880020 	cmpeqi	r2,r2,8192
    e2b0:	10803fcc 	andi	r2,r2,255
    e2b4:	00000506 	br	e2cc <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    e2b8:	000e1e40 	call	e1e4 <alt_get_errno>
    e2bc:	1007883a 	mov	r3,r2
    e2c0:	00801444 	movi	r2,81
    e2c4:	18800015 	stw	r2,0(r3)
    return 0;
    e2c8:	0005883a 	mov	r2,zero
  }
}
    e2cc:	e037883a 	mov	sp,fp
    e2d0:	dfc00117 	ldw	ra,4(sp)
    e2d4:	df000017 	ldw	fp,0(sp)
    e2d8:	dec00204 	addi	sp,sp,8
    e2dc:	f800283a 	ret

0000e2e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e2e0:	defffe04 	addi	sp,sp,-8
    e2e4:	dfc00115 	stw	ra,4(sp)
    e2e8:	df000015 	stw	fp,0(sp)
    e2ec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e2f0:	008000b4 	movhi	r2,2
    e2f4:	10b3cc04 	addi	r2,r2,-12496
    e2f8:	10800017 	ldw	r2,0(r2)
    e2fc:	10000526 	beq	r2,zero,e314 <alt_get_errno+0x34>
    e300:	008000b4 	movhi	r2,2
    e304:	10b3cc04 	addi	r2,r2,-12496
    e308:	10800017 	ldw	r2,0(r2)
    e30c:	103ee83a 	callr	r2
    e310:	00000206 	br	e31c <alt_get_errno+0x3c>
    e314:	008000b4 	movhi	r2,2
    e318:	10b3fa04 	addi	r2,r2,-12312
}
    e31c:	e037883a 	mov	sp,fp
    e320:	dfc00117 	ldw	ra,4(sp)
    e324:	df000017 	ldw	fp,0(sp)
    e328:	dec00204 	addi	sp,sp,8
    e32c:	f800283a 	ret

0000e330 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    e330:	defff904 	addi	sp,sp,-28
    e334:	dfc00615 	stw	ra,24(sp)
    e338:	df000515 	stw	fp,20(sp)
    e33c:	df000504 	addi	fp,sp,20
    e340:	e13ffd15 	stw	r4,-12(fp)
    e344:	e17ffe15 	stw	r5,-8(fp)
    e348:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    e34c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e350:	e0bffd17 	ldw	r2,-12(fp)
    e354:	10000816 	blt	r2,zero,e378 <lseek+0x48>
    e358:	e13ffd17 	ldw	r4,-12(fp)
    e35c:	01400304 	movi	r5,12
    e360:	000129c0 	call	129c <__mulsi3>
    e364:	1007883a 	mov	r3,r2
    e368:	008000b4 	movhi	r2,2
    e36c:	10ae0f04 	addi	r2,r2,-18372
    e370:	1885883a 	add	r2,r3,r2
    e374:	00000106 	br	e37c <lseek+0x4c>
    e378:	0005883a 	mov	r2,zero
    e37c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    e380:	e0bffc17 	ldw	r2,-16(fp)
    e384:	10001026 	beq	r2,zero,e3c8 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    e388:	e0bffc17 	ldw	r2,-16(fp)
    e38c:	10800017 	ldw	r2,0(r2)
    e390:	10800717 	ldw	r2,28(r2)
    e394:	10000926 	beq	r2,zero,e3bc <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    e398:	e0bffc17 	ldw	r2,-16(fp)
    e39c:	10800017 	ldw	r2,0(r2)
    e3a0:	10800717 	ldw	r2,28(r2)
    e3a4:	e13ffc17 	ldw	r4,-16(fp)
    e3a8:	e17ffe17 	ldw	r5,-8(fp)
    e3ac:	e1bfff17 	ldw	r6,-4(fp)
    e3b0:	103ee83a 	callr	r2
    e3b4:	e0bffb15 	stw	r2,-20(fp)
    e3b8:	00000506 	br	e3d0 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    e3bc:	00bfde84 	movi	r2,-134
    e3c0:	e0bffb15 	stw	r2,-20(fp)
    e3c4:	00000206 	br	e3d0 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
    e3c8:	00bfebc4 	movi	r2,-81
    e3cc:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    e3d0:	e0bffb17 	ldw	r2,-20(fp)
    e3d4:	1000070e 	bge	r2,zero,e3f4 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
    e3d8:	000e2e00 	call	e2e0 <alt_get_errno>
    e3dc:	1007883a 	mov	r3,r2
    e3e0:	e0bffb17 	ldw	r2,-20(fp)
    e3e4:	0085c83a 	sub	r2,zero,r2
    e3e8:	18800015 	stw	r2,0(r3)
    rc = -1;
    e3ec:	00bfffc4 	movi	r2,-1
    e3f0:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    e3f4:	e0bffb17 	ldw	r2,-20(fp)
}
    e3f8:	e037883a 	mov	sp,fp
    e3fc:	dfc00117 	ldw	ra,4(sp)
    e400:	df000017 	ldw	fp,0(sp)
    e404:	dec00204 	addi	sp,sp,8
    e408:	f800283a 	ret

0000e40c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    e40c:	defff904 	addi	sp,sp,-28
    e410:	dfc00615 	stw	ra,24(sp)
    e414:	df000515 	stw	fp,20(sp)
    e418:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    e41c:	0009883a 	mov	r4,zero
    e420:	00169680 	call	16968 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    e424:	000f42c0 	call	f42c <OSInit>
    e428:	01000044 	movi	r4,1
    e42c:	0013f980 	call	13f98 <OSSemCreate>
    e430:	1007883a 	mov	r3,r2
    e434:	008000b4 	movhi	r2,2
    e438:	10b40104 	addi	r2,r2,-12284
    e43c:	10c00015 	stw	r3,0(r2)
    e440:	01000044 	movi	r4,1
    e444:	0013f980 	call	13f98 <OSSemCreate>
    e448:	1007883a 	mov	r3,r2
    e44c:	008000b4 	movhi	r2,2
    e450:	10b40304 	addi	r2,r2,-12276
    e454:	10c00015 	stw	r3,0(r2)
    e458:	008000b4 	movhi	r2,2
    e45c:	10b3fb04 	addi	r2,r2,-12308
    e460:	e0bffc15 	stw	r2,-16(fp)
    e464:	00800044 	movi	r2,1
    e468:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
    e46c:	e0bffd0b 	ldhu	r2,-12(fp)
    e470:	1009883a 	mov	r4,r2
    e474:	0013f980 	call	13f98 <OSSemCreate>
    e478:	1007883a 	mov	r3,r2
    e47c:	e0bffc17 	ldw	r2,-16(fp)
    e480:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    e484:	001699c0 	call	1699c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    e488:	010000b4 	movhi	r4,2
    e48c:	212b6604 	addi	r4,r4,-21096
    e490:	014000b4 	movhi	r5,2
    e494:	296b6604 	addi	r5,r5,-21096
    e498:	018000b4 	movhi	r6,2
    e49c:	31ab6604 	addi	r6,r6,-21096
    e4a0:	00199f80 	call	199f8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    e4a4:	00197a80 	call	197a8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    e4a8:	010000b4 	movhi	r4,2
    e4ac:	21260104 	addi	r4,r4,-26620
    e4b0:	001a6c00 	call	1a6c0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    e4b4:	d1203c17 	ldw	r4,-32528(gp)
    e4b8:	d0e03d17 	ldw	r3,-32524(gp)
    e4bc:	d0a03e17 	ldw	r2,-32520(gp)
    e4c0:	180b883a 	mov	r5,r3
    e4c4:	100d883a 	mov	r6,r2
    e4c8:	00009a40 	call	9a4 <main>
    e4cc:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
    e4d0:	01000044 	movi	r4,1
    e4d4:	000dd080 	call	dd08 <close>
  exit (result);
    e4d8:	e13ffb17 	ldw	r4,-20(fp)
    e4dc:	001a6d40 	call	1a6d4 <exit>

0000e4e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e4e0:	defffe04 	addi	sp,sp,-8
    e4e4:	dfc00115 	stw	ra,4(sp)
    e4e8:	df000015 	stw	fp,0(sp)
    e4ec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e4f0:	008000b4 	movhi	r2,2
    e4f4:	10b3cc04 	addi	r2,r2,-12496
    e4f8:	10800017 	ldw	r2,0(r2)
    e4fc:	10000526 	beq	r2,zero,e514 <alt_get_errno+0x34>
    e500:	008000b4 	movhi	r2,2
    e504:	10b3cc04 	addi	r2,r2,-12496
    e508:	10800017 	ldw	r2,0(r2)
    e50c:	103ee83a 	callr	r2
    e510:	00000206 	br	e51c <alt_get_errno+0x3c>
    e514:	008000b4 	movhi	r2,2
    e518:	10b3fa04 	addi	r2,r2,-12312
}
    e51c:	e037883a 	mov	sp,fp
    e520:	dfc00117 	ldw	ra,4(sp)
    e524:	df000017 	ldw	fp,0(sp)
    e528:	dec00204 	addi	sp,sp,8
    e52c:	f800283a 	ret

0000e530 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    e530:	defff904 	addi	sp,sp,-28
    e534:	dfc00615 	stw	ra,24(sp)
    e538:	df000515 	stw	fp,20(sp)
    e53c:	df000504 	addi	fp,sp,20
    e540:	e13ffd15 	stw	r4,-12(fp)
    e544:	e17ffe15 	stw	r5,-8(fp)
    e548:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e54c:	e0bffd17 	ldw	r2,-12(fp)
    e550:	10000816 	blt	r2,zero,e574 <read+0x44>
    e554:	e13ffd17 	ldw	r4,-12(fp)
    e558:	01400304 	movi	r5,12
    e55c:	000129c0 	call	129c <__mulsi3>
    e560:	1007883a 	mov	r3,r2
    e564:	008000b4 	movhi	r2,2
    e568:	10ae0f04 	addi	r2,r2,-18372
    e56c:	1885883a 	add	r2,r3,r2
    e570:	00000106 	br	e578 <read+0x48>
    e574:	0005883a 	mov	r2,zero
    e578:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    e57c:	e0bffb17 	ldw	r2,-20(fp)
    e580:	10002226 	beq	r2,zero,e60c <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    e584:	e0bffb17 	ldw	r2,-20(fp)
    e588:	10800217 	ldw	r2,8(r2)
    e58c:	108000cc 	andi	r2,r2,3
    e590:	10800060 	cmpeqi	r2,r2,1
    e594:	1000181e 	bne	r2,zero,e5f8 <read+0xc8>
        (fd->dev->read))
    e598:	e0bffb17 	ldw	r2,-20(fp)
    e59c:	10800017 	ldw	r2,0(r2)
    e5a0:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    e5a4:	10001426 	beq	r2,zero,e5f8 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    e5a8:	e0bffb17 	ldw	r2,-20(fp)
    e5ac:	10800017 	ldw	r2,0(r2)
    e5b0:	10800517 	ldw	r2,20(r2)
    e5b4:	e0ffff17 	ldw	r3,-4(fp)
    e5b8:	e13ffb17 	ldw	r4,-20(fp)
    e5bc:	e17ffe17 	ldw	r5,-8(fp)
    e5c0:	180d883a 	mov	r6,r3
    e5c4:	103ee83a 	callr	r2
    e5c8:	e0bffc15 	stw	r2,-16(fp)
    e5cc:	e0bffc17 	ldw	r2,-16(fp)
    e5d0:	1000070e 	bge	r2,zero,e5f0 <read+0xc0>
        {
          ALT_ERRNO = -rval;
    e5d4:	000e4e00 	call	e4e0 <alt_get_errno>
    e5d8:	1007883a 	mov	r3,r2
    e5dc:	e0bffc17 	ldw	r2,-16(fp)
    e5e0:	0085c83a 	sub	r2,zero,r2
    e5e4:	18800015 	stw	r2,0(r3)
          return -1;
    e5e8:	00bfffc4 	movi	r2,-1
    e5ec:	00000c06 	br	e620 <read+0xf0>
        }
        return rval;
    e5f0:	e0bffc17 	ldw	r2,-16(fp)
    e5f4:	00000a06 	br	e620 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
    e5f8:	000e4e00 	call	e4e0 <alt_get_errno>
    e5fc:	1007883a 	mov	r3,r2
    e600:	00800344 	movi	r2,13
    e604:	18800015 	stw	r2,0(r3)
    e608:	00000406 	br	e61c <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    e60c:	000e4e00 	call	e4e0 <alt_get_errno>
    e610:	1007883a 	mov	r3,r2
    e614:	00801444 	movi	r2,81
    e618:	18800015 	stw	r2,0(r3)
  }
  return -1;
    e61c:	00bfffc4 	movi	r2,-1
}
    e620:	e037883a 	mov	sp,fp
    e624:	dfc00117 	ldw	ra,4(sp)
    e628:	df000017 	ldw	fp,0(sp)
    e62c:	dec00204 	addi	sp,sp,8
    e630:	f800283a 	ret

0000e634 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    e634:	defffc04 	addi	sp,sp,-16
    e638:	dfc00315 	stw	ra,12(sp)
    e63c:	df000215 	stw	fp,8(sp)
    e640:	dc000115 	stw	r16,4(sp)
    e644:	df000204 	addi	fp,sp,8
    e648:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
    e64c:	e0bffe17 	ldw	r2,-8(fp)
    e650:	108000d0 	cmplti	r2,r2,3
    e654:	1000111e 	bne	r2,zero,e69c <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    e658:	040000b4 	movhi	r16,2
    e65c:	842e0f04 	addi	r16,r16,-18372
    e660:	e0bffe17 	ldw	r2,-8(fp)
    e664:	1009883a 	mov	r4,r2
    e668:	01400304 	movi	r5,12
    e66c:	000129c0 	call	129c <__mulsi3>
    e670:	10800204 	addi	r2,r2,8
    e674:	8085883a 	add	r2,r16,r2
    e678:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    e67c:	040000b4 	movhi	r16,2
    e680:	842e0f04 	addi	r16,r16,-18372
    e684:	e0bffe17 	ldw	r2,-8(fp)
    e688:	1009883a 	mov	r4,r2
    e68c:	01400304 	movi	r5,12
    e690:	000129c0 	call	129c <__mulsi3>
    e694:	8085883a 	add	r2,r16,r2
    e698:	10000015 	stw	zero,0(r2)
  }
}
    e69c:	e6ffff04 	addi	sp,fp,-4
    e6a0:	dfc00217 	ldw	ra,8(sp)
    e6a4:	df000117 	ldw	fp,4(sp)
    e6a8:	dc000017 	ldw	r16,0(sp)
    e6ac:	dec00304 	addi	sp,sp,12
    e6b0:	f800283a 	ret

0000e6b4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    e6b4:	defff904 	addi	sp,sp,-28
    e6b8:	df000615 	stw	fp,24(sp)
    e6bc:	df000604 	addi	fp,sp,24
    e6c0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e6c4:	0005303a 	rdctl	r2,status
    e6c8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e6cc:	e0fffc17 	ldw	r3,-16(fp)
    e6d0:	00bfff84 	movi	r2,-2
    e6d4:	1884703a 	and	r2,r3,r2
    e6d8:	1001703a 	wrctl	status,r2
  
  return context;
    e6dc:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    e6e0:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    e6e4:	d0a00d17 	ldw	r2,-32716(gp)
    e6e8:	10c000c4 	addi	r3,r2,3
    e6ec:	00bfff04 	movi	r2,-4
    e6f0:	1884703a 	and	r2,r3,r2
    e6f4:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    e6f8:	d0e00d17 	ldw	r3,-32716(gp)
    e6fc:	e0bfff17 	ldw	r2,-4(fp)
    e700:	1887883a 	add	r3,r3,r2
    e704:	00808034 	movhi	r2,512
    e708:	10800004 	addi	r2,r2,0
    e70c:	10c0062e 	bgeu	r2,r3,e728 <sbrk+0x74>
    e710:	e0bffa17 	ldw	r2,-24(fp)
    e714:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e718:	e0bffd17 	ldw	r2,-12(fp)
    e71c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    e720:	00bfffc4 	movi	r2,-1
    e724:	00000b06 	br	e754 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    e728:	d0a00d17 	ldw	r2,-32716(gp)
    e72c:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
    e730:	d0e00d17 	ldw	r3,-32716(gp)
    e734:	e0bfff17 	ldw	r2,-4(fp)
    e738:	1885883a 	add	r2,r3,r2
    e73c:	d0a00d15 	stw	r2,-32716(gp)
    e740:	e0bffa17 	ldw	r2,-24(fp)
    e744:	e0bffe15 	stw	r2,-8(fp)
    e748:	e0bffe17 	ldw	r2,-8(fp)
    e74c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    e750:	e0bffb17 	ldw	r2,-20(fp)
} 
    e754:	e037883a 	mov	sp,fp
    e758:	df000017 	ldw	fp,0(sp)
    e75c:	dec00104 	addi	sp,sp,4
    e760:	f800283a 	ret

0000e764 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e764:	defffe04 	addi	sp,sp,-8
    e768:	dfc00115 	stw	ra,4(sp)
    e76c:	df000015 	stw	fp,0(sp)
    e770:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e774:	008000b4 	movhi	r2,2
    e778:	10b3cc04 	addi	r2,r2,-12496
    e77c:	10800017 	ldw	r2,0(r2)
    e780:	10000526 	beq	r2,zero,e798 <alt_get_errno+0x34>
    e784:	008000b4 	movhi	r2,2
    e788:	10b3cc04 	addi	r2,r2,-12496
    e78c:	10800017 	ldw	r2,0(r2)
    e790:	103ee83a 	callr	r2
    e794:	00000206 	br	e7a0 <alt_get_errno+0x3c>
    e798:	008000b4 	movhi	r2,2
    e79c:	10b3fa04 	addi	r2,r2,-12312
}
    e7a0:	e037883a 	mov	sp,fp
    e7a4:	dfc00117 	ldw	ra,4(sp)
    e7a8:	df000017 	ldw	fp,0(sp)
    e7ac:	dec00204 	addi	sp,sp,8
    e7b0:	f800283a 	ret

0000e7b4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    e7b4:	defff904 	addi	sp,sp,-28
    e7b8:	dfc00615 	stw	ra,24(sp)
    e7bc:	df000515 	stw	fp,20(sp)
    e7c0:	df000504 	addi	fp,sp,20
    e7c4:	e13ffd15 	stw	r4,-12(fp)
    e7c8:	e17ffe15 	stw	r5,-8(fp)
    e7cc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e7d0:	e0bffd17 	ldw	r2,-12(fp)
    e7d4:	10000816 	blt	r2,zero,e7f8 <write+0x44>
    e7d8:	e13ffd17 	ldw	r4,-12(fp)
    e7dc:	01400304 	movi	r5,12
    e7e0:	000129c0 	call	129c <__mulsi3>
    e7e4:	1007883a 	mov	r3,r2
    e7e8:	008000b4 	movhi	r2,2
    e7ec:	10ae0f04 	addi	r2,r2,-18372
    e7f0:	1885883a 	add	r2,r3,r2
    e7f4:	00000106 	br	e7fc <write+0x48>
    e7f8:	0005883a 	mov	r2,zero
    e7fc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    e800:	e0bffb17 	ldw	r2,-20(fp)
    e804:	10002126 	beq	r2,zero,e88c <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    e808:	e0bffb17 	ldw	r2,-20(fp)
    e80c:	10800217 	ldw	r2,8(r2)
    e810:	108000cc 	andi	r2,r2,3
    e814:	10001826 	beq	r2,zero,e878 <write+0xc4>
    e818:	e0bffb17 	ldw	r2,-20(fp)
    e81c:	10800017 	ldw	r2,0(r2)
    e820:	10800617 	ldw	r2,24(r2)
    e824:	10001426 	beq	r2,zero,e878 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    e828:	e0bffb17 	ldw	r2,-20(fp)
    e82c:	10800017 	ldw	r2,0(r2)
    e830:	10800617 	ldw	r2,24(r2)
    e834:	e0ffff17 	ldw	r3,-4(fp)
    e838:	e13ffb17 	ldw	r4,-20(fp)
    e83c:	e17ffe17 	ldw	r5,-8(fp)
    e840:	180d883a 	mov	r6,r3
    e844:	103ee83a 	callr	r2
    e848:	e0bffc15 	stw	r2,-16(fp)
    e84c:	e0bffc17 	ldw	r2,-16(fp)
    e850:	1000070e 	bge	r2,zero,e870 <write+0xbc>
      {
        ALT_ERRNO = -rval;
    e854:	000e7640 	call	e764 <alt_get_errno>
    e858:	1007883a 	mov	r3,r2
    e85c:	e0bffc17 	ldw	r2,-16(fp)
    e860:	0085c83a 	sub	r2,zero,r2
    e864:	18800015 	stw	r2,0(r3)
        return -1;
    e868:	00bfffc4 	movi	r2,-1
    e86c:	00000c06 	br	e8a0 <write+0xec>
      }
      return rval;
    e870:	e0bffc17 	ldw	r2,-16(fp)
    e874:	00000a06 	br	e8a0 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
    e878:	000e7640 	call	e764 <alt_get_errno>
    e87c:	1007883a 	mov	r3,r2
    e880:	00800344 	movi	r2,13
    e884:	18800015 	stw	r2,0(r3)
    e888:	00000406 	br	e89c <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    e88c:	000e7640 	call	e764 <alt_get_errno>
    e890:	1007883a 	mov	r3,r2
    e894:	00801444 	movi	r2,81
    e898:	18800015 	stw	r2,0(r3)
  }
  return -1;
    e89c:	00bfffc4 	movi	r2,-1
}
    e8a0:	e037883a 	mov	sp,fp
    e8a4:	dfc00117 	ldw	ra,4(sp)
    e8a8:	df000017 	ldw	fp,0(sp)
    e8ac:	dec00204 	addi	sp,sp,8
    e8b0:	f800283a 	ret

0000e8b4 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
    e8b4:	deffdf04 	addi	sp,sp,-132
    e8b8:	dfc02015 	stw	ra,128(sp)
    e8bc:	df001f15 	stw	fp,124(sp)
    e8c0:	df001f04 	addi	fp,sp,124
    e8c4:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
    e8c8:	e0bfe204 	addi	r2,fp,-120
    e8cc:	01003fc4 	movi	r4,255
    e8d0:	100b883a 	mov	r5,r2
    e8d4:	001614c0 	call	1614c <OSTaskQuery>
    e8d8:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
    e8dc:	e0bffe83 	ldbu	r2,-6(fp)
    e8e0:	10803fcc 	andi	r2,r2,255
    e8e4:	10000126 	beq	r2,zero,e8ec <__env_lock+0x38>
    return;
    e8e8:	00001d06 	br	e960 <__env_lock+0xac>

  id = tcb.OSTCBPrio;
    e8ec:	e0bfee83 	ldbu	r2,-70(fp)
    e8f0:	10803fcc 	andi	r2,r2,255
    e8f4:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
    e8f8:	d0e04017 	ldw	r3,-32512(gp)
    e8fc:	e0bffd04 	addi	r2,fp,-12
    e900:	1809883a 	mov	r4,r3
    e904:	100b883a 	mov	r5,r2
    e908:	00147e40 	call	147e4 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
    e90c:	e0bffe43 	ldbu	r2,-7(fp)
    e910:	10803fcc 	andi	r2,r2,255
    e914:	10000726 	beq	r2,zero,e934 <__env_lock+0x80>
    e918:	d0a00e17 	ldw	r2,-32712(gp)
    e91c:	e0ffe117 	ldw	r3,-124(fp)
    e920:	1880041e 	bne	r3,r2,e934 <__env_lock+0x80>
  {
    /* we do; just count the recursion */

    locks++;
    e924:	d0a03f17 	ldw	r2,-32516(gp)
    e928:	10800044 	addi	r2,r2,1
    e92c:	d0a03f15 	stw	r2,-32516(gp)
    e930:	00000a06 	br	e95c <__env_lock+0xa8>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
    e934:	d0e04017 	ldw	r3,-32512(gp)
    e938:	e0bffe84 	addi	r2,fp,-6
    e93c:	1809883a 	mov	r4,r3
    e940:	000b883a 	mov	r5,zero
    e944:	100d883a 	mov	r6,r2
    e948:	00143000 	call	14300 <OSSemPend>
    locks  = 1;
    e94c:	00800044 	movi	r2,1
    e950:	d0a03f15 	stw	r2,-32516(gp)
    lockid = id;
    e954:	e0bfe117 	ldw	r2,-124(fp)
    e958:	d0a00e15 	stw	r2,-32712(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
    e95c:	0001883a 	nop
}
    e960:	e037883a 	mov	sp,fp
    e964:	dfc00117 	ldw	ra,4(sp)
    e968:	df000017 	ldw	fp,0(sp)
    e96c:	dec00204 	addi	sp,sp,8
    e970:	f800283a 	ret

0000e974 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
    e974:	defffd04 	addi	sp,sp,-12
    e978:	dfc00215 	stw	ra,8(sp)
    e97c:	df000115 	stw	fp,4(sp)
    e980:	df000104 	addi	fp,sp,4
    e984:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    e988:	d0a03f17 	ldw	r2,-32516(gp)
    e98c:	1000011e 	bne	r2,zero,e994 <__env_unlock+0x20>
    return;
    e990:	00000a06 	br	e9bc <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
    e994:	d0a03f17 	ldw	r2,-32516(gp)
    e998:	10bfffc4 	addi	r2,r2,-1
    e99c:	d0a03f15 	stw	r2,-32516(gp)
    e9a0:	d0a03f17 	ldw	r2,-32516(gp)
    e9a4:	1000051e 	bne	r2,zero,e9bc <__env_unlock+0x48>
  {
    lockid = -1;
    e9a8:	00bfffc4 	movi	r2,-1
    e9ac:	d0a00e15 	stw	r2,-32712(gp)
    OSSemPost( alt_envsem );
    e9b0:	d0a04017 	ldw	r2,-32512(gp)
    e9b4:	1009883a 	mov	r4,r2
    e9b8:	00146d40 	call	146d4 <OSSemPost>
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
    e9bc:	e037883a 	mov	sp,fp
    e9c0:	dfc00117 	ldw	ra,4(sp)
    e9c4:	df000017 	ldw	fp,0(sp)
    e9c8:	dec00204 	addi	sp,sp,8
    e9cc:	f800283a 	ret

0000e9d0 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
    e9d0:	deffdb04 	addi	sp,sp,-148
    e9d4:	dfc02415 	stw	ra,144(sp)
    e9d8:	df002315 	stw	fp,140(sp)
    e9dc:	df002304 	addi	fp,sp,140
    e9e0:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    e9e4:	e03fdd15 	stw	zero,-140(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
    e9e8:	008000b4 	movhi	r2,2
    e9ec:	10b40444 	addi	r2,r2,-12271
    e9f0:	10800003 	ldbu	r2,0(r2)
    e9f4:	10803fcc 	andi	r2,r2,255
    e9f8:	10800060 	cmpeqi	r2,r2,1
    e9fc:	1000011e 	bne	r2,zero,ea04 <__malloc_lock+0x34>
      return;
    ea00:	00003606 	br	eadc <__malloc_lock+0x10c>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
    ea04:	e0bfe204 	addi	r2,fp,-120
    ea08:	01003fc4 	movi	r4,255
    ea0c:	100b883a 	mov	r5,r2
    ea10:	001614c0 	call	1614c <OSTaskQuery>
    ea14:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
    ea18:	e0bffe83 	ldbu	r2,-6(fp)
    ea1c:	10803fcc 	andi	r2,r2,255
    ea20:	10000126 	beq	r2,zero,ea28 <__malloc_lock+0x58>
    return;
    ea24:	00002d06 	br	eadc <__malloc_lock+0x10c>

  id = tcb.OSTCBPrio;
    ea28:	e0bfee83 	ldbu	r2,-70(fp)
    ea2c:	10803fcc 	andi	r2,r2,255
    ea30:	e0bfde15 	stw	r2,-136(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
    ea34:	d0e04217 	ldw	r3,-32504(gp)
    ea38:	e0bffd04 	addi	r2,fp,-12
    ea3c:	1809883a 	mov	r4,r3
    ea40:	100b883a 	mov	r5,r2
    ea44:	00147e40 	call	147e4 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ea48:	0005303a 	rdctl	r2,status
    ea4c:	e0bfdf15 	stw	r2,-132(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ea50:	e0ffdf17 	ldw	r3,-132(fp)
    ea54:	00bfff84 	movi	r2,-2
    ea58:	1884703a 	and	r2,r3,r2
    ea5c:	1001703a 	wrctl	status,r2
  
  return context;
    ea60:	e0bfdf17 	ldw	r2,-132(fp)
  
  OS_ENTER_CRITICAL();
    ea64:	e0bfdd15 	stw	r2,-140(fp)

  if( !semdata.OSCnt && id == lockid ) 
    ea68:	e0bffd0b 	ldhu	r2,-12(fp)
    ea6c:	10bfffcc 	andi	r2,r2,65535
    ea70:	10000b1e 	bne	r2,zero,eaa0 <__malloc_lock+0xd0>
    ea74:	d0a00f17 	ldw	r2,-32708(gp)
    ea78:	e0ffde17 	ldw	r3,-136(fp)
    ea7c:	1880081e 	bne	r3,r2,eaa0 <__malloc_lock+0xd0>
  {
    /* we do; just count the recursion */
    locks++;
    ea80:	d0a04117 	ldw	r2,-32508(gp)
    ea84:	10800044 	addi	r2,r2,1
    ea88:	d0a04115 	stw	r2,-32508(gp)
    ea8c:	e0bfdd17 	ldw	r2,-140(fp)
    ea90:	e0bfe015 	stw	r2,-128(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ea94:	e0bfe017 	ldw	r2,-128(fp)
    ea98:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    ea9c:	00000e06 	br	ead8 <__malloc_lock+0x108>
    eaa0:	e0bfdd17 	ldw	r2,-140(fp)
    eaa4:	e0bfe115 	stw	r2,-124(fp)
    eaa8:	e0bfe117 	ldw	r2,-124(fp)
    eaac:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
    eab0:	d0e04217 	ldw	r3,-32504(gp)
    eab4:	e0bffe84 	addi	r2,fp,-6
    eab8:	1809883a 	mov	r4,r3
    eabc:	000b883a 	mov	r5,zero
    eac0:	100d883a 	mov	r6,r2
    eac4:	00143000 	call	14300 <OSSemPend>
    locks  = 1;
    eac8:	00800044 	movi	r2,1
    eacc:	d0a04115 	stw	r2,-32508(gp)
    lockid = id;
    ead0:	e0bfde17 	ldw	r2,-136(fp)
    ead4:	d0a00f15 	stw	r2,-32708(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
    ead8:	0001883a 	nop
}
    eadc:	e037883a 	mov	sp,fp
    eae0:	dfc00117 	ldw	ra,4(sp)
    eae4:	df000017 	ldw	fp,0(sp)
    eae8:	dec00204 	addi	sp,sp,8
    eaec:	f800283a 	ret

0000eaf0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    eaf0:	defff804 	addi	sp,sp,-32
    eaf4:	dfc00715 	stw	ra,28(sp)
    eaf8:	df000615 	stw	fp,24(sp)
    eafc:	df000604 	addi	fp,sp,24
    eb00:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    eb04:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
    eb08:	008000b4 	movhi	r2,2
    eb0c:	10b40444 	addi	r2,r2,-12271
    eb10:	10800003 	ldbu	r2,0(r2)
    eb14:	10803fcc 	andi	r2,r2,255
    eb18:	10800060 	cmpeqi	r2,r2,1
    eb1c:	1000011e 	bne	r2,zero,eb24 <__malloc_unlock+0x34>
      return;
    eb20:	00002206 	br	ebac <__malloc_unlock+0xbc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    eb24:	0005303a 	rdctl	r2,status
    eb28:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    eb2c:	e0fffb17 	ldw	r3,-20(fp)
    eb30:	00bfff84 	movi	r2,-2
    eb34:	1884703a 	and	r2,r3,r2
    eb38:	1001703a 	wrctl	status,r2
  
  return context;
    eb3c:	e0bffb17 	ldw	r2,-20(fp)

  OS_ENTER_CRITICAL();
    eb40:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
    eb44:	d0a04117 	ldw	r2,-32508(gp)
    eb48:	1000051e 	bne	r2,zero,eb60 <__malloc_unlock+0x70>
    eb4c:	e0bffa17 	ldw	r2,-24(fp)
    eb50:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    eb54:	e0bffc17 	ldw	r2,-16(fp)
    eb58:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
    eb5c:	00001306 	br	ebac <__malloc_unlock+0xbc>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
    eb60:	d0a04117 	ldw	r2,-32508(gp)
    eb64:	10bfffc4 	addi	r2,r2,-1
    eb68:	d0a04115 	stw	r2,-32508(gp)
    eb6c:	d0a04117 	ldw	r2,-32508(gp)
    eb70:	10000a1e 	bne	r2,zero,eb9c <__malloc_unlock+0xac>
  {
    lockid = -1;
    eb74:	00bfffc4 	movi	r2,-1
    eb78:	d0a00f15 	stw	r2,-32708(gp)
    eb7c:	e0bffa17 	ldw	r2,-24(fp)
    eb80:	e0bffd15 	stw	r2,-12(fp)
    eb84:	e0bffd17 	ldw	r2,-12(fp)
    eb88:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
    eb8c:	d0a04217 	ldw	r2,-32504(gp)
    eb90:	1009883a 	mov	r4,r2
    eb94:	00146d40 	call	146d4 <OSSemPost>
    eb98:	00000406 	br	ebac <__malloc_unlock+0xbc>
    eb9c:	e0bffa17 	ldw	r2,-24(fp)
    eba0:	e0bffe15 	stw	r2,-8(fp)
    eba4:	e0bffe17 	ldw	r2,-8(fp)
    eba8:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
    ebac:	e037883a 	mov	sp,fp
    ebb0:	dfc00117 	ldw	ra,4(sp)
    ebb4:	df000017 	ldw	fp,0(sp)
    ebb8:	dec00204 	addi	sp,sp,8
    ebbc:	f800283a 	ret

0000ebc0 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
    ebc0:	defff704 	addi	sp,sp,-36
    ebc4:	dfc00815 	stw	ra,32(sp)
    ebc8:	df000715 	stw	fp,28(sp)
    ebcc:	df000704 	addi	fp,sp,28
    ebd0:	e13ffd15 	stw	r4,-12(fp)
    ebd4:	e17ffe15 	stw	r5,-8(fp)
    ebd8:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    ebdc:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    ebe0:	e0bfff17 	ldw	r2,-4(fp)
    ebe4:	1000021e 	bne	r2,zero,ebf0 <OSEventNameGet+0x30>
        return (0);
    ebe8:	0005883a 	mov	r2,zero
    ebec:	00003706 	br	eccc <OSEventNameGet+0x10c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
    ebf0:	e0bffd17 	ldw	r2,-12(fp)
    ebf4:	1000051e 	bne	r2,zero,ec0c <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
    ebf8:	e0bfff17 	ldw	r2,-4(fp)
    ebfc:	00c00104 	movi	r3,4
    ec00:	10c00005 	stb	r3,0(r2)
        return (0);
    ec04:	0005883a 	mov	r2,zero
    ec08:	00003006 	br	eccc <OSEventNameGet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    ec0c:	e0bffe17 	ldw	r2,-8(fp)
    ec10:	1000051e 	bne	r2,zero,ec28 <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
    ec14:	e0bfff17 	ldw	r2,-4(fp)
    ec18:	00c00304 	movi	r3,12
    ec1c:	10c00005 	stb	r3,0(r2)
        return (0);
    ec20:	0005883a 	mov	r2,zero
    ec24:	00002906 	br	eccc <OSEventNameGet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    ec28:	d0a05103 	ldbu	r2,-32444(gp)
    ec2c:	10803fcc 	andi	r2,r2,255
    ec30:	10000526 	beq	r2,zero,ec48 <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
    ec34:	e0bfff17 	ldw	r2,-4(fp)
    ec38:	00c00444 	movi	r3,17
    ec3c:	10c00005 	stb	r3,0(r2)
        return (0);
    ec40:	0005883a 	mov	r2,zero
    ec44:	00002106 	br	eccc <OSEventNameGet+0x10c>
    }
    switch (pevent->OSEventType) {
    ec48:	e0bffd17 	ldw	r2,-12(fp)
    ec4c:	10800003 	ldbu	r2,0(r2)
    ec50:	10803fcc 	andi	r2,r2,255
    ec54:	10bfffc4 	addi	r2,r2,-1
    ec58:	10800128 	cmpgeui	r2,r2,4
    ec5c:	10000526 	beq	r2,zero,ec74 <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
    ec60:	e0bfff17 	ldw	r2,-4(fp)
    ec64:	00c00044 	movi	r3,1
    ec68:	10c00005 	stb	r3,0(r2)
             return (0);
    ec6c:	0005883a 	mov	r2,zero
    ec70:	00001606 	br	eccc <OSEventNameGet+0x10c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
    ec74:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ec78:	0005303a 	rdctl	r2,status
    ec7c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ec80:	e0fffb17 	ldw	r3,-20(fp)
    ec84:	00bfff84 	movi	r2,-2
    ec88:	1884703a 	and	r2,r3,r2
    ec8c:	1001703a 	wrctl	status,r2
  
  return context;
    ec90:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
    ec94:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
    ec98:	e0bffd17 	ldw	r2,-12(fp)
    ec9c:	10800384 	addi	r2,r2,14
    eca0:	e13ffe17 	ldw	r4,-8(fp)
    eca4:	100b883a 	mov	r5,r2
    eca8:	00106140 	call	10614 <OS_StrCopy>
    ecac:	e0bffa05 	stb	r2,-24(fp)
    ecb0:	e0bff917 	ldw	r2,-28(fp)
    ecb4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ecb8:	e0bffc17 	ldw	r2,-16(fp)
    ecbc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    ecc0:	e0bfff17 	ldw	r2,-4(fp)
    ecc4:	10000005 	stb	zero,0(r2)
    return (len);
    ecc8:	e0bffa03 	ldbu	r2,-24(fp)
}
    eccc:	e037883a 	mov	sp,fp
    ecd0:	dfc00117 	ldw	ra,4(sp)
    ecd4:	df000017 	ldw	fp,0(sp)
    ecd8:	dec00204 	addi	sp,sp,8
    ecdc:	f800283a 	ret

0000ece0 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
    ece0:	defff604 	addi	sp,sp,-40
    ece4:	dfc00915 	stw	ra,36(sp)
    ece8:	df000815 	stw	fp,32(sp)
    ecec:	df000804 	addi	fp,sp,32
    ecf0:	e13ffd15 	stw	r4,-12(fp)
    ecf4:	e17ffe15 	stw	r5,-8(fp)
    ecf8:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    ecfc:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    ed00:	e0bfff17 	ldw	r2,-4(fp)
    ed04:	1000011e 	bne	r2,zero,ed0c <OSEventNameSet+0x2c>
        return;
    ed08:	00003f06 	br	ee08 <OSEventNameSet+0x128>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
    ed0c:	e0bffd17 	ldw	r2,-12(fp)
    ed10:	1000041e 	bne	r2,zero,ed24 <OSEventNameSet+0x44>
        *perr = OS_ERR_PEVENT_NULL;
    ed14:	e0bfff17 	ldw	r2,-4(fp)
    ed18:	00c00104 	movi	r3,4
    ed1c:	10c00005 	stb	r3,0(r2)
        return;
    ed20:	00003906 	br	ee08 <OSEventNameSet+0x128>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    ed24:	e0bffe17 	ldw	r2,-8(fp)
    ed28:	1000041e 	bne	r2,zero,ed3c <OSEventNameSet+0x5c>
        *perr = OS_ERR_PNAME_NULL;
    ed2c:	e0bfff17 	ldw	r2,-4(fp)
    ed30:	00c00304 	movi	r3,12
    ed34:	10c00005 	stb	r3,0(r2)
        return;
    ed38:	00003306 	br	ee08 <OSEventNameSet+0x128>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    ed3c:	d0a05103 	ldbu	r2,-32444(gp)
    ed40:	10803fcc 	andi	r2,r2,255
    ed44:	10000426 	beq	r2,zero,ed58 <OSEventNameSet+0x78>
        *perr = OS_ERR_NAME_SET_ISR;
    ed48:	e0bfff17 	ldw	r2,-4(fp)
    ed4c:	00c00484 	movi	r3,18
    ed50:	10c00005 	stb	r3,0(r2)
        return;
    ed54:	00002c06 	br	ee08 <OSEventNameSet+0x128>
    }
    switch (pevent->OSEventType) {
    ed58:	e0bffd17 	ldw	r2,-12(fp)
    ed5c:	10800003 	ldbu	r2,0(r2)
    ed60:	10803fcc 	andi	r2,r2,255
    ed64:	10bfffc4 	addi	r2,r2,-1
    ed68:	10800128 	cmpgeui	r2,r2,4
    ed6c:	10000426 	beq	r2,zero,ed80 <OSEventNameSet+0xa0>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
    ed70:	e0bfff17 	ldw	r2,-4(fp)
    ed74:	00c00044 	movi	r3,1
    ed78:	10c00005 	stb	r3,0(r2)
             return;
    ed7c:	00002206 	br	ee08 <OSEventNameSet+0x128>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
    ed80:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ed84:	0005303a 	rdctl	r2,status
    ed88:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ed8c:	e0fffa17 	ldw	r3,-24(fp)
    ed90:	00bfff84 	movi	r2,-2
    ed94:	1884703a 	and	r2,r3,r2
    ed98:	1001703a 	wrctl	status,r2
  
  return context;
    ed9c:	e0bffa17 	ldw	r2,-24(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
    eda0:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
    eda4:	e13ffe17 	ldw	r4,-8(fp)
    eda8:	00106880 	call	10688 <OS_StrLen>
    edac:	e0bff905 	stb	r2,-28(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
    edb0:	e0bff903 	ldbu	r2,-28(fp)
    edb4:	10800830 	cmpltui	r2,r2,32
    edb8:	1000081e 	bne	r2,zero,eddc <OSEventNameSet+0xfc>
    edbc:	e0bff817 	ldw	r2,-32(fp)
    edc0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    edc4:	e0bffb17 	ldw	r2,-20(fp)
    edc8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
    edcc:	e0bfff17 	ldw	r2,-4(fp)
    edd0:	00c002c4 	movi	r3,11
    edd4:	10c00005 	stb	r3,0(r2)
        return;
    edd8:	00000b06 	br	ee08 <OSEventNameSet+0x128>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    eddc:	e0bffd17 	ldw	r2,-12(fp)
    ede0:	10800384 	addi	r2,r2,14
    ede4:	1009883a 	mov	r4,r2
    ede8:	e17ffe17 	ldw	r5,-8(fp)
    edec:	00106140 	call	10614 <OS_StrCopy>
    edf0:	e0bff817 	ldw	r2,-32(fp)
    edf4:	e0bffc15 	stw	r2,-16(fp)
    edf8:	e0bffc17 	ldw	r2,-16(fp)
    edfc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    ee00:	e0bfff17 	ldw	r2,-4(fp)
    ee04:	10000005 	stb	zero,0(r2)
}
    ee08:	e037883a 	mov	sp,fp
    ee0c:	dfc00117 	ldw	ra,4(sp)
    ee10:	df000017 	ldw	fp,0(sp)
    ee14:	dec00204 	addi	sp,sp,8
    ee18:	f800283a 	ret

0000ee1c <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
    ee1c:	deffed04 	addi	sp,sp,-76
    ee20:	dfc01215 	stw	ra,72(sp)
    ee24:	df001115 	stw	fp,68(sp)
    ee28:	df001104 	addi	fp,sp,68
    ee2c:	e13ffc15 	stw	r4,-16(fp)
    ee30:	e17ffd15 	stw	r5,-12(fp)
    ee34:	e1bffe15 	stw	r6,-8(fp)
    ee38:	3805883a 	mov	r2,r7
    ee3c:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
    ee40:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
    ee44:	e0800217 	ldw	r2,8(fp)
    ee48:	1000021e 	bne	r2,zero,ee54 <OSEventPendMulti+0x38>
        return (0);
    ee4c:	0005883a 	mov	r2,zero
    ee50:	00017106 	br	f418 <OSEventPendMulti+0x5fc>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
    ee54:	e0bffc17 	ldw	r2,-16(fp)
    ee58:	1000051e 	bne	r2,zero,ee70 <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
    ee5c:	e0800217 	ldw	r2,8(fp)
    ee60:	00c00104 	movi	r3,4
    ee64:	10c00005 	stb	r3,0(r2)
        return (0);
    ee68:	0005883a 	mov	r2,zero
    ee6c:	00016a06 	br	f418 <OSEventPendMulti+0x5fc>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
    ee70:	e0bffd17 	ldw	r2,-12(fp)
    ee74:	1000051e 	bne	r2,zero,ee8c <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
    ee78:	e0800217 	ldw	r2,8(fp)
    ee7c:	00c00104 	movi	r3,4
    ee80:	10c00005 	stb	r3,0(r2)
        return (0);
    ee84:	0005883a 	mov	r2,zero
    ee88:	00016306 	br	f418 <OSEventPendMulti+0x5fc>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
    ee8c:	e0bffe17 	ldw	r2,-8(fp)
    ee90:	1000051e 	bne	r2,zero,eea8 <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
    ee94:	e0800217 	ldw	r2,8(fp)
    ee98:	00c00104 	movi	r3,4
    ee9c:	10c00005 	stb	r3,0(r2)
        return (0);
    eea0:	0005883a 	mov	r2,zero
    eea4:	00015c06 	br	f418 <OSEventPendMulti+0x5fc>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
    eea8:	e0bffd17 	ldw	r2,-12(fp)
    eeac:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
    eeb0:	e0bffc17 	ldw	r2,-16(fp)
    eeb4:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
    eeb8:	e0bfef17 	ldw	r2,-68(fp)
    eebc:	10800017 	ldw	r2,0(r2)
    eec0:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
    eec4:	00001906 	br	ef2c <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
    eec8:	e0bff017 	ldw	r2,-64(fp)
    eecc:	10800003 	ldbu	r2,0(r2)
    eed0:	10803fcc 	andi	r2,r2,255
    eed4:	10c000a0 	cmpeqi	r3,r2,2
    eed8:	1800091e 	bne	r3,zero,ef00 <OSEventPendMulti+0xe4>
    eedc:	10c000e0 	cmpeqi	r3,r2,3
    eee0:	1800091e 	bne	r3,zero,ef08 <OSEventPendMulti+0xec>
    eee4:	10800060 	cmpeqi	r2,r2,1
    eee8:	1000091e 	bne	r2,zero,ef10 <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
    eeec:	e0800217 	ldw	r2,8(fp)
    eef0:	00c00044 	movi	r3,1
    eef4:	10c00005 	stb	r3,0(r2)
                 return (0);
    eef8:	0005883a 	mov	r2,zero
    eefc:	00014606 	br	f418 <OSEventPendMulti+0x5fc>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
    ef00:	0001883a 	nop
    ef04:	00000306 	br	ef14 <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
    ef08:	0001883a 	nop
    ef0c:	00000106 	br	ef14 <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
    ef10:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
    ef14:	e0bfef17 	ldw	r2,-68(fp)
    ef18:	10800104 	addi	r2,r2,4
    ef1c:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
    ef20:	e0bfef17 	ldw	r2,-68(fp)
    ef24:	10800017 	ldw	r2,0(r2)
    ef28:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
    ef2c:	e0bff017 	ldw	r2,-64(fp)
    ef30:	103fe51e 	bne	r2,zero,eec8 <OSEventPendMulti+0xac>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
    ef34:	d0a05103 	ldbu	r2,-32444(gp)
    ef38:	10803fcc 	andi	r2,r2,255
    ef3c:	10000526 	beq	r2,zero,ef54 <OSEventPendMulti+0x138>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
    ef40:	e0800217 	ldw	r2,8(fp)
    ef44:	00c00084 	movi	r3,2
    ef48:	10c00005 	stb	r3,0(r2)
        return (0);
    ef4c:	0005883a 	mov	r2,zero
    ef50:	00013106 	br	f418 <OSEventPendMulti+0x5fc>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
    ef54:	d0a04303 	ldbu	r2,-32500(gp)
    ef58:	10803fcc 	andi	r2,r2,255
    ef5c:	10000526 	beq	r2,zero,ef74 <OSEventPendMulti+0x158>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
    ef60:	e0800217 	ldw	r2,8(fp)
    ef64:	00c00344 	movi	r3,13
    ef68:	10c00005 	stb	r3,0(r2)
        return (0);
    ef6c:	0005883a 	mov	r2,zero
    ef70:	00012906 	br	f418 <OSEventPendMulti+0x5fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ef74:	0005303a 	rdctl	r2,status
    ef78:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ef7c:	e0fff517 	ldw	r3,-44(fp)
    ef80:	00bfff84 	movi	r2,-2
    ef84:	1884703a 	and	r2,r3,r2
    ef88:	1001703a 	wrctl	status,r2
  
  return context;
    ef8c:	e0bff517 	ldw	r2,-44(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
    ef90:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
    ef94:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
    ef98:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
    ef9c:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
    efa0:	e0bffc17 	ldw	r2,-16(fp)
    efa4:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
    efa8:	e0bfef17 	ldw	r2,-68(fp)
    efac:	10800017 	ldw	r2,0(r2)
    efb0:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
    efb4:	00008106 	br	f1bc <OSEventPendMulti+0x3a0>
        switch (pevent->OSEventType) {
    efb8:	e0bff017 	ldw	r2,-64(fp)
    efbc:	10800003 	ldbu	r2,0(r2)
    efc0:	10803fcc 	andi	r2,r2,255
    efc4:	10c000a0 	cmpeqi	r3,r2,2
    efc8:	18003c1e 	bne	r3,zero,f0bc <OSEventPendMulti+0x2a0>
    efcc:	10c000e0 	cmpeqi	r3,r2,3
    efd0:	1800031e 	bne	r3,zero,efe0 <OSEventPendMulti+0x1c4>
    efd4:	10800060 	cmpeqi	r2,r2,1
    efd8:	10001e1e 	bne	r2,zero,f054 <OSEventPendMulti+0x238>
    efdc:	00006606 	br	f178 <OSEventPendMulti+0x35c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
    efe0:	e0bff017 	ldw	r2,-64(fp)
    efe4:	1080020b 	ldhu	r2,8(r2)
    efe8:	10bfffcc 	andi	r2,r2,65535
    efec:	10001526 	beq	r2,zero,f044 <OSEventPendMulti+0x228>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
    eff0:	e0bff017 	ldw	r2,-64(fp)
    eff4:	1080020b 	ldhu	r2,8(r2)
    eff8:	10bfffc4 	addi	r2,r2,-1
    effc:	1007883a 	mov	r3,r2
    f000:	e0bff017 	ldw	r2,-64(fp)
    f004:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
    f008:	e0bffd17 	ldw	r2,-12(fp)
    f00c:	10c00104 	addi	r3,r2,4
    f010:	e0fffd15 	stw	r3,-12(fp)
    f014:	e0fff017 	ldw	r3,-64(fp)
    f018:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
    f01c:	00800044 	movi	r2,1
    f020:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
    f024:	e0bffe17 	ldw	r2,-8(fp)
    f028:	10c00104 	addi	r3,r2,4
    f02c:	e0fffe15 	stw	r3,-8(fp)
    f030:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
    f034:	e0bff18b 	ldhu	r2,-58(fp)
    f038:	10800044 	addi	r2,r2,1
    f03c:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
    f040:	00005806 	br	f1a4 <OSEventPendMulti+0x388>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
    f044:	e0bff203 	ldbu	r2,-56(fp)
    f048:	10800054 	ori	r2,r2,1
    f04c:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
    f050:	00005406 	br	f1a4 <OSEventPendMulti+0x388>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
    f054:	e0bff017 	ldw	r2,-64(fp)
    f058:	10800117 	ldw	r2,4(r2)
    f05c:	10001326 	beq	r2,zero,f0ac <OSEventPendMulti+0x290>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
    f060:	e0bffe17 	ldw	r2,-8(fp)
    f064:	10c00104 	addi	r3,r2,4
    f068:	e0fffe15 	stw	r3,-8(fp)
    f06c:	e0fff017 	ldw	r3,-64(fp)
    f070:	18c00117 	ldw	r3,4(r3)
    f074:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
    f078:	e0bff017 	ldw	r2,-64(fp)
    f07c:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
    f080:	e0bffd17 	ldw	r2,-12(fp)
    f084:	10c00104 	addi	r3,r2,4
    f088:	e0fffd15 	stw	r3,-12(fp)
    f08c:	e0fff017 	ldw	r3,-64(fp)
    f090:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
    f094:	00800044 	movi	r2,1
    f098:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
    f09c:	e0bff18b 	ldhu	r2,-58(fp)
    f0a0:	10800044 	addi	r2,r2,1
    f0a4:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
    f0a8:	00003e06 	br	f1a4 <OSEventPendMulti+0x388>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
    f0ac:	e0bff203 	ldbu	r2,-56(fp)
    f0b0:	10800094 	ori	r2,r2,2
    f0b4:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
    f0b8:	00003a06 	br	f1a4 <OSEventPendMulti+0x388>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
    f0bc:	e0bff017 	ldw	r2,-64(fp)
    f0c0:	10800117 	ldw	r2,4(r2)
    f0c4:	e0bff415 	stw	r2,-48(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
    f0c8:	e0bff417 	ldw	r2,-48(fp)
    f0cc:	1080058b 	ldhu	r2,22(r2)
    f0d0:	10bfffcc 	andi	r2,r2,65535
    f0d4:	10002426 	beq	r2,zero,f168 <OSEventPendMulti+0x34c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
    f0d8:	e0bffe17 	ldw	r2,-8(fp)
    f0dc:	10c00104 	addi	r3,r2,4
    f0e0:	e0fffe15 	stw	r3,-8(fp)
    f0e4:	e0fff417 	ldw	r3,-48(fp)
    f0e8:	18c00417 	ldw	r3,16(r3)
    f0ec:	19400104 	addi	r5,r3,4
    f0f0:	e13ff417 	ldw	r4,-48(fp)
    f0f4:	21400415 	stw	r5,16(r4)
    f0f8:	18c00017 	ldw	r3,0(r3)
    f0fc:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
    f100:	e0bff417 	ldw	r2,-48(fp)
    f104:	10c00417 	ldw	r3,16(r2)
    f108:	e0bff417 	ldw	r2,-48(fp)
    f10c:	10800217 	ldw	r2,8(r2)
    f110:	1880041e 	bne	r3,r2,f124 <OSEventPendMulti+0x308>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
    f114:	e0bff417 	ldw	r2,-48(fp)
    f118:	10c00117 	ldw	r3,4(r2)
    f11c:	e0bff417 	ldw	r2,-48(fp)
    f120:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
    f124:	e0bff417 	ldw	r2,-48(fp)
    f128:	1080058b 	ldhu	r2,22(r2)
    f12c:	10bfffc4 	addi	r2,r2,-1
    f130:	1007883a 	mov	r3,r2
    f134:	e0bff417 	ldw	r2,-48(fp)
    f138:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
    f13c:	e0bffd17 	ldw	r2,-12(fp)
    f140:	10c00104 	addi	r3,r2,4
    f144:	e0fffd15 	stw	r3,-12(fp)
    f148:	e0fff017 	ldw	r3,-64(fp)
    f14c:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
    f150:	00800044 	movi	r2,1
    f154:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
    f158:	e0bff18b 	ldhu	r2,-58(fp)
    f15c:	10800044 	addi	r2,r2,1
    f160:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
    f164:	00000f06 	br	f1a4 <OSEventPendMulti+0x388>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
    f168:	e0bff203 	ldbu	r2,-56(fp)
    f16c:	10800114 	ori	r2,r2,4
    f170:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
    f174:	00000b06 	br	f1a4 <OSEventPendMulti+0x388>
    f178:	e0bff317 	ldw	r2,-52(fp)
    f17c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f180:	e0bff617 	ldw	r2,-40(fp)
    f184:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
    f188:	e0bffd17 	ldw	r2,-12(fp)
    f18c:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
    f190:	e0800217 	ldw	r2,8(fp)
    f194:	00c00044 	movi	r3,1
    f198:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
    f19c:	e0bff18b 	ldhu	r2,-58(fp)
    f1a0:	00009d06 	br	f418 <OSEventPendMulti+0x5fc>
        }
        pevents++;
    f1a4:	e0bfef17 	ldw	r2,-68(fp)
    f1a8:	10800104 	addi	r2,r2,4
    f1ac:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
    f1b0:	e0bfef17 	ldw	r2,-68(fp)
    f1b4:	10800017 	ldw	r2,0(r2)
    f1b8:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
    f1bc:	e0bff017 	ldw	r2,-64(fp)
    f1c0:	103f7d1e 	bne	r2,zero,efb8 <OSEventPendMulti+0x19c>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
    f1c4:	e0bff103 	ldbu	r2,-60(fp)
    f1c8:	10800058 	cmpnei	r2,r2,1
    f1cc:	10000a1e 	bne	r2,zero,f1f8 <OSEventPendMulti+0x3dc>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
    f1d0:	e0bffd17 	ldw	r2,-12(fp)
    f1d4:	10000015 	stw	zero,0(r2)
    f1d8:	e0bff317 	ldw	r2,-52(fp)
    f1dc:	e0bff715 	stw	r2,-36(fp)
    f1e0:	e0bff717 	ldw	r2,-36(fp)
    f1e4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
    f1e8:	e0800217 	ldw	r2,8(fp)
    f1ec:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
    f1f0:	e0bff18b 	ldhu	r2,-58(fp)
    f1f4:	00008806 	br	f418 <OSEventPendMulti+0x5fc>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
    f1f8:	d0a05217 	ldw	r2,-32440(gp)
    f1fc:	d0e05217 	ldw	r3,-32440(gp)
    f200:	19000c03 	ldbu	r4,48(r3)
    f204:	e0fff203 	ldbu	r3,-56(fp)
    f208:	20c6b03a 	or	r3,r4,r3
    f20c:	1809883a 	mov	r4,r3
    f210:	00ffe004 	movi	r3,-128
    f214:	20c6b03a 	or	r3,r4,r3
    f218:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    f21c:	d0a05217 	ldw	r2,-32440(gp)
    f220:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
    f224:	d0a05217 	ldw	r2,-32440(gp)
    f228:	e0ffff0b 	ldhu	r3,-4(fp)
    f22c:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
    f230:	e13ffc17 	ldw	r4,-16(fp)
    f234:	000fd640 	call	fd64 <OS_EventTaskWaitMulti>
    f238:	e0bff317 	ldw	r2,-52(fp)
    f23c:	e0bff815 	stw	r2,-32(fp)
    f240:	e0bff817 	ldw	r2,-32(fp)
    f244:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
    f248:	00104d80 	call	104d8 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f24c:	0005303a 	rdctl	r2,status
    f250:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f254:	e0fff917 	ldw	r3,-28(fp)
    f258:	00bfff84 	movi	r2,-2
    f25c:	1884703a 	and	r2,r3,r2
    f260:	1001703a 	wrctl	status,r2
  
  return context;
    f264:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
    f268:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
    f26c:	d0a05217 	ldw	r2,-32440(gp)
    f270:	10800c43 	ldbu	r2,49(r2)
    f274:	10803fcc 	andi	r2,r2,255
    f278:	10000226 	beq	r2,zero,f284 <OSEventPendMulti+0x468>
    f27c:	108000a0 	cmpeqi	r2,r2,2
    f280:	10001826 	beq	r2,zero,f2e4 <OSEventPendMulti+0x4c8>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
    f284:	d0a05217 	ldw	r2,-32440(gp)
    f288:	10800717 	ldw	r2,28(r2)
    f28c:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
    f290:	e0bff017 	ldw	r2,-64(fp)
    f294:	10000b26 	beq	r2,zero,f2c4 <OSEventPendMulti+0x4a8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
    f298:	e0bffd17 	ldw	r2,-12(fp)
    f29c:	10c00104 	addi	r3,r2,4
    f2a0:	e0fffd15 	stw	r3,-12(fp)
    f2a4:	e0fff017 	ldw	r3,-64(fp)
    f2a8:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
    f2ac:	e0bffd17 	ldw	r2,-12(fp)
    f2b0:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
    f2b4:	e0bff18b 	ldhu	r2,-58(fp)
    f2b8:	10800044 	addi	r2,r2,1
    f2bc:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
    f2c0:	00000d06 	br	f2f8 <OSEventPendMulti+0x4dc>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
    f2c4:	d0a05217 	ldw	r2,-32440(gp)
    f2c8:	00c00044 	movi	r3,1
    f2cc:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
    f2d0:	d0a05217 	ldw	r2,-32440(gp)
    f2d4:	1009883a 	mov	r4,r2
    f2d8:	e17ffc17 	ldw	r5,-16(fp)
    f2dc:	000ff640 	call	ff64 <OS_EventTaskRemoveMulti>
             }
			 break;
    f2e0:	00000506 	br	f2f8 <OSEventPendMulti+0x4dc>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
    f2e4:	d0a05217 	ldw	r2,-32440(gp)
    f2e8:	1009883a 	mov	r4,r2
    f2ec:	e17ffc17 	ldw	r5,-16(fp)
    f2f0:	000ff640 	call	ff64 <OS_EventTaskRemoveMulti>
             break;
    f2f4:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
    f2f8:	d0a05217 	ldw	r2,-32440(gp)
    f2fc:	10800c43 	ldbu	r2,49(r2)
    f300:	10803fcc 	andi	r2,r2,255
    f304:	10000326 	beq	r2,zero,f314 <OSEventPendMulti+0x4f8>
    f308:	108000a0 	cmpeqi	r2,r2,2
    f30c:	1000231e 	bne	r2,zero,f39c <OSEventPendMulti+0x580>
    f310:	00002a06 	br	f3bc <OSEventPendMulti+0x5a0>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
    f314:	e0bff017 	ldw	r2,-64(fp)
    f318:	10800003 	ldbu	r2,0(r2)
    f31c:	10803fcc 	andi	r2,r2,255
    f320:	0080100e 	bge	zero,r2,f364 <OSEventPendMulti+0x548>
    f324:	10c000d0 	cmplti	r3,r2,3
    f328:	1800071e 	bne	r3,zero,f348 <OSEventPendMulti+0x52c>
    f32c:	108000e0 	cmpeqi	r2,r2,3
    f330:	10000c26 	beq	r2,zero,f364 <OSEventPendMulti+0x548>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
    f334:	e0bffe17 	ldw	r2,-8(fp)
    f338:	10c00104 	addi	r3,r2,4
    f33c:	e0fffe15 	stw	r3,-8(fp)
    f340:	10000015 	stw	zero,0(r2)
                      break;
    f344:	00001206 	br	f390 <OSEventPendMulti+0x574>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
    f348:	e0bffe17 	ldw	r2,-8(fp)
    f34c:	10c00104 	addi	r3,r2,4
    f350:	e0fffe15 	stw	r3,-8(fp)
    f354:	d0e05217 	ldw	r3,-32440(gp)
    f358:	18c00917 	ldw	r3,36(r3)
    f35c:	10c00015 	stw	r3,0(r2)
                      break;
    f360:	00000b06 	br	f390 <OSEventPendMulti+0x574>
    f364:	e0bff317 	ldw	r2,-52(fp)
    f368:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f36c:	e0bffa17 	ldw	r2,-24(fp)
    f370:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
    f374:	e0bffd17 	ldw	r2,-12(fp)
    f378:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
    f37c:	e0800217 	ldw	r2,8(fp)
    f380:	00c00044 	movi	r3,1
    f384:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
    f388:	e0bff18b 	ldhu	r2,-58(fp)
    f38c:	00002206 	br	f418 <OSEventPendMulti+0x5fc>
             }
            *perr = OS_ERR_NONE;
    f390:	e0800217 	ldw	r2,8(fp)
    f394:	10000005 	stb	zero,0(r2)
             break;
    f398:	00001006 	br	f3dc <OSEventPendMulti+0x5c0>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
    f39c:	e0bffe17 	ldw	r2,-8(fp)
    f3a0:	10c00104 	addi	r3,r2,4
    f3a4:	e0fffe15 	stw	r3,-8(fp)
    f3a8:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
    f3ac:	e0800217 	ldw	r2,8(fp)
    f3b0:	00c00384 	movi	r3,14
    f3b4:	10c00005 	stb	r3,0(r2)
             break;
    f3b8:	00000806 	br	f3dc <OSEventPendMulti+0x5c0>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
    f3bc:	e0bffe17 	ldw	r2,-8(fp)
    f3c0:	10c00104 	addi	r3,r2,4
    f3c4:	e0fffe15 	stw	r3,-8(fp)
    f3c8:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
    f3cc:	e0800217 	ldw	r2,8(fp)
    f3d0:	00c00284 	movi	r3,10
    f3d4:	10c00005 	stb	r3,0(r2)
             break;
    f3d8:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
    f3dc:	d0a05217 	ldw	r2,-32440(gp)
    f3e0:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
    f3e4:	d0a05217 	ldw	r2,-32440(gp)
    f3e8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
    f3ec:	d0a05217 	ldw	r2,-32440(gp)
    f3f0:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
    f3f4:	d0a05217 	ldw	r2,-32440(gp)
    f3f8:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
    f3fc:	d0a05217 	ldw	r2,-32440(gp)
    f400:	10000915 	stw	zero,36(r2)
    f404:	e0bff317 	ldw	r2,-52(fp)
    f408:	e0bffb15 	stw	r2,-20(fp)
    f40c:	e0bffb17 	ldw	r2,-20(fp)
    f410:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
    f414:	e0bff18b 	ldhu	r2,-58(fp)
}
    f418:	e037883a 	mov	sp,fp
    f41c:	dfc00117 	ldw	ra,4(sp)
    f420:	df000017 	ldw	fp,0(sp)
    f424:	dec00204 	addi	sp,sp,8
    f428:	f800283a 	ret

0000f42c <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
    f42c:	defffe04 	addi	sp,sp,-8
    f430:	dfc00115 	stw	ra,4(sp)
    f434:	df000015 	stw	fp,0(sp)
    f438:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
    f43c:	001a1900 	call	1a190 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
    f440:	00101a00 	call	101a0 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
    f444:	00101e40 	call	101e4 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
    f448:	00103440 	call	10344 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
    f44c:	00100c40 	call	100c4 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
    f450:	00122b40 	call	122b4 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
    f454:	0012bfc0 	call	12bfc <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
    f458:	0013e3c0 	call	13e3c <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
    f45c:	001024c0 	call	1024c <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
    f460:	00102c80 	call	102c8 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
    f464:	001a1ac0 	call	1a1ac <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
    f468:	0010ba00 	call	10ba0 <OSDebugInit>
#endif
}
    f46c:	e037883a 	mov	sp,fp
    f470:	dfc00117 	ldw	ra,4(sp)
    f474:	df000017 	ldw	fp,0(sp)
    f478:	dec00204 	addi	sp,sp,8
    f47c:	f800283a 	ret

0000f480 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
    f480:	defffc04 	addi	sp,sp,-16
    f484:	df000315 	stw	fp,12(sp)
    f488:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    f48c:	e03ffd15 	stw	zero,-12(fp)
#endif

    if (OSRunning == OS_TRUE) {
    f490:	d0a04343 	ldbu	r2,-32499(gp)
    f494:	10803fcc 	andi	r2,r2,255
    f498:	10800058 	cmpnei	r2,r2,1
    f49c:	1000131e 	bne	r2,zero,f4ec <OSIntEnter+0x6c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f4a0:	0005303a 	rdctl	r2,status
    f4a4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f4a8:	e0fffe17 	ldw	r3,-8(fp)
    f4ac:	00bfff84 	movi	r2,-2
    f4b0:	1884703a 	and	r2,r3,r2
    f4b4:	1001703a 	wrctl	status,r2
  
  return context;
    f4b8:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
    f4bc:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting < 255u) {
    f4c0:	d0a05103 	ldbu	r2,-32444(gp)
    f4c4:	10803fcc 	andi	r2,r2,255
    f4c8:	10803fe0 	cmpeqi	r2,r2,255
    f4cc:	1000031e 	bne	r2,zero,f4dc <OSIntEnter+0x5c>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
    f4d0:	d0a05103 	ldbu	r2,-32444(gp)
    f4d4:	10800044 	addi	r2,r2,1
    f4d8:	d0a05105 	stb	r2,-32444(gp)
    f4dc:	e0bffd17 	ldw	r2,-12(fp)
    f4e0:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f4e4:	e0bfff17 	ldw	r2,-4(fp)
    f4e8:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
    }
}
    f4ec:	e037883a 	mov	sp,fp
    f4f0:	df000017 	ldw	fp,0(sp)
    f4f4:	dec00104 	addi	sp,sp,4
    f4f8:	f800283a 	ret

0000f4fc <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
    f4fc:	defffb04 	addi	sp,sp,-20
    f500:	dfc00415 	stw	ra,16(sp)
    f504:	df000315 	stw	fp,12(sp)
    f508:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    f50c:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
    f510:	d0a04343 	ldbu	r2,-32499(gp)
    f514:	10803fcc 	andi	r2,r2,255
    f518:	10800058 	cmpnei	r2,r2,1
    f51c:	10002f1e 	bne	r2,zero,f5dc <OSIntExit+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f520:	0005303a 	rdctl	r2,status
    f524:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f528:	e0fffe17 	ldw	r3,-8(fp)
    f52c:	00bfff84 	movi	r2,-2
    f530:	1884703a 	and	r2,r3,r2
    f534:	1001703a 	wrctl	status,r2
  
  return context;
    f538:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
    f53c:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
    f540:	d0a05103 	ldbu	r2,-32444(gp)
    f544:	10803fcc 	andi	r2,r2,255
    f548:	10000326 	beq	r2,zero,f558 <OSIntExit+0x5c>
            OSIntNesting--;
    f54c:	d0a05103 	ldbu	r2,-32444(gp)
    f550:	10bfffc4 	addi	r2,r2,-1
    f554:	d0a05105 	stb	r2,-32444(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
    f558:	d0a05103 	ldbu	r2,-32444(gp)
    f55c:	10803fcc 	andi	r2,r2,255
    f560:	10001a1e 	bne	r2,zero,f5cc <OSIntExit+0xd0>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
    f564:	d0a04303 	ldbu	r2,-32500(gp)
    f568:	10803fcc 	andi	r2,r2,255
    f56c:	1000171e 	bne	r2,zero,f5cc <OSIntExit+0xd0>
                OS_SchedNew();
    f570:	00105a40 	call	105a4 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
    f574:	d0e04503 	ldbu	r3,-32492(gp)
    f578:	d0a04543 	ldbu	r2,-32491(gp)
    f57c:	18c03fcc 	andi	r3,r3,255
    f580:	10803fcc 	andi	r2,r2,255
    f584:	18801126 	beq	r3,r2,f5cc <OSIntExit+0xd0>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
    f588:	d0a04503 	ldbu	r2,-32492(gp)
    f58c:	10c03fcc 	andi	r3,r2,255
    f590:	008000b4 	movhi	r2,2
    f594:	1098d804 	addi	r2,r2,25440
    f598:	18c7883a 	add	r3,r3,r3
    f59c:	18c7883a 	add	r3,r3,r3
    f5a0:	10c5883a 	add	r2,r2,r3
    f5a4:	10800017 	ldw	r2,0(r2)
    f5a8:	d0a04d15 	stw	r2,-32460(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
    f5ac:	d0a04d17 	ldw	r2,-32460(gp)
    f5b0:	10c00e17 	ldw	r3,56(r2)
    f5b4:	18c00044 	addi	r3,r3,1
    f5b8:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
    f5bc:	d0a04817 	ldw	r2,-32480(gp)
    f5c0:	10800044 	addi	r2,r2,1
    f5c4:	d0a04815 	stw	r2,-32480(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
    f5c8:	0019ed00 	call	19ed0 <OSCtxSw>
    f5cc:	e0bffd17 	ldw	r2,-12(fp)
    f5d0:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f5d4:	e0bfff17 	ldw	r2,-4(fp)
    f5d8:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
    f5dc:	e037883a 	mov	sp,fp
    f5e0:	dfc00117 	ldw	ra,4(sp)
    f5e4:	df000017 	ldw	fp,0(sp)
    f5e8:	dec00204 	addi	sp,sp,8
    f5ec:	f800283a 	ret

0000f5f0 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
    f5f0:	defffc04 	addi	sp,sp,-16
    f5f4:	df000315 	stw	fp,12(sp)
    f5f8:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    f5fc:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
    f600:	d0a04343 	ldbu	r2,-32499(gp)
    f604:	10803fcc 	andi	r2,r2,255
    f608:	10800058 	cmpnei	r2,r2,1
    f60c:	1000161e 	bne	r2,zero,f668 <OSSchedLock+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f610:	0005303a 	rdctl	r2,status
    f614:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f618:	e0fffe17 	ldw	r3,-8(fp)
    f61c:	00bfff84 	movi	r2,-2
    f620:	1884703a 	and	r2,r3,r2
    f624:	1001703a 	wrctl	status,r2
  
  return context;
    f628:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
    f62c:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
    f630:	d0a05103 	ldbu	r2,-32444(gp)
    f634:	10803fcc 	andi	r2,r2,255
    f638:	1000071e 	bne	r2,zero,f658 <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
    f63c:	d0a04303 	ldbu	r2,-32500(gp)
    f640:	10803fcc 	andi	r2,r2,255
    f644:	10803fe0 	cmpeqi	r2,r2,255
    f648:	1000031e 	bne	r2,zero,f658 <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
    f64c:	d0a04303 	ldbu	r2,-32500(gp)
    f650:	10800044 	addi	r2,r2,1
    f654:	d0a04305 	stb	r2,-32500(gp)
    f658:	e0bffd17 	ldw	r2,-12(fp)
    f65c:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f660:	e0bfff17 	ldw	r2,-4(fp)
    f664:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
    f668:	e037883a 	mov	sp,fp
    f66c:	df000017 	ldw	fp,0(sp)
    f670:	dec00104 	addi	sp,sp,4
    f674:	f800283a 	ret

0000f678 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
    f678:	defff804 	addi	sp,sp,-32
    f67c:	dfc00715 	stw	ra,28(sp)
    f680:	df000615 	stw	fp,24(sp)
    f684:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    f688:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
    f68c:	d0a04343 	ldbu	r2,-32499(gp)
    f690:	10803fcc 	andi	r2,r2,255
    f694:	10800058 	cmpnei	r2,r2,1
    f698:	1000281e 	bne	r2,zero,f73c <OSSchedUnlock+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f69c:	0005303a 	rdctl	r2,status
    f6a0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f6a4:	e0fffb17 	ldw	r3,-20(fp)
    f6a8:	00bfff84 	movi	r2,-2
    f6ac:	1884703a 	and	r2,r3,r2
    f6b0:	1001703a 	wrctl	status,r2
  
  return context;
    f6b4:	e0bffb17 	ldw	r2,-20(fp)
        OS_ENTER_CRITICAL();
    f6b8:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
    f6bc:	d0a04303 	ldbu	r2,-32500(gp)
    f6c0:	10803fcc 	andi	r2,r2,255
    f6c4:	10001926 	beq	r2,zero,f72c <OSSchedUnlock+0xb4>
            OSLockNesting--;                               /* Decrement lock nesting level             */
    f6c8:	d0a04303 	ldbu	r2,-32500(gp)
    f6cc:	10bfffc4 	addi	r2,r2,-1
    f6d0:	d0a04305 	stb	r2,-32500(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
    f6d4:	d0a04303 	ldbu	r2,-32500(gp)
    f6d8:	10803fcc 	andi	r2,r2,255
    f6dc:	10000e1e 	bne	r2,zero,f718 <OSSchedUnlock+0xa0>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
    f6e0:	d0a05103 	ldbu	r2,-32444(gp)
    f6e4:	10803fcc 	andi	r2,r2,255
    f6e8:	1000061e 	bne	r2,zero,f704 <OSSchedUnlock+0x8c>
    f6ec:	e0bffa17 	ldw	r2,-24(fp)
    f6f0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f6f4:	e0bffc17 	ldw	r2,-16(fp)
    f6f8:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
    f6fc:	00104d80 	call	104d8 <OS_Sched>
    f700:	00000e06 	br	f73c <OSSchedUnlock+0xc4>
    f704:	e0bffa17 	ldw	r2,-24(fp)
    f708:	e0bffd15 	stw	r2,-12(fp)
    f70c:	e0bffd17 	ldw	r2,-12(fp)
    f710:	1001703a 	wrctl	status,r2
    f714:	00000906 	br	f73c <OSSchedUnlock+0xc4>
    f718:	e0bffa17 	ldw	r2,-24(fp)
    f71c:	e0bffe15 	stw	r2,-8(fp)
    f720:	e0bffe17 	ldw	r2,-8(fp)
    f724:	1001703a 	wrctl	status,r2
    f728:	00000406 	br	f73c <OSSchedUnlock+0xc4>
    f72c:	e0bffa17 	ldw	r2,-24(fp)
    f730:	e0bfff15 	stw	r2,-4(fp)
    f734:	e0bfff17 	ldw	r2,-4(fp)
    f738:	1001703a 	wrctl	status,r2
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
    f73c:	e037883a 	mov	sp,fp
    f740:	dfc00117 	ldw	ra,4(sp)
    f744:	df000017 	ldw	fp,0(sp)
    f748:	dec00204 	addi	sp,sp,8
    f74c:	f800283a 	ret

0000f750 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
    f750:	defffe04 	addi	sp,sp,-8
    f754:	dfc00115 	stw	ra,4(sp)
    f758:	df000015 	stw	fp,0(sp)
    f75c:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
    f760:	d0a04343 	ldbu	r2,-32499(gp)
    f764:	10803fcc 	andi	r2,r2,255
    f768:	10000f1e 	bne	r2,zero,f7a8 <OSStart+0x58>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
    f76c:	00105a40 	call	105a4 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
    f770:	d0a04503 	ldbu	r2,-32492(gp)
    f774:	d0a04545 	stb	r2,-32491(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
    f778:	d0a04503 	ldbu	r2,-32492(gp)
    f77c:	10c03fcc 	andi	r3,r2,255
    f780:	008000b4 	movhi	r2,2
    f784:	1098d804 	addi	r2,r2,25440
    f788:	18c7883a 	add	r3,r3,r3
    f78c:	18c7883a 	add	r3,r3,r3
    f790:	10c5883a 	add	r2,r2,r3
    f794:	10800017 	ldw	r2,0(r2)
    f798:	d0a04d15 	stw	r2,-32460(gp)
        OSTCBCur      = OSTCBHighRdy;
    f79c:	d0a04d17 	ldw	r2,-32460(gp)
    f7a0:	d0a05215 	stw	r2,-32440(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
    f7a4:	0019f5c0 	call	19f5c <OSStartHighRdy>
    }
}
    f7a8:	e037883a 	mov	sp,fp
    f7ac:	dfc00117 	ldw	ra,4(sp)
    f7b0:	df000017 	ldw	fp,0(sp)
    f7b4:	dec00204 	addi	sp,sp,8
    f7b8:	f800283a 	ret

0000f7bc <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
    f7bc:	defff904 	addi	sp,sp,-28
    f7c0:	dfc00615 	stw	ra,24(sp)
    f7c4:	df000515 	stw	fp,20(sp)
    f7c8:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    f7cc:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
    f7d0:	01000084 	movi	r4,2
    f7d4:	00162e40 	call	162e4 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f7d8:	0005303a 	rdctl	r2,status
    f7dc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f7e0:	e0fffc17 	ldw	r3,-16(fp)
    f7e4:	00bfff84 	movi	r2,-2
    f7e8:	1884703a 	and	r2,r3,r2
    f7ec:	1001703a 	wrctl	status,r2
  
  return context;
    f7f0:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
    f7f4:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
    f7f8:	d0204415 	stw	zero,-32496(gp)
    f7fc:	e0bffb17 	ldw	r2,-20(fp)
    f800:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f804:	e0bffd17 	ldw	r2,-12(fp)
    f808:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
    f80c:	01001904 	movi	r4,100
    f810:	00162e40 	call	162e4 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f814:	0005303a 	rdctl	r2,status
    f818:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f81c:	e0fffe17 	ldw	r3,-8(fp)
    f820:	00bfff84 	movi	r2,-2
    f824:	1884703a 	and	r2,r3,r2
    f828:	1001703a 	wrctl	status,r2
  
  return context;
    f82c:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
    f830:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
    f834:	d0a04417 	ldw	r2,-32496(gp)
    f838:	d0a04915 	stw	r2,-32476(gp)
    OSStatRdy    = OS_TRUE;
    f83c:	00800044 	movi	r2,1
    f840:	d0a05505 	stb	r2,-32428(gp)
    f844:	e0bffb17 	ldw	r2,-20(fp)
    f848:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f84c:	e0bfff17 	ldw	r2,-4(fp)
    f850:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
    f854:	e037883a 	mov	sp,fp
    f858:	dfc00117 	ldw	ra,4(sp)
    f85c:	df000017 	ldw	fp,0(sp)
    f860:	dec00204 	addi	sp,sp,8
    f864:	f800283a 	ret

0000f868 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
    f868:	defff704 	addi	sp,sp,-36
    f86c:	dfc00815 	stw	ra,32(sp)
    f870:	df000715 	stw	fp,28(sp)
    f874:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    f878:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
    f87c:	001a1740 	call	1a174 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f880:	0005303a 	rdctl	r2,status
    f884:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f888:	e0fffc17 	ldw	r3,-16(fp)
    f88c:	00bfff84 	movi	r2,-2
    f890:	1884703a 	and	r2,r3,r2
    f894:	1001703a 	wrctl	status,r2
  
  return context;
    f898:	e0bffc17 	ldw	r2,-16(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
    f89c:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
    f8a0:	d0a05317 	ldw	r2,-32436(gp)
    f8a4:	10800044 	addi	r2,r2,1
    f8a8:	d0a05315 	stw	r2,-32436(gp)
    f8ac:	e0bffb17 	ldw	r2,-20(fp)
    f8b0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f8b4:	e0bffd17 	ldw	r2,-12(fp)
    f8b8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
    f8bc:	d0a04343 	ldbu	r2,-32499(gp)
    f8c0:	10803fcc 	andi	r2,r2,255
    f8c4:	10800058 	cmpnei	r2,r2,1
    f8c8:	1000691e 	bne	r2,zero,fa70 <OSTimeTick+0x208>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
    f8cc:	d0a04703 	ldbu	r2,-32484(gp)
    f8d0:	10803fcc 	andi	r2,r2,255
    f8d4:	10c00060 	cmpeqi	r3,r2,1
    f8d8:	1800061e 	bne	r3,zero,f8f4 <OSTimeTick+0x8c>
    f8dc:	10c000a0 	cmpeqi	r3,r2,2
    f8e0:	1800061e 	bne	r3,zero,f8fc <OSTimeTick+0x94>
    f8e4:	10000a1e 	bne	r2,zero,f910 <OSTimeTick+0xa8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
    f8e8:	00800044 	movi	r2,1
    f8ec:	e0bffa05 	stb	r2,-24(fp)
                 break;
    f8f0:	00000b06 	br	f920 <OSTimeTick+0xb8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
    f8f4:	e03ffa05 	stb	zero,-24(fp)
                 break;
    f8f8:	00000906 	br	f920 <OSTimeTick+0xb8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
    f8fc:	00800044 	movi	r2,1
    f900:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
    f904:	00800044 	movi	r2,1
    f908:	d0a04705 	stb	r2,-32484(gp)
                 break;
    f90c:	00000406 	br	f920 <OSTimeTick+0xb8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
    f910:	00800044 	movi	r2,1
    f914:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
    f918:	d0204705 	stb	zero,-32484(gp)
                 break;
    f91c:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
    f920:	e0bffa03 	ldbu	r2,-24(fp)
    f924:	1000011e 	bne	r2,zero,f92c <OSTimeTick+0xc4>
            return;
    f928:	00005106 	br	fa70 <OSTimeTick+0x208>
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
    f92c:	d0a04617 	ldw	r2,-32488(gp)
    f930:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
    f934:	00004906 	br	fa5c <OSTimeTick+0x1f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f938:	0005303a 	rdctl	r2,status
    f93c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f940:	e0fffe17 	ldw	r3,-8(fp)
    f944:	00bfff84 	movi	r2,-2
    f948:	1884703a 	and	r2,r3,r2
    f94c:	1001703a 	wrctl	status,r2
  
  return context;
    f950:	e0bffe17 	ldw	r2,-8(fp)
            OS_ENTER_CRITICAL();
    f954:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
    f958:	e0bff917 	ldw	r2,-28(fp)
    f95c:	10800b8b 	ldhu	r2,46(r2)
    f960:	10bfffcc 	andi	r2,r2,65535
    f964:	10003626 	beq	r2,zero,fa40 <OSTimeTick+0x1d8>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
    f968:	e0bff917 	ldw	r2,-28(fp)
    f96c:	10800b8b 	ldhu	r2,46(r2)
    f970:	10bfffc4 	addi	r2,r2,-1
    f974:	1007883a 	mov	r3,r2
    f978:	e0bff917 	ldw	r2,-28(fp)
    f97c:	10c00b8d 	sth	r3,46(r2)
    f980:	e0bff917 	ldw	r2,-28(fp)
    f984:	10800b8b 	ldhu	r2,46(r2)
    f988:	10bfffcc 	andi	r2,r2,65535
    f98c:	10002c1e 	bne	r2,zero,fa40 <OSTimeTick+0x1d8>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
    f990:	e0bff917 	ldw	r2,-28(fp)
    f994:	10800c03 	ldbu	r2,48(r2)
    f998:	10803fcc 	andi	r2,r2,255
    f99c:	10800dcc 	andi	r2,r2,55
    f9a0:	10000b26 	beq	r2,zero,f9d0 <OSTimeTick+0x168>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
    f9a4:	e0bff917 	ldw	r2,-28(fp)
    f9a8:	10c00c03 	ldbu	r3,48(r2)
    f9ac:	00bff204 	movi	r2,-56
    f9b0:	1884703a 	and	r2,r3,r2
    f9b4:	1007883a 	mov	r3,r2
    f9b8:	e0bff917 	ldw	r2,-28(fp)
    f9bc:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
    f9c0:	e0bff917 	ldw	r2,-28(fp)
    f9c4:	00c00044 	movi	r3,1
    f9c8:	10c00c45 	stb	r3,49(r2)
    f9cc:	00000206 	br	f9d8 <OSTimeTick+0x170>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
    f9d0:	e0bff917 	ldw	r2,-28(fp)
    f9d4:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
    f9d8:	e0bff917 	ldw	r2,-28(fp)
    f9dc:	10800c03 	ldbu	r2,48(r2)
    f9e0:	10803fcc 	andi	r2,r2,255
    f9e4:	1080020c 	andi	r2,r2,8
    f9e8:	1000151e 	bne	r2,zero,fa40 <OSTimeTick+0x1d8>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
    f9ec:	e0bff917 	ldw	r2,-28(fp)
    f9f0:	10c00d83 	ldbu	r3,54(r2)
    f9f4:	d0a04f03 	ldbu	r2,-32452(gp)
    f9f8:	1884b03a 	or	r2,r3,r2
    f9fc:	d0a04f05 	stb	r2,-32452(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    fa00:	e0bff917 	ldw	r2,-28(fp)
    fa04:	10800d03 	ldbu	r2,52(r2)
    fa08:	10c03fcc 	andi	r3,r2,255
    fa0c:	e0bff917 	ldw	r2,-28(fp)
    fa10:	10800d03 	ldbu	r2,52(r2)
    fa14:	11003fcc 	andi	r4,r2,255
    fa18:	d0a04f44 	addi	r2,gp,-32451
    fa1c:	2085883a 	add	r2,r4,r2
    fa20:	11000003 	ldbu	r4,0(r2)
    fa24:	e0bff917 	ldw	r2,-28(fp)
    fa28:	10800d43 	ldbu	r2,53(r2)
    fa2c:	2084b03a 	or	r2,r4,r2
    fa30:	1009883a 	mov	r4,r2
    fa34:	d0a04f44 	addi	r2,gp,-32451
    fa38:	1885883a 	add	r2,r3,r2
    fa3c:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
    fa40:	e0bff917 	ldw	r2,-28(fp)
    fa44:	10800517 	ldw	r2,20(r2)
    fa48:	e0bff915 	stw	r2,-28(fp)
    fa4c:	e0bffb17 	ldw	r2,-20(fp)
    fa50:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fa54:	e0bfff17 	ldw	r2,-4(fp)
    fa58:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
    fa5c:	e0bff917 	ldw	r2,-28(fp)
    fa60:	10800c83 	ldbu	r2,50(r2)
    fa64:	10803fcc 	andi	r2,r2,255
    fa68:	10800518 	cmpnei	r2,r2,20
    fa6c:	103fb21e 	bne	r2,zero,f938 <OSTimeTick+0xd0>
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
    fa70:	e037883a 	mov	sp,fp
    fa74:	dfc00117 	ldw	ra,4(sp)
    fa78:	df000017 	ldw	fp,0(sp)
    fa7c:	dec00204 	addi	sp,sp,8
    fa80:	f800283a 	ret

0000fa84 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
    fa84:	deffff04 	addi	sp,sp,-4
    fa88:	df000015 	stw	fp,0(sp)
    fa8c:	d839883a 	mov	fp,sp
    return (OS_VERSION);
    fa90:	00804784 	movi	r2,286
}
    fa94:	e037883a 	mov	sp,fp
    fa98:	df000017 	ldw	fp,0(sp)
    fa9c:	dec00104 	addi	sp,sp,4
    faa0:	f800283a 	ret

0000faa4 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
    faa4:	deffff04 	addi	sp,sp,-4
    faa8:	df000015 	stw	fp,0(sp)
    faac:	d839883a 	mov	fp,sp
}
    fab0:	e037883a 	mov	sp,fp
    fab4:	df000017 	ldw	fp,0(sp)
    fab8:	dec00104 	addi	sp,sp,4
    fabc:	f800283a 	ret

0000fac0 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
    fac0:	defff804 	addi	sp,sp,-32
    fac4:	dfc00715 	stw	ra,28(sp)
    fac8:	df000615 	stw	fp,24(sp)
    facc:	df000604 	addi	fp,sp,24
    fad0:	e13ffc15 	stw	r4,-16(fp)
    fad4:	e17ffd15 	stw	r5,-12(fp)
    fad8:	3007883a 	mov	r3,r6
    fadc:	3805883a 	mov	r2,r7
    fae0:	e0fffe05 	stb	r3,-8(fp)
    fae4:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
    fae8:	e0bffc17 	ldw	r2,-16(fp)
    faec:	10800283 	ldbu	r2,10(r2)
    faf0:	10c03fcc 	andi	r3,r2,255
    faf4:	008000b4 	movhi	r2,2
    faf8:	10ab6b04 	addi	r2,r2,-21076
    fafc:	10c5883a 	add	r2,r2,r3
    fb00:	10800003 	ldbu	r2,0(r2)
    fb04:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
    fb08:	e0bffa03 	ldbu	r2,-24(fp)
    fb0c:	e0fffc17 	ldw	r3,-16(fp)
    fb10:	1885883a 	add	r2,r3,r2
    fb14:	10800204 	addi	r2,r2,8
    fb18:	108000c3 	ldbu	r2,3(r2)
    fb1c:	10c03fcc 	andi	r3,r2,255
    fb20:	008000b4 	movhi	r2,2
    fb24:	10ab6b04 	addi	r2,r2,-21076
    fb28:	10c5883a 	add	r2,r2,r3
    fb2c:	10800003 	ldbu	r2,0(r2)
    fb30:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
    fb34:	e0bffa03 	ldbu	r2,-24(fp)
    fb38:	100490fa 	slli	r2,r2,3
    fb3c:	1007883a 	mov	r3,r2
    fb40:	e0bffa43 	ldbu	r2,-23(fp)
    fb44:	1885883a 	add	r2,r3,r2
    fb48:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
    fb4c:	e0fffa83 	ldbu	r3,-22(fp)
    fb50:	008000b4 	movhi	r2,2
    fb54:	1098d804 	addi	r2,r2,25440
    fb58:	18c7883a 	add	r3,r3,r3
    fb5c:	18c7883a 	add	r3,r3,r3
    fb60:	10c5883a 	add	r2,r2,r3
    fb64:	10800017 	ldw	r2,0(r2)
    fb68:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
    fb6c:	e0bffb17 	ldw	r2,-20(fp)
    fb70:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
    fb74:	e0bffb17 	ldw	r2,-20(fp)
    fb78:	e0fffd17 	ldw	r3,-12(fp)
    fb7c:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
    fb80:	e0bffb17 	ldw	r2,-20(fp)
    fb84:	10800c03 	ldbu	r2,48(r2)
    fb88:	1007883a 	mov	r3,r2
    fb8c:	e0bffe03 	ldbu	r2,-8(fp)
    fb90:	0084303a 	nor	r2,zero,r2
    fb94:	1884703a 	and	r2,r3,r2
    fb98:	1007883a 	mov	r3,r2
    fb9c:	e0bffb17 	ldw	r2,-20(fp)
    fba0:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
    fba4:	e0bffb17 	ldw	r2,-20(fp)
    fba8:	e0ffff03 	ldbu	r3,-4(fp)
    fbac:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
    fbb0:	e0bffb17 	ldw	r2,-20(fp)
    fbb4:	10800c03 	ldbu	r2,48(r2)
    fbb8:	10803fcc 	andi	r2,r2,255
    fbbc:	1080020c 	andi	r2,r2,8
    fbc0:	1000111e 	bne	r2,zero,fc08 <OS_EventTaskRdy+0x148>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
    fbc4:	e0bffb17 	ldw	r2,-20(fp)
    fbc8:	10c00d83 	ldbu	r3,54(r2)
    fbcc:	d0a04f03 	ldbu	r2,-32452(gp)
    fbd0:	1884b03a 	or	r2,r3,r2
    fbd4:	d0a04f05 	stb	r2,-32452(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
    fbd8:	e0fffa03 	ldbu	r3,-24(fp)
    fbdc:	e13ffa03 	ldbu	r4,-24(fp)
    fbe0:	d0a04f44 	addi	r2,gp,-32451
    fbe4:	2085883a 	add	r2,r4,r2
    fbe8:	11000003 	ldbu	r4,0(r2)
    fbec:	e0bffb17 	ldw	r2,-20(fp)
    fbf0:	10800d43 	ldbu	r2,53(r2)
    fbf4:	2084b03a 	or	r2,r4,r2
    fbf8:	1009883a 	mov	r4,r2
    fbfc:	d0a04f44 	addi	r2,gp,-32451
    fc00:	1885883a 	add	r2,r3,r2
    fc04:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
    fc08:	e13ffb17 	ldw	r4,-20(fp)
    fc0c:	e17ffc17 	ldw	r5,-16(fp)
    fc10:	000feb00 	call	feb0 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
    fc14:	e0bffb17 	ldw	r2,-20(fp)
    fc18:	10800817 	ldw	r2,32(r2)
    fc1c:	10000826 	beq	r2,zero,fc40 <OS_EventTaskRdy+0x180>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
    fc20:	e0bffb17 	ldw	r2,-20(fp)
    fc24:	10800817 	ldw	r2,32(r2)
    fc28:	e13ffb17 	ldw	r4,-20(fp)
    fc2c:	100b883a 	mov	r5,r2
    fc30:	000ff640 	call	ff64 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
    fc34:	e0bffb17 	ldw	r2,-20(fp)
    fc38:	e0fffc17 	ldw	r3,-16(fp)
    fc3c:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
    fc40:	e0bffa83 	ldbu	r2,-22(fp)
}
    fc44:	e037883a 	mov	sp,fp
    fc48:	dfc00117 	ldw	ra,4(sp)
    fc4c:	df000017 	ldw	fp,0(sp)
    fc50:	dec00204 	addi	sp,sp,8
    fc54:	f800283a 	ret

0000fc58 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
    fc58:	defffd04 	addi	sp,sp,-12
    fc5c:	df000215 	stw	fp,8(sp)
    fc60:	df000204 	addi	fp,sp,8
    fc64:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
    fc68:	d0a05217 	ldw	r2,-32440(gp)
    fc6c:	e0ffff17 	ldw	r3,-4(fp)
    fc70:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
    fc74:	d0a05217 	ldw	r2,-32440(gp)
    fc78:	10800d03 	ldbu	r2,52(r2)
    fc7c:	10803fcc 	andi	r2,r2,255
    fc80:	d0e05217 	ldw	r3,-32440(gp)
    fc84:	18c00d03 	ldbu	r3,52(r3)
    fc88:	18c03fcc 	andi	r3,r3,255
    fc8c:	e13fff17 	ldw	r4,-4(fp)
    fc90:	20c7883a 	add	r3,r4,r3
    fc94:	18c00204 	addi	r3,r3,8
    fc98:	190000c3 	ldbu	r4,3(r3)
    fc9c:	d0e05217 	ldw	r3,-32440(gp)
    fca0:	18c00d43 	ldbu	r3,53(r3)
    fca4:	20c6b03a 	or	r3,r4,r3
    fca8:	1809883a 	mov	r4,r3
    fcac:	e0ffff17 	ldw	r3,-4(fp)
    fcb0:	1885883a 	add	r2,r3,r2
    fcb4:	10800204 	addi	r2,r2,8
    fcb8:	110000c5 	stb	r4,3(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
    fcbc:	e0bfff17 	ldw	r2,-4(fp)
    fcc0:	10c00283 	ldbu	r3,10(r2)
    fcc4:	d0a05217 	ldw	r2,-32440(gp)
    fcc8:	10800d83 	ldbu	r2,54(r2)
    fccc:	1884b03a 	or	r2,r3,r2
    fcd0:	1007883a 	mov	r3,r2
    fcd4:	e0bfff17 	ldw	r2,-4(fp)
    fcd8:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
    fcdc:	d0a05217 	ldw	r2,-32440(gp)
    fce0:	10800d03 	ldbu	r2,52(r2)
    fce4:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
    fce8:	e0fffe03 	ldbu	r3,-8(fp)
    fcec:	e13ffe03 	ldbu	r4,-8(fp)
    fcf0:	d0a04f44 	addi	r2,gp,-32451
    fcf4:	2085883a 	add	r2,r4,r2
    fcf8:	10800003 	ldbu	r2,0(r2)
    fcfc:	1009883a 	mov	r4,r2
    fd00:	d0a05217 	ldw	r2,-32440(gp)
    fd04:	10800d43 	ldbu	r2,53(r2)
    fd08:	0084303a 	nor	r2,zero,r2
    fd0c:	2084703a 	and	r2,r4,r2
    fd10:	1009883a 	mov	r4,r2
    fd14:	d0a04f44 	addi	r2,gp,-32451
    fd18:	1885883a 	add	r2,r3,r2
    fd1c:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
    fd20:	e0fffe03 	ldbu	r3,-8(fp)
    fd24:	d0a04f44 	addi	r2,gp,-32451
    fd28:	1885883a 	add	r2,r3,r2
    fd2c:	10800003 	ldbu	r2,0(r2)
    fd30:	10803fcc 	andi	r2,r2,255
    fd34:	1000071e 	bne	r2,zero,fd54 <OS_EventTaskWait+0xfc>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
    fd38:	d0a05217 	ldw	r2,-32440(gp)
    fd3c:	10800d83 	ldbu	r2,54(r2)
    fd40:	0084303a 	nor	r2,zero,r2
    fd44:	1007883a 	mov	r3,r2
    fd48:	d0a04f03 	ldbu	r2,-32452(gp)
    fd4c:	1884703a 	and	r2,r3,r2
    fd50:	d0a04f05 	stb	r2,-32452(gp)
    }
}
    fd54:	e037883a 	mov	sp,fp
    fd58:	df000017 	ldw	fp,0(sp)
    fd5c:	dec00104 	addi	sp,sp,4
    fd60:	f800283a 	ret

0000fd64 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
    fd64:	defffb04 	addi	sp,sp,-20
    fd68:	df000415 	stw	fp,16(sp)
    fd6c:	df000404 	addi	fp,sp,16
    fd70:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    fd74:	d0a05217 	ldw	r2,-32440(gp)
    fd78:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
    fd7c:	d0a05217 	ldw	r2,-32440(gp)
    fd80:	e0ffff17 	ldw	r3,-4(fp)
    fd84:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
    fd88:	e0bfff17 	ldw	r2,-4(fp)
    fd8c:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
    fd90:	e0bffc17 	ldw	r2,-16(fp)
    fd94:	10800017 	ldw	r2,0(r2)
    fd98:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
    fd9c:	00002006 	br	fe20 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
    fda0:	d0a05217 	ldw	r2,-32440(gp)
    fda4:	10800d03 	ldbu	r2,52(r2)
    fda8:	10803fcc 	andi	r2,r2,255
    fdac:	d0e05217 	ldw	r3,-32440(gp)
    fdb0:	18c00d03 	ldbu	r3,52(r3)
    fdb4:	18c03fcc 	andi	r3,r3,255
    fdb8:	e13ffd17 	ldw	r4,-12(fp)
    fdbc:	20c7883a 	add	r3,r4,r3
    fdc0:	18c00204 	addi	r3,r3,8
    fdc4:	190000c3 	ldbu	r4,3(r3)
    fdc8:	d0e05217 	ldw	r3,-32440(gp)
    fdcc:	18c00d43 	ldbu	r3,53(r3)
    fdd0:	20c6b03a 	or	r3,r4,r3
    fdd4:	1809883a 	mov	r4,r3
    fdd8:	e0fffd17 	ldw	r3,-12(fp)
    fddc:	1885883a 	add	r2,r3,r2
    fde0:	10800204 	addi	r2,r2,8
    fde4:	110000c5 	stb	r4,3(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
    fde8:	e0bffd17 	ldw	r2,-12(fp)
    fdec:	10c00283 	ldbu	r3,10(r2)
    fdf0:	d0a05217 	ldw	r2,-32440(gp)
    fdf4:	10800d83 	ldbu	r2,54(r2)
    fdf8:	1884b03a 	or	r2,r3,r2
    fdfc:	1007883a 	mov	r3,r2
    fe00:	e0bffd17 	ldw	r2,-12(fp)
    fe04:	10c00285 	stb	r3,10(r2)
        pevents++;
    fe08:	e0bffc17 	ldw	r2,-16(fp)
    fe0c:	10800104 	addi	r2,r2,4
    fe10:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
    fe14:	e0bffc17 	ldw	r2,-16(fp)
    fe18:	10800017 	ldw	r2,0(r2)
    fe1c:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
    fe20:	e0bffd17 	ldw	r2,-12(fp)
    fe24:	103fde1e 	bne	r2,zero,fda0 <OS_EventTaskWaitMulti+0x3c>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
    fe28:	d0a05217 	ldw	r2,-32440(gp)
    fe2c:	10800d03 	ldbu	r2,52(r2)
    fe30:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
    fe34:	e0fffe03 	ldbu	r3,-8(fp)
    fe38:	e13ffe03 	ldbu	r4,-8(fp)
    fe3c:	d0a04f44 	addi	r2,gp,-32451
    fe40:	2085883a 	add	r2,r4,r2
    fe44:	10800003 	ldbu	r2,0(r2)
    fe48:	1009883a 	mov	r4,r2
    fe4c:	d0a05217 	ldw	r2,-32440(gp)
    fe50:	10800d43 	ldbu	r2,53(r2)
    fe54:	0084303a 	nor	r2,zero,r2
    fe58:	2084703a 	and	r2,r4,r2
    fe5c:	1009883a 	mov	r4,r2
    fe60:	d0a04f44 	addi	r2,gp,-32451
    fe64:	1885883a 	add	r2,r3,r2
    fe68:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
    fe6c:	e0fffe03 	ldbu	r3,-8(fp)
    fe70:	d0a04f44 	addi	r2,gp,-32451
    fe74:	1885883a 	add	r2,r3,r2
    fe78:	10800003 	ldbu	r2,0(r2)
    fe7c:	10803fcc 	andi	r2,r2,255
    fe80:	1000071e 	bne	r2,zero,fea0 <OS_EventTaskWaitMulti+0x13c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
    fe84:	d0a05217 	ldw	r2,-32440(gp)
    fe88:	10800d83 	ldbu	r2,54(r2)
    fe8c:	0084303a 	nor	r2,zero,r2
    fe90:	1007883a 	mov	r3,r2
    fe94:	d0a04f03 	ldbu	r2,-32452(gp)
    fe98:	1884703a 	and	r2,r3,r2
    fe9c:	d0a04f05 	stb	r2,-32452(gp)
    }
}
    fea0:	e037883a 	mov	sp,fp
    fea4:	df000017 	ldw	fp,0(sp)
    fea8:	dec00104 	addi	sp,sp,4
    feac:	f800283a 	ret

0000feb0 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
    feb0:	defffc04 	addi	sp,sp,-16
    feb4:	df000315 	stw	fp,12(sp)
    feb8:	df000304 	addi	fp,sp,12
    febc:	e13ffe15 	stw	r4,-8(fp)
    fec0:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
    fec4:	e0bffe17 	ldw	r2,-8(fp)
    fec8:	10800d03 	ldbu	r2,52(r2)
    fecc:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
    fed0:	e0bffd03 	ldbu	r2,-12(fp)
    fed4:	e0fffd03 	ldbu	r3,-12(fp)
    fed8:	e13fff17 	ldw	r4,-4(fp)
    fedc:	20c7883a 	add	r3,r4,r3
    fee0:	18c00204 	addi	r3,r3,8
    fee4:	18c000c3 	ldbu	r3,3(r3)
    fee8:	1809883a 	mov	r4,r3
    feec:	e0fffe17 	ldw	r3,-8(fp)
    fef0:	18c00d43 	ldbu	r3,53(r3)
    fef4:	00c6303a 	nor	r3,zero,r3
    fef8:	20c6703a 	and	r3,r4,r3
    fefc:	1809883a 	mov	r4,r3
    ff00:	e0ffff17 	ldw	r3,-4(fp)
    ff04:	1885883a 	add	r2,r3,r2
    ff08:	10800204 	addi	r2,r2,8
    ff0c:	110000c5 	stb	r4,3(r2)
    if (pevent->OSEventTbl[y] == 0) {
    ff10:	e0bffd03 	ldbu	r2,-12(fp)
    ff14:	e0ffff17 	ldw	r3,-4(fp)
    ff18:	1885883a 	add	r2,r3,r2
    ff1c:	10800204 	addi	r2,r2,8
    ff20:	108000c3 	ldbu	r2,3(r2)
    ff24:	10803fcc 	andi	r2,r2,255
    ff28:	10000a1e 	bne	r2,zero,ff54 <OS_EventTaskRemove+0xa4>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
    ff2c:	e0bfff17 	ldw	r2,-4(fp)
    ff30:	10800283 	ldbu	r2,10(r2)
    ff34:	1007883a 	mov	r3,r2
    ff38:	e0bffe17 	ldw	r2,-8(fp)
    ff3c:	10800d83 	ldbu	r2,54(r2)
    ff40:	0084303a 	nor	r2,zero,r2
    ff44:	1884703a 	and	r2,r3,r2
    ff48:	1007883a 	mov	r3,r2
    ff4c:	e0bfff17 	ldw	r2,-4(fp)
    ff50:	10c00285 	stb	r3,10(r2)
    }
}
    ff54:	e037883a 	mov	sp,fp
    ff58:	df000017 	ldw	fp,0(sp)
    ff5c:	dec00104 	addi	sp,sp,4
    ff60:	f800283a 	ret

0000ff64 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
    ff64:	defffa04 	addi	sp,sp,-24
    ff68:	df000515 	stw	fp,20(sp)
    ff6c:	df000504 	addi	fp,sp,20
    ff70:	e13ffe15 	stw	r4,-8(fp)
    ff74:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
    ff78:	e0bffe17 	ldw	r2,-8(fp)
    ff7c:	10800d03 	ldbu	r2,52(r2)
    ff80:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
    ff84:	e0bffe17 	ldw	r2,-8(fp)
    ff88:	10800d83 	ldbu	r2,54(r2)
    ff8c:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
    ff90:	e0bffe17 	ldw	r2,-8(fp)
    ff94:	10800d43 	ldbu	r2,53(r2)
    ff98:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
    ff9c:	e0bfff17 	ldw	r2,-4(fp)
    ffa0:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
    ffa4:	e0bffb17 	ldw	r2,-20(fp)
    ffa8:	10800017 	ldw	r2,0(r2)
    ffac:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
    ffb0:	00002506 	br	10048 <OS_EventTaskRemoveMulti+0xe4>
        pevent->OSEventTbl[y]  &= ~bitx;
    ffb4:	e0bffd03 	ldbu	r2,-12(fp)
    ffb8:	e0fffd03 	ldbu	r3,-12(fp)
    ffbc:	e13ffc17 	ldw	r4,-16(fp)
    ffc0:	20c7883a 	add	r3,r4,r3
    ffc4:	18c00204 	addi	r3,r3,8
    ffc8:	18c000c3 	ldbu	r3,3(r3)
    ffcc:	1809883a 	mov	r4,r3
    ffd0:	e0fffd83 	ldbu	r3,-10(fp)
    ffd4:	00c6303a 	nor	r3,zero,r3
    ffd8:	20c6703a 	and	r3,r4,r3
    ffdc:	1809883a 	mov	r4,r3
    ffe0:	e0fffc17 	ldw	r3,-16(fp)
    ffe4:	1885883a 	add	r2,r3,r2
    ffe8:	10800204 	addi	r2,r2,8
    ffec:	110000c5 	stb	r4,3(r2)
        if (pevent->OSEventTbl[y] == 0) {
    fff0:	e0bffd03 	ldbu	r2,-12(fp)
    fff4:	e0fffc17 	ldw	r3,-16(fp)
    fff8:	1885883a 	add	r2,r3,r2
    fffc:	10800204 	addi	r2,r2,8
   10000:	108000c3 	ldbu	r2,3(r2)
   10004:	10803fcc 	andi	r2,r2,255
   10008:	1000091e 	bne	r2,zero,10030 <OS_EventTaskRemoveMulti+0xcc>
            pevent->OSEventGrp &= ~bity;
   1000c:	e0bffc17 	ldw	r2,-16(fp)
   10010:	10800283 	ldbu	r2,10(r2)
   10014:	1007883a 	mov	r3,r2
   10018:	e0bffd43 	ldbu	r2,-11(fp)
   1001c:	0084303a 	nor	r2,zero,r2
   10020:	1884703a 	and	r2,r3,r2
   10024:	1007883a 	mov	r3,r2
   10028:	e0bffc17 	ldw	r2,-16(fp)
   1002c:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
   10030:	e0bffb17 	ldw	r2,-20(fp)
   10034:	10800104 	addi	r2,r2,4
   10038:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
   1003c:	e0bffb17 	ldw	r2,-20(fp)
   10040:	10800017 	ldw	r2,0(r2)
   10044:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
   10048:	e0bffc17 	ldw	r2,-16(fp)
   1004c:	103fd91e 	bne	r2,zero,ffb4 <OS_EventTaskRemoveMulti+0x50>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
   10050:	e037883a 	mov	sp,fp
   10054:	df000017 	ldw	fp,0(sp)
   10058:	dec00104 	addi	sp,sp,4
   1005c:	f800283a 	ret

00010060 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
   10060:	defffc04 	addi	sp,sp,-16
   10064:	df000315 	stw	fp,12(sp)
   10068:	df000304 	addi	fp,sp,12
   1006c:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
   10070:	e0bfff17 	ldw	r2,-4(fp)
   10074:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
   10078:	e0bfff17 	ldw	r2,-4(fp)
   1007c:	108002c4 	addi	r2,r2,11
   10080:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   10084:	e03ffe05 	stb	zero,-8(fp)
   10088:	00000706 	br	100a8 <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
   1008c:	e0bffd17 	ldw	r2,-12(fp)
   10090:	10c00044 	addi	r3,r2,1
   10094:	e0fffd15 	stw	r3,-12(fp)
   10098:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   1009c:	e0bffe03 	ldbu	r2,-8(fp)
   100a0:	10800044 	addi	r2,r2,1
   100a4:	e0bffe05 	stb	r2,-8(fp)
   100a8:	e0bffe03 	ldbu	r2,-8(fp)
   100ac:	108000f0 	cmpltui	r2,r2,3
   100b0:	103ff61e 	bne	r2,zero,1008c <OS_EventWaitListInit+0x2c>
        *ptbl++ = 0;
    }
}
   100b4:	e037883a 	mov	sp,fp
   100b8:	df000017 	ldw	fp,0(sp)
   100bc:	dec00104 	addi	sp,sp,4
   100c0:	f800283a 	ret

000100c4 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
   100c4:	defffb04 	addi	sp,sp,-20
   100c8:	dfc00415 	stw	ra,16(sp)
   100cc:	df000315 	stw	fp,12(sp)
   100d0:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
   100d4:	010000b4 	movhi	r4,2
   100d8:	2114c404 	addi	r4,r4,21264
   100dc:	0142d004 	movi	r5,2880
   100e0:	00104240 	call	10424 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
   100e4:	008000b4 	movhi	r2,2
   100e8:	1094c404 	addi	r2,r2,21264
   100ec:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
   100f0:	008000b4 	movhi	r2,2
   100f4:	1094d004 	addi	r2,r2,21312
   100f8:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
   100fc:	e03ffd0d 	sth	zero,-12(fp)
   10100:	00001306 	br	10150 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
   10104:	e0bffe17 	ldw	r2,-8(fp)
   10108:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
   1010c:	e0bffe17 	ldw	r2,-8(fp)
   10110:	e0ffff17 	ldw	r3,-4(fp)
   10114:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
   10118:	e0bffe17 	ldw	r2,-8(fp)
   1011c:	00c00fc4 	movi	r3,63
   10120:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
   10124:	e0bffe17 	ldw	r2,-8(fp)
   10128:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
   1012c:	e0bffe17 	ldw	r2,-8(fp)
   10130:	10800c04 	addi	r2,r2,48
   10134:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
   10138:	e0bfff17 	ldw	r2,-4(fp)
   1013c:	10800c04 	addi	r2,r2,48
   10140:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
   10144:	e0bffd0b 	ldhu	r2,-12(fp)
   10148:	10800044 	addi	r2,r2,1
   1014c:	e0bffd0d 	sth	r2,-12(fp)
   10150:	e0bffd0b 	ldhu	r2,-12(fp)
   10154:	10800ef0 	cmpltui	r2,r2,59
   10158:	103fea1e 	bne	r2,zero,10104 <OS_InitEventList+0x40>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
   1015c:	e0bffe17 	ldw	r2,-8(fp)
   10160:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
   10164:	e0bffe17 	ldw	r2,-8(fp)
   10168:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
   1016c:	e0bffe17 	ldw	r2,-8(fp)
   10170:	00c00fc4 	movi	r3,63
   10174:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
   10178:	e0bffe17 	ldw	r2,-8(fp)
   1017c:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
   10180:	008000b4 	movhi	r2,2
   10184:	1094c404 	addi	r2,r2,21264
   10188:	d0a05015 	stw	r2,-32448(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
   1018c:	e037883a 	mov	sp,fp
   10190:	dfc00117 	ldw	ra,4(sp)
   10194:	df000017 	ldw	fp,0(sp)
   10198:	dec00204 	addi	sp,sp,8
   1019c:	f800283a 	ret

000101a0 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
   101a0:	deffff04 	addi	sp,sp,-4
   101a4:	df000015 	stw	fp,0(sp)
   101a8:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
   101ac:	d0205315 	stw	zero,-32436(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
   101b0:	d0205105 	stb	zero,-32444(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
   101b4:	d0204305 	stb	zero,-32500(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
   101b8:	d0204b45 	stb	zero,-32467(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
   101bc:	d0204345 	stb	zero,-32499(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
   101c0:	d0204815 	stw	zero,-32480(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
   101c4:	d0204415 	stw	zero,-32496(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
   101c8:	d0205615 	stw	zero,-32424(gp)
    OSIdleCtrMax  = 0L;
   101cc:	d0204915 	stw	zero,-32476(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
   101d0:	d0205505 	stb	zero,-32428(gp)
#endif
}
   101d4:	e037883a 	mov	sp,fp
   101d8:	df000017 	ldw	fp,0(sp)
   101dc:	dec00104 	addi	sp,sp,4
   101e0:	f800283a 	ret

000101e4 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
   101e4:	defffd04 	addi	sp,sp,-12
   101e8:	df000215 	stw	fp,8(sp)
   101ec:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
   101f0:	d0204f05 	stb	zero,-32452(gp)
    prdytbl       = &OSRdyTbl[0];
   101f4:	d0a04f44 	addi	r2,gp,-32451
   101f8:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
   101fc:	e03ffe05 	stb	zero,-8(fp)
   10200:	00000706 	br	10220 <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
   10204:	e0bfff17 	ldw	r2,-4(fp)
   10208:	10c00044 	addi	r3,r2,1
   1020c:	e0ffff15 	stw	r3,-4(fp)
   10210:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
   10214:	e0bffe03 	ldbu	r2,-8(fp)
   10218:	10800044 	addi	r2,r2,1
   1021c:	e0bffe05 	stb	r2,-8(fp)
   10220:	e0bffe03 	ldbu	r2,-8(fp)
   10224:	108000f0 	cmpltui	r2,r2,3
   10228:	103ff61e 	bne	r2,zero,10204 <OS_InitRdyList+0x20>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
   1022c:	d0204545 	stb	zero,-32491(gp)
    OSPrioHighRdy = 0;
   10230:	d0204505 	stb	zero,-32492(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
   10234:	d0204d15 	stw	zero,-32460(gp)
    OSTCBCur      = (OS_TCB *)0;
   10238:	d0205215 	stw	zero,-32440(gp)
}
   1023c:	e037883a 	mov	sp,fp
   10240:	df000017 	ldw	fp,0(sp)
   10244:	dec00104 	addi	sp,sp,4
   10248:	f800283a 	ret

0001024c <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
   1024c:	defff804 	addi	sp,sp,-32
   10250:	dfc00715 	stw	ra,28(sp)
   10254:	df000615 	stw	fp,24(sp)
   10258:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
   1025c:	00bfffd4 	movui	r2,65535
   10260:	d8800015 	stw	r2,0(sp)
   10264:	008000b4 	movhi	r2,2
   10268:	1092c404 	addi	r2,r2,19216
   1026c:	d8800115 	stw	r2,4(sp)
   10270:	00808004 	movi	r2,512
   10274:	d8800215 	stw	r2,8(sp)
   10278:	d8000315 	stw	zero,12(sp)
   1027c:	008000c4 	movi	r2,3
   10280:	d8800415 	stw	r2,16(sp)
   10284:	01000074 	movhi	r4,1
   10288:	2101b704 	addi	r4,r4,1756
   1028c:	000b883a 	mov	r5,zero
   10290:	018000b4 	movhi	r6,2
   10294:	3194c304 	addi	r6,r6,21260
   10298:	01c00504 	movi	r7,20
   1029c:	00150ec0 	call	150ec <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
   102a0:	01000504 	movi	r4,20
   102a4:	014000b4 	movhi	r5,2
   102a8:	296bab04 	addi	r5,r5,-20820
   102ac:	e1bfff04 	addi	r6,fp,-4
   102b0:	00159b80 	call	159b8 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
   102b4:	e037883a 	mov	sp,fp
   102b8:	dfc00117 	ldw	ra,4(sp)
   102bc:	df000017 	ldw	fp,0(sp)
   102c0:	dec00204 	addi	sp,sp,8
   102c4:	f800283a 	ret

000102c8 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
   102c8:	defff804 	addi	sp,sp,-32
   102cc:	dfc00715 	stw	ra,28(sp)
   102d0:	df000615 	stw	fp,24(sp)
   102d4:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
   102d8:	00bfff94 	movui	r2,65534
   102dc:	d8800015 	stw	r2,0(sp)
   102e0:	008000b4 	movhi	r2,2
   102e4:	10904c04 	addi	r2,r2,16688
   102e8:	d8800115 	stw	r2,4(sp)
   102ec:	00808004 	movi	r2,512
   102f0:	d8800215 	stw	r2,8(sp)
   102f4:	d8000315 	stw	zero,12(sp)
   102f8:	008000c4 	movi	r2,3
   102fc:	d8800415 	stw	r2,16(sp)
   10300:	01000074 	movhi	r4,1
   10304:	2101ce04 	addi	r4,r4,1848
   10308:	000b883a 	mov	r5,zero
   1030c:	018000b4 	movhi	r6,2
   10310:	31924b04 	addi	r6,r6,18732
   10314:	01c004c4 	movi	r7,19
   10318:	00150ec0 	call	150ec <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
   1031c:	010004c4 	movi	r4,19
   10320:	014000b4 	movhi	r5,2
   10324:	296baf04 	addi	r5,r5,-20804
   10328:	e1bfff04 	addi	r6,fp,-4
   1032c:	00159b80 	call	159b8 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
   10330:	e037883a 	mov	sp,fp
   10334:	dfc00117 	ldw	ra,4(sp)
   10338:	df000017 	ldw	fp,0(sp)
   1033c:	dec00204 	addi	sp,sp,8
   10340:	f800283a 	ret

00010344 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
   10344:	defffb04 	addi	sp,sp,-20
   10348:	dfc00415 	stw	ra,16(sp)
   1034c:	df000315 	stw	fp,12(sp)
   10350:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
   10354:	010000b4 	movhi	r4,2
   10358:	21179404 	addi	r4,r4,24144
   1035c:	01414404 	movi	r5,1296
   10360:	00104240 	call	10424 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
   10364:	010000b4 	movhi	r4,2
   10368:	2118d804 	addi	r4,r4,25440
   1036c:	01401504 	movi	r5,84
   10370:	00104240 	call	10424 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
   10374:	008000b4 	movhi	r2,2
   10378:	10979404 	addi	r2,r2,24144
   1037c:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
   10380:	008000b4 	movhi	r2,2
   10384:	1097af04 	addi	r2,r2,24252
   10388:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
   1038c:	e03ffd05 	stb	zero,-12(fp)
   10390:	00001106 	br	103d8 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
   10394:	e0bffe17 	ldw	r2,-8(fp)
   10398:	e0ffff17 	ldw	r3,-4(fp)
   1039c:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
   103a0:	e0bffe17 	ldw	r2,-8(fp)
   103a4:	00c00fc4 	movi	r3,63
   103a8:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
   103ac:	e0bffe17 	ldw	r2,-8(fp)
   103b0:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
   103b4:	e0bffe17 	ldw	r2,-8(fp)
   103b8:	10801b04 	addi	r2,r2,108
   103bc:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
   103c0:	e0bfff17 	ldw	r2,-4(fp)
   103c4:	10801b04 	addi	r2,r2,108
   103c8:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
   103cc:	e0bffd03 	ldbu	r2,-12(fp)
   103d0:	10800044 	addi	r2,r2,1
   103d4:	e0bffd05 	stb	r2,-12(fp)
   103d8:	e0bffd03 	ldbu	r2,-12(fp)
   103dc:	108002f0 	cmpltui	r2,r2,11
   103e0:	103fec1e 	bne	r2,zero,10394 <OS_InitTCBList+0x50>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
   103e4:	e0bffe17 	ldw	r2,-8(fp)
   103e8:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
   103ec:	e0bffe17 	ldw	r2,-8(fp)
   103f0:	00c00fc4 	movi	r3,63
   103f4:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
   103f8:	e0bffe17 	ldw	r2,-8(fp)
   103fc:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
   10400:	d0204615 	stw	zero,-32488(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
   10404:	008000b4 	movhi	r2,2
   10408:	10979404 	addi	r2,r2,24144
   1040c:	d0a04a15 	stw	r2,-32472(gp)
}
   10410:	e037883a 	mov	sp,fp
   10414:	dfc00117 	ldw	ra,4(sp)
   10418:	df000017 	ldw	fp,0(sp)
   1041c:	dec00204 	addi	sp,sp,8
   10420:	f800283a 	ret

00010424 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
   10424:	defffd04 	addi	sp,sp,-12
   10428:	df000215 	stw	fp,8(sp)
   1042c:	df000204 	addi	fp,sp,8
   10430:	e13ffe15 	stw	r4,-8(fp)
   10434:	2805883a 	mov	r2,r5
   10438:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
   1043c:	00000706 	br	1045c <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
   10440:	e0bffe17 	ldw	r2,-8(fp)
   10444:	10c00044 	addi	r3,r2,1
   10448:	e0fffe15 	stw	r3,-8(fp)
   1044c:	10000005 	stb	zero,0(r2)
        size--;
   10450:	e0bfff0b 	ldhu	r2,-4(fp)
   10454:	10bfffc4 	addi	r2,r2,-1
   10458:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
   1045c:	e0bfff0b 	ldhu	r2,-4(fp)
   10460:	103ff71e 	bne	r2,zero,10440 <OS_MemClr+0x1c>
        *pdest++ = (INT8U)0;
        size--;
    }
}
   10464:	e037883a 	mov	sp,fp
   10468:	df000017 	ldw	fp,0(sp)
   1046c:	dec00104 	addi	sp,sp,4
   10470:	f800283a 	ret

00010474 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
   10474:	defffc04 	addi	sp,sp,-16
   10478:	df000315 	stw	fp,12(sp)
   1047c:	df000304 	addi	fp,sp,12
   10480:	e13ffd15 	stw	r4,-12(fp)
   10484:	e17ffe15 	stw	r5,-8(fp)
   10488:	3005883a 	mov	r2,r6
   1048c:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
   10490:	00000b06 	br	104c0 <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
   10494:	e0bffd17 	ldw	r2,-12(fp)
   10498:	10c00044 	addi	r3,r2,1
   1049c:	e0fffd15 	stw	r3,-12(fp)
   104a0:	e0fffe17 	ldw	r3,-8(fp)
   104a4:	19000044 	addi	r4,r3,1
   104a8:	e13ffe15 	stw	r4,-8(fp)
   104ac:	18c00003 	ldbu	r3,0(r3)
   104b0:	10c00005 	stb	r3,0(r2)
        size--;
   104b4:	e0bfff0b 	ldhu	r2,-4(fp)
   104b8:	10bfffc4 	addi	r2,r2,-1
   104bc:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
   104c0:	e0bfff0b 	ldhu	r2,-4(fp)
   104c4:	103ff31e 	bne	r2,zero,10494 <OS_MemCopy+0x20>
        *pdest++ = *psrc++;
        size--;
    }
}
   104c8:	e037883a 	mov	sp,fp
   104cc:	df000017 	ldw	fp,0(sp)
   104d0:	dec00104 	addi	sp,sp,4
   104d4:	f800283a 	ret

000104d8 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
   104d8:	defffb04 	addi	sp,sp,-20
   104dc:	dfc00415 	stw	ra,16(sp)
   104e0:	df000315 	stw	fp,12(sp)
   104e4:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   104e8:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   104ec:	0005303a 	rdctl	r2,status
   104f0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   104f4:	e0fffe17 	ldw	r3,-8(fp)
   104f8:	00bfff84 	movi	r2,-2
   104fc:	1884703a 	and	r2,r3,r2
   10500:	1001703a 	wrctl	status,r2
  
  return context;
   10504:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   10508:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
   1050c:	d0a05103 	ldbu	r2,-32444(gp)
   10510:	10803fcc 	andi	r2,r2,255
   10514:	10001a1e 	bne	r2,zero,10580 <OS_Sched+0xa8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
   10518:	d0a04303 	ldbu	r2,-32500(gp)
   1051c:	10803fcc 	andi	r2,r2,255
   10520:	1000171e 	bne	r2,zero,10580 <OS_Sched+0xa8>
            OS_SchedNew();
   10524:	00105a40 	call	105a4 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
   10528:	d0e04503 	ldbu	r3,-32492(gp)
   1052c:	d0a04543 	ldbu	r2,-32491(gp)
   10530:	18c03fcc 	andi	r3,r3,255
   10534:	10803fcc 	andi	r2,r2,255
   10538:	18801126 	beq	r3,r2,10580 <OS_Sched+0xa8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
   1053c:	d0a04503 	ldbu	r2,-32492(gp)
   10540:	10c03fcc 	andi	r3,r2,255
   10544:	008000b4 	movhi	r2,2
   10548:	1098d804 	addi	r2,r2,25440
   1054c:	18c7883a 	add	r3,r3,r3
   10550:	18c7883a 	add	r3,r3,r3
   10554:	10c5883a 	add	r2,r2,r3
   10558:	10800017 	ldw	r2,0(r2)
   1055c:	d0a04d15 	stw	r2,-32460(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
   10560:	d0a04d17 	ldw	r2,-32460(gp)
   10564:	10c00e17 	ldw	r3,56(r2)
   10568:	18c00044 	addi	r3,r3,1
   1056c:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
   10570:	d0a04817 	ldw	r2,-32480(gp)
   10574:	10800044 	addi	r2,r2,1
   10578:	d0a04815 	stw	r2,-32480(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
   1057c:	0019ed00 	call	19ed0 <OSCtxSw>
   10580:	e0bffd17 	ldw	r2,-12(fp)
   10584:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10588:	e0bfff17 	ldw	r2,-4(fp)
   1058c:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
   10590:	e037883a 	mov	sp,fp
   10594:	dfc00117 	ldw	ra,4(sp)
   10598:	df000017 	ldw	fp,0(sp)
   1059c:	dec00204 	addi	sp,sp,8
   105a0:	f800283a 	ret

000105a4 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
   105a4:	defffe04 	addi	sp,sp,-8
   105a8:	df000115 	stw	fp,4(sp)
   105ac:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
   105b0:	d0a04f03 	ldbu	r2,-32452(gp)
   105b4:	10c03fcc 	andi	r3,r2,255
   105b8:	008000b4 	movhi	r2,2
   105bc:	10ab6b04 	addi	r2,r2,-21076
   105c0:	10c5883a 	add	r2,r2,r3
   105c4:	10800003 	ldbu	r2,0(r2)
   105c8:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
   105cc:	e0bfff03 	ldbu	r2,-4(fp)
   105d0:	100490fa 	slli	r2,r2,3
   105d4:	1009883a 	mov	r4,r2
   105d8:	e0ffff03 	ldbu	r3,-4(fp)
   105dc:	d0a04f44 	addi	r2,gp,-32451
   105e0:	1885883a 	add	r2,r3,r2
   105e4:	10800003 	ldbu	r2,0(r2)
   105e8:	10c03fcc 	andi	r3,r2,255
   105ec:	008000b4 	movhi	r2,2
   105f0:	10ab6b04 	addi	r2,r2,-21076
   105f4:	10c5883a 	add	r2,r2,r3
   105f8:	10800003 	ldbu	r2,0(r2)
   105fc:	2085883a 	add	r2,r4,r2
   10600:	d0a04505 	stb	r2,-32492(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
   10604:	e037883a 	mov	sp,fp
   10608:	df000017 	ldw	fp,0(sp)
   1060c:	dec00104 	addi	sp,sp,4
   10610:	f800283a 	ret

00010614 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
   10614:	defffc04 	addi	sp,sp,-16
   10618:	df000315 	stw	fp,12(sp)
   1061c:	df000304 	addi	fp,sp,12
   10620:	e13ffe15 	stw	r4,-8(fp)
   10624:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
   10628:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
   1062c:	00000b06 	br	1065c <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
   10630:	e0bffe17 	ldw	r2,-8(fp)
   10634:	10c00044 	addi	r3,r2,1
   10638:	e0fffe15 	stw	r3,-8(fp)
   1063c:	e0ffff17 	ldw	r3,-4(fp)
   10640:	19000044 	addi	r4,r3,1
   10644:	e13fff15 	stw	r4,-4(fp)
   10648:	18c00003 	ldbu	r3,0(r3)
   1064c:	10c00005 	stb	r3,0(r2)
        len++;
   10650:	e0bffd03 	ldbu	r2,-12(fp)
   10654:	10800044 	addi	r2,r2,1
   10658:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
   1065c:	e0bfff17 	ldw	r2,-4(fp)
   10660:	10800003 	ldbu	r2,0(r2)
   10664:	10803fcc 	andi	r2,r2,255
   10668:	103ff11e 	bne	r2,zero,10630 <OS_StrCopy+0x1c>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
   1066c:	e0bffe17 	ldw	r2,-8(fp)
   10670:	10000005 	stb	zero,0(r2)
    return (len);
   10674:	e0bffd03 	ldbu	r2,-12(fp)
}
   10678:	e037883a 	mov	sp,fp
   1067c:	df000017 	ldw	fp,0(sp)
   10680:	dec00104 	addi	sp,sp,4
   10684:	f800283a 	ret

00010688 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
   10688:	defffd04 	addi	sp,sp,-12
   1068c:	df000215 	stw	fp,8(sp)
   10690:	df000204 	addi	fp,sp,8
   10694:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
   10698:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
   1069c:	00000606 	br	106b8 <OS_StrLen+0x30>
        psrc++;
   106a0:	e0bfff17 	ldw	r2,-4(fp)
   106a4:	10800044 	addi	r2,r2,1
   106a8:	e0bfff15 	stw	r2,-4(fp)
        len++;
   106ac:	e0bffe03 	ldbu	r2,-8(fp)
   106b0:	10800044 	addi	r2,r2,1
   106b4:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
   106b8:	e0bfff17 	ldw	r2,-4(fp)
   106bc:	10800003 	ldbu	r2,0(r2)
   106c0:	10803fcc 	andi	r2,r2,255
   106c4:	103ff61e 	bne	r2,zero,106a0 <OS_StrLen+0x18>
        psrc++;
        len++;
    }
    return (len);
   106c8:	e0bffe03 	ldbu	r2,-8(fp)
}
   106cc:	e037883a 	mov	sp,fp
   106d0:	df000017 	ldw	fp,0(sp)
   106d4:	dec00104 	addi	sp,sp,4
   106d8:	f800283a 	ret

000106dc <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
   106dc:	defffa04 	addi	sp,sp,-24
   106e0:	dfc00515 	stw	ra,20(sp)
   106e4:	df000415 	stw	fp,16(sp)
   106e8:	df000404 	addi	fp,sp,16
   106ec:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   106f0:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   106f4:	0005303a 	rdctl	r2,status
   106f8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   106fc:	e0fffd17 	ldw	r3,-12(fp)
   10700:	00bfff84 	movi	r2,-2
   10704:	1884703a 	and	r2,r3,r2
   10708:	1001703a 	wrctl	status,r2
  
  return context;
   1070c:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
   10710:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
   10714:	d0a04417 	ldw	r2,-32496(gp)
   10718:	10800044 	addi	r2,r2,1
   1071c:	d0a04415 	stw	r2,-32496(gp)
   10720:	e0bffc17 	ldw	r2,-16(fp)
   10724:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10728:	e0bffe17 	ldw	r2,-8(fp)
   1072c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
   10730:	001a1c80 	call	1a1c8 <OSTaskIdleHook>
    }
   10734:	003fef06 	br	106f4 <OS_TaskIdle+0x18>

00010738 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
   10738:	defffa04 	addi	sp,sp,-24
   1073c:	dfc00515 	stw	ra,20(sp)
   10740:	df000415 	stw	fp,16(sp)
   10744:	df000404 	addi	fp,sp,16
   10748:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1074c:	e03ffc15 	stw	zero,-16(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
   10750:	00000206 	br	1075c <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
   10754:	01003204 	movi	r4,200
   10758:	00162e40 	call	162e4 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
   1075c:	d0a05503 	ldbu	r2,-32428(gp)
   10760:	10803fcc 	andi	r2,r2,255
   10764:	103ffb26 	beq	r2,zero,10754 <OS_TaskStat+0x1c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
   10768:	d0a04917 	ldw	r2,-32476(gp)
   1076c:	1009883a 	mov	r4,r2
   10770:	01401904 	movi	r5,100
   10774:	00032180 	call	3218 <__udivsi3>
   10778:	d0a04915 	stw	r2,-32476(gp)
    if (OSIdleCtrMax == 0L) {
   1077c:	d0a04917 	ldw	r2,-32476(gp)
   10780:	1000031e 	bne	r2,zero,10790 <OS_TaskStat+0x58>
        OSCPUUsage = 0;
   10784:	d0204b05 	stb	zero,-32468(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
   10788:	01003fc4 	movi	r4,255
   1078c:	0015f380 	call	15f38 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10790:	0005303a 	rdctl	r2,status
   10794:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10798:	e0fffd17 	ldw	r3,-12(fp)
   1079c:	00bfff84 	movi	r2,-2
   107a0:	1884703a 	and	r2,r3,r2
   107a4:	1001703a 	wrctl	status,r2
  
  return context;
   107a8:	e0bffd17 	ldw	r2,-12(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
   107ac:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
   107b0:	d0a04417 	ldw	r2,-32496(gp)
   107b4:	d0a05615 	stw	r2,-32424(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
   107b8:	d0204415 	stw	zero,-32496(gp)
   107bc:	e0bffc17 	ldw	r2,-16(fp)
   107c0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   107c4:	e0bffe17 	ldw	r2,-8(fp)
   107c8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
   107cc:	d0e05617 	ldw	r3,-32424(gp)
   107d0:	d0a04917 	ldw	r2,-32476(gp)
   107d4:	1809883a 	mov	r4,r3
   107d8:	100b883a 	mov	r5,r2
   107dc:	00032180 	call	3218 <__udivsi3>
   107e0:	1007883a 	mov	r3,r2
   107e4:	00801904 	movi	r2,100
   107e8:	10c5c83a 	sub	r2,r2,r3
   107ec:	d0a04b05 	stb	r2,-32468(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
   107f0:	001a1580 	call	1a158 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
   107f4:	00108040 	call	10804 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
   107f8:	01001904 	movi	r4,100
   107fc:	00162e40 	call	162e4 <OSTimeDly>
    }
   10800:	003fe306 	br	10790 <OS_TaskStat+0x58>

00010804 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
   10804:	defffa04 	addi	sp,sp,-24
   10808:	dfc00515 	stw	ra,20(sp)
   1080c:	df000415 	stw	fp,16(sp)
   10810:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
   10814:	e03ffc05 	stb	zero,-16(fp)
   10818:	00002406 	br	108ac <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
   1081c:	e0fffc03 	ldbu	r3,-16(fp)
   10820:	e0bffe04 	addi	r2,fp,-8
   10824:	1809883a 	mov	r4,r3
   10828:	100b883a 	mov	r5,r2
   1082c:	0015d700 	call	15d70 <OSTaskStkChk>
   10830:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
   10834:	e0bffc43 	ldbu	r2,-15(fp)
   10838:	1000191e 	bne	r2,zero,108a0 <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
   1083c:	e0fffc03 	ldbu	r3,-16(fp)
   10840:	008000b4 	movhi	r2,2
   10844:	1098d804 	addi	r2,r2,25440
   10848:	18c7883a 	add	r3,r3,r3
   1084c:	18c7883a 	add	r3,r3,r3
   10850:	10c5883a 	add	r2,r2,r3
   10854:	10800017 	ldw	r2,0(r2)
   10858:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
   1085c:	e0bffd17 	ldw	r2,-12(fp)
   10860:	10000f26 	beq	r2,zero,108a0 <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
   10864:	e0bffd17 	ldw	r2,-12(fp)
   10868:	10800060 	cmpeqi	r2,r2,1
   1086c:	10000c1e 	bne	r2,zero,108a0 <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
   10870:	e0bffd17 	ldw	r2,-12(fp)
   10874:	10c00217 	ldw	r3,8(r2)
   10878:	e0bffd17 	ldw	r2,-12(fp)
   1087c:	10800317 	ldw	r2,12(r2)
   10880:	1085883a 	add	r2,r2,r2
   10884:	1085883a 	add	r2,r2,r2
   10888:	1887883a 	add	r3,r3,r2
   1088c:	e0bffd17 	ldw	r2,-12(fp)
   10890:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
   10894:	e0ffff17 	ldw	r3,-4(fp)
   10898:	e0bffd17 	ldw	r2,-12(fp)
   1089c:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
   108a0:	e0bffc03 	ldbu	r2,-16(fp)
   108a4:	10800044 	addi	r2,r2,1
   108a8:	e0bffc05 	stb	r2,-16(fp)
   108ac:	e0bffc03 	ldbu	r2,-16(fp)
   108b0:	10800570 	cmpltui	r2,r2,21
   108b4:	103fd91e 	bne	r2,zero,1081c <OS_TaskStatStkChk+0x18>
#endif
                }
            }
        }
    }
}
   108b8:	e037883a 	mov	sp,fp
   108bc:	dfc00117 	ldw	ra,4(sp)
   108c0:	df000017 	ldw	fp,0(sp)
   108c4:	dec00204 	addi	sp,sp,8
   108c8:	f800283a 	ret

000108cc <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
   108cc:	defff204 	addi	sp,sp,-56
   108d0:	dfc00d15 	stw	ra,52(sp)
   108d4:	df000c15 	stw	fp,48(sp)
   108d8:	df000c04 	addi	fp,sp,48
   108dc:	e17ffc15 	stw	r5,-16(fp)
   108e0:	e1bffd15 	stw	r6,-12(fp)
   108e4:	3807883a 	mov	r3,r7
   108e8:	e0800417 	ldw	r2,16(fp)
   108ec:	e13ffb05 	stb	r4,-20(fp)
   108f0:	e0fffe0d 	sth	r3,-8(fp)
   108f4:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   108f8:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   108fc:	0005303a 	rdctl	r2,status
   10900:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10904:	e0fff617 	ldw	r3,-40(fp)
   10908:	00bfff84 	movi	r2,-2
   1090c:	1884703a 	and	r2,r3,r2
   10910:	1001703a 	wrctl	status,r2
  
  return context;
   10914:	e0bff617 	ldw	r2,-40(fp)
#endif



    OS_ENTER_CRITICAL();
   10918:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
   1091c:	d0a04a17 	ldw	r2,-32472(gp)
   10920:	e0bff515 	stw	r2,-44(fp)
    if (ptcb != (OS_TCB *)0) {
   10924:	e0bff517 	ldw	r2,-44(fp)
   10928:	10009326 	beq	r2,zero,10b78 <OS_TCBInit+0x2ac>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
   1092c:	e0bff517 	ldw	r2,-44(fp)
   10930:	10800517 	ldw	r2,20(r2)
   10934:	d0a04a15 	stw	r2,-32472(gp)
   10938:	e0bff417 	ldw	r2,-48(fp)
   1093c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10940:	e0bff717 	ldw	r2,-36(fp)
   10944:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
   10948:	e0bff517 	ldw	r2,-44(fp)
   1094c:	e0fffc17 	ldw	r3,-16(fp)
   10950:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
   10954:	e0bff517 	ldw	r2,-44(fp)
   10958:	e0fffb03 	ldbu	r3,-20(fp)
   1095c:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
   10960:	e0bff517 	ldw	r2,-44(fp)
   10964:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
   10968:	e0bff517 	ldw	r2,-44(fp)
   1096c:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
   10970:	e0bff517 	ldw	r2,-44(fp)
   10974:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
   10978:	e0bff517 	ldw	r2,-44(fp)
   1097c:	e0c00317 	ldw	r3,12(fp)
   10980:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
   10984:	e0bff517 	ldw	r2,-44(fp)
   10988:	e0c00217 	ldw	r3,8(fp)
   1098c:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
   10990:	e0bff517 	ldw	r2,-44(fp)
   10994:	e0fffd17 	ldw	r3,-12(fp)
   10998:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
   1099c:	e0bff517 	ldw	r2,-44(fp)
   109a0:	e0ffff0b 	ldhu	r3,-4(fp)
   109a4:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
   109a8:	e0bff517 	ldw	r2,-44(fp)
   109ac:	e0fffe0b 	ldhu	r3,-8(fp)
   109b0:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
   109b4:	e0bff517 	ldw	r2,-44(fp)
   109b8:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
   109bc:	e0bffb03 	ldbu	r2,-20(fp)
   109c0:	1004d0fa 	srli	r2,r2,3
   109c4:	1007883a 	mov	r3,r2
   109c8:	e0bff517 	ldw	r2,-44(fp)
   109cc:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
   109d0:	e0bffb03 	ldbu	r2,-20(fp)
   109d4:	108001cc 	andi	r2,r2,7
   109d8:	1007883a 	mov	r3,r2
   109dc:	e0bff517 	ldw	r2,-44(fp)
   109e0:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
   109e4:	e0bff517 	ldw	r2,-44(fp)
   109e8:	10800d03 	ldbu	r2,52(r2)
   109ec:	10803fcc 	andi	r2,r2,255
   109f0:	00c00044 	movi	r3,1
   109f4:	1884983a 	sll	r2,r3,r2
   109f8:	1007883a 	mov	r3,r2
   109fc:	e0bff517 	ldw	r2,-44(fp)
   10a00:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
   10a04:	e0bff517 	ldw	r2,-44(fp)
   10a08:	10800cc3 	ldbu	r2,51(r2)
   10a0c:	10803fcc 	andi	r2,r2,255
   10a10:	00c00044 	movi	r3,1
   10a14:	1884983a 	sll	r2,r3,r2
   10a18:	1007883a 	mov	r3,r2
   10a1c:	e0bff517 	ldw	r2,-44(fp)
   10a20:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
   10a24:	e0bff517 	ldw	r2,-44(fp)
   10a28:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
   10a2c:	e0bff517 	ldw	r2,-44(fp)
   10a30:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
   10a34:	e0bff517 	ldw	r2,-44(fp)
   10a38:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
   10a3c:	e0bff517 	ldw	r2,-44(fp)
   10a40:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
   10a44:	e0bff517 	ldw	r2,-44(fp)
   10a48:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
   10a4c:	e0bff517 	ldw	r2,-44(fp)
   10a50:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
   10a54:	e0bff517 	ldw	r2,-44(fp)
   10a58:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
   10a5c:	e0bff517 	ldw	r2,-44(fp)
   10a60:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
   10a64:	e0bff517 	ldw	r2,-44(fp)
   10a68:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
   10a6c:	e0bff517 	ldw	r2,-44(fp)
   10a70:	00c00fc4 	movi	r3,63
   10a74:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   10a78:	e0bff517 	ldw	r2,-44(fp)
   10a7c:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
   10a80:	e13ff517 	ldw	r4,-44(fp)
   10a84:	001a1e40 	call	1a1e4 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
   10a88:	e13ff517 	ldw	r4,-44(fp)
   10a8c:	001a0fc0 	call	1a0fc <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10a90:	0005303a 	rdctl	r2,status
   10a94:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10a98:	e0fff817 	ldw	r3,-32(fp)
   10a9c:	00bfff84 	movi	r2,-2
   10aa0:	1884703a 	and	r2,r3,r2
   10aa4:	1001703a 	wrctl	status,r2
  
  return context;
   10aa8:	e0bff817 	ldw	r2,-32(fp)

        OS_ENTER_CRITICAL();
   10aac:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
   10ab0:	e0fffb03 	ldbu	r3,-20(fp)
   10ab4:	008000b4 	movhi	r2,2
   10ab8:	1098d804 	addi	r2,r2,25440
   10abc:	18c7883a 	add	r3,r3,r3
   10ac0:	18c7883a 	add	r3,r3,r3
   10ac4:	10c5883a 	add	r2,r2,r3
   10ac8:	e0fff517 	ldw	r3,-44(fp)
   10acc:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
   10ad0:	d0e04617 	ldw	r3,-32488(gp)
   10ad4:	e0bff517 	ldw	r2,-44(fp)
   10ad8:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
   10adc:	e0bff517 	ldw	r2,-44(fp)
   10ae0:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
   10ae4:	d0a04617 	ldw	r2,-32488(gp)
   10ae8:	10000326 	beq	r2,zero,10af8 <OS_TCBInit+0x22c>
            OSTCBList->OSTCBPrev = ptcb;
   10aec:	d0a04617 	ldw	r2,-32488(gp)
   10af0:	e0fff517 	ldw	r3,-44(fp)
   10af4:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
   10af8:	e0bff517 	ldw	r2,-44(fp)
   10afc:	d0a04615 	stw	r2,-32488(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
   10b00:	e0bff517 	ldw	r2,-44(fp)
   10b04:	10c00d83 	ldbu	r3,54(r2)
   10b08:	d0a04f03 	ldbu	r2,-32452(gp)
   10b0c:	1884b03a 	or	r2,r3,r2
   10b10:	d0a04f05 	stb	r2,-32452(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   10b14:	e0bff517 	ldw	r2,-44(fp)
   10b18:	10800d03 	ldbu	r2,52(r2)
   10b1c:	10c03fcc 	andi	r3,r2,255
   10b20:	e0bff517 	ldw	r2,-44(fp)
   10b24:	10800d03 	ldbu	r2,52(r2)
   10b28:	11003fcc 	andi	r4,r2,255
   10b2c:	d0a04f44 	addi	r2,gp,-32451
   10b30:	2085883a 	add	r2,r4,r2
   10b34:	11000003 	ldbu	r4,0(r2)
   10b38:	e0bff517 	ldw	r2,-44(fp)
   10b3c:	10800d43 	ldbu	r2,53(r2)
   10b40:	2084b03a 	or	r2,r4,r2
   10b44:	1009883a 	mov	r4,r2
   10b48:	d0a04f44 	addi	r2,gp,-32451
   10b4c:	1885883a 	add	r2,r3,r2
   10b50:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
   10b54:	d0a04b43 	ldbu	r2,-32467(gp)
   10b58:	10800044 	addi	r2,r2,1
   10b5c:	d0a04b45 	stb	r2,-32467(gp)
   10b60:	e0bff417 	ldw	r2,-48(fp)
   10b64:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10b68:	e0bff917 	ldw	r2,-28(fp)
   10b6c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   10b70:	0005883a 	mov	r2,zero
   10b74:	00000506 	br	10b8c <OS_TCBInit+0x2c0>
   10b78:	e0bff417 	ldw	r2,-48(fp)
   10b7c:	e0bffa15 	stw	r2,-24(fp)
   10b80:	e0bffa17 	ldw	r2,-24(fp)
   10b84:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
   10b88:	00801084 	movi	r2,66
}
   10b8c:	e037883a 	mov	sp,fp
   10b90:	dfc00117 	ldw	ra,4(sp)
   10b94:	df000017 	ldw	fp,0(sp)
   10b98:	dec00204 	addi	sp,sp,8
   10b9c:	f800283a 	ret

00010ba0 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
   10ba0:	defffe04 	addi	sp,sp,-8
   10ba4:	df000115 	stw	fp,4(sp)
   10ba8:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
   10bac:	d0a01004 	addi	r2,gp,-32704
   10bb0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
   10bb4:	d0a01104 	addi	r2,gp,-32700
   10bb8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
   10bbc:	d0a01284 	addi	r2,gp,-32694
   10bc0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
   10bc4:	d0a01304 	addi	r2,gp,-32692
   10bc8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
   10bcc:	d0a01204 	addi	r2,gp,-32696
   10bd0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
   10bd4:	d0a01384 	addi	r2,gp,-32690
   10bd8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
   10bdc:	d0a01404 	addi	r2,gp,-32688
   10be0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
   10be4:	d0a01484 	addi	r2,gp,-32686
   10be8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
   10bec:	d0a01504 	addi	r2,gp,-32684
   10bf0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
   10bf4:	d0a01584 	addi	r2,gp,-32682
   10bf8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
   10bfc:	d0a01604 	addi	r2,gp,-32680
   10c00:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
   10c04:	d0a01684 	addi	r2,gp,-32678
   10c08:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
   10c0c:	d0a01704 	addi	r2,gp,-32676
   10c10:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
   10c14:	d0a01784 	addi	r2,gp,-32674
   10c18:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
   10c1c:	d0a01804 	addi	r2,gp,-32672
   10c20:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
   10c24:	d0a01884 	addi	r2,gp,-32670
   10c28:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
   10c2c:	d0a01904 	addi	r2,gp,-32668
   10c30:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
   10c34:	d0a01984 	addi	r2,gp,-32666
   10c38:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
   10c3c:	d0a01a04 	addi	r2,gp,-32664
   10c40:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
   10c44:	d0a01a84 	addi	r2,gp,-32662
   10c48:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
   10c4c:	d0a01b04 	addi	r2,gp,-32660
   10c50:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
   10c54:	d0a01b84 	addi	r2,gp,-32658
   10c58:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
   10c5c:	d0a01c04 	addi	r2,gp,-32656
   10c60:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
   10c64:	d0a01c84 	addi	r2,gp,-32654
   10c68:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
   10c6c:	d0a01d04 	addi	r2,gp,-32652
   10c70:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
   10c74:	d0a01d84 	addi	r2,gp,-32650
   10c78:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
   10c7c:	d0a01e04 	addi	r2,gp,-32648
   10c80:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
   10c84:	d0a01e84 	addi	r2,gp,-32646
   10c88:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
   10c8c:	d0a01f04 	addi	r2,gp,-32644
   10c90:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
   10c94:	d0a01f84 	addi	r2,gp,-32642
   10c98:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
   10c9c:	d0a02004 	addi	r2,gp,-32640
   10ca0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
   10ca4:	d0a02084 	addi	r2,gp,-32638
   10ca8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
   10cac:	d0a02104 	addi	r2,gp,-32636
   10cb0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
   10cb4:	d0a02184 	addi	r2,gp,-32634
   10cb8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
   10cbc:	d0a02204 	addi	r2,gp,-32632
   10cc0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
   10cc4:	d0a02284 	addi	r2,gp,-32630
   10cc8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
   10ccc:	d0a02304 	addi	r2,gp,-32628
   10cd0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
   10cd4:	d0a02384 	addi	r2,gp,-32626
   10cd8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
   10cdc:	d0a02404 	addi	r2,gp,-32624
   10ce0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
   10ce4:	d0a02484 	addi	r2,gp,-32622
   10ce8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
   10cec:	d0a02504 	addi	r2,gp,-32620
   10cf0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
   10cf4:	d0a02584 	addi	r2,gp,-32618
   10cf8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
   10cfc:	d0a02604 	addi	r2,gp,-32616
   10d00:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
   10d04:	d0a02684 	addi	r2,gp,-32614
   10d08:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
   10d0c:	d0a02704 	addi	r2,gp,-32612
   10d10:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
   10d14:	d0a02c04 	addi	r2,gp,-32592
   10d18:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
   10d1c:	e037883a 	mov	sp,fp
   10d20:	df000017 	ldw	fp,0(sp)
   10d24:	dec00104 	addi	sp,sp,4
   10d28:	f800283a 	ret

00010d2c <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
   10d2c:	defff204 	addi	sp,sp,-56
   10d30:	df000d15 	stw	fp,52(sp)
   10d34:	df000d04 	addi	fp,sp,52
   10d38:	e13ffc15 	stw	r4,-16(fp)
   10d3c:	2807883a 	mov	r3,r5
   10d40:	3005883a 	mov	r2,r6
   10d44:	e1ffff15 	stw	r7,-4(fp)
   10d48:	e0fffd0d 	sth	r3,-12(fp)
   10d4c:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   10d50:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   10d54:	e0bfff17 	ldw	r2,-4(fp)
   10d58:	1000021e 	bne	r2,zero,10d64 <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
   10d5c:	0005883a 	mov	r2,zero
   10d60:	0000b006 	br	11024 <OSFlagAccept+0x2f8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   10d64:	e0bffc17 	ldw	r2,-16(fp)
   10d68:	1000051e 	bne	r2,zero,10d80 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   10d6c:	e0bfff17 	ldw	r2,-4(fp)
   10d70:	00c01b84 	movi	r3,110
   10d74:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   10d78:	0005883a 	mov	r2,zero
   10d7c:	0000a906 	br	11024 <OSFlagAccept+0x2f8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   10d80:	e0bffc17 	ldw	r2,-16(fp)
   10d84:	10800003 	ldbu	r2,0(r2)
   10d88:	10803fcc 	andi	r2,r2,255
   10d8c:	10800160 	cmpeqi	r2,r2,5
   10d90:	1000051e 	bne	r2,zero,10da8 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
   10d94:	e0bfff17 	ldw	r2,-4(fp)
   10d98:	00c00044 	movi	r3,1
   10d9c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   10da0:	0005883a 	mov	r2,zero
   10da4:	00009f06 	br	11024 <OSFlagAccept+0x2f8>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   10da8:	e0fffe03 	ldbu	r3,-8(fp)
   10dac:	00bfe004 	movi	r2,-128
   10db0:	1884703a 	and	r2,r3,r2
   10db4:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
   10db8:	e0bff503 	ldbu	r2,-44(fp)
   10dbc:	10000626 	beq	r2,zero,10dd8 <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
   10dc0:	e0bffe03 	ldbu	r2,-8(fp)
   10dc4:	10801fcc 	andi	r2,r2,127
   10dc8:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
   10dcc:	00800044 	movi	r2,1
   10dd0:	e0bff385 	stb	r2,-50(fp)
   10dd4:	00000106 	br	10ddc <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
   10dd8:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
   10ddc:	e0bfff17 	ldw	r2,-4(fp)
   10de0:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10de4:	0005303a 	rdctl	r2,status
   10de8:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10dec:	e0fff617 	ldw	r3,-40(fp)
   10df0:	00bfff84 	movi	r2,-2
   10df4:	1884703a 	and	r2,r3,r2
   10df8:	1001703a 	wrctl	status,r2
  
  return context;
   10dfc:	e0bff617 	ldw	r2,-40(fp)
    OS_ENTER_CRITICAL();
   10e00:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
   10e04:	e0bffe03 	ldbu	r2,-8(fp)
   10e08:	10c00060 	cmpeqi	r3,r2,1
   10e0c:	18005f1e 	bne	r3,zero,10f8c <OSFlagAccept+0x260>
   10e10:	10c00088 	cmpgei	r3,r2,2
   10e14:	1800021e 	bne	r3,zero,10e20 <OSFlagAccept+0xf4>
   10e18:	10003f26 	beq	r2,zero,10f18 <OSFlagAccept+0x1ec>
   10e1c:	00007706 	br	10ffc <OSFlagAccept+0x2d0>
   10e20:	10c000a0 	cmpeqi	r3,r2,2
   10e24:	1800031e 	bne	r3,zero,10e34 <OSFlagAccept+0x108>
   10e28:	108000e0 	cmpeqi	r2,r2,3
   10e2c:	10001e1e 	bne	r2,zero,10ea8 <OSFlagAccept+0x17c>
   10e30:	00007206 	br	10ffc <OSFlagAccept+0x2d0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   10e34:	e0bffc17 	ldw	r2,-16(fp)
   10e38:	10c0020b 	ldhu	r3,8(r2)
   10e3c:	e0bffd0b 	ldhu	r2,-12(fp)
   10e40:	1884703a 	and	r2,r3,r2
   10e44:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   10e48:	e0fff30b 	ldhu	r3,-52(fp)
   10e4c:	e0bffd0b 	ldhu	r2,-12(fp)
   10e50:	18800d1e 	bne	r3,r2,10e88 <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   10e54:	e0bff383 	ldbu	r2,-50(fp)
   10e58:	10800058 	cmpnei	r2,r2,1
   10e5c:	10000d1e 	bne	r2,zero,10e94 <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   10e60:	e0bffc17 	ldw	r2,-16(fp)
   10e64:	1080020b 	ldhu	r2,8(r2)
   10e68:	1007883a 	mov	r3,r2
   10e6c:	e0bff30b 	ldhu	r2,-52(fp)
   10e70:	0084303a 	nor	r2,zero,r2
   10e74:	1884703a 	and	r2,r3,r2
   10e78:	1007883a 	mov	r3,r2
   10e7c:	e0bffc17 	ldw	r2,-16(fp)
   10e80:	10c0020d 	sth	r3,8(r2)
   10e84:	00000306 	br	10e94 <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   10e88:	e0bfff17 	ldw	r2,-4(fp)
   10e8c:	00c01c04 	movi	r3,112
   10e90:	10c00005 	stb	r3,0(r2)
   10e94:	e0bff417 	ldw	r2,-48(fp)
   10e98:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10e9c:	e0bff717 	ldw	r2,-36(fp)
   10ea0:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   10ea4:	00005e06 	br	11020 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   10ea8:	e0bffc17 	ldw	r2,-16(fp)
   10eac:	10c0020b 	ldhu	r3,8(r2)
   10eb0:	e0bffd0b 	ldhu	r2,-12(fp)
   10eb4:	1884703a 	and	r2,r3,r2
   10eb8:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   10ebc:	e0bff30b 	ldhu	r2,-52(fp)
   10ec0:	10000d26 	beq	r2,zero,10ef8 <OSFlagAccept+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   10ec4:	e0bff383 	ldbu	r2,-50(fp)
   10ec8:	10800058 	cmpnei	r2,r2,1
   10ecc:	10000d1e 	bne	r2,zero,10f04 <OSFlagAccept+0x1d8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   10ed0:	e0bffc17 	ldw	r2,-16(fp)
   10ed4:	1080020b 	ldhu	r2,8(r2)
   10ed8:	1007883a 	mov	r3,r2
   10edc:	e0bff30b 	ldhu	r2,-52(fp)
   10ee0:	0084303a 	nor	r2,zero,r2
   10ee4:	1884703a 	and	r2,r3,r2
   10ee8:	1007883a 	mov	r3,r2
   10eec:	e0bffc17 	ldw	r2,-16(fp)
   10ef0:	10c0020d 	sth	r3,8(r2)
   10ef4:	00000306 	br	10f04 <OSFlagAccept+0x1d8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   10ef8:	e0bfff17 	ldw	r2,-4(fp)
   10efc:	00c01c04 	movi	r3,112
   10f00:	10c00005 	stb	r3,0(r2)
   10f04:	e0bff417 	ldw	r2,-48(fp)
   10f08:	e0bff815 	stw	r2,-32(fp)
   10f0c:	e0bff817 	ldw	r2,-32(fp)
   10f10:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   10f14:	00004206 	br	11020 <OSFlagAccept+0x2f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   10f18:	e0bffc17 	ldw	r2,-16(fp)
   10f1c:	1080020b 	ldhu	r2,8(r2)
   10f20:	0084303a 	nor	r2,zero,r2
   10f24:	1007883a 	mov	r3,r2
   10f28:	e0bffd0b 	ldhu	r2,-12(fp)
   10f2c:	1884703a 	and	r2,r3,r2
   10f30:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   10f34:	e0fff30b 	ldhu	r3,-52(fp)
   10f38:	e0bffd0b 	ldhu	r2,-12(fp)
   10f3c:	18800b1e 	bne	r3,r2,10f6c <OSFlagAccept+0x240>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   10f40:	e0bff383 	ldbu	r2,-50(fp)
   10f44:	10800058 	cmpnei	r2,r2,1
   10f48:	10000b1e 	bne	r2,zero,10f78 <OSFlagAccept+0x24c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   10f4c:	e0bffc17 	ldw	r2,-16(fp)
   10f50:	10c0020b 	ldhu	r3,8(r2)
   10f54:	e0bff30b 	ldhu	r2,-52(fp)
   10f58:	1884b03a 	or	r2,r3,r2
   10f5c:	1007883a 	mov	r3,r2
   10f60:	e0bffc17 	ldw	r2,-16(fp)
   10f64:	10c0020d 	sth	r3,8(r2)
   10f68:	00000306 	br	10f78 <OSFlagAccept+0x24c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   10f6c:	e0bfff17 	ldw	r2,-4(fp)
   10f70:	00c01c04 	movi	r3,112
   10f74:	10c00005 	stb	r3,0(r2)
   10f78:	e0bff417 	ldw	r2,-48(fp)
   10f7c:	e0bff915 	stw	r2,-28(fp)
   10f80:	e0bff917 	ldw	r2,-28(fp)
   10f84:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   10f88:	00002506 	br	11020 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   10f8c:	e0bffc17 	ldw	r2,-16(fp)
   10f90:	1080020b 	ldhu	r2,8(r2)
   10f94:	0084303a 	nor	r2,zero,r2
   10f98:	1007883a 	mov	r3,r2
   10f9c:	e0bffd0b 	ldhu	r2,-12(fp)
   10fa0:	1884703a 	and	r2,r3,r2
   10fa4:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   10fa8:	e0bff30b 	ldhu	r2,-52(fp)
   10fac:	10000b26 	beq	r2,zero,10fdc <OSFlagAccept+0x2b0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   10fb0:	e0bff383 	ldbu	r2,-50(fp)
   10fb4:	10800058 	cmpnei	r2,r2,1
   10fb8:	10000b1e 	bne	r2,zero,10fe8 <OSFlagAccept+0x2bc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   10fbc:	e0bffc17 	ldw	r2,-16(fp)
   10fc0:	10c0020b 	ldhu	r3,8(r2)
   10fc4:	e0bff30b 	ldhu	r2,-52(fp)
   10fc8:	1884b03a 	or	r2,r3,r2
   10fcc:	1007883a 	mov	r3,r2
   10fd0:	e0bffc17 	ldw	r2,-16(fp)
   10fd4:	10c0020d 	sth	r3,8(r2)
   10fd8:	00000306 	br	10fe8 <OSFlagAccept+0x2bc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   10fdc:	e0bfff17 	ldw	r2,-4(fp)
   10fe0:	00c01c04 	movi	r3,112
   10fe4:	10c00005 	stb	r3,0(r2)
   10fe8:	e0bff417 	ldw	r2,-48(fp)
   10fec:	e0bffa15 	stw	r2,-24(fp)
   10ff0:	e0bffa17 	ldw	r2,-24(fp)
   10ff4:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   10ff8:	00000906 	br	11020 <OSFlagAccept+0x2f4>
   10ffc:	e0bff417 	ldw	r2,-48(fp)
   11000:	e0bffb15 	stw	r2,-20(fp)
   11004:	e0bffb17 	ldw	r2,-20(fp)
   11008:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   1100c:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
   11010:	e0bfff17 	ldw	r2,-4(fp)
   11014:	00c01bc4 	movi	r3,111
   11018:	10c00005 	stb	r3,0(r2)
             break;
   1101c:	0001883a 	nop
    }
    return (flags_rdy);
   11020:	e0bff30b 	ldhu	r2,-52(fp)
}
   11024:	e037883a 	mov	sp,fp
   11028:	df000017 	ldw	fp,0(sp)
   1102c:	dec00104 	addi	sp,sp,4
   11030:	f800283a 	ret

00011034 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
   11034:	defff804 	addi	sp,sp,-32
   11038:	df000715 	stw	fp,28(sp)
   1103c:	df000704 	addi	fp,sp,28
   11040:	2005883a 	mov	r2,r4
   11044:	e17fff15 	stw	r5,-4(fp)
   11048:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
   1104c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
   11050:	e0bfff17 	ldw	r2,-4(fp)
   11054:	1000021e 	bne	r2,zero,11060 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
   11058:	0005883a 	mov	r2,zero
   1105c:	00003b06 	br	1114c <OSFlagCreate+0x118>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
   11060:	008000b4 	movhi	r2,2
   11064:	10b41204 	addi	r2,r2,-12216
   11068:	10800003 	ldbu	r2,0(r2)
   1106c:	10803fcc 	andi	r2,r2,255
   11070:	10000526 	beq	r2,zero,11088 <OSFlagCreate+0x54>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
   11074:	e0bfff17 	ldw	r2,-4(fp)
   11078:	00c00404 	movi	r3,16
   1107c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
   11080:	0005883a 	mov	r2,zero
   11084:	00003106 	br	1114c <OSFlagCreate+0x118>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11088:	0005303a 	rdctl	r2,status
   1108c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11090:	e0fffb17 	ldw	r3,-20(fp)
   11094:	00bfff84 	movi	r2,-2
   11098:	1884703a 	and	r2,r3,r2
   1109c:	1001703a 	wrctl	status,r2
  
  return context;
   110a0:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   110a4:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
   110a8:	008000b4 	movhi	r2,2
   110ac:	10b41504 	addi	r2,r2,-12204
   110b0:	10800017 	ldw	r2,0(r2)
   110b4:	e0bffa15 	stw	r2,-24(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
   110b8:	e0bffa17 	ldw	r2,-24(fp)
   110bc:	10001b26 	beq	r2,zero,1112c <OSFlagCreate+0xf8>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
   110c0:	008000b4 	movhi	r2,2
   110c4:	10b41504 	addi	r2,r2,-12204
   110c8:	10800017 	ldw	r2,0(r2)
   110cc:	10c00117 	ldw	r3,4(r2)
   110d0:	008000b4 	movhi	r2,2
   110d4:	10b41504 	addi	r2,r2,-12204
   110d8:	10c00015 	stw	r3,0(r2)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
   110dc:	e0bffa17 	ldw	r2,-24(fp)
   110e0:	00c00144 	movi	r3,5
   110e4:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
   110e8:	e0bffa17 	ldw	r2,-24(fp)
   110ec:	e0fffe0b 	ldhu	r3,-8(fp)
   110f0:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
   110f4:	e0bffa17 	ldw	r2,-24(fp)
   110f8:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
   110fc:	e0bffa17 	ldw	r2,-24(fp)
   11100:	00c00fc4 	movi	r3,63
   11104:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   11108:	e0bffa17 	ldw	r2,-24(fp)
   1110c:	100002c5 	stb	zero,11(r2)
   11110:	e0bff917 	ldw	r2,-28(fp)
   11114:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11118:	e0bffc17 	ldw	r2,-16(fp)
   1111c:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
   11120:	e0bfff17 	ldw	r2,-4(fp)
   11124:	10000005 	stb	zero,0(r2)
   11128:	00000706 	br	11148 <OSFlagCreate+0x114>
   1112c:	e0bff917 	ldw	r2,-28(fp)
   11130:	e0bffd15 	stw	r2,-12(fp)
   11134:	e0bffd17 	ldw	r2,-12(fp)
   11138:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
   1113c:	e0bfff17 	ldw	r2,-4(fp)
   11140:	00c01c84 	movi	r3,114
   11144:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
   11148:	e0bffa17 	ldw	r2,-24(fp)
}
   1114c:	e037883a 	mov	sp,fp
   11150:	df000017 	ldw	fp,0(sp)
   11154:	dec00104 	addi	sp,sp,4
   11158:	f800283a 	ret

0001115c <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
   1115c:	defff204 	addi	sp,sp,-56
   11160:	dfc00d15 	stw	ra,52(sp)
   11164:	df000c15 	stw	fp,48(sp)
   11168:	df000c04 	addi	fp,sp,48
   1116c:	e13ffd15 	stw	r4,-12(fp)
   11170:	2805883a 	mov	r2,r5
   11174:	e1bfff15 	stw	r6,-4(fp)
   11178:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   1117c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   11180:	e0bfff17 	ldw	r2,-4(fp)
   11184:	1000021e 	bne	r2,zero,11190 <OSFlagDel+0x34>
        return (pgrp);
   11188:	e0bffd17 	ldw	r2,-12(fp)
   1118c:	00008a06 	br	113b8 <OSFlagDel+0x25c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   11190:	e0bffd17 	ldw	r2,-12(fp)
   11194:	1000051e 	bne	r2,zero,111ac <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   11198:	e0bfff17 	ldw	r2,-4(fp)
   1119c:	00c01b84 	movi	r3,110
   111a0:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   111a4:	e0bffd17 	ldw	r2,-12(fp)
   111a8:	00008306 	br	113b8 <OSFlagDel+0x25c>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   111ac:	008000b4 	movhi	r2,2
   111b0:	10b41204 	addi	r2,r2,-12216
   111b4:	10800003 	ldbu	r2,0(r2)
   111b8:	10803fcc 	andi	r2,r2,255
   111bc:	10000526 	beq	r2,zero,111d4 <OSFlagDel+0x78>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   111c0:	e0bfff17 	ldw	r2,-4(fp)
   111c4:	00c003c4 	movi	r3,15
   111c8:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   111cc:	e0bffd17 	ldw	r2,-12(fp)
   111d0:	00007906 	br	113b8 <OSFlagDel+0x25c>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
   111d4:	e0bffd17 	ldw	r2,-12(fp)
   111d8:	10800003 	ldbu	r2,0(r2)
   111dc:	10803fcc 	andi	r2,r2,255
   111e0:	10800160 	cmpeqi	r2,r2,5
   111e4:	1000051e 	bne	r2,zero,111fc <OSFlagDel+0xa0>
        *perr = OS_ERR_EVENT_TYPE;
   111e8:	e0bfff17 	ldw	r2,-4(fp)
   111ec:	00c00044 	movi	r3,1
   111f0:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   111f4:	e0bffd17 	ldw	r2,-12(fp)
   111f8:	00006f06 	br	113b8 <OSFlagDel+0x25c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   111fc:	0005303a 	rdctl	r2,status
   11200:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11204:	e0fff817 	ldw	r3,-32(fp)
   11208:	00bfff84 	movi	r2,-2
   1120c:	1884703a 	and	r2,r3,r2
   11210:	1001703a 	wrctl	status,r2
  
  return context;
   11214:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   11218:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
   1121c:	e0bffd17 	ldw	r2,-12(fp)
   11220:	10800117 	ldw	r2,4(r2)
   11224:	10000326 	beq	r2,zero,11234 <OSFlagDel+0xd8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   11228:	00800044 	movi	r2,1
   1122c:	e0bff405 	stb	r2,-48(fp)
   11230:	00000106 	br	11238 <OSFlagDel+0xdc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   11234:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   11238:	e0bffe03 	ldbu	r2,-8(fp)
   1123c:	10000326 	beq	r2,zero,1124c <OSFlagDel+0xf0>
   11240:	10800060 	cmpeqi	r2,r2,1
   11244:	1000271e 	bne	r2,zero,112e4 <OSFlagDel+0x188>
   11248:	00005006 	br	1138c <OSFlagDel+0x230>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
   1124c:	e0bff403 	ldbu	r2,-48(fp)
   11250:	10001a1e 	bne	r2,zero,112bc <OSFlagDel+0x160>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
   11254:	e0bffd17 	ldw	r2,-12(fp)
   11258:	00c00fc4 	movi	r3,63
   1125c:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   11260:	e0bffd17 	ldw	r2,-12(fp)
   11264:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   11268:	e0bffd17 	ldw	r2,-12(fp)
   1126c:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
   11270:	008000b4 	movhi	r2,2
   11274:	10b41504 	addi	r2,r2,-12204
   11278:	10c00017 	ldw	r3,0(r2)
   1127c:	e0bffd17 	ldw	r2,-12(fp)
   11280:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
   11284:	e0bffd17 	ldw	r2,-12(fp)
   11288:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
   1128c:	008000b4 	movhi	r2,2
   11290:	10b41504 	addi	r2,r2,-12204
   11294:	e0fffd17 	ldw	r3,-12(fp)
   11298:	10c00015 	stw	r3,0(r2)
   1129c:	e0bff717 	ldw	r2,-36(fp)
   112a0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   112a4:	e0bff917 	ldw	r2,-28(fp)
   112a8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
   112ac:	e0bfff17 	ldw	r2,-4(fp)
   112b0:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
   112b4:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
   112b8:	00003e06 	br	113b4 <OSFlagDel+0x258>
   112bc:	e0bff717 	ldw	r2,-36(fp)
   112c0:	e0bffa15 	stw	r2,-24(fp)
   112c4:	e0bffa17 	ldw	r2,-24(fp)
   112c8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
   112cc:	e0bfff17 	ldw	r2,-4(fp)
   112d0:	00c01244 	movi	r3,73
   112d4:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
   112d8:	e0bffd17 	ldw	r2,-12(fp)
   112dc:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   112e0:	00003406 	br	113b4 <OSFlagDel+0x258>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   112e4:	e0bffd17 	ldw	r2,-12(fp)
   112e8:	10800117 	ldw	r2,4(r2)
   112ec:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   112f0:	00000606 	br	1130c <OSFlagDel+0x1b0>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
   112f4:	e13ff517 	ldw	r4,-44(fp)
   112f8:	000b883a 	mov	r5,zero
   112fc:	00123980 	call	12398 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   11300:	e0bff517 	ldw	r2,-44(fp)
   11304:	10800017 	ldw	r2,0(r2)
   11308:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   1130c:	e0bff517 	ldw	r2,-44(fp)
   11310:	103ff81e 	bne	r2,zero,112f4 <OSFlagDel+0x198>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
   11314:	e0bffd17 	ldw	r2,-12(fp)
   11318:	00c00fc4 	movi	r3,63
   1131c:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   11320:	e0bffd17 	ldw	r2,-12(fp)
   11324:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   11328:	e0bffd17 	ldw	r2,-12(fp)
   1132c:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
   11330:	008000b4 	movhi	r2,2
   11334:	10b41504 	addi	r2,r2,-12204
   11338:	10c00017 	ldw	r3,0(r2)
   1133c:	e0bffd17 	ldw	r2,-12(fp)
   11340:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
   11344:	e0bffd17 	ldw	r2,-12(fp)
   11348:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
   1134c:	008000b4 	movhi	r2,2
   11350:	10b41504 	addi	r2,r2,-12204
   11354:	e0fffd17 	ldw	r3,-12(fp)
   11358:	10c00015 	stw	r3,0(r2)
   1135c:	e0bff717 	ldw	r2,-36(fp)
   11360:	e0bffb15 	stw	r2,-20(fp)
   11364:	e0bffb17 	ldw	r2,-20(fp)
   11368:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   1136c:	e0bff403 	ldbu	r2,-48(fp)
   11370:	10800058 	cmpnei	r2,r2,1
   11374:	1000011e 	bne	r2,zero,1137c <OSFlagDel+0x220>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   11378:	00104d80 	call	104d8 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
   1137c:	e0bfff17 	ldw	r2,-4(fp)
   11380:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
   11384:	e03ff615 	stw	zero,-40(fp)
             break;
   11388:	00000a06 	br	113b4 <OSFlagDel+0x258>
   1138c:	e0bff717 	ldw	r2,-36(fp)
   11390:	e0bffc15 	stw	r2,-16(fp)
   11394:	e0bffc17 	ldw	r2,-16(fp)
   11398:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
   1139c:	e0bfff17 	ldw	r2,-4(fp)
   113a0:	00c001c4 	movi	r3,7
   113a4:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
   113a8:	e0bffd17 	ldw	r2,-12(fp)
   113ac:	e0bff615 	stw	r2,-40(fp)
             break;
   113b0:	0001883a 	nop
    }
    return (pgrp_return);
   113b4:	e0bff617 	ldw	r2,-40(fp)
}
   113b8:	e037883a 	mov	sp,fp
   113bc:	dfc00117 	ldw	ra,4(sp)
   113c0:	df000017 	ldw	fp,0(sp)
   113c4:	dec00204 	addi	sp,sp,8
   113c8:	f800283a 	ret

000113cc <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   113cc:	defff604 	addi	sp,sp,-40
   113d0:	dfc00915 	stw	ra,36(sp)
   113d4:	df000815 	stw	fp,32(sp)
   113d8:	df000804 	addi	fp,sp,32
   113dc:	e13ffd15 	stw	r4,-12(fp)
   113e0:	e17ffe15 	stw	r5,-8(fp)
   113e4:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   113e8:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   113ec:	e0bfff17 	ldw	r2,-4(fp)
   113f0:	1000021e 	bne	r2,zero,113fc <OSFlagNameGet+0x30>
        return (0);
   113f4:	0005883a 	mov	r2,zero
   113f8:	00003b06 	br	114e8 <OSFlagNameGet+0x11c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   113fc:	e0bffd17 	ldw	r2,-12(fp)
   11400:	1000051e 	bne	r2,zero,11418 <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   11404:	e0bfff17 	ldw	r2,-4(fp)
   11408:	00c01b84 	movi	r3,110
   1140c:	10c00005 	stb	r3,0(r2)
        return (0);
   11410:	0005883a 	mov	r2,zero
   11414:	00003406 	br	114e8 <OSFlagNameGet+0x11c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   11418:	e0bffe17 	ldw	r2,-8(fp)
   1141c:	1000051e 	bne	r2,zero,11434 <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   11420:	e0bfff17 	ldw	r2,-4(fp)
   11424:	00c00304 	movi	r3,12
   11428:	10c00005 	stb	r3,0(r2)
        return (0);
   1142c:	0005883a 	mov	r2,zero
   11430:	00002d06 	br	114e8 <OSFlagNameGet+0x11c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   11434:	008000b4 	movhi	r2,2
   11438:	10b41204 	addi	r2,r2,-12216
   1143c:	10800003 	ldbu	r2,0(r2)
   11440:	10803fcc 	andi	r2,r2,255
   11444:	10000526 	beq	r2,zero,1145c <OSFlagNameGet+0x90>
        *perr = OS_ERR_NAME_GET_ISR;
   11448:	e0bfff17 	ldw	r2,-4(fp)
   1144c:	00c00444 	movi	r3,17
   11450:	10c00005 	stb	r3,0(r2)
        return (0);
   11454:	0005883a 	mov	r2,zero
   11458:	00002306 	br	114e8 <OSFlagNameGet+0x11c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1145c:	0005303a 	rdctl	r2,status
   11460:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11464:	e0fffa17 	ldw	r3,-24(fp)
   11468:	00bfff84 	movi	r2,-2
   1146c:	1884703a 	and	r2,r3,r2
   11470:	1001703a 	wrctl	status,r2
  
  return context;
   11474:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   11478:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   1147c:	e0bffd17 	ldw	r2,-12(fp)
   11480:	10800003 	ldbu	r2,0(r2)
   11484:	10803fcc 	andi	r2,r2,255
   11488:	10800160 	cmpeqi	r2,r2,5
   1148c:	1000091e 	bne	r2,zero,114b4 <OSFlagNameGet+0xe8>
   11490:	e0bff817 	ldw	r2,-32(fp)
   11494:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11498:	e0bffb17 	ldw	r2,-20(fp)
   1149c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   114a0:	e0bfff17 	ldw	r2,-4(fp)
   114a4:	00c00044 	movi	r3,1
   114a8:	10c00005 	stb	r3,0(r2)
        return (0);
   114ac:	0005883a 	mov	r2,zero
   114b0:	00000d06 	br	114e8 <OSFlagNameGet+0x11c>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
   114b4:	e0bffd17 	ldw	r2,-12(fp)
   114b8:	10800284 	addi	r2,r2,10
   114bc:	e13ffe17 	ldw	r4,-8(fp)
   114c0:	100b883a 	mov	r5,r2
   114c4:	00106140 	call	10614 <OS_StrCopy>
   114c8:	e0bff905 	stb	r2,-28(fp)
   114cc:	e0bff817 	ldw	r2,-32(fp)
   114d0:	e0bffc15 	stw	r2,-16(fp)
   114d4:	e0bffc17 	ldw	r2,-16(fp)
   114d8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   114dc:	e0bfff17 	ldw	r2,-4(fp)
   114e0:	10000005 	stb	zero,0(r2)
    return (len);
   114e4:	e0bff903 	ldbu	r2,-28(fp)
}
   114e8:	e037883a 	mov	sp,fp
   114ec:	dfc00117 	ldw	ra,4(sp)
   114f0:	df000017 	ldw	fp,0(sp)
   114f4:	dec00204 	addi	sp,sp,8
   114f8:	f800283a 	ret

000114fc <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   114fc:	defff504 	addi	sp,sp,-44
   11500:	dfc00a15 	stw	ra,40(sp)
   11504:	df000915 	stw	fp,36(sp)
   11508:	df000904 	addi	fp,sp,36
   1150c:	e13ffd15 	stw	r4,-12(fp)
   11510:	e17ffe15 	stw	r5,-8(fp)
   11514:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   11518:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   1151c:	e0bfff17 	ldw	r2,-4(fp)
   11520:	1000011e 	bne	r2,zero,11528 <OSFlagNameSet+0x2c>
        return;
   11524:	00004406 	br	11638 <OSFlagNameSet+0x13c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   11528:	e0bffd17 	ldw	r2,-12(fp)
   1152c:	1000041e 	bne	r2,zero,11540 <OSFlagNameSet+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   11530:	e0bfff17 	ldw	r2,-4(fp)
   11534:	00c01b84 	movi	r3,110
   11538:	10c00005 	stb	r3,0(r2)
        return;
   1153c:	00003e06 	br	11638 <OSFlagNameSet+0x13c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   11540:	e0bffe17 	ldw	r2,-8(fp)
   11544:	1000041e 	bne	r2,zero,11558 <OSFlagNameSet+0x5c>
        *perr = OS_ERR_PNAME_NULL;
   11548:	e0bfff17 	ldw	r2,-4(fp)
   1154c:	00c00304 	movi	r3,12
   11550:	10c00005 	stb	r3,0(r2)
        return;
   11554:	00003806 	br	11638 <OSFlagNameSet+0x13c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   11558:	008000b4 	movhi	r2,2
   1155c:	10b41204 	addi	r2,r2,-12216
   11560:	10800003 	ldbu	r2,0(r2)
   11564:	10803fcc 	andi	r2,r2,255
   11568:	10000426 	beq	r2,zero,1157c <OSFlagNameSet+0x80>
        *perr = OS_ERR_NAME_SET_ISR;
   1156c:	e0bfff17 	ldw	r2,-4(fp)
   11570:	00c00484 	movi	r3,18
   11574:	10c00005 	stb	r3,0(r2)
        return;
   11578:	00002f06 	br	11638 <OSFlagNameSet+0x13c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1157c:	0005303a 	rdctl	r2,status
   11580:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11584:	e0fff917 	ldw	r3,-28(fp)
   11588:	00bfff84 	movi	r2,-2
   1158c:	1884703a 	and	r2,r3,r2
   11590:	1001703a 	wrctl	status,r2
  
  return context;
   11594:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   11598:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   1159c:	e0bffd17 	ldw	r2,-12(fp)
   115a0:	10800003 	ldbu	r2,0(r2)
   115a4:	10803fcc 	andi	r2,r2,255
   115a8:	10800160 	cmpeqi	r2,r2,5
   115ac:	1000081e 	bne	r2,zero,115d0 <OSFlagNameSet+0xd4>
   115b0:	e0bff717 	ldw	r2,-36(fp)
   115b4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   115b8:	e0bffa17 	ldw	r2,-24(fp)
   115bc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   115c0:	e0bfff17 	ldw	r2,-4(fp)
   115c4:	00c00044 	movi	r3,1
   115c8:	10c00005 	stb	r3,0(r2)
        return;
   115cc:	00001a06 	br	11638 <OSFlagNameSet+0x13c>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   115d0:	e13ffe17 	ldw	r4,-8(fp)
   115d4:	00106880 	call	10688 <OS_StrLen>
   115d8:	e0bff805 	stb	r2,-32(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
   115dc:	e0bff803 	ldbu	r2,-32(fp)
   115e0:	10800830 	cmpltui	r2,r2,32
   115e4:	1000081e 	bne	r2,zero,11608 <OSFlagNameSet+0x10c>
   115e8:	e0bff717 	ldw	r2,-36(fp)
   115ec:	e0bffb15 	stw	r2,-20(fp)
   115f0:	e0bffb17 	ldw	r2,-20(fp)
   115f4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
   115f8:	e0bfff17 	ldw	r2,-4(fp)
   115fc:	00c01cc4 	movi	r3,115
   11600:	10c00005 	stb	r3,0(r2)
        return;
   11604:	00000c06 	br	11638 <OSFlagNameSet+0x13c>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
   11608:	e0bffd17 	ldw	r2,-12(fp)
   1160c:	10800284 	addi	r2,r2,10
   11610:	1009883a 	mov	r4,r2
   11614:	e17ffe17 	ldw	r5,-8(fp)
   11618:	00106140 	call	10614 <OS_StrCopy>
   1161c:	e0bff717 	ldw	r2,-36(fp)
   11620:	e0bffc15 	stw	r2,-16(fp)
   11624:	e0bffc17 	ldw	r2,-16(fp)
   11628:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1162c:	e0bfff17 	ldw	r2,-4(fp)
   11630:	10000005 	stb	zero,0(r2)
    return;
   11634:	0001883a 	nop
}
   11638:	e037883a 	mov	sp,fp
   1163c:	dfc00117 	ldw	ra,4(sp)
   11640:	df000017 	ldw	fp,0(sp)
   11644:	dec00204 	addi	sp,sp,8
   11648:	f800283a 	ret

0001164c <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
   1164c:	deffe204 	addi	sp,sp,-120
   11650:	dfc01d15 	stw	ra,116(sp)
   11654:	df001c15 	stw	fp,112(sp)
   11658:	df001c04 	addi	fp,sp,112
   1165c:	e13ffc15 	stw	r4,-16(fp)
   11660:	2809883a 	mov	r4,r5
   11664:	3007883a 	mov	r3,r6
   11668:	3805883a 	mov	r2,r7
   1166c:	e13ffd0d 	sth	r4,-12(fp)
   11670:	e0fffe05 	stb	r3,-8(fp)
   11674:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   11678:	e03fe615 	stw	zero,-104(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   1167c:	e0800217 	ldw	r2,8(fp)
   11680:	1000021e 	bne	r2,zero,1168c <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
   11684:	0005883a 	mov	r2,zero
   11688:	00016706 	br	11c28 <OSFlagPend+0x5dc>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   1168c:	e0bffc17 	ldw	r2,-16(fp)
   11690:	1000051e 	bne	r2,zero,116a8 <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   11694:	e0800217 	ldw	r2,8(fp)
   11698:	00c01b84 	movi	r3,110
   1169c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   116a0:	0005883a 	mov	r2,zero
   116a4:	00016006 	br	11c28 <OSFlagPend+0x5dc>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   116a8:	008000b4 	movhi	r2,2
   116ac:	10b41204 	addi	r2,r2,-12216
   116b0:	10800003 	ldbu	r2,0(r2)
   116b4:	10803fcc 	andi	r2,r2,255
   116b8:	10000526 	beq	r2,zero,116d0 <OSFlagPend+0x84>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
   116bc:	e0800217 	ldw	r2,8(fp)
   116c0:	00c00084 	movi	r3,2
   116c4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   116c8:	0005883a 	mov	r2,zero
   116cc:	00015606 	br	11c28 <OSFlagPend+0x5dc>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
   116d0:	008000b4 	movhi	r2,2
   116d4:	10b40404 	addi	r2,r2,-12272
   116d8:	10800003 	ldbu	r2,0(r2)
   116dc:	10803fcc 	andi	r2,r2,255
   116e0:	10000526 	beq	r2,zero,116f8 <OSFlagPend+0xac>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
   116e4:	e0800217 	ldw	r2,8(fp)
   116e8:	00c00344 	movi	r3,13
   116ec:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   116f0:	0005883a 	mov	r2,zero
   116f4:	00014c06 	br	11c28 <OSFlagPend+0x5dc>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   116f8:	e0bffc17 	ldw	r2,-16(fp)
   116fc:	10800003 	ldbu	r2,0(r2)
   11700:	10803fcc 	andi	r2,r2,255
   11704:	10800160 	cmpeqi	r2,r2,5
   11708:	1000051e 	bne	r2,zero,11720 <OSFlagPend+0xd4>
        *perr = OS_ERR_EVENT_TYPE;
   1170c:	e0800217 	ldw	r2,8(fp)
   11710:	00c00044 	movi	r3,1
   11714:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   11718:	0005883a 	mov	r2,zero
   1171c:	00014206 	br	11c28 <OSFlagPend+0x5dc>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   11720:	e0fffe03 	ldbu	r3,-8(fp)
   11724:	00bfe004 	movi	r2,-128
   11728:	1884703a 	and	r2,r3,r2
   1172c:	e0bfe705 	stb	r2,-100(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
   11730:	e0bfe703 	ldbu	r2,-100(fp)
   11734:	10000626 	beq	r2,zero,11750 <OSFlagPend+0x104>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
   11738:	e0bffe03 	ldbu	r2,-8(fp)
   1173c:	10801fcc 	andi	r2,r2,127
   11740:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
   11744:	00800044 	movi	r2,1
   11748:	e0bfe505 	stb	r2,-108(fp)
   1174c:	00000106 	br	11754 <OSFlagPend+0x108>
    } else {
        consume    = OS_FALSE;
   11750:	e03fe505 	stb	zero,-108(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11754:	0005303a 	rdctl	r2,status
   11758:	e0bfe915 	stw	r2,-92(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1175c:	e0ffe917 	ldw	r3,-92(fp)
   11760:	00bfff84 	movi	r2,-2
   11764:	1884703a 	and	r2,r3,r2
   11768:	1001703a 	wrctl	status,r2
  
  return context;
   1176c:	e0bfe917 	ldw	r2,-92(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   11770:	e0bfe615 	stw	r2,-104(fp)
    switch (wait_type) {
   11774:	e0bffe03 	ldbu	r2,-8(fp)
   11778:	10c00060 	cmpeqi	r3,r2,1
   1177c:	1800921e 	bne	r3,zero,119c8 <OSFlagPend+0x37c>
   11780:	10c00088 	cmpgei	r3,r2,2
   11784:	1800021e 	bne	r3,zero,11790 <OSFlagPend+0x144>
   11788:	10006126 	beq	r2,zero,11910 <OSFlagPend+0x2c4>
   1178c:	0000bb06 	br	11a7c <OSFlagPend+0x430>
   11790:	10c000a0 	cmpeqi	r3,r2,2
   11794:	1800031e 	bne	r3,zero,117a4 <OSFlagPend+0x158>
   11798:	108000e0 	cmpeqi	r2,r2,3
   1179c:	10002f1e 	bne	r2,zero,1185c <OSFlagPend+0x210>
   117a0:	0000b606 	br	11a7c <OSFlagPend+0x430>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
   117a4:	e0bffc17 	ldw	r2,-16(fp)
   117a8:	10c0020b 	ldhu	r3,8(r2)
   117ac:	e0bffd0b 	ldhu	r2,-12(fp)
   117b0:	1884703a 	and	r2,r3,r2
   117b4:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   117b8:	e0ffe78b 	ldhu	r3,-98(fp)
   117bc:	e0bffd0b 	ldhu	r2,-12(fp)
   117c0:	1880191e 	bne	r3,r2,11828 <OSFlagPend+0x1dc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   117c4:	e0bfe503 	ldbu	r2,-108(fp)
   117c8:	10800058 	cmpnei	r2,r2,1
   117cc:	1000091e 	bne	r2,zero,117f4 <OSFlagPend+0x1a8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   117d0:	e0bffc17 	ldw	r2,-16(fp)
   117d4:	1080020b 	ldhu	r2,8(r2)
   117d8:	1007883a 	mov	r3,r2
   117dc:	e0bfe78b 	ldhu	r2,-98(fp)
   117e0:	0084303a 	nor	r2,zero,r2
   117e4:	1884703a 	and	r2,r3,r2
   117e8:	1007883a 	mov	r3,r2
   117ec:	e0bffc17 	ldw	r2,-16(fp)
   117f0:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   117f4:	008000b4 	movhi	r2,2
   117f8:	10b41304 	addi	r2,r2,-12212
   117fc:	10800017 	ldw	r2,0(r2)
   11800:	e0ffe78b 	ldhu	r3,-98(fp)
   11804:	10c00b0d 	sth	r3,44(r2)
   11808:	e0bfe617 	ldw	r2,-104(fp)
   1180c:	e0bfea15 	stw	r2,-88(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11810:	e0bfea17 	ldw	r2,-88(fp)
   11814:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   11818:	e0800217 	ldw	r2,8(fp)
   1181c:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   11820:	e0bfe78b 	ldhu	r2,-98(fp)
   11824:	00010006 	br	11c28 <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   11828:	e1bffd0b 	ldhu	r6,-12(fp)
   1182c:	e0fffe03 	ldbu	r3,-8(fp)
   11830:	e0bfff0b 	ldhu	r2,-4(fp)
   11834:	e17ff704 	addi	r5,fp,-36
   11838:	d8800015 	stw	r2,0(sp)
   1183c:	e13ffc17 	ldw	r4,-16(fp)
   11840:	180f883a 	mov	r7,r3
   11844:	00120f00 	call	120f0 <OS_FlagBlock>
   11848:	e0bfe617 	ldw	r2,-104(fp)
   1184c:	e0bfeb15 	stw	r2,-84(fp)
   11850:	e0bfeb17 	ldw	r2,-84(fp)
   11854:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   11858:	00009206 	br	11aa4 <OSFlagPend+0x458>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
   1185c:	e0bffc17 	ldw	r2,-16(fp)
   11860:	10c0020b 	ldhu	r3,8(r2)
   11864:	e0bffd0b 	ldhu	r2,-12(fp)
   11868:	1884703a 	and	r2,r3,r2
   1186c:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   11870:	e0bfe78b 	ldhu	r2,-98(fp)
   11874:	10001926 	beq	r2,zero,118dc <OSFlagPend+0x290>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   11878:	e0bfe503 	ldbu	r2,-108(fp)
   1187c:	10800058 	cmpnei	r2,r2,1
   11880:	1000091e 	bne	r2,zero,118a8 <OSFlagPend+0x25c>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   11884:	e0bffc17 	ldw	r2,-16(fp)
   11888:	1080020b 	ldhu	r2,8(r2)
   1188c:	1007883a 	mov	r3,r2
   11890:	e0bfe78b 	ldhu	r2,-98(fp)
   11894:	0084303a 	nor	r2,zero,r2
   11898:	1884703a 	and	r2,r3,r2
   1189c:	1007883a 	mov	r3,r2
   118a0:	e0bffc17 	ldw	r2,-16(fp)
   118a4:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   118a8:	008000b4 	movhi	r2,2
   118ac:	10b41304 	addi	r2,r2,-12212
   118b0:	10800017 	ldw	r2,0(r2)
   118b4:	e0ffe78b 	ldhu	r3,-98(fp)
   118b8:	10c00b0d 	sth	r3,44(r2)
   118bc:	e0bfe617 	ldw	r2,-104(fp)
   118c0:	e0bfec15 	stw	r2,-80(fp)
   118c4:	e0bfec17 	ldw	r2,-80(fp)
   118c8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   118cc:	e0800217 	ldw	r2,8(fp)
   118d0:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   118d4:	e0bfe78b 	ldhu	r2,-98(fp)
   118d8:	0000d306 	br	11c28 <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   118dc:	e1bffd0b 	ldhu	r6,-12(fp)
   118e0:	e0fffe03 	ldbu	r3,-8(fp)
   118e4:	e0bfff0b 	ldhu	r2,-4(fp)
   118e8:	e17ff704 	addi	r5,fp,-36
   118ec:	d8800015 	stw	r2,0(sp)
   118f0:	e13ffc17 	ldw	r4,-16(fp)
   118f4:	180f883a 	mov	r7,r3
   118f8:	00120f00 	call	120f0 <OS_FlagBlock>
   118fc:	e0bfe617 	ldw	r2,-104(fp)
   11900:	e0bfed15 	stw	r2,-76(fp)
   11904:	e0bfed17 	ldw	r2,-76(fp)
   11908:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   1190c:	00006506 	br	11aa4 <OSFlagPend+0x458>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   11910:	e0bffc17 	ldw	r2,-16(fp)
   11914:	1080020b 	ldhu	r2,8(r2)
   11918:	0084303a 	nor	r2,zero,r2
   1191c:	1007883a 	mov	r3,r2
   11920:	e0bffd0b 	ldhu	r2,-12(fp)
   11924:	1884703a 	and	r2,r3,r2
   11928:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   1192c:	e0ffe78b 	ldhu	r3,-98(fp)
   11930:	e0bffd0b 	ldhu	r2,-12(fp)
   11934:	1880171e 	bne	r3,r2,11994 <OSFlagPend+0x348>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   11938:	e0bfe503 	ldbu	r2,-108(fp)
   1193c:	10800058 	cmpnei	r2,r2,1
   11940:	1000071e 	bne	r2,zero,11960 <OSFlagPend+0x314>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   11944:	e0bffc17 	ldw	r2,-16(fp)
   11948:	10c0020b 	ldhu	r3,8(r2)
   1194c:	e0bfe78b 	ldhu	r2,-98(fp)
   11950:	1884b03a 	or	r2,r3,r2
   11954:	1007883a 	mov	r3,r2
   11958:	e0bffc17 	ldw	r2,-16(fp)
   1195c:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   11960:	008000b4 	movhi	r2,2
   11964:	10b41304 	addi	r2,r2,-12212
   11968:	10800017 	ldw	r2,0(r2)
   1196c:	e0ffe78b 	ldhu	r3,-98(fp)
   11970:	10c00b0d 	sth	r3,44(r2)
   11974:	e0bfe617 	ldw	r2,-104(fp)
   11978:	e0bfee15 	stw	r2,-72(fp)
   1197c:	e0bfee17 	ldw	r2,-72(fp)
   11980:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   11984:	e0800217 	ldw	r2,8(fp)
   11988:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   1198c:	e0bfe78b 	ldhu	r2,-98(fp)
   11990:	0000a506 	br	11c28 <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   11994:	e1bffd0b 	ldhu	r6,-12(fp)
   11998:	e0fffe03 	ldbu	r3,-8(fp)
   1199c:	e0bfff0b 	ldhu	r2,-4(fp)
   119a0:	e17ff704 	addi	r5,fp,-36
   119a4:	d8800015 	stw	r2,0(sp)
   119a8:	e13ffc17 	ldw	r4,-16(fp)
   119ac:	180f883a 	mov	r7,r3
   119b0:	00120f00 	call	120f0 <OS_FlagBlock>
   119b4:	e0bfe617 	ldw	r2,-104(fp)
   119b8:	e0bfef15 	stw	r2,-68(fp)
   119bc:	e0bfef17 	ldw	r2,-68(fp)
   119c0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   119c4:	00003706 	br	11aa4 <OSFlagPend+0x458>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   119c8:	e0bffc17 	ldw	r2,-16(fp)
   119cc:	1080020b 	ldhu	r2,8(r2)
   119d0:	0084303a 	nor	r2,zero,r2
   119d4:	1007883a 	mov	r3,r2
   119d8:	e0bffd0b 	ldhu	r2,-12(fp)
   119dc:	1884703a 	and	r2,r3,r2
   119e0:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   119e4:	e0bfe78b 	ldhu	r2,-98(fp)
   119e8:	10001726 	beq	r2,zero,11a48 <OSFlagPend+0x3fc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   119ec:	e0bfe503 	ldbu	r2,-108(fp)
   119f0:	10800058 	cmpnei	r2,r2,1
   119f4:	1000071e 	bne	r2,zero,11a14 <OSFlagPend+0x3c8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   119f8:	e0bffc17 	ldw	r2,-16(fp)
   119fc:	10c0020b 	ldhu	r3,8(r2)
   11a00:	e0bfe78b 	ldhu	r2,-98(fp)
   11a04:	1884b03a 	or	r2,r3,r2
   11a08:	1007883a 	mov	r3,r2
   11a0c:	e0bffc17 	ldw	r2,-16(fp)
   11a10:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   11a14:	008000b4 	movhi	r2,2
   11a18:	10b41304 	addi	r2,r2,-12212
   11a1c:	10800017 	ldw	r2,0(r2)
   11a20:	e0ffe78b 	ldhu	r3,-98(fp)
   11a24:	10c00b0d 	sth	r3,44(r2)
   11a28:	e0bfe617 	ldw	r2,-104(fp)
   11a2c:	e0bff015 	stw	r2,-64(fp)
   11a30:	e0bff017 	ldw	r2,-64(fp)
   11a34:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   11a38:	e0800217 	ldw	r2,8(fp)
   11a3c:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   11a40:	e0bfe78b 	ldhu	r2,-98(fp)
   11a44:	00007806 	br	11c28 <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   11a48:	e1bffd0b 	ldhu	r6,-12(fp)
   11a4c:	e0fffe03 	ldbu	r3,-8(fp)
   11a50:	e0bfff0b 	ldhu	r2,-4(fp)
   11a54:	e17ff704 	addi	r5,fp,-36
   11a58:	d8800015 	stw	r2,0(sp)
   11a5c:	e13ffc17 	ldw	r4,-16(fp)
   11a60:	180f883a 	mov	r7,r3
   11a64:	00120f00 	call	120f0 <OS_FlagBlock>
   11a68:	e0bfe617 	ldw	r2,-104(fp)
   11a6c:	e0bff115 	stw	r2,-60(fp)
   11a70:	e0bff117 	ldw	r2,-60(fp)
   11a74:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   11a78:	00000a06 	br	11aa4 <OSFlagPend+0x458>
   11a7c:	e0bfe617 	ldw	r2,-104(fp)
   11a80:	e0bff215 	stw	r2,-56(fp)
   11a84:	e0bff217 	ldw	r2,-56(fp)
   11a88:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   11a8c:	e03fe78d 	sth	zero,-98(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
   11a90:	e0800217 	ldw	r2,8(fp)
   11a94:	00c01bc4 	movi	r3,111
   11a98:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
   11a9c:	e0bfe78b 	ldhu	r2,-98(fp)
   11aa0:	00006106 	br	11c28 <OSFlagPend+0x5dc>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
   11aa4:	00104d80 	call	104d8 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11aa8:	0005303a 	rdctl	r2,status
   11aac:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11ab0:	e0fff317 	ldw	r3,-52(fp)
   11ab4:	00bfff84 	movi	r2,-2
   11ab8:	1884703a 	and	r2,r3,r2
   11abc:	1001703a 	wrctl	status,r2
  
  return context;
   11ac0:	e0bff317 	ldw	r2,-52(fp)
    OS_ENTER_CRITICAL();
   11ac4:	e0bfe615 	stw	r2,-104(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
   11ac8:	008000b4 	movhi	r2,2
   11acc:	10b41304 	addi	r2,r2,-12212
   11ad0:	10800017 	ldw	r2,0(r2)
   11ad4:	10800c43 	ldbu	r2,49(r2)
   11ad8:	10803fcc 	andi	r2,r2,255
   11adc:	10002226 	beq	r2,zero,11b68 <OSFlagPend+0x51c>
        pend_stat                = OSTCBCur->OSTCBStatPend;
   11ae0:	008000b4 	movhi	r2,2
   11ae4:	10b41304 	addi	r2,r2,-12212
   11ae8:	10800017 	ldw	r2,0(r2)
   11aec:	10800c43 	ldbu	r2,49(r2)
   11af0:	e0bfe805 	stb	r2,-96(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   11af4:	008000b4 	movhi	r2,2
   11af8:	10b41304 	addi	r2,r2,-12212
   11afc:	10800017 	ldw	r2,0(r2)
   11b00:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
   11b04:	e0bff704 	addi	r2,fp,-36
   11b08:	1009883a 	mov	r4,r2
   11b0c:	00124a80 	call	124a8 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
   11b10:	008000b4 	movhi	r2,2
   11b14:	10b41304 	addi	r2,r2,-12212
   11b18:	10800017 	ldw	r2,0(r2)
   11b1c:	10000c05 	stb	zero,48(r2)
   11b20:	e0bfe617 	ldw	r2,-104(fp)
   11b24:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11b28:	e0bff417 	ldw	r2,-48(fp)
   11b2c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
   11b30:	e03fe78d 	sth	zero,-98(fp)
        switch (pend_stat) {
   11b34:	e0bfe803 	ldbu	r2,-96(fp)
   11b38:	108000a0 	cmpeqi	r2,r2,2
   11b3c:	10000426 	beq	r2,zero,11b50 <OSFlagPend+0x504>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
   11b40:	e0800217 	ldw	r2,8(fp)
   11b44:	00c00384 	movi	r3,14
   11b48:	10c00005 	stb	r3,0(r2)
                 break;
   11b4c:	00000406 	br	11b60 <OSFlagPend+0x514>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
   11b50:	e0800217 	ldw	r2,8(fp)
   11b54:	00c00284 	movi	r3,10
   11b58:	10c00005 	stb	r3,0(r2)
                 break;
   11b5c:	0001883a 	nop
        }
        return (flags_rdy);
   11b60:	e0bfe78b 	ldhu	r2,-98(fp)
   11b64:	00003006 	br	11c28 <OSFlagPend+0x5dc>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
   11b68:	008000b4 	movhi	r2,2
   11b6c:	10b41304 	addi	r2,r2,-12212
   11b70:	10800017 	ldw	r2,0(r2)
   11b74:	10800b0b 	ldhu	r2,44(r2)
   11b78:	e0bfe78d 	sth	r2,-98(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
   11b7c:	e0bfe503 	ldbu	r2,-108(fp)
   11b80:	10800058 	cmpnei	r2,r2,1
   11b84:	1000211e 	bne	r2,zero,11c0c <OSFlagPend+0x5c0>
        switch (wait_type) {
   11b88:	e0bffe03 	ldbu	r2,-8(fp)
   11b8c:	10001616 	blt	r2,zero,11be8 <OSFlagPend+0x59c>
   11b90:	10c00090 	cmplti	r3,r2,2
   11b94:	18000c1e 	bne	r3,zero,11bc8 <OSFlagPend+0x57c>
   11b98:	10800108 	cmpgei	r2,r2,4
   11b9c:	1000121e 	bne	r2,zero,11be8 <OSFlagPend+0x59c>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
   11ba0:	e0bffc17 	ldw	r2,-16(fp)
   11ba4:	1080020b 	ldhu	r2,8(r2)
   11ba8:	1007883a 	mov	r3,r2
   11bac:	e0bfe78b 	ldhu	r2,-98(fp)
   11bb0:	0084303a 	nor	r2,zero,r2
   11bb4:	1884703a 	and	r2,r3,r2
   11bb8:	1007883a 	mov	r3,r2
   11bbc:	e0bffc17 	ldw	r2,-16(fp)
   11bc0:	10c0020d 	sth	r3,8(r2)
                 break;
   11bc4:	00001106 	br	11c0c <OSFlagPend+0x5c0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
   11bc8:	e0bffc17 	ldw	r2,-16(fp)
   11bcc:	10c0020b 	ldhu	r3,8(r2)
   11bd0:	e0bfe78b 	ldhu	r2,-98(fp)
   11bd4:	1884b03a 	or	r2,r3,r2
   11bd8:	1007883a 	mov	r3,r2
   11bdc:	e0bffc17 	ldw	r2,-16(fp)
   11be0:	10c0020d 	sth	r3,8(r2)
                 break;
   11be4:	00000906 	br	11c0c <OSFlagPend+0x5c0>
   11be8:	e0bfe617 	ldw	r2,-104(fp)
   11bec:	e0bff515 	stw	r2,-44(fp)
   11bf0:	e0bff517 	ldw	r2,-44(fp)
   11bf4:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   11bf8:	e0800217 	ldw	r2,8(fp)
   11bfc:	00c01bc4 	movi	r3,111
   11c00:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   11c04:	0005883a 	mov	r2,zero
   11c08:	00000706 	br	11c28 <OSFlagPend+0x5dc>
   11c0c:	e0bfe617 	ldw	r2,-104(fp)
   11c10:	e0bff615 	stw	r2,-40(fp)
   11c14:	e0bff617 	ldw	r2,-40(fp)
   11c18:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
   11c1c:	e0800217 	ldw	r2,8(fp)
   11c20:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
   11c24:	e0bfe78b 	ldhu	r2,-98(fp)
}
   11c28:	e037883a 	mov	sp,fp
   11c2c:	dfc00117 	ldw	ra,4(sp)
   11c30:	df000017 	ldw	fp,0(sp)
   11c34:	dec00204 	addi	sp,sp,8
   11c38:	f800283a 	ret

00011c3c <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
   11c3c:	defffb04 	addi	sp,sp,-20
   11c40:	df000415 	stw	fp,16(sp)
   11c44:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   11c48:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11c4c:	0005303a 	rdctl	r2,status
   11c50:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11c54:	e0fffe17 	ldw	r3,-8(fp)
   11c58:	00bfff84 	movi	r2,-2
   11c5c:	1884703a 	and	r2,r3,r2
   11c60:	1001703a 	wrctl	status,r2
  
  return context;
   11c64:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   11c68:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
   11c6c:	008000b4 	movhi	r2,2
   11c70:	10b41304 	addi	r2,r2,-12212
   11c74:	10800017 	ldw	r2,0(r2)
   11c78:	10800b0b 	ldhu	r2,44(r2)
   11c7c:	e0bffd0d 	sth	r2,-12(fp)
   11c80:	e0bffc17 	ldw	r2,-16(fp)
   11c84:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11c88:	e0bfff17 	ldw	r2,-4(fp)
   11c8c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
   11c90:	e0bffd0b 	ldhu	r2,-12(fp)
}
   11c94:	e037883a 	mov	sp,fp
   11c98:	df000017 	ldw	fp,0(sp)
   11c9c:	dec00104 	addi	sp,sp,4
   11ca0:	f800283a 	ret

00011ca4 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
   11ca4:	deffef04 	addi	sp,sp,-68
   11ca8:	dfc01015 	stw	ra,64(sp)
   11cac:	df000f15 	stw	fp,60(sp)
   11cb0:	df000f04 	addi	fp,sp,60
   11cb4:	e13ffc15 	stw	r4,-16(fp)
   11cb8:	2807883a 	mov	r3,r5
   11cbc:	3005883a 	mov	r2,r6
   11cc0:	e1ffff15 	stw	r7,-4(fp)
   11cc4:	e0fffd0d 	sth	r3,-12(fp)
   11cc8:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
   11ccc:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   11cd0:	e0bfff17 	ldw	r2,-4(fp)
   11cd4:	1000021e 	bne	r2,zero,11ce0 <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
   11cd8:	0005883a 	mov	r2,zero
   11cdc:	0000ce06 	br	12018 <OSFlagPost+0x374>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
   11ce0:	e0bffc17 	ldw	r2,-16(fp)
   11ce4:	1000051e 	bne	r2,zero,11cfc <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   11ce8:	e0bfff17 	ldw	r2,-4(fp)
   11cec:	00c01b84 	movi	r3,110
   11cf0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   11cf4:	0005883a 	mov	r2,zero
   11cf8:	0000c706 	br	12018 <OSFlagPost+0x374>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
   11cfc:	e0bffc17 	ldw	r2,-16(fp)
   11d00:	10800003 	ldbu	r2,0(r2)
   11d04:	10803fcc 	andi	r2,r2,255
   11d08:	10800160 	cmpeqi	r2,r2,5
   11d0c:	1000051e 	bne	r2,zero,11d24 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
   11d10:	e0bfff17 	ldw	r2,-4(fp)
   11d14:	00c00044 	movi	r3,1
   11d18:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   11d1c:	0005883a 	mov	r2,zero
   11d20:	0000bd06 	br	12018 <OSFlagPost+0x374>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11d24:	0005303a 	rdctl	r2,status
   11d28:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11d2c:	e0fff617 	ldw	r3,-40(fp)
   11d30:	00bfff84 	movi	r2,-2
   11d34:	1884703a 	and	r2,r3,r2
   11d38:	1001703a 	wrctl	status,r2
  
  return context;
   11d3c:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   11d40:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
   11d44:	e0bffe03 	ldbu	r2,-8(fp)
   11d48:	10000326 	beq	r2,zero,11d58 <OSFlagPost+0xb4>
   11d4c:	10800060 	cmpeqi	r2,r2,1
   11d50:	10000b1e 	bne	r2,zero,11d80 <OSFlagPost+0xdc>
   11d54:	00001206 	br	11da0 <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
   11d58:	e0bffc17 	ldw	r2,-16(fp)
   11d5c:	1080020b 	ldhu	r2,8(r2)
   11d60:	1007883a 	mov	r3,r2
   11d64:	e0bffd0b 	ldhu	r2,-12(fp)
   11d68:	0084303a 	nor	r2,zero,r2
   11d6c:	1884703a 	and	r2,r3,r2
   11d70:	1007883a 	mov	r3,r2
   11d74:	e0bffc17 	ldw	r2,-16(fp)
   11d78:	10c0020d 	sth	r3,8(r2)
             break;
   11d7c:	00001106 	br	11dc4 <OSFlagPost+0x120>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
   11d80:	e0bffc17 	ldw	r2,-16(fp)
   11d84:	10c0020b 	ldhu	r3,8(r2)
   11d88:	e0bffd0b 	ldhu	r2,-12(fp)
   11d8c:	1884b03a 	or	r2,r3,r2
   11d90:	1007883a 	mov	r3,r2
   11d94:	e0bffc17 	ldw	r2,-16(fp)
   11d98:	10c0020d 	sth	r3,8(r2)
             break;
   11d9c:	00000906 	br	11dc4 <OSFlagPost+0x120>
   11da0:	e0bff317 	ldw	r2,-52(fp)
   11da4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11da8:	e0bff717 	ldw	r2,-36(fp)
   11dac:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
   11db0:	e0bfff17 	ldw	r2,-4(fp)
   11db4:	00c01c44 	movi	r3,113
   11db8:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
   11dbc:	0005883a 	mov	r2,zero
   11dc0:	00009506 	br	12018 <OSFlagPost+0x374>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
   11dc4:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   11dc8:	e0bffc17 	ldw	r2,-16(fp)
   11dcc:	10800117 	ldw	r2,4(r2)
   11dd0:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   11dd4:	00007406 	br	11fa8 <OSFlagPost+0x304>
        switch (pnode->OSFlagNodeWaitType) {
   11dd8:	e0bff117 	ldw	r2,-60(fp)
   11ddc:	10800483 	ldbu	r2,18(r2)
   11de0:	10803fcc 	andi	r2,r2,255
   11de4:	10c00060 	cmpeqi	r3,r2,1
   11de8:	18004d1e 	bne	r3,zero,11f20 <OSFlagPost+0x27c>
   11dec:	10c00088 	cmpgei	r3,r2,2
   11df0:	1800021e 	bne	r3,zero,11dfc <OSFlagPost+0x158>
   11df4:	10003126 	beq	r2,zero,11ebc <OSFlagPost+0x218>
   11df8:	00005f06 	br	11f78 <OSFlagPost+0x2d4>
   11dfc:	10c000a0 	cmpeqi	r3,r2,2
   11e00:	1800031e 	bne	r3,zero,11e10 <OSFlagPost+0x16c>
   11e04:	108000e0 	cmpeqi	r2,r2,3
   11e08:	1000181e 	bne	r2,zero,11e6c <OSFlagPost+0x1c8>
   11e0c:	00005a06 	br	11f78 <OSFlagPost+0x2d4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   11e10:	e0bffc17 	ldw	r2,-16(fp)
   11e14:	10c0020b 	ldhu	r3,8(r2)
   11e18:	e0bff117 	ldw	r2,-60(fp)
   11e1c:	1080040b 	ldhu	r2,16(r2)
   11e20:	1884703a 	and	r2,r3,r2
   11e24:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   11e28:	e0bff117 	ldw	r2,-60(fp)
   11e2c:	1080040b 	ldhu	r2,16(r2)
   11e30:	10ffffcc 	andi	r3,r2,65535
   11e34:	e0bff40b 	ldhu	r2,-48(fp)
   11e38:	18800b1e 	bne	r3,r2,11e68 <OSFlagPost+0x1c4>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   11e3c:	e0bff40b 	ldhu	r2,-48(fp)
   11e40:	e13ff117 	ldw	r4,-60(fp)
   11e44:	100b883a 	mov	r5,r2
   11e48:	00123980 	call	12398 <OS_FlagTaskRdy>
   11e4c:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
   11e50:	e0bff483 	ldbu	r2,-46(fp)
   11e54:	10800058 	cmpnei	r2,r2,1
   11e58:	1000031e 	bne	r2,zero,11e68 <OSFlagPost+0x1c4>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   11e5c:	00800044 	movi	r2,1
   11e60:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   11e64:	00004d06 	br	11f9c <OSFlagPost+0x2f8>
   11e68:	00004c06 	br	11f9c <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   11e6c:	e0bffc17 	ldw	r2,-16(fp)
   11e70:	10c0020b 	ldhu	r3,8(r2)
   11e74:	e0bff117 	ldw	r2,-60(fp)
   11e78:	1080040b 	ldhu	r2,16(r2)
   11e7c:	1884703a 	and	r2,r3,r2
   11e80:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   11e84:	e0bff40b 	ldhu	r2,-48(fp)
   11e88:	10000b26 	beq	r2,zero,11eb8 <OSFlagPost+0x214>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   11e8c:	e0bff40b 	ldhu	r2,-48(fp)
   11e90:	e13ff117 	ldw	r4,-60(fp)
   11e94:	100b883a 	mov	r5,r2
   11e98:	00123980 	call	12398 <OS_FlagTaskRdy>
   11e9c:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
   11ea0:	e0bff483 	ldbu	r2,-46(fp)
   11ea4:	10800058 	cmpnei	r2,r2,1
   11ea8:	1000031e 	bne	r2,zero,11eb8 <OSFlagPost+0x214>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   11eac:	00800044 	movi	r2,1
   11eb0:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   11eb4:	00003906 	br	11f9c <OSFlagPost+0x2f8>
   11eb8:	00003806 	br	11f9c <OSFlagPost+0x2f8>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   11ebc:	e0bffc17 	ldw	r2,-16(fp)
   11ec0:	1080020b 	ldhu	r2,8(r2)
   11ec4:	0084303a 	nor	r2,zero,r2
   11ec8:	1007883a 	mov	r3,r2
   11ecc:	e0bff117 	ldw	r2,-60(fp)
   11ed0:	1080040b 	ldhu	r2,16(r2)
   11ed4:	1884703a 	and	r2,r3,r2
   11ed8:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   11edc:	e0bff117 	ldw	r2,-60(fp)
   11ee0:	1080040b 	ldhu	r2,16(r2)
   11ee4:	10ffffcc 	andi	r3,r2,65535
   11ee8:	e0bff40b 	ldhu	r2,-48(fp)
   11eec:	18800b1e 	bne	r3,r2,11f1c <OSFlagPost+0x278>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   11ef0:	e0bff40b 	ldhu	r2,-48(fp)
   11ef4:	e13ff117 	ldw	r4,-60(fp)
   11ef8:	100b883a 	mov	r5,r2
   11efc:	00123980 	call	12398 <OS_FlagTaskRdy>
   11f00:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
   11f04:	e0bff483 	ldbu	r2,-46(fp)
   11f08:	10800058 	cmpnei	r2,r2,1
   11f0c:	1000031e 	bne	r2,zero,11f1c <OSFlagPost+0x278>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   11f10:	00800044 	movi	r2,1
   11f14:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   11f18:	00002006 	br	11f9c <OSFlagPost+0x2f8>
   11f1c:	00001f06 	br	11f9c <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   11f20:	e0bffc17 	ldw	r2,-16(fp)
   11f24:	1080020b 	ldhu	r2,8(r2)
   11f28:	0084303a 	nor	r2,zero,r2
   11f2c:	1007883a 	mov	r3,r2
   11f30:	e0bff117 	ldw	r2,-60(fp)
   11f34:	1080040b 	ldhu	r2,16(r2)
   11f38:	1884703a 	and	r2,r3,r2
   11f3c:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   11f40:	e0bff40b 	ldhu	r2,-48(fp)
   11f44:	10000b26 	beq	r2,zero,11f74 <OSFlagPost+0x2d0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   11f48:	e0bff40b 	ldhu	r2,-48(fp)
   11f4c:	e13ff117 	ldw	r4,-60(fp)
   11f50:	100b883a 	mov	r5,r2
   11f54:	00123980 	call	12398 <OS_FlagTaskRdy>
   11f58:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
   11f5c:	e0bff483 	ldbu	r2,-46(fp)
   11f60:	10800058 	cmpnei	r2,r2,1
   11f64:	1000031e 	bne	r2,zero,11f74 <OSFlagPost+0x2d0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   11f68:	00800044 	movi	r2,1
   11f6c:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   11f70:	00000a06 	br	11f9c <OSFlagPost+0x2f8>
   11f74:	00000906 	br	11f9c <OSFlagPost+0x2f8>
   11f78:	e0bff317 	ldw	r2,-52(fp)
   11f7c:	e0bff815 	stw	r2,-32(fp)
   11f80:	e0bff817 	ldw	r2,-32(fp)
   11f84:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   11f88:	e0bfff17 	ldw	r2,-4(fp)
   11f8c:	00c01bc4 	movi	r3,111
   11f90:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   11f94:	0005883a 	mov	r2,zero
   11f98:	00001f06 	br	12018 <OSFlagPost+0x374>
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
   11f9c:	e0bff117 	ldw	r2,-60(fp)
   11fa0:	10800017 	ldw	r2,0(r2)
   11fa4:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   11fa8:	e0bff117 	ldw	r2,-60(fp)
   11fac:	103f8a1e 	bne	r2,zero,11dd8 <OSFlagPost+0x134>
   11fb0:	e0bff317 	ldw	r2,-52(fp)
   11fb4:	e0bff915 	stw	r2,-28(fp)
   11fb8:	e0bff917 	ldw	r2,-28(fp)
   11fbc:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
   11fc0:	e0bff203 	ldbu	r2,-56(fp)
   11fc4:	10800058 	cmpnei	r2,r2,1
   11fc8:	1000011e 	bne	r2,zero,11fd0 <OSFlagPost+0x32c>
        OS_Sched();
   11fcc:	00104d80 	call	104d8 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11fd0:	0005303a 	rdctl	r2,status
   11fd4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11fd8:	e0fffa17 	ldw	r3,-24(fp)
   11fdc:	00bfff84 	movi	r2,-2
   11fe0:	1884703a 	and	r2,r3,r2
   11fe4:	1001703a 	wrctl	status,r2
  
  return context;
   11fe8:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   11fec:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
   11ff0:	e0bffc17 	ldw	r2,-16(fp)
   11ff4:	1080020b 	ldhu	r2,8(r2)
   11ff8:	e0bff50d 	sth	r2,-44(fp)
   11ffc:	e0bff317 	ldw	r2,-52(fp)
   12000:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12004:	e0bffb17 	ldw	r2,-20(fp)
   12008:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
   1200c:	e0bfff17 	ldw	r2,-4(fp)
   12010:	10000005 	stb	zero,0(r2)
    return (flags_cur);
   12014:	e0bff50b 	ldhu	r2,-44(fp)
}
   12018:	e037883a 	mov	sp,fp
   1201c:	dfc00117 	ldw	ra,4(sp)
   12020:	df000017 	ldw	fp,0(sp)
   12024:	dec00204 	addi	sp,sp,8
   12028:	f800283a 	ret

0001202c <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
   1202c:	defff904 	addi	sp,sp,-28
   12030:	df000615 	stw	fp,24(sp)
   12034:	df000604 	addi	fp,sp,24
   12038:	e13ffe15 	stw	r4,-8(fp)
   1203c:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
   12040:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
   12044:	e0bfff17 	ldw	r2,-4(fp)
   12048:	1000021e 	bne	r2,zero,12054 <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
   1204c:	0005883a 	mov	r2,zero
   12050:	00002306 	br	120e0 <OSFlagQuery+0xb4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
   12054:	e0bffe17 	ldw	r2,-8(fp)
   12058:	1000051e 	bne	r2,zero,12070 <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   1205c:	e0bfff17 	ldw	r2,-4(fp)
   12060:	00c01b84 	movi	r3,110
   12064:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   12068:	0005883a 	mov	r2,zero
   1206c:	00001c06 	br	120e0 <OSFlagQuery+0xb4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
   12070:	e0bffe17 	ldw	r2,-8(fp)
   12074:	10800003 	ldbu	r2,0(r2)
   12078:	10803fcc 	andi	r2,r2,255
   1207c:	10800160 	cmpeqi	r2,r2,5
   12080:	1000051e 	bne	r2,zero,12098 <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   12084:	e0bfff17 	ldw	r2,-4(fp)
   12088:	00c00044 	movi	r3,1
   1208c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   12090:	0005883a 	mov	r2,zero
   12094:	00001206 	br	120e0 <OSFlagQuery+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12098:	0005303a 	rdctl	r2,status
   1209c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   120a0:	e0fffc17 	ldw	r3,-16(fp)
   120a4:	00bfff84 	movi	r2,-2
   120a8:	1884703a 	and	r2,r3,r2
   120ac:	1001703a 	wrctl	status,r2
  
  return context;
   120b0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   120b4:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
   120b8:	e0bffe17 	ldw	r2,-8(fp)
   120bc:	1080020b 	ldhu	r2,8(r2)
   120c0:	e0bffb0d 	sth	r2,-20(fp)
   120c4:	e0bffa17 	ldw	r2,-24(fp)
   120c8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   120cc:	e0bffd17 	ldw	r2,-12(fp)
   120d0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   120d4:	e0bfff17 	ldw	r2,-4(fp)
   120d8:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
   120dc:	e0bffb0b 	ldhu	r2,-20(fp)
}
   120e0:	e037883a 	mov	sp,fp
   120e4:	df000017 	ldw	fp,0(sp)
   120e8:	dec00104 	addi	sp,sp,4
   120ec:	f800283a 	ret

000120f0 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
   120f0:	defff804 	addi	sp,sp,-32
   120f4:	df000715 	stw	fp,28(sp)
   120f8:	df000704 	addi	fp,sp,28
   120fc:	e13ffb15 	stw	r4,-20(fp)
   12100:	e17ffc15 	stw	r5,-16(fp)
   12104:	3009883a 	mov	r4,r6
   12108:	3807883a 	mov	r3,r7
   1210c:	e0800117 	ldw	r2,4(fp)
   12110:	e13ffd0d 	sth	r4,-12(fp)
   12114:	e0fffe05 	stb	r3,-8(fp)
   12118:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
   1211c:	008000b4 	movhi	r2,2
   12120:	10b41304 	addi	r2,r2,-12212
   12124:	10c00017 	ldw	r3,0(r2)
   12128:	008000b4 	movhi	r2,2
   1212c:	10b41304 	addi	r2,r2,-12212
   12130:	10800017 	ldw	r2,0(r2)
   12134:	10800c03 	ldbu	r2,48(r2)
   12138:	10800814 	ori	r2,r2,32
   1213c:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
   12140:	008000b4 	movhi	r2,2
   12144:	10b41304 	addi	r2,r2,-12212
   12148:	10800017 	ldw	r2,0(r2)
   1214c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
   12150:	008000b4 	movhi	r2,2
   12154:	10b41304 	addi	r2,r2,-12212
   12158:	10800017 	ldw	r2,0(r2)
   1215c:	e0ffff0b 	ldhu	r3,-4(fp)
   12160:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
   12164:	008000b4 	movhi	r2,2
   12168:	10b41304 	addi	r2,r2,-12212
   1216c:	10800017 	ldw	r2,0(r2)
   12170:	e0fffc17 	ldw	r3,-16(fp)
   12174:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
   12178:	e0bffc17 	ldw	r2,-16(fp)
   1217c:	e0fffd0b 	ldhu	r3,-12(fp)
   12180:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
   12184:	e0bffc17 	ldw	r2,-16(fp)
   12188:	e0fffe03 	ldbu	r3,-8(fp)
   1218c:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
   12190:	008000b4 	movhi	r2,2
   12194:	10b41304 	addi	r2,r2,-12212
   12198:	10c00017 	ldw	r3,0(r2)
   1219c:	e0bffc17 	ldw	r2,-16(fp)
   121a0:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
   121a4:	e0bffb17 	ldw	r2,-20(fp)
   121a8:	10c00117 	ldw	r3,4(r2)
   121ac:	e0bffc17 	ldw	r2,-16(fp)
   121b0:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
   121b4:	e0bffc17 	ldw	r2,-16(fp)
   121b8:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
   121bc:	e0bffc17 	ldw	r2,-16(fp)
   121c0:	e0fffb17 	ldw	r3,-20(fp)
   121c4:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   121c8:	e0bffb17 	ldw	r2,-20(fp)
   121cc:	10800117 	ldw	r2,4(r2)
   121d0:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
   121d4:	e0bff917 	ldw	r2,-28(fp)
   121d8:	10000326 	beq	r2,zero,121e8 <OS_FlagBlock+0xf8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
   121dc:	e0bff917 	ldw	r2,-28(fp)
   121e0:	e0fffc17 	ldw	r3,-16(fp)
   121e4:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
   121e8:	e0bffb17 	ldw	r2,-20(fp)
   121ec:	e0fffc17 	ldw	r3,-16(fp)
   121f0:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
   121f4:	008000b4 	movhi	r2,2
   121f8:	10b41304 	addi	r2,r2,-12212
   121fc:	10800017 	ldw	r2,0(r2)
   12200:	10800d03 	ldbu	r2,52(r2)
   12204:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   12208:	e0fffa03 	ldbu	r3,-24(fp)
   1220c:	e13ffa03 	ldbu	r4,-24(fp)
   12210:	008000b4 	movhi	r2,2
   12214:	10b41044 	addi	r2,r2,-12223
   12218:	1105883a 	add	r2,r2,r4
   1221c:	10800003 	ldbu	r2,0(r2)
   12220:	1009883a 	mov	r4,r2
   12224:	008000b4 	movhi	r2,2
   12228:	10b41304 	addi	r2,r2,-12212
   1222c:	10800017 	ldw	r2,0(r2)
   12230:	10800d43 	ldbu	r2,53(r2)
   12234:	0084303a 	nor	r2,zero,r2
   12238:	2084703a 	and	r2,r4,r2
   1223c:	1009883a 	mov	r4,r2
   12240:	008000b4 	movhi	r2,2
   12244:	10b41044 	addi	r2,r2,-12223
   12248:	10c5883a 	add	r2,r2,r3
   1224c:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
   12250:	e0fffa03 	ldbu	r3,-24(fp)
   12254:	008000b4 	movhi	r2,2
   12258:	10b41044 	addi	r2,r2,-12223
   1225c:	10c5883a 	add	r2,r2,r3
   12260:	10800003 	ldbu	r2,0(r2)
   12264:	10803fcc 	andi	r2,r2,255
   12268:	10000e1e 	bne	r2,zero,122a4 <OS_FlagBlock+0x1b4>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   1226c:	008000b4 	movhi	r2,2
   12270:	10b41304 	addi	r2,r2,-12212
   12274:	10800017 	ldw	r2,0(r2)
   12278:	10800d83 	ldbu	r2,54(r2)
   1227c:	0084303a 	nor	r2,zero,r2
   12280:	1007883a 	mov	r3,r2
   12284:	008000b4 	movhi	r2,2
   12288:	10b41004 	addi	r2,r2,-12224
   1228c:	10800003 	ldbu	r2,0(r2)
   12290:	1884703a 	and	r2,r3,r2
   12294:	1007883a 	mov	r3,r2
   12298:	008000b4 	movhi	r2,2
   1229c:	10b41004 	addi	r2,r2,-12224
   122a0:	10c00005 	stb	r3,0(r2)
    }
}
   122a4:	e037883a 	mov	sp,fp
   122a8:	df000017 	ldw	fp,0(sp)
   122ac:	dec00104 	addi	sp,sp,4
   122b0:	f800283a 	ret

000122b4 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
   122b4:	defffb04 	addi	sp,sp,-20
   122b8:	dfc00415 	stw	ra,16(sp)
   122bc:	df000315 	stw	fp,12(sp)
   122c0:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
   122c4:	010000b4 	movhi	r4,2
   122c8:	210c6404 	addi	r4,r4,12688
   122cc:	0140dc04 	movi	r5,880
   122d0:	00104240 	call	10424 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
   122d4:	008000b4 	movhi	r2,2
   122d8:	108c6404 	addi	r2,r2,12688
   122dc:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
   122e0:	008000b4 	movhi	r2,2
   122e4:	108c6f04 	addi	r2,r2,12732
   122e8:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   122ec:	e03ffd0d 	sth	zero,-12(fp)
   122f0:	00001306 	br	12340 <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   122f4:	e0bffe17 	ldw	r2,-8(fp)
   122f8:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
   122fc:	e0bffe17 	ldw	r2,-8(fp)
   12300:	e0ffff17 	ldw	r3,-4(fp)
   12304:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
   12308:	e0bffe17 	ldw	r2,-8(fp)
   1230c:	00c00fc4 	movi	r3,63
   12310:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   12314:	e0bffe17 	ldw	r2,-8(fp)
   12318:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
   1231c:	e0bffe17 	ldw	r2,-8(fp)
   12320:	10800b04 	addi	r2,r2,44
   12324:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
   12328:	e0bfff17 	ldw	r2,-4(fp)
   1232c:	10800b04 	addi	r2,r2,44
   12330:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   12334:	e0bffd0b 	ldhu	r2,-12(fp)
   12338:	10800044 	addi	r2,r2,1
   1233c:	e0bffd0d 	sth	r2,-12(fp)
   12340:	e0bffd0b 	ldhu	r2,-12(fp)
   12344:	108004f0 	cmpltui	r2,r2,19
   12348:	103fea1e 	bne	r2,zero,122f4 <OS_FlagInit+0x40>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   1234c:	e0bffe17 	ldw	r2,-8(fp)
   12350:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
   12354:	e0bffe17 	ldw	r2,-8(fp)
   12358:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
   1235c:	e0bffe17 	ldw	r2,-8(fp)
   12360:	00c00fc4 	movi	r3,63
   12364:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   12368:	e0bffe17 	ldw	r2,-8(fp)
   1236c:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
   12370:	008000b4 	movhi	r2,2
   12374:	10b41504 	addi	r2,r2,-12204
   12378:	00c000b4 	movhi	r3,2
   1237c:	18cc6404 	addi	r3,r3,12688
   12380:	10c00015 	stw	r3,0(r2)
#endif
}
   12384:	e037883a 	mov	sp,fp
   12388:	dfc00117 	ldw	ra,4(sp)
   1238c:	df000017 	ldw	fp,0(sp)
   12390:	dec00204 	addi	sp,sp,8
   12394:	f800283a 	ret

00012398 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
   12398:	defffa04 	addi	sp,sp,-24
   1239c:	dfc00515 	stw	ra,20(sp)
   123a0:	df000415 	stw	fp,16(sp)
   123a4:	df000404 	addi	fp,sp,16
   123a8:	e13ffe15 	stw	r4,-8(fp)
   123ac:	2805883a 	mov	r2,r5
   123b0:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
   123b4:	e0bffe17 	ldw	r2,-8(fp)
   123b8:	10800217 	ldw	r2,8(r2)
   123bc:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
   123c0:	e0bffd17 	ldw	r2,-12(fp)
   123c4:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
   123c8:	e0bffd17 	ldw	r2,-12(fp)
   123cc:	e0ffff0b 	ldhu	r3,-4(fp)
   123d0:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
   123d4:	e0bffd17 	ldw	r2,-12(fp)
   123d8:	10c00c03 	ldbu	r3,48(r2)
   123dc:	00bff7c4 	movi	r2,-33
   123e0:	1884703a 	and	r2,r3,r2
   123e4:	1007883a 	mov	r3,r2
   123e8:	e0bffd17 	ldw	r2,-12(fp)
   123ec:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
   123f0:	e0bffd17 	ldw	r2,-12(fp)
   123f4:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
   123f8:	e0bffd17 	ldw	r2,-12(fp)
   123fc:	10800c03 	ldbu	r2,48(r2)
   12400:	10803fcc 	andi	r2,r2,255
   12404:	10001f1e 	bne	r2,zero,12484 <OS_FlagTaskRdy+0xec>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
   12408:	e0bffd17 	ldw	r2,-12(fp)
   1240c:	10c00d83 	ldbu	r3,54(r2)
   12410:	008000b4 	movhi	r2,2
   12414:	10b41004 	addi	r2,r2,-12224
   12418:	10800003 	ldbu	r2,0(r2)
   1241c:	1884b03a 	or	r2,r3,r2
   12420:	1007883a 	mov	r3,r2
   12424:	008000b4 	movhi	r2,2
   12428:	10b41004 	addi	r2,r2,-12224
   1242c:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   12430:	e0bffd17 	ldw	r2,-12(fp)
   12434:	10800d03 	ldbu	r2,52(r2)
   12438:	10c03fcc 	andi	r3,r2,255
   1243c:	e0bffd17 	ldw	r2,-12(fp)
   12440:	10800d03 	ldbu	r2,52(r2)
   12444:	11003fcc 	andi	r4,r2,255
   12448:	008000b4 	movhi	r2,2
   1244c:	10b41044 	addi	r2,r2,-12223
   12450:	1105883a 	add	r2,r2,r4
   12454:	11000003 	ldbu	r4,0(r2)
   12458:	e0bffd17 	ldw	r2,-12(fp)
   1245c:	10800d43 	ldbu	r2,53(r2)
   12460:	2084b03a 	or	r2,r4,r2
   12464:	1009883a 	mov	r4,r2
   12468:	008000b4 	movhi	r2,2
   1246c:	10b41044 	addi	r2,r2,-12223
   12470:	10c5883a 	add	r2,r2,r3
   12474:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
   12478:	00800044 	movi	r2,1
   1247c:	e0bffc05 	stb	r2,-16(fp)
   12480:	00000106 	br	12488 <OS_FlagTaskRdy+0xf0>
    } else {
        sched                   = OS_FALSE;
   12484:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
   12488:	e13ffe17 	ldw	r4,-8(fp)
   1248c:	00124a80 	call	124a8 <OS_FlagUnlink>
    return (sched);
   12490:	e0bffc03 	ldbu	r2,-16(fp)
}
   12494:	e037883a 	mov	sp,fp
   12498:	dfc00117 	ldw	ra,4(sp)
   1249c:	df000017 	ldw	fp,0(sp)
   124a0:	dec00204 	addi	sp,sp,8
   124a4:	f800283a 	ret

000124a8 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
   124a8:	defffa04 	addi	sp,sp,-24
   124ac:	df000515 	stw	fp,20(sp)
   124b0:	df000504 	addi	fp,sp,20
   124b4:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
   124b8:	e0bfff17 	ldw	r2,-4(fp)
   124bc:	10800117 	ldw	r2,4(r2)
   124c0:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   124c4:	e0bfff17 	ldw	r2,-4(fp)
   124c8:	10800017 	ldw	r2,0(r2)
   124cc:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
   124d0:	e0bffb17 	ldw	r2,-20(fp)
   124d4:	10000b1e 	bne	r2,zero,12504 <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
   124d8:	e0bfff17 	ldw	r2,-4(fp)
   124dc:	10800317 	ldw	r2,12(r2)
   124e0:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
   124e4:	e0bffd17 	ldw	r2,-12(fp)
   124e8:	e0fffc17 	ldw	r3,-16(fp)
   124ec:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
   124f0:	e0bffc17 	ldw	r2,-16(fp)
   124f4:	10000b26 	beq	r2,zero,12524 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
   124f8:	e0bffc17 	ldw	r2,-16(fp)
   124fc:	10000115 	stw	zero,4(r2)
   12500:	00000806 	br	12524 <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
   12504:	e0bffb17 	ldw	r2,-20(fp)
   12508:	e0fffc17 	ldw	r3,-16(fp)
   1250c:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
   12510:	e0bffc17 	ldw	r2,-16(fp)
   12514:	10000326 	beq	r2,zero,12524 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
   12518:	e0bffc17 	ldw	r2,-16(fp)
   1251c:	e0fffb17 	ldw	r3,-20(fp)
   12520:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
   12524:	e0bfff17 	ldw	r2,-4(fp)
   12528:	10800217 	ldw	r2,8(r2)
   1252c:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
   12530:	e0bffe17 	ldw	r2,-8(fp)
   12534:	10000a15 	stw	zero,40(r2)
#endif
}
   12538:	e037883a 	mov	sp,fp
   1253c:	df000017 	ldw	fp,0(sp)
   12540:	dec00104 	addi	sp,sp,4
   12544:	f800283a 	ret

00012548 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
   12548:	defff404 	addi	sp,sp,-48
   1254c:	df000b15 	stw	fp,44(sp)
   12550:	df000b04 	addi	fp,sp,44
   12554:	e13ffc15 	stw	r4,-16(fp)
   12558:	e17ffd15 	stw	r5,-12(fp)
   1255c:	e1bffe15 	stw	r6,-8(fp)
   12560:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   12564:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   12568:	e0bfff17 	ldw	r2,-4(fp)
   1256c:	1000021e 	bne	r2,zero,12578 <OSMemCreate+0x30>
        return ((OS_MEM *)0);
   12570:	0005883a 	mov	r2,zero
   12574:	00006d06 	br	1272c <OSMemCreate+0x1e4>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
   12578:	e0bffc17 	ldw	r2,-16(fp)
   1257c:	1000051e 	bne	r2,zero,12594 <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   12580:	e0bfff17 	ldw	r2,-4(fp)
   12584:	00c01884 	movi	r3,98
   12588:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   1258c:	0005883a 	mov	r2,zero
   12590:	00006606 	br	1272c <OSMemCreate+0x1e4>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
   12594:	e0bffc17 	ldw	r2,-16(fp)
   12598:	108000cc 	andi	r2,r2,3
   1259c:	10000526 	beq	r2,zero,125b4 <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   125a0:	e0bfff17 	ldw	r2,-4(fp)
   125a4:	00c01884 	movi	r3,98
   125a8:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   125ac:	0005883a 	mov	r2,zero
   125b0:	00005e06 	br	1272c <OSMemCreate+0x1e4>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
   125b4:	e0bffd17 	ldw	r2,-12(fp)
   125b8:	108000a8 	cmpgeui	r2,r2,2
   125bc:	1000051e 	bne	r2,zero,125d4 <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
   125c0:	e0bfff17 	ldw	r2,-4(fp)
   125c4:	00c016c4 	movi	r3,91
   125c8:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   125cc:	0005883a 	mov	r2,zero
   125d0:	00005606 	br	1272c <OSMemCreate+0x1e4>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
   125d4:	e0bffe17 	ldw	r2,-8(fp)
   125d8:	10800128 	cmpgeui	r2,r2,4
   125dc:	1000051e 	bne	r2,zero,125f4 <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
   125e0:	e0bfff17 	ldw	r2,-4(fp)
   125e4:	00c01704 	movi	r3,92
   125e8:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   125ec:	0005883a 	mov	r2,zero
   125f0:	00004e06 	br	1272c <OSMemCreate+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   125f4:	0005303a 	rdctl	r2,status
   125f8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   125fc:	e0fffa17 	ldw	r3,-24(fp)
   12600:	00bfff84 	movi	r2,-2
   12604:	1884703a 	and	r2,r3,r2
   12608:	1001703a 	wrctl	status,r2
  
  return context;
   1260c:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   12610:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
   12614:	008000b4 	movhi	r2,2
   12618:	10b40d04 	addi	r2,r2,-12236
   1261c:	10800017 	ldw	r2,0(r2)
   12620:	e0bff915 	stw	r2,-28(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
   12624:	008000b4 	movhi	r2,2
   12628:	10b40d04 	addi	r2,r2,-12236
   1262c:	10800017 	ldw	r2,0(r2)
   12630:	10000726 	beq	r2,zero,12650 <OSMemCreate+0x108>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
   12634:	008000b4 	movhi	r2,2
   12638:	10b40d04 	addi	r2,r2,-12236
   1263c:	10800017 	ldw	r2,0(r2)
   12640:	10c00117 	ldw	r3,4(r2)
   12644:	008000b4 	movhi	r2,2
   12648:	10b40d04 	addi	r2,r2,-12236
   1264c:	10c00015 	stw	r3,0(r2)
   12650:	e0bff817 	ldw	r2,-32(fp)
   12654:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12658:	e0bffb17 	ldw	r2,-20(fp)
   1265c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
   12660:	e0bff917 	ldw	r2,-28(fp)
   12664:	1000051e 	bne	r2,zero,1267c <OSMemCreate+0x134>
        *perr = OS_ERR_MEM_INVALID_PART;
   12668:	e0bfff17 	ldw	r2,-4(fp)
   1266c:	00c01684 	movi	r3,90
   12670:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   12674:	0005883a 	mov	r2,zero
   12678:	00002c06 	br	1272c <OSMemCreate+0x1e4>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
   1267c:	e0bffc17 	ldw	r2,-16(fp)
   12680:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
   12684:	e0fffc17 	ldw	r3,-16(fp)
   12688:	e0bffe17 	ldw	r2,-8(fp)
   1268c:	1885883a 	add	r2,r3,r2
   12690:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
   12694:	e03ff715 	stw	zero,-36(fp)
   12698:	00000c06 	br	126cc <OSMemCreate+0x184>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
   1269c:	e0bff617 	ldw	r2,-40(fp)
   126a0:	e0fff517 	ldw	r3,-44(fp)
   126a4:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
   126a8:	e0bff517 	ldw	r2,-44(fp)
   126ac:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
   126b0:	e0fff517 	ldw	r3,-44(fp)
   126b4:	e0bffe17 	ldw	r2,-8(fp)
   126b8:	1885883a 	add	r2,r3,r2
   126bc:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
   126c0:	e0bff717 	ldw	r2,-36(fp)
   126c4:	10800044 	addi	r2,r2,1
   126c8:	e0bff715 	stw	r2,-36(fp)
   126cc:	e0bffd17 	ldw	r2,-12(fp)
   126d0:	10bfffc4 	addi	r2,r2,-1
   126d4:	e0fff717 	ldw	r3,-36(fp)
   126d8:	18bff036 	bltu	r3,r2,1269c <OSMemCreate+0x154>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
   126dc:	e0bff617 	ldw	r2,-40(fp)
   126e0:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
   126e4:	e0bff917 	ldw	r2,-28(fp)
   126e8:	e0fffc17 	ldw	r3,-16(fp)
   126ec:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
   126f0:	e0bff917 	ldw	r2,-28(fp)
   126f4:	e0fffc17 	ldw	r3,-16(fp)
   126f8:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
   126fc:	e0bff917 	ldw	r2,-28(fp)
   12700:	e0fffd17 	ldw	r3,-12(fp)
   12704:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
   12708:	e0bff917 	ldw	r2,-28(fp)
   1270c:	e0fffd17 	ldw	r3,-12(fp)
   12710:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
   12714:	e0bff917 	ldw	r2,-28(fp)
   12718:	e0fffe17 	ldw	r3,-8(fp)
   1271c:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
   12720:	e0bfff17 	ldw	r2,-4(fp)
   12724:	10000005 	stb	zero,0(r2)
    return (pmem);
   12728:	e0bff917 	ldw	r2,-28(fp)
}
   1272c:	e037883a 	mov	sp,fp
   12730:	df000017 	ldw	fp,0(sp)
   12734:	dec00104 	addi	sp,sp,4
   12738:	f800283a 	ret

0001273c <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
   1273c:	defff804 	addi	sp,sp,-32
   12740:	df000715 	stw	fp,28(sp)
   12744:	df000704 	addi	fp,sp,28
   12748:	e13ffe15 	stw	r4,-8(fp)
   1274c:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   12750:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   12754:	e0bfff17 	ldw	r2,-4(fp)
   12758:	1000021e 	bne	r2,zero,12764 <OSMemGet+0x28>
        return ((void *)0);
   1275c:	0005883a 	mov	r2,zero
   12760:	00002e06 	br	1281c <OSMemGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
   12764:	e0bffe17 	ldw	r2,-8(fp)
   12768:	1000051e 	bne	r2,zero,12780 <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   1276c:	e0bfff17 	ldw	r2,-4(fp)
   12770:	00c01804 	movi	r3,96
   12774:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   12778:	0005883a 	mov	r2,zero
   1277c:	00002706 	br	1281c <OSMemGet+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12780:	0005303a 	rdctl	r2,status
   12784:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12788:	e0fffb17 	ldw	r3,-20(fp)
   1278c:	00bfff84 	movi	r2,-2
   12790:	1884703a 	and	r2,r3,r2
   12794:	1001703a 	wrctl	status,r2
  
  return context;
   12798:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   1279c:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
   127a0:	e0bffe17 	ldw	r2,-8(fp)
   127a4:	10800417 	ldw	r2,16(r2)
   127a8:	10001426 	beq	r2,zero,127fc <OSMemGet+0xc0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
   127ac:	e0bffe17 	ldw	r2,-8(fp)
   127b0:	10800117 	ldw	r2,4(r2)
   127b4:	e0bffa15 	stw	r2,-24(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
   127b8:	e0bffa17 	ldw	r2,-24(fp)
   127bc:	10c00017 	ldw	r3,0(r2)
   127c0:	e0bffe17 	ldw	r2,-8(fp)
   127c4:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
   127c8:	e0bffe17 	ldw	r2,-8(fp)
   127cc:	10800417 	ldw	r2,16(r2)
   127d0:	10ffffc4 	addi	r3,r2,-1
   127d4:	e0bffe17 	ldw	r2,-8(fp)
   127d8:	10c00415 	stw	r3,16(r2)
   127dc:	e0bff917 	ldw	r2,-28(fp)
   127e0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   127e4:	e0bffc17 	ldw	r2,-16(fp)
   127e8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
   127ec:	e0bfff17 	ldw	r2,-4(fp)
   127f0:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
   127f4:	e0bffa17 	ldw	r2,-24(fp)
   127f8:	00000806 	br	1281c <OSMemGet+0xe0>
   127fc:	e0bff917 	ldw	r2,-28(fp)
   12800:	e0bffd15 	stw	r2,-12(fp)
   12804:	e0bffd17 	ldw	r2,-12(fp)
   12808:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
   1280c:	e0bfff17 	ldw	r2,-4(fp)
   12810:	00c01744 	movi	r3,93
   12814:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
   12818:	0005883a 	mov	r2,zero
}
   1281c:	e037883a 	mov	sp,fp
   12820:	df000017 	ldw	fp,0(sp)
   12824:	dec00104 	addi	sp,sp,4
   12828:	f800283a 	ret

0001282c <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   1282c:	defff704 	addi	sp,sp,-36
   12830:	dfc00815 	stw	ra,32(sp)
   12834:	df000715 	stw	fp,28(sp)
   12838:	df000704 	addi	fp,sp,28
   1283c:	e13ffd15 	stw	r4,-12(fp)
   12840:	e17ffe15 	stw	r5,-8(fp)
   12844:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   12848:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   1284c:	e0bfff17 	ldw	r2,-4(fp)
   12850:	1000021e 	bne	r2,zero,1285c <OSMemNameGet+0x30>
        return (0);
   12854:	0005883a 	mov	r2,zero
   12858:	00002d06 	br	12910 <OSMemNameGet+0xe4>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   1285c:	e0bffd17 	ldw	r2,-12(fp)
   12860:	1000051e 	bne	r2,zero,12878 <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   12864:	e0bfff17 	ldw	r2,-4(fp)
   12868:	00c01804 	movi	r3,96
   1286c:	10c00005 	stb	r3,0(r2)
        return (0);
   12870:	0005883a 	mov	r2,zero
   12874:	00002606 	br	12910 <OSMemNameGet+0xe4>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   12878:	e0bffe17 	ldw	r2,-8(fp)
   1287c:	1000051e 	bne	r2,zero,12894 <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   12880:	e0bfff17 	ldw	r2,-4(fp)
   12884:	00c00304 	movi	r3,12
   12888:	10c00005 	stb	r3,0(r2)
        return (0);
   1288c:	0005883a 	mov	r2,zero
   12890:	00001f06 	br	12910 <OSMemNameGet+0xe4>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   12894:	008000b4 	movhi	r2,2
   12898:	10b41204 	addi	r2,r2,-12216
   1289c:	10800003 	ldbu	r2,0(r2)
   128a0:	10803fcc 	andi	r2,r2,255
   128a4:	10000526 	beq	r2,zero,128bc <OSMemNameGet+0x90>
        *perr = OS_ERR_NAME_GET_ISR;
   128a8:	e0bfff17 	ldw	r2,-4(fp)
   128ac:	00c00444 	movi	r3,17
   128b0:	10c00005 	stb	r3,0(r2)
        return (0);
   128b4:	0005883a 	mov	r2,zero
   128b8:	00001506 	br	12910 <OSMemNameGet+0xe4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   128bc:	0005303a 	rdctl	r2,status
   128c0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   128c4:	e0fffb17 	ldw	r3,-20(fp)
   128c8:	00bfff84 	movi	r2,-2
   128cc:	1884703a 	and	r2,r3,r2
   128d0:	1001703a 	wrctl	status,r2
  
  return context;
   128d4:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   128d8:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
   128dc:	e0bffd17 	ldw	r2,-12(fp)
   128e0:	10800504 	addi	r2,r2,20
   128e4:	e13ffe17 	ldw	r4,-8(fp)
   128e8:	100b883a 	mov	r5,r2
   128ec:	00106140 	call	10614 <OS_StrCopy>
   128f0:	e0bffa05 	stb	r2,-24(fp)
   128f4:	e0bff917 	ldw	r2,-28(fp)
   128f8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   128fc:	e0bffc17 	ldw	r2,-16(fp)
   12900:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   12904:	e0bfff17 	ldw	r2,-4(fp)
   12908:	10000005 	stb	zero,0(r2)
    return (len);
   1290c:	e0bffa03 	ldbu	r2,-24(fp)
}
   12910:	e037883a 	mov	sp,fp
   12914:	dfc00117 	ldw	ra,4(sp)
   12918:	df000017 	ldw	fp,0(sp)
   1291c:	dec00204 	addi	sp,sp,8
   12920:	f800283a 	ret

00012924 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   12924:	defff604 	addi	sp,sp,-40
   12928:	dfc00915 	stw	ra,36(sp)
   1292c:	df000815 	stw	fp,32(sp)
   12930:	df000804 	addi	fp,sp,32
   12934:	e13ffd15 	stw	r4,-12(fp)
   12938:	e17ffe15 	stw	r5,-8(fp)
   1293c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   12940:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   12944:	e0bfff17 	ldw	r2,-4(fp)
   12948:	1000011e 	bne	r2,zero,12950 <OSMemNameSet+0x2c>
        return;
   1294c:	00003606 	br	12a28 <OSMemNameSet+0x104>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   12950:	e0bffd17 	ldw	r2,-12(fp)
   12954:	1000041e 	bne	r2,zero,12968 <OSMemNameSet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   12958:	e0bfff17 	ldw	r2,-4(fp)
   1295c:	00c01804 	movi	r3,96
   12960:	10c00005 	stb	r3,0(r2)
        return;
   12964:	00003006 	br	12a28 <OSMemNameSet+0x104>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   12968:	e0bffe17 	ldw	r2,-8(fp)
   1296c:	1000041e 	bne	r2,zero,12980 <OSMemNameSet+0x5c>
        *perr = OS_ERR_PNAME_NULL;
   12970:	e0bfff17 	ldw	r2,-4(fp)
   12974:	00c00304 	movi	r3,12
   12978:	10c00005 	stb	r3,0(r2)
        return;
   1297c:	00002a06 	br	12a28 <OSMemNameSet+0x104>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   12980:	008000b4 	movhi	r2,2
   12984:	10b41204 	addi	r2,r2,-12216
   12988:	10800003 	ldbu	r2,0(r2)
   1298c:	10803fcc 	andi	r2,r2,255
   12990:	10000426 	beq	r2,zero,129a4 <OSMemNameSet+0x80>
        *perr = OS_ERR_NAME_SET_ISR;
   12994:	e0bfff17 	ldw	r2,-4(fp)
   12998:	00c00484 	movi	r3,18
   1299c:	10c00005 	stb	r3,0(r2)
        return;
   129a0:	00002106 	br	12a28 <OSMemNameSet+0x104>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   129a4:	0005303a 	rdctl	r2,status
   129a8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   129ac:	e0fffa17 	ldw	r3,-24(fp)
   129b0:	00bfff84 	movi	r2,-2
   129b4:	1884703a 	and	r2,r3,r2
   129b8:	1001703a 	wrctl	status,r2
  
  return context;
   129bc:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   129c0:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   129c4:	e13ffe17 	ldw	r4,-8(fp)
   129c8:	00106880 	call	10688 <OS_StrLen>
   129cc:	e0bff905 	stb	r2,-28(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
   129d0:	e0bff903 	ldbu	r2,-28(fp)
   129d4:	10800830 	cmpltui	r2,r2,32
   129d8:	1000081e 	bne	r2,zero,129fc <OSMemNameSet+0xd8>
   129dc:	e0bff817 	ldw	r2,-32(fp)
   129e0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   129e4:	e0bffb17 	ldw	r2,-20(fp)
   129e8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
   129ec:	e0bfff17 	ldw	r2,-4(fp)
   129f0:	00c018c4 	movi	r3,99
   129f4:	10c00005 	stb	r3,0(r2)
        return;
   129f8:	00000b06 	br	12a28 <OSMemNameSet+0x104>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
   129fc:	e0bffd17 	ldw	r2,-12(fp)
   12a00:	10800504 	addi	r2,r2,20
   12a04:	1009883a 	mov	r4,r2
   12a08:	e17ffe17 	ldw	r5,-8(fp)
   12a0c:	00106140 	call	10614 <OS_StrCopy>
   12a10:	e0bff817 	ldw	r2,-32(fp)
   12a14:	e0bffc15 	stw	r2,-16(fp)
   12a18:	e0bffc17 	ldw	r2,-16(fp)
   12a1c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   12a20:	e0bfff17 	ldw	r2,-4(fp)
   12a24:	10000005 	stb	zero,0(r2)
}
   12a28:	e037883a 	mov	sp,fp
   12a2c:	dfc00117 	ldw	ra,4(sp)
   12a30:	df000017 	ldw	fp,0(sp)
   12a34:	dec00204 	addi	sp,sp,8
   12a38:	f800283a 	ret

00012a3c <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
   12a3c:	defff904 	addi	sp,sp,-28
   12a40:	df000615 	stw	fp,24(sp)
   12a44:	df000604 	addi	fp,sp,24
   12a48:	e13ffe15 	stw	r4,-8(fp)
   12a4c:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   12a50:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   12a54:	e0bffe17 	ldw	r2,-8(fp)
   12a58:	1000021e 	bne	r2,zero,12a64 <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   12a5c:	00801804 	movi	r2,96
   12a60:	00002806 	br	12b04 <OSMemPut+0xc8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
   12a64:	e0bfff17 	ldw	r2,-4(fp)
   12a68:	1000021e 	bne	r2,zero,12a74 <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
   12a6c:	008017c4 	movi	r2,95
   12a70:	00002406 	br	12b04 <OSMemPut+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12a74:	0005303a 	rdctl	r2,status
   12a78:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12a7c:	e0fffb17 	ldw	r3,-20(fp)
   12a80:	00bfff84 	movi	r2,-2
   12a84:	1884703a 	and	r2,r3,r2
   12a88:	1001703a 	wrctl	status,r2
  
  return context;
   12a8c:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   12a90:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
   12a94:	e0bffe17 	ldw	r2,-8(fp)
   12a98:	10c00417 	ldw	r3,16(r2)
   12a9c:	e0bffe17 	ldw	r2,-8(fp)
   12aa0:	10800317 	ldw	r2,12(r2)
   12aa4:	18800636 	bltu	r3,r2,12ac0 <OSMemPut+0x84>
   12aa8:	e0bffa17 	ldw	r2,-24(fp)
   12aac:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12ab0:	e0bffc17 	ldw	r2,-16(fp)
   12ab4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
   12ab8:	00801784 	movi	r2,94
   12abc:	00001106 	br	12b04 <OSMemPut+0xc8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
   12ac0:	e0bffe17 	ldw	r2,-8(fp)
   12ac4:	10c00117 	ldw	r3,4(r2)
   12ac8:	e0bfff17 	ldw	r2,-4(fp)
   12acc:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
   12ad0:	e0bffe17 	ldw	r2,-8(fp)
   12ad4:	e0ffff17 	ldw	r3,-4(fp)
   12ad8:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
   12adc:	e0bffe17 	ldw	r2,-8(fp)
   12ae0:	10800417 	ldw	r2,16(r2)
   12ae4:	10c00044 	addi	r3,r2,1
   12ae8:	e0bffe17 	ldw	r2,-8(fp)
   12aec:	10c00415 	stw	r3,16(r2)
   12af0:	e0bffa17 	ldw	r2,-24(fp)
   12af4:	e0bffd15 	stw	r2,-12(fp)
   12af8:	e0bffd17 	ldw	r2,-12(fp)
   12afc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
   12b00:	0005883a 	mov	r2,zero
}
   12b04:	e037883a 	mov	sp,fp
   12b08:	df000017 	ldw	fp,0(sp)
   12b0c:	dec00104 	addi	sp,sp,4
   12b10:	f800283a 	ret

00012b14 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
   12b14:	defffa04 	addi	sp,sp,-24
   12b18:	df000515 	stw	fp,20(sp)
   12b1c:	df000504 	addi	fp,sp,20
   12b20:	e13ffe15 	stw	r4,-8(fp)
   12b24:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   12b28:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   12b2c:	e0bffe17 	ldw	r2,-8(fp)
   12b30:	1000021e 	bne	r2,zero,12b3c <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   12b34:	00801804 	movi	r2,96
   12b38:	00002c06 	br	12bec <OSMemQuery+0xd8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
   12b3c:	e0bfff17 	ldw	r2,-4(fp)
   12b40:	1000021e 	bne	r2,zero,12b4c <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
   12b44:	00801844 	movi	r2,97
   12b48:	00002806 	br	12bec <OSMemQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12b4c:	0005303a 	rdctl	r2,status
   12b50:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12b54:	e0fffc17 	ldw	r3,-16(fp)
   12b58:	00bfff84 	movi	r2,-2
   12b5c:	1884703a 	and	r2,r3,r2
   12b60:	1001703a 	wrctl	status,r2
  
  return context;
   12b64:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   12b68:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
   12b6c:	e0bffe17 	ldw	r2,-8(fp)
   12b70:	10c00017 	ldw	r3,0(r2)
   12b74:	e0bfff17 	ldw	r2,-4(fp)
   12b78:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
   12b7c:	e0bffe17 	ldw	r2,-8(fp)
   12b80:	10c00117 	ldw	r3,4(r2)
   12b84:	e0bfff17 	ldw	r2,-4(fp)
   12b88:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
   12b8c:	e0bffe17 	ldw	r2,-8(fp)
   12b90:	10c00217 	ldw	r3,8(r2)
   12b94:	e0bfff17 	ldw	r2,-4(fp)
   12b98:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
   12b9c:	e0bffe17 	ldw	r2,-8(fp)
   12ba0:	10c00317 	ldw	r3,12(r2)
   12ba4:	e0bfff17 	ldw	r2,-4(fp)
   12ba8:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
   12bac:	e0bffe17 	ldw	r2,-8(fp)
   12bb0:	10c00417 	ldw	r3,16(r2)
   12bb4:	e0bfff17 	ldw	r2,-4(fp)
   12bb8:	10c00415 	stw	r3,16(r2)
   12bbc:	e0bffb17 	ldw	r2,-20(fp)
   12bc0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12bc4:	e0bffd17 	ldw	r2,-12(fp)
   12bc8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
   12bcc:	e0bfff17 	ldw	r2,-4(fp)
   12bd0:	10c00317 	ldw	r3,12(r2)
   12bd4:	e0bfff17 	ldw	r2,-4(fp)
   12bd8:	10800417 	ldw	r2,16(r2)
   12bdc:	1887c83a 	sub	r3,r3,r2
   12be0:	e0bfff17 	ldw	r2,-4(fp)
   12be4:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
   12be8:	0005883a 	mov	r2,zero
}
   12bec:	e037883a 	mov	sp,fp
   12bf0:	df000017 	ldw	fp,0(sp)
   12bf4:	dec00104 	addi	sp,sp,4
   12bf8:	f800283a 	ret

00012bfc <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
   12bfc:	defffc04 	addi	sp,sp,-16
   12c00:	dfc00315 	stw	ra,12(sp)
   12c04:	df000215 	stw	fp,8(sp)
   12c08:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
   12c0c:	010000b4 	movhi	r4,2
   12c10:	210d4004 	addi	r4,r4,13568
   12c14:	01430c04 	movi	r5,3120
   12c18:	00104240 	call	10424 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
   12c1c:	008000b4 	movhi	r2,2
   12c20:	108d4004 	addi	r2,r2,13568
   12c24:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   12c28:	e03fff0d 	sth	zero,-4(fp)
   12c2c:	00001606 	br	12c88 <OS_MemInit+0x8c>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
   12c30:	e0bfff0b 	ldhu	r2,-4(fp)
   12c34:	10800044 	addi	r2,r2,1
   12c38:	1009883a 	mov	r4,r2
   12c3c:	01400d04 	movi	r5,52
   12c40:	000129c0 	call	129c <__mulsi3>
   12c44:	1007883a 	mov	r3,r2
   12c48:	008000b4 	movhi	r2,2
   12c4c:	108d4004 	addi	r2,r2,13568
   12c50:	1887883a 	add	r3,r3,r2
   12c54:	e0bffe17 	ldw	r2,-8(fp)
   12c58:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
   12c5c:	e0bffe17 	ldw	r2,-8(fp)
   12c60:	00c00fc4 	movi	r3,63
   12c64:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
   12c68:	e0bffe17 	ldw	r2,-8(fp)
   12c6c:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
   12c70:	e0bffe17 	ldw	r2,-8(fp)
   12c74:	10800d04 	addi	r2,r2,52
   12c78:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   12c7c:	e0bfff0b 	ldhu	r2,-4(fp)
   12c80:	10800044 	addi	r2,r2,1
   12c84:	e0bfff0d 	sth	r2,-4(fp)
   12c88:	e0bfff0b 	ldhu	r2,-4(fp)
   12c8c:	10800ef0 	cmpltui	r2,r2,59
   12c90:	103fe71e 	bne	r2,zero,12c30 <OS_MemInit+0x34>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
   12c94:	e0bffe17 	ldw	r2,-8(fp)
   12c98:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
   12c9c:	e0bffe17 	ldw	r2,-8(fp)
   12ca0:	00c00fc4 	movi	r3,63
   12ca4:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
   12ca8:	e0bffe17 	ldw	r2,-8(fp)
   12cac:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
   12cb0:	008000b4 	movhi	r2,2
   12cb4:	10b40d04 	addi	r2,r2,-12236
   12cb8:	00c000b4 	movhi	r3,2
   12cbc:	18cd4004 	addi	r3,r3,13568
   12cc0:	10c00015 	stw	r3,0(r2)
#endif
}
   12cc4:	e037883a 	mov	sp,fp
   12cc8:	dfc00117 	ldw	ra,4(sp)
   12ccc:	df000017 	ldw	fp,0(sp)
   12cd0:	dec00204 	addi	sp,sp,8
   12cd4:	f800283a 	ret

00012cd8 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
   12cd8:	defff804 	addi	sp,sp,-32
   12cdc:	df000715 	stw	fp,28(sp)
   12ce0:	df000704 	addi	fp,sp,28
   12ce4:	e13ffe15 	stw	r4,-8(fp)
   12ce8:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   12cec:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   12cf0:	e0bfff17 	ldw	r2,-4(fp)
   12cf4:	1000021e 	bne	r2,zero,12d00 <OSQAccept+0x28>
        return ((void *)0);
   12cf8:	0005883a 	mov	r2,zero
   12cfc:	00004206 	br	12e08 <OSQAccept+0x130>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   12d00:	e0bffe17 	ldw	r2,-8(fp)
   12d04:	1000051e 	bne	r2,zero,12d1c <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   12d08:	e0bfff17 	ldw	r2,-4(fp)
   12d0c:	00c00104 	movi	r3,4
   12d10:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   12d14:	0005883a 	mov	r2,zero
   12d18:	00003b06 	br	12e08 <OSQAccept+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   12d1c:	e0bffe17 	ldw	r2,-8(fp)
   12d20:	10800003 	ldbu	r2,0(r2)
   12d24:	10803fcc 	andi	r2,r2,255
   12d28:	108000a0 	cmpeqi	r2,r2,2
   12d2c:	1000051e 	bne	r2,zero,12d44 <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   12d30:	e0bfff17 	ldw	r2,-4(fp)
   12d34:	00c00044 	movi	r3,1
   12d38:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   12d3c:	0005883a 	mov	r2,zero
   12d40:	00003106 	br	12e08 <OSQAccept+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12d44:	0005303a 	rdctl	r2,status
   12d48:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12d4c:	e0fffc17 	ldw	r3,-16(fp)
   12d50:	00bfff84 	movi	r2,-2
   12d54:	1884703a 	and	r2,r3,r2
   12d58:	1001703a 	wrctl	status,r2
  
  return context;
   12d5c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   12d60:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   12d64:	e0bffe17 	ldw	r2,-8(fp)
   12d68:	10800117 	ldw	r2,4(r2)
   12d6c:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   12d70:	e0bffb17 	ldw	r2,-20(fp)
   12d74:	1080058b 	ldhu	r2,22(r2)
   12d78:	10bfffcc 	andi	r2,r2,65535
   12d7c:	10001926 	beq	r2,zero,12de4 <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   12d80:	e0bffb17 	ldw	r2,-20(fp)
   12d84:	10800417 	ldw	r2,16(r2)
   12d88:	11000104 	addi	r4,r2,4
   12d8c:	e0fffb17 	ldw	r3,-20(fp)
   12d90:	19000415 	stw	r4,16(r3)
   12d94:	10800017 	ldw	r2,0(r2)
   12d98:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   12d9c:	e0bffb17 	ldw	r2,-20(fp)
   12da0:	1080058b 	ldhu	r2,22(r2)
   12da4:	10bfffc4 	addi	r2,r2,-1
   12da8:	1007883a 	mov	r3,r2
   12dac:	e0bffb17 	ldw	r2,-20(fp)
   12db0:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   12db4:	e0bffb17 	ldw	r2,-20(fp)
   12db8:	10c00417 	ldw	r3,16(r2)
   12dbc:	e0bffb17 	ldw	r2,-20(fp)
   12dc0:	10800217 	ldw	r2,8(r2)
   12dc4:	1880041e 	bne	r3,r2,12dd8 <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
   12dc8:	e0bffb17 	ldw	r2,-20(fp)
   12dcc:	10c00117 	ldw	r3,4(r2)
   12dd0:	e0bffb17 	ldw	r2,-20(fp)
   12dd4:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
   12dd8:	e0bfff17 	ldw	r2,-4(fp)
   12ddc:	10000005 	stb	zero,0(r2)
   12de0:	00000406 	br	12df4 <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
   12de4:	e0bfff17 	ldw	r2,-4(fp)
   12de8:	00c007c4 	movi	r3,31
   12dec:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
   12df0:	e03ff915 	stw	zero,-28(fp)
   12df4:	e0bffa17 	ldw	r2,-24(fp)
   12df8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12dfc:	e0bffd17 	ldw	r2,-12(fp)
   12e00:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
   12e04:	e0bff917 	ldw	r2,-28(fp)
}
   12e08:	e037883a 	mov	sp,fp
   12e0c:	df000017 	ldw	fp,0(sp)
   12e10:	dec00104 	addi	sp,sp,4
   12e14:	f800283a 	ret

00012e18 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
   12e18:	defff404 	addi	sp,sp,-48
   12e1c:	dfc00b15 	stw	ra,44(sp)
   12e20:	df000a15 	stw	fp,40(sp)
   12e24:	df000a04 	addi	fp,sp,40
   12e28:	e13ffe15 	stw	r4,-8(fp)
   12e2c:	2805883a 	mov	r2,r5
   12e30:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   12e34:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   12e38:	008000b4 	movhi	r2,2
   12e3c:	10b41204 	addi	r2,r2,-12216
   12e40:	10800003 	ldbu	r2,0(r2)
   12e44:	10803fcc 	andi	r2,r2,255
   12e48:	10000226 	beq	r2,zero,12e54 <OSQCreate+0x3c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
   12e4c:	0005883a 	mov	r2,zero
   12e50:	00006b06 	br	13000 <OSQCreate+0x1e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12e54:	0005303a 	rdctl	r2,status
   12e58:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12e5c:	e0fff917 	ldw	r3,-28(fp)
   12e60:	00bfff84 	movi	r2,-2
   12e64:	1884703a 	and	r2,r3,r2
   12e68:	1001703a 	wrctl	status,r2
  
  return context;
   12e6c:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   12e70:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
   12e74:	008000b4 	movhi	r2,2
   12e78:	10b41104 	addi	r2,r2,-12220
   12e7c:	10800017 	ldw	r2,0(r2)
   12e80:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
   12e84:	008000b4 	movhi	r2,2
   12e88:	10b41104 	addi	r2,r2,-12220
   12e8c:	10800017 	ldw	r2,0(r2)
   12e90:	10000726 	beq	r2,zero,12eb0 <OSQCreate+0x98>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   12e94:	008000b4 	movhi	r2,2
   12e98:	10b41104 	addi	r2,r2,-12220
   12e9c:	10800017 	ldw	r2,0(r2)
   12ea0:	10c00117 	ldw	r3,4(r2)
   12ea4:	008000b4 	movhi	r2,2
   12ea8:	10b41104 	addi	r2,r2,-12220
   12eac:	10c00015 	stw	r3,0(r2)
   12eb0:	e0bff717 	ldw	r2,-36(fp)
   12eb4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12eb8:	e0bffa17 	ldw	r2,-24(fp)
   12ebc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
   12ec0:	e0bff617 	ldw	r2,-40(fp)
   12ec4:	10004d26 	beq	r2,zero,12ffc <OSQCreate+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12ec8:	0005303a 	rdctl	r2,status
   12ecc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12ed0:	e0fffb17 	ldw	r3,-20(fp)
   12ed4:	00bfff84 	movi	r2,-2
   12ed8:	1884703a 	and	r2,r3,r2
   12edc:	1001703a 	wrctl	status,r2
  
  return context;
   12ee0:	e0bffb17 	ldw	r2,-20(fp)
        OS_ENTER_CRITICAL();
   12ee4:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
   12ee8:	008000b4 	movhi	r2,2
   12eec:	10b40f04 	addi	r2,r2,-12228
   12ef0:	10800017 	ldw	r2,0(r2)
   12ef4:	e0bff815 	stw	r2,-32(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
   12ef8:	e0bff817 	ldw	r2,-32(fp)
   12efc:	10003126 	beq	r2,zero,12fc4 <OSQCreate+0x1ac>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
   12f00:	008000b4 	movhi	r2,2
   12f04:	10b40f04 	addi	r2,r2,-12228
   12f08:	10800017 	ldw	r2,0(r2)
   12f0c:	10c00017 	ldw	r3,0(r2)
   12f10:	008000b4 	movhi	r2,2
   12f14:	10b40f04 	addi	r2,r2,-12228
   12f18:	10c00015 	stw	r3,0(r2)
   12f1c:	e0bff717 	ldw	r2,-36(fp)
   12f20:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12f24:	e0bffc17 	ldw	r2,-16(fp)
   12f28:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
   12f2c:	e0bff817 	ldw	r2,-32(fp)
   12f30:	e0fffe17 	ldw	r3,-8(fp)
   12f34:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
   12f38:	e0bfff0b 	ldhu	r2,-4(fp)
   12f3c:	1085883a 	add	r2,r2,r2
   12f40:	1085883a 	add	r2,r2,r2
   12f44:	1007883a 	mov	r3,r2
   12f48:	e0bffe17 	ldw	r2,-8(fp)
   12f4c:	10c7883a 	add	r3,r2,r3
   12f50:	e0bff817 	ldw	r2,-32(fp)
   12f54:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
   12f58:	e0bff817 	ldw	r2,-32(fp)
   12f5c:	e0fffe17 	ldw	r3,-8(fp)
   12f60:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
   12f64:	e0bff817 	ldw	r2,-32(fp)
   12f68:	e0fffe17 	ldw	r3,-8(fp)
   12f6c:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
   12f70:	e0bff817 	ldw	r2,-32(fp)
   12f74:	e0ffff0b 	ldhu	r3,-4(fp)
   12f78:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
   12f7c:	e0bff817 	ldw	r2,-32(fp)
   12f80:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
   12f84:	e0bff617 	ldw	r2,-40(fp)
   12f88:	00c00084 	movi	r3,2
   12f8c:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
   12f90:	e0bff617 	ldw	r2,-40(fp)
   12f94:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
   12f98:	e0bff617 	ldw	r2,-40(fp)
   12f9c:	e0fff817 	ldw	r3,-32(fp)
   12fa0:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
   12fa4:	e0bff617 	ldw	r2,-40(fp)
   12fa8:	00c00fc4 	movi	r3,63
   12fac:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
   12fb0:	e0bff617 	ldw	r2,-40(fp)
   12fb4:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
   12fb8:	e13ff617 	ldw	r4,-40(fp)
   12fbc:	00100600 	call	10060 <OS_EventWaitListInit>
   12fc0:	00000e06 	br	12ffc <OSQCreate+0x1e4>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
   12fc4:	008000b4 	movhi	r2,2
   12fc8:	10b41104 	addi	r2,r2,-12220
   12fcc:	10c00017 	ldw	r3,0(r2)
   12fd0:	e0bff617 	ldw	r2,-40(fp)
   12fd4:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
   12fd8:	008000b4 	movhi	r2,2
   12fdc:	10b41104 	addi	r2,r2,-12220
   12fe0:	e0fff617 	ldw	r3,-40(fp)
   12fe4:	10c00015 	stw	r3,0(r2)
   12fe8:	e0bff717 	ldw	r2,-36(fp)
   12fec:	e0bffd15 	stw	r2,-12(fp)
   12ff0:	e0bffd17 	ldw	r2,-12(fp)
   12ff4:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
   12ff8:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
   12ffc:	e0bff617 	ldw	r2,-40(fp)
}
   13000:	e037883a 	mov	sp,fp
   13004:	dfc00117 	ldw	ra,4(sp)
   13008:	df000017 	ldw	fp,0(sp)
   1300c:	dec00204 	addi	sp,sp,8
   13010:	f800283a 	ret

00013014 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   13014:	defff204 	addi	sp,sp,-56
   13018:	dfc00d15 	stw	ra,52(sp)
   1301c:	df000c15 	stw	fp,48(sp)
   13020:	df000c04 	addi	fp,sp,48
   13024:	e13ffd15 	stw	r4,-12(fp)
   13028:	2805883a 	mov	r2,r5
   1302c:	e1bfff15 	stw	r6,-4(fp)
   13030:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   13034:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   13038:	e0bfff17 	ldw	r2,-4(fp)
   1303c:	1000021e 	bne	r2,zero,13048 <OSQDel+0x34>
        return (pevent);
   13040:	e0bffd17 	ldw	r2,-12(fp)
   13044:	0000a006 	br	132c8 <OSQDel+0x2b4>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   13048:	e0bffd17 	ldw	r2,-12(fp)
   1304c:	1000051e 	bne	r2,zero,13064 <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   13050:	e0bfff17 	ldw	r2,-4(fp)
   13054:	00c00104 	movi	r3,4
   13058:	10c00005 	stb	r3,0(r2)
        return (pevent);
   1305c:	e0bffd17 	ldw	r2,-12(fp)
   13060:	00009906 	br	132c8 <OSQDel+0x2b4>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   13064:	e0bffd17 	ldw	r2,-12(fp)
   13068:	10800003 	ldbu	r2,0(r2)
   1306c:	10803fcc 	andi	r2,r2,255
   13070:	108000a0 	cmpeqi	r2,r2,2
   13074:	1000051e 	bne	r2,zero,1308c <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   13078:	e0bfff17 	ldw	r2,-4(fp)
   1307c:	00c00044 	movi	r3,1
   13080:	10c00005 	stb	r3,0(r2)
        return (pevent);
   13084:	e0bffd17 	ldw	r2,-12(fp)
   13088:	00008f06 	br	132c8 <OSQDel+0x2b4>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   1308c:	008000b4 	movhi	r2,2
   13090:	10b41204 	addi	r2,r2,-12216
   13094:	10800003 	ldbu	r2,0(r2)
   13098:	10803fcc 	andi	r2,r2,255
   1309c:	10000526 	beq	r2,zero,130b4 <OSQDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   130a0:	e0bfff17 	ldw	r2,-4(fp)
   130a4:	00c003c4 	movi	r3,15
   130a8:	10c00005 	stb	r3,0(r2)
        return (pevent);
   130ac:	e0bffd17 	ldw	r2,-12(fp)
   130b0:	00008506 	br	132c8 <OSQDel+0x2b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   130b4:	0005303a 	rdctl	r2,status
   130b8:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   130bc:	e0fff817 	ldw	r3,-32(fp)
   130c0:	00bfff84 	movi	r2,-2
   130c4:	1884703a 	and	r2,r3,r2
   130c8:	1001703a 	wrctl	status,r2
  
  return context;
   130cc:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   130d0:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
   130d4:	e0bffd17 	ldw	r2,-12(fp)
   130d8:	10800283 	ldbu	r2,10(r2)
   130dc:	10803fcc 	andi	r2,r2,255
   130e0:	10000326 	beq	r2,zero,130f0 <OSQDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   130e4:	00800044 	movi	r2,1
   130e8:	e0bff405 	stb	r2,-48(fp)
   130ec:	00000106 	br	130f4 <OSQDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   130f0:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   130f4:	e0bffe03 	ldbu	r2,-8(fp)
   130f8:	10000326 	beq	r2,zero,13108 <OSQDel+0xf4>
   130fc:	10800060 	cmpeqi	r2,r2,1
   13100:	1000381e 	bne	r2,zero,131e4 <OSQDel+0x1d0>
   13104:	00006506 	br	1329c <OSQDel+0x288>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
   13108:	e0bff403 	ldbu	r2,-48(fp)
   1310c:	1000261e 	bne	r2,zero,131a8 <OSQDel+0x194>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   13110:	e0bffd17 	ldw	r2,-12(fp)
   13114:	00c00fc4 	movi	r3,63
   13118:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   1311c:	e0bffd17 	ldw	r2,-12(fp)
   13120:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
   13124:	e0bffd17 	ldw	r2,-12(fp)
   13128:	10800117 	ldw	r2,4(r2)
   1312c:	e0bff715 	stw	r2,-36(fp)
                 pq->OSQPtr             = OSQFreeList;
   13130:	008000b4 	movhi	r2,2
   13134:	10b40f04 	addi	r2,r2,-12228
   13138:	10c00017 	ldw	r3,0(r2)
   1313c:	e0bff717 	ldw	r2,-36(fp)
   13140:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
   13144:	008000b4 	movhi	r2,2
   13148:	10b40f04 	addi	r2,r2,-12228
   1314c:	e0fff717 	ldw	r3,-36(fp)
   13150:	10c00015 	stw	r3,0(r2)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   13154:	e0bffd17 	ldw	r2,-12(fp)
   13158:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   1315c:	008000b4 	movhi	r2,2
   13160:	10b41104 	addi	r2,r2,-12220
   13164:	10c00017 	ldw	r3,0(r2)
   13168:	e0bffd17 	ldw	r2,-12(fp)
   1316c:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   13170:	e0bffd17 	ldw	r2,-12(fp)
   13174:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   13178:	008000b4 	movhi	r2,2
   1317c:	10b41104 	addi	r2,r2,-12220
   13180:	e0fffd17 	ldw	r3,-12(fp)
   13184:	10c00015 	stw	r3,0(r2)
   13188:	e0bff617 	ldw	r2,-40(fp)
   1318c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13190:	e0bff917 	ldw	r2,-28(fp)
   13194:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   13198:	e0bfff17 	ldw	r2,-4(fp)
   1319c:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
   131a0:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   131a4:	00004706 	br	132c4 <OSQDel+0x2b0>
   131a8:	e0bff617 	ldw	r2,-40(fp)
   131ac:	e0bffa15 	stw	r2,-24(fp)
   131b0:	e0bffa17 	ldw	r2,-24(fp)
   131b4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   131b8:	e0bfff17 	ldw	r2,-4(fp)
   131bc:	00c01244 	movi	r3,73
   131c0:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   131c4:	e0bffd17 	ldw	r2,-12(fp)
   131c8:	e0bff515 	stw	r2,-44(fp)
             }
             break;
   131cc:	00003d06 	br	132c4 <OSQDel+0x2b0>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
   131d0:	e13ffd17 	ldw	r4,-12(fp)
   131d4:	000b883a 	mov	r5,zero
   131d8:	01800104 	movi	r6,4
   131dc:	000f883a 	mov	r7,zero
   131e0:	000fac00 	call	fac0 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
   131e4:	e0bffd17 	ldw	r2,-12(fp)
   131e8:	10800283 	ldbu	r2,10(r2)
   131ec:	10803fcc 	andi	r2,r2,255
   131f0:	103ff71e 	bne	r2,zero,131d0 <OSQDel+0x1bc>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   131f4:	e0bffd17 	ldw	r2,-12(fp)
   131f8:	00c00fc4 	movi	r3,63
   131fc:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   13200:	e0bffd17 	ldw	r2,-12(fp)
   13204:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
   13208:	e0bffd17 	ldw	r2,-12(fp)
   1320c:	10800117 	ldw	r2,4(r2)
   13210:	e0bff715 	stw	r2,-36(fp)
             pq->OSQPtr             = OSQFreeList;
   13214:	008000b4 	movhi	r2,2
   13218:	10b40f04 	addi	r2,r2,-12228
   1321c:	10c00017 	ldw	r3,0(r2)
   13220:	e0bff717 	ldw	r2,-36(fp)
   13224:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
   13228:	008000b4 	movhi	r2,2
   1322c:	10b40f04 	addi	r2,r2,-12228
   13230:	e0fff717 	ldw	r3,-36(fp)
   13234:	10c00015 	stw	r3,0(r2)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   13238:	e0bffd17 	ldw	r2,-12(fp)
   1323c:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   13240:	008000b4 	movhi	r2,2
   13244:	10b41104 	addi	r2,r2,-12220
   13248:	10c00017 	ldw	r3,0(r2)
   1324c:	e0bffd17 	ldw	r2,-12(fp)
   13250:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   13254:	e0bffd17 	ldw	r2,-12(fp)
   13258:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   1325c:	008000b4 	movhi	r2,2
   13260:	10b41104 	addi	r2,r2,-12220
   13264:	e0fffd17 	ldw	r3,-12(fp)
   13268:	10c00015 	stw	r3,0(r2)
   1326c:	e0bff617 	ldw	r2,-40(fp)
   13270:	e0bffb15 	stw	r2,-20(fp)
   13274:	e0bffb17 	ldw	r2,-20(fp)
   13278:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   1327c:	e0bff403 	ldbu	r2,-48(fp)
   13280:	10800058 	cmpnei	r2,r2,1
   13284:	1000011e 	bne	r2,zero,1328c <OSQDel+0x278>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   13288:	00104d80 	call	104d8 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   1328c:	e0bfff17 	ldw	r2,-4(fp)
   13290:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
   13294:	e03ff515 	stw	zero,-44(fp)
             break;
   13298:	00000a06 	br	132c4 <OSQDel+0x2b0>
   1329c:	e0bff617 	ldw	r2,-40(fp)
   132a0:	e0bffc15 	stw	r2,-16(fp)
   132a4:	e0bffc17 	ldw	r2,-16(fp)
   132a8:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   132ac:	e0bfff17 	ldw	r2,-4(fp)
   132b0:	00c001c4 	movi	r3,7
   132b4:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   132b8:	e0bffd17 	ldw	r2,-12(fp)
   132bc:	e0bff515 	stw	r2,-44(fp)
             break;
   132c0:	0001883a 	nop
    }
    return (pevent_return);
   132c4:	e0bff517 	ldw	r2,-44(fp)
}
   132c8:	e037883a 	mov	sp,fp
   132cc:	dfc00117 	ldw	ra,4(sp)
   132d0:	df000017 	ldw	fp,0(sp)
   132d4:	dec00204 	addi	sp,sp,8
   132d8:	f800283a 	ret

000132dc <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
   132dc:	defffa04 	addi	sp,sp,-24
   132e0:	df000515 	stw	fp,20(sp)
   132e4:	df000504 	addi	fp,sp,20
   132e8:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   132ec:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   132f0:	e0bfff17 	ldw	r2,-4(fp)
   132f4:	1000021e 	bne	r2,zero,13300 <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
   132f8:	00800104 	movi	r2,4
   132fc:	00002106 	br	13384 <OSQFlush+0xa8>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   13300:	e0bfff17 	ldw	r2,-4(fp)
   13304:	10800003 	ldbu	r2,0(r2)
   13308:	10803fcc 	andi	r2,r2,255
   1330c:	108000a0 	cmpeqi	r2,r2,2
   13310:	1000021e 	bne	r2,zero,1331c <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
   13314:	00800044 	movi	r2,1
   13318:	00001a06 	br	13384 <OSQFlush+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1331c:	0005303a 	rdctl	r2,status
   13320:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13324:	e0fffd17 	ldw	r3,-12(fp)
   13328:	00bfff84 	movi	r2,-2
   1332c:	1884703a 	and	r2,r3,r2
   13330:	1001703a 	wrctl	status,r2
  
  return context;
   13334:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   13338:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
   1333c:	e0bfff17 	ldw	r2,-4(fp)
   13340:	10800117 	ldw	r2,4(r2)
   13344:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
   13348:	e0bffc17 	ldw	r2,-16(fp)
   1334c:	10c00117 	ldw	r3,4(r2)
   13350:	e0bffc17 	ldw	r2,-16(fp)
   13354:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
   13358:	e0bffc17 	ldw	r2,-16(fp)
   1335c:	10c00117 	ldw	r3,4(r2)
   13360:	e0bffc17 	ldw	r2,-16(fp)
   13364:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
   13368:	e0bffc17 	ldw	r2,-16(fp)
   1336c:	1000058d 	sth	zero,22(r2)
   13370:	e0bffb17 	ldw	r2,-20(fp)
   13374:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13378:	e0bffe17 	ldw	r2,-8(fp)
   1337c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   13380:	0005883a 	mov	r2,zero
}
   13384:	e037883a 	mov	sp,fp
   13388:	df000017 	ldw	fp,0(sp)
   1338c:	dec00104 	addi	sp,sp,4
   13390:	f800283a 	ret

00013394 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   13394:	defff304 	addi	sp,sp,-52
   13398:	dfc00c15 	stw	ra,48(sp)
   1339c:	df000b15 	stw	fp,44(sp)
   133a0:	df000b04 	addi	fp,sp,44
   133a4:	e13ffd15 	stw	r4,-12(fp)
   133a8:	2805883a 	mov	r2,r5
   133ac:	e1bfff15 	stw	r6,-4(fp)
   133b0:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   133b4:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   133b8:	e0bfff17 	ldw	r2,-4(fp)
   133bc:	1000021e 	bne	r2,zero,133c8 <OSQPend+0x34>
        return ((void *)0);
   133c0:	0005883a 	mov	r2,zero
   133c4:	0000ad06 	br	1367c <OSQPend+0x2e8>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   133c8:	e0bffd17 	ldw	r2,-12(fp)
   133cc:	1000051e 	bne	r2,zero,133e4 <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   133d0:	e0bfff17 	ldw	r2,-4(fp)
   133d4:	00c00104 	movi	r3,4
   133d8:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   133dc:	0005883a 	mov	r2,zero
   133e0:	0000a606 	br	1367c <OSQPend+0x2e8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   133e4:	e0bffd17 	ldw	r2,-12(fp)
   133e8:	10800003 	ldbu	r2,0(r2)
   133ec:	10803fcc 	andi	r2,r2,255
   133f0:	108000a0 	cmpeqi	r2,r2,2
   133f4:	1000051e 	bne	r2,zero,1340c <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   133f8:	e0bfff17 	ldw	r2,-4(fp)
   133fc:	00c00044 	movi	r3,1
   13400:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   13404:	0005883a 	mov	r2,zero
   13408:	00009c06 	br	1367c <OSQPend+0x2e8>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   1340c:	008000b4 	movhi	r2,2
   13410:	10b41204 	addi	r2,r2,-12216
   13414:	10800003 	ldbu	r2,0(r2)
   13418:	10803fcc 	andi	r2,r2,255
   1341c:	10000526 	beq	r2,zero,13434 <OSQPend+0xa0>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
   13420:	e0bfff17 	ldw	r2,-4(fp)
   13424:	00c00084 	movi	r3,2
   13428:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   1342c:	0005883a 	mov	r2,zero
   13430:	00009206 	br	1367c <OSQPend+0x2e8>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
   13434:	008000b4 	movhi	r2,2
   13438:	10b40404 	addi	r2,r2,-12272
   1343c:	10800003 	ldbu	r2,0(r2)
   13440:	10803fcc 	andi	r2,r2,255
   13444:	10000526 	beq	r2,zero,1345c <OSQPend+0xc8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
   13448:	e0bfff17 	ldw	r2,-4(fp)
   1344c:	00c00344 	movi	r3,13
   13450:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   13454:	0005883a 	mov	r2,zero
   13458:	00008806 	br	1367c <OSQPend+0x2e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1345c:	0005303a 	rdctl	r2,status
   13460:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13464:	e0fff817 	ldw	r3,-32(fp)
   13468:	00bfff84 	movi	r2,-2
   1346c:	1884703a 	and	r2,r3,r2
   13470:	1001703a 	wrctl	status,r2
  
  return context;
   13474:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   13478:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   1347c:	e0bffd17 	ldw	r2,-12(fp)
   13480:	10800117 	ldw	r2,4(r2)
   13484:	e0bff715 	stw	r2,-36(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   13488:	e0bff717 	ldw	r2,-36(fp)
   1348c:	1080058b 	ldhu	r2,22(r2)
   13490:	10bfffcc 	andi	r2,r2,65535
   13494:	10001e26 	beq	r2,zero,13510 <OSQPend+0x17c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   13498:	e0bff717 	ldw	r2,-36(fp)
   1349c:	10800417 	ldw	r2,16(r2)
   134a0:	11000104 	addi	r4,r2,4
   134a4:	e0fff717 	ldw	r3,-36(fp)
   134a8:	19000415 	stw	r4,16(r3)
   134ac:	10800017 	ldw	r2,0(r2)
   134b0:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   134b4:	e0bff717 	ldw	r2,-36(fp)
   134b8:	1080058b 	ldhu	r2,22(r2)
   134bc:	10bfffc4 	addi	r2,r2,-1
   134c0:	1007883a 	mov	r3,r2
   134c4:	e0bff717 	ldw	r2,-36(fp)
   134c8:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   134cc:	e0bff717 	ldw	r2,-36(fp)
   134d0:	10c00417 	ldw	r3,16(r2)
   134d4:	e0bff717 	ldw	r2,-36(fp)
   134d8:	10800217 	ldw	r2,8(r2)
   134dc:	1880041e 	bne	r3,r2,134f0 <OSQPend+0x15c>
            pq->OSQOut = pq->OSQStart;
   134e0:	e0bff717 	ldw	r2,-36(fp)
   134e4:	10c00117 	ldw	r3,4(r2)
   134e8:	e0bff717 	ldw	r2,-36(fp)
   134ec:	10c00415 	stw	r3,16(r2)
   134f0:	e0bff617 	ldw	r2,-40(fp)
   134f4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   134f8:	e0bff917 	ldw	r2,-28(fp)
   134fc:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   13500:	e0bfff17 	ldw	r2,-4(fp)
   13504:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
   13508:	e0bff517 	ldw	r2,-44(fp)
   1350c:	00005b06 	br	1367c <OSQPend+0x2e8>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
   13510:	008000b4 	movhi	r2,2
   13514:	10b41304 	addi	r2,r2,-12212
   13518:	10c00017 	ldw	r3,0(r2)
   1351c:	008000b4 	movhi	r2,2
   13520:	10b41304 	addi	r2,r2,-12212
   13524:	10800017 	ldw	r2,0(r2)
   13528:	10800c03 	ldbu	r2,48(r2)
   1352c:	10800114 	ori	r2,r2,4
   13530:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   13534:	008000b4 	movhi	r2,2
   13538:	10b41304 	addi	r2,r2,-12212
   1353c:	10800017 	ldw	r2,0(r2)
   13540:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
   13544:	008000b4 	movhi	r2,2
   13548:	10b41304 	addi	r2,r2,-12212
   1354c:	10800017 	ldw	r2,0(r2)
   13550:	e0fffe0b 	ldhu	r3,-8(fp)
   13554:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
   13558:	e13ffd17 	ldw	r4,-12(fp)
   1355c:	000fc580 	call	fc58 <OS_EventTaskWait>
   13560:	e0bff617 	ldw	r2,-40(fp)
   13564:	e0bffa15 	stw	r2,-24(fp)
   13568:	e0bffa17 	ldw	r2,-24(fp)
   1356c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
   13570:	00104d80 	call	104d8 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13574:	0005303a 	rdctl	r2,status
   13578:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1357c:	e0fffb17 	ldw	r3,-20(fp)
   13580:	00bfff84 	movi	r2,-2
   13584:	1884703a 	and	r2,r3,r2
   13588:	1001703a 	wrctl	status,r2
  
  return context;
   1358c:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
   13590:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   13594:	008000b4 	movhi	r2,2
   13598:	10b41304 	addi	r2,r2,-12212
   1359c:	10800017 	ldw	r2,0(r2)
   135a0:	10800c43 	ldbu	r2,49(r2)
   135a4:	10803fcc 	andi	r2,r2,255
   135a8:	10000326 	beq	r2,zero,135b8 <OSQPend+0x224>
   135ac:	108000a0 	cmpeqi	r2,r2,2
   135b0:	1000091e 	bne	r2,zero,135d8 <OSQPend+0x244>
   135b4:	00000d06 	br	135ec <OSQPend+0x258>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
   135b8:	008000b4 	movhi	r2,2
   135bc:	10b41304 	addi	r2,r2,-12212
   135c0:	10800017 	ldw	r2,0(r2)
   135c4:	10800917 	ldw	r2,36(r2)
   135c8:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
   135cc:	e0bfff17 	ldw	r2,-4(fp)
   135d0:	10000005 	stb	zero,0(r2)
             break;
   135d4:	00001006 	br	13618 <OSQPend+0x284>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
   135d8:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   135dc:	e0bfff17 	ldw	r2,-4(fp)
   135e0:	00c00384 	movi	r3,14
   135e4:	10c00005 	stb	r3,0(r2)
             break;
   135e8:	00000b06 	br	13618 <OSQPend+0x284>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
   135ec:	008000b4 	movhi	r2,2
   135f0:	10b41304 	addi	r2,r2,-12212
   135f4:	10800017 	ldw	r2,0(r2)
   135f8:	1009883a 	mov	r4,r2
   135fc:	e17ffd17 	ldw	r5,-12(fp)
   13600:	000feb00 	call	feb0 <OS_EventTaskRemove>
             pmsg = (void *)0;
   13604:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   13608:	e0bfff17 	ldw	r2,-4(fp)
   1360c:	00c00284 	movi	r3,10
   13610:	10c00005 	stb	r3,0(r2)
             break;
   13614:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   13618:	008000b4 	movhi	r2,2
   1361c:	10b41304 	addi	r2,r2,-12212
   13620:	10800017 	ldw	r2,0(r2)
   13624:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   13628:	008000b4 	movhi	r2,2
   1362c:	10b41304 	addi	r2,r2,-12212
   13630:	10800017 	ldw	r2,0(r2)
   13634:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   13638:	008000b4 	movhi	r2,2
   1363c:	10b41304 	addi	r2,r2,-12212
   13640:	10800017 	ldw	r2,0(r2)
   13644:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   13648:	008000b4 	movhi	r2,2
   1364c:	10b41304 	addi	r2,r2,-12212
   13650:	10800017 	ldw	r2,0(r2)
   13654:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
   13658:	008000b4 	movhi	r2,2
   1365c:	10b41304 	addi	r2,r2,-12212
   13660:	10800017 	ldw	r2,0(r2)
   13664:	10000915 	stw	zero,36(r2)
   13668:	e0bff617 	ldw	r2,-40(fp)
   1366c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13670:	e0bffc17 	ldw	r2,-16(fp)
   13674:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
   13678:	e0bff517 	ldw	r2,-44(fp)
}
   1367c:	e037883a 	mov	sp,fp
   13680:	dfc00117 	ldw	ra,4(sp)
   13684:	df000017 	ldw	fp,0(sp)
   13688:	dec00204 	addi	sp,sp,8
   1368c:	f800283a 	ret

00013690 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   13690:	defff604 	addi	sp,sp,-40
   13694:	dfc00915 	stw	ra,36(sp)
   13698:	df000815 	stw	fp,32(sp)
   1369c:	df000804 	addi	fp,sp,32
   136a0:	e13ffd15 	stw	r4,-12(fp)
   136a4:	2805883a 	mov	r2,r5
   136a8:	e1bfff15 	stw	r6,-4(fp)
   136ac:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   136b0:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   136b4:	e0bfff17 	ldw	r2,-4(fp)
   136b8:	1000021e 	bne	r2,zero,136c4 <OSQPendAbort+0x34>
        return (0);
   136bc:	0005883a 	mov	r2,zero
   136c0:	00004906 	br	137e8 <OSQPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   136c4:	e0bffd17 	ldw	r2,-12(fp)
   136c8:	1000051e 	bne	r2,zero,136e0 <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   136cc:	e0bfff17 	ldw	r2,-4(fp)
   136d0:	00c00104 	movi	r3,4
   136d4:	10c00005 	stb	r3,0(r2)
        return (0);
   136d8:	0005883a 	mov	r2,zero
   136dc:	00004206 	br	137e8 <OSQPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   136e0:	e0bffd17 	ldw	r2,-12(fp)
   136e4:	10800003 	ldbu	r2,0(r2)
   136e8:	10803fcc 	andi	r2,r2,255
   136ec:	108000a0 	cmpeqi	r2,r2,2
   136f0:	1000051e 	bne	r2,zero,13708 <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   136f4:	e0bfff17 	ldw	r2,-4(fp)
   136f8:	00c00044 	movi	r3,1
   136fc:	10c00005 	stb	r3,0(r2)
        return (0);
   13700:	0005883a 	mov	r2,zero
   13704:	00003806 	br	137e8 <OSQPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13708:	0005303a 	rdctl	r2,status
   1370c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13710:	e0fffa17 	ldw	r3,-24(fp)
   13714:	00bfff84 	movi	r2,-2
   13718:	1884703a 	and	r2,r3,r2
   1371c:	1001703a 	wrctl	status,r2
  
  return context;
   13720:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   13724:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
   13728:	e0bffd17 	ldw	r2,-12(fp)
   1372c:	10800283 	ldbu	r2,10(r2)
   13730:	10803fcc 	andi	r2,r2,255
   13734:	10002526 	beq	r2,zero,137cc <OSQPendAbort+0x13c>
        nbr_tasks = 0;
   13738:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   1373c:	e0bffe03 	ldbu	r2,-8(fp)
   13740:	10800060 	cmpeqi	r2,r2,1
   13744:	10000e26 	beq	r2,zero,13780 <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   13748:	00000806 	br	1376c <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   1374c:	e13ffd17 	ldw	r4,-12(fp)
   13750:	000b883a 	mov	r5,zero
   13754:	01800104 	movi	r6,4
   13758:	01c00084 	movi	r7,2
   1375c:	000fac00 	call	fac0 <OS_EventTaskRdy>
                     nbr_tasks++;
   13760:	e0bff803 	ldbu	r2,-32(fp)
   13764:	10800044 	addi	r2,r2,1
   13768:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   1376c:	e0bffd17 	ldw	r2,-12(fp)
   13770:	10800283 	ldbu	r2,10(r2)
   13774:	10803fcc 	andi	r2,r2,255
   13778:	103ff41e 	bne	r2,zero,1374c <OSQPendAbort+0xbc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   1377c:	00000906 	br	137a4 <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   13780:	e13ffd17 	ldw	r4,-12(fp)
   13784:	000b883a 	mov	r5,zero
   13788:	01800104 	movi	r6,4
   1378c:	01c00084 	movi	r7,2
   13790:	000fac00 	call	fac0 <OS_EventTaskRdy>
                 nbr_tasks++;
   13794:	e0bff803 	ldbu	r2,-32(fp)
   13798:	10800044 	addi	r2,r2,1
   1379c:	e0bff805 	stb	r2,-32(fp)
                 break;
   137a0:	0001883a 	nop
   137a4:	e0bff917 	ldw	r2,-28(fp)
   137a8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   137ac:	e0bffb17 	ldw	r2,-20(fp)
   137b0:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
   137b4:	00104d80 	call	104d8 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   137b8:	e0bfff17 	ldw	r2,-4(fp)
   137bc:	00c00384 	movi	r3,14
   137c0:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   137c4:	e0bff803 	ldbu	r2,-32(fp)
   137c8:	00000706 	br	137e8 <OSQPendAbort+0x158>
   137cc:	e0bff917 	ldw	r2,-28(fp)
   137d0:	e0bffc15 	stw	r2,-16(fp)
   137d4:	e0bffc17 	ldw	r2,-16(fp)
   137d8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   137dc:	e0bfff17 	ldw	r2,-4(fp)
   137e0:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
   137e4:	0005883a 	mov	r2,zero
}
   137e8:	e037883a 	mov	sp,fp
   137ec:	dfc00117 	ldw	ra,4(sp)
   137f0:	df000017 	ldw	fp,0(sp)
   137f4:	dec00204 	addi	sp,sp,8
   137f8:	f800283a 	ret

000137fc <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
   137fc:	defff604 	addi	sp,sp,-40
   13800:	dfc00915 	stw	ra,36(sp)
   13804:	df000815 	stw	fp,32(sp)
   13808:	df000804 	addi	fp,sp,32
   1380c:	e13ffe15 	stw	r4,-8(fp)
   13810:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   13814:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   13818:	e0bffe17 	ldw	r2,-8(fp)
   1381c:	1000021e 	bne	r2,zero,13828 <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
   13820:	00800104 	movi	r2,4
   13824:	00004a06 	br	13950 <OSQPost+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   13828:	e0bffe17 	ldw	r2,-8(fp)
   1382c:	10800003 	ldbu	r2,0(r2)
   13830:	10803fcc 	andi	r2,r2,255
   13834:	108000a0 	cmpeqi	r2,r2,2
   13838:	1000021e 	bne	r2,zero,13844 <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
   1383c:	00800044 	movi	r2,1
   13840:	00004306 	br	13950 <OSQPost+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13844:	0005303a 	rdctl	r2,status
   13848:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1384c:	e0fffa17 	ldw	r3,-24(fp)
   13850:	00bfff84 	movi	r2,-2
   13854:	1884703a 	and	r2,r3,r2
   13858:	1001703a 	wrctl	status,r2
  
  return context;
   1385c:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   13860:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
   13864:	e0bffe17 	ldw	r2,-8(fp)
   13868:	10800283 	ldbu	r2,10(r2)
   1386c:	10803fcc 	andi	r2,r2,255
   13870:	10000c26 	beq	r2,zero,138a4 <OSQPost+0xa8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   13874:	e13ffe17 	ldw	r4,-8(fp)
   13878:	e17fff17 	ldw	r5,-4(fp)
   1387c:	01800104 	movi	r6,4
   13880:	000f883a 	mov	r7,zero
   13884:	000fac00 	call	fac0 <OS_EventTaskRdy>
   13888:	e0bff817 	ldw	r2,-32(fp)
   1388c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13890:	e0bffb17 	ldw	r2,-20(fp)
   13894:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
   13898:	00104d80 	call	104d8 <OS_Sched>
        return (OS_ERR_NONE);
   1389c:	0005883a 	mov	r2,zero
   138a0:	00002b06 	br	13950 <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
   138a4:	e0bffe17 	ldw	r2,-8(fp)
   138a8:	10800117 	ldw	r2,4(r2)
   138ac:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
   138b0:	e0bff917 	ldw	r2,-28(fp)
   138b4:	10c0058b 	ldhu	r3,22(r2)
   138b8:	e0bff917 	ldw	r2,-28(fp)
   138bc:	1080050b 	ldhu	r2,20(r2)
   138c0:	18ffffcc 	andi	r3,r3,65535
   138c4:	10bfffcc 	andi	r2,r2,65535
   138c8:	18800636 	bltu	r3,r2,138e4 <OSQPost+0xe8>
   138cc:	e0bff817 	ldw	r2,-32(fp)
   138d0:	e0bffc15 	stw	r2,-16(fp)
   138d4:	e0bffc17 	ldw	r2,-16(fp)
   138d8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   138dc:	00800784 	movi	r2,30
   138e0:	00001b06 	br	13950 <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
   138e4:	e0bff917 	ldw	r2,-28(fp)
   138e8:	10800317 	ldw	r2,12(r2)
   138ec:	11000104 	addi	r4,r2,4
   138f0:	e0fff917 	ldw	r3,-28(fp)
   138f4:	19000315 	stw	r4,12(r3)
   138f8:	e0ffff17 	ldw	r3,-4(fp)
   138fc:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
   13900:	e0bff917 	ldw	r2,-28(fp)
   13904:	1080058b 	ldhu	r2,22(r2)
   13908:	10800044 	addi	r2,r2,1
   1390c:	1007883a 	mov	r3,r2
   13910:	e0bff917 	ldw	r2,-28(fp)
   13914:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
   13918:	e0bff917 	ldw	r2,-28(fp)
   1391c:	10c00317 	ldw	r3,12(r2)
   13920:	e0bff917 	ldw	r2,-28(fp)
   13924:	10800217 	ldw	r2,8(r2)
   13928:	1880041e 	bne	r3,r2,1393c <OSQPost+0x140>
        pq->OSQIn = pq->OSQStart;
   1392c:	e0bff917 	ldw	r2,-28(fp)
   13930:	10c00117 	ldw	r3,4(r2)
   13934:	e0bff917 	ldw	r2,-28(fp)
   13938:	10c00315 	stw	r3,12(r2)
   1393c:	e0bff817 	ldw	r2,-32(fp)
   13940:	e0bffd15 	stw	r2,-12(fp)
   13944:	e0bffd17 	ldw	r2,-12(fp)
   13948:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   1394c:	0005883a 	mov	r2,zero
}
   13950:	e037883a 	mov	sp,fp
   13954:	dfc00117 	ldw	ra,4(sp)
   13958:	df000017 	ldw	fp,0(sp)
   1395c:	dec00204 	addi	sp,sp,8
   13960:	f800283a 	ret

00013964 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
   13964:	defff604 	addi	sp,sp,-40
   13968:	dfc00915 	stw	ra,36(sp)
   1396c:	df000815 	stw	fp,32(sp)
   13970:	df000804 	addi	fp,sp,32
   13974:	e13ffe15 	stw	r4,-8(fp)
   13978:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   1397c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   13980:	e0bffe17 	ldw	r2,-8(fp)
   13984:	1000021e 	bne	r2,zero,13990 <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
   13988:	00800104 	movi	r2,4
   1398c:	00004c06 	br	13ac0 <OSQPostFront+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   13990:	e0bffe17 	ldw	r2,-8(fp)
   13994:	10800003 	ldbu	r2,0(r2)
   13998:	10803fcc 	andi	r2,r2,255
   1399c:	108000a0 	cmpeqi	r2,r2,2
   139a0:	1000021e 	bne	r2,zero,139ac <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
   139a4:	00800044 	movi	r2,1
   139a8:	00004506 	br	13ac0 <OSQPostFront+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   139ac:	0005303a 	rdctl	r2,status
   139b0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   139b4:	e0fffa17 	ldw	r3,-24(fp)
   139b8:	00bfff84 	movi	r2,-2
   139bc:	1884703a 	and	r2,r3,r2
   139c0:	1001703a 	wrctl	status,r2
  
  return context;
   139c4:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   139c8:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
   139cc:	e0bffe17 	ldw	r2,-8(fp)
   139d0:	10800283 	ldbu	r2,10(r2)
   139d4:	10803fcc 	andi	r2,r2,255
   139d8:	10000c26 	beq	r2,zero,13a0c <OSQPostFront+0xa8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   139dc:	e13ffe17 	ldw	r4,-8(fp)
   139e0:	e17fff17 	ldw	r5,-4(fp)
   139e4:	01800104 	movi	r6,4
   139e8:	000f883a 	mov	r7,zero
   139ec:	000fac00 	call	fac0 <OS_EventTaskRdy>
   139f0:	e0bff817 	ldw	r2,-32(fp)
   139f4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   139f8:	e0bffb17 	ldw	r2,-20(fp)
   139fc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
   13a00:	00104d80 	call	104d8 <OS_Sched>
        return (OS_ERR_NONE);
   13a04:	0005883a 	mov	r2,zero
   13a08:	00002d06 	br	13ac0 <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   13a0c:	e0bffe17 	ldw	r2,-8(fp)
   13a10:	10800117 	ldw	r2,4(r2)
   13a14:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   13a18:	e0bff917 	ldw	r2,-28(fp)
   13a1c:	10c0058b 	ldhu	r3,22(r2)
   13a20:	e0bff917 	ldw	r2,-28(fp)
   13a24:	1080050b 	ldhu	r2,20(r2)
   13a28:	18ffffcc 	andi	r3,r3,65535
   13a2c:	10bfffcc 	andi	r2,r2,65535
   13a30:	18800636 	bltu	r3,r2,13a4c <OSQPostFront+0xe8>
   13a34:	e0bff817 	ldw	r2,-32(fp)
   13a38:	e0bffc15 	stw	r2,-16(fp)
   13a3c:	e0bffc17 	ldw	r2,-16(fp)
   13a40:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   13a44:	00800784 	movi	r2,30
   13a48:	00001d06 	br	13ac0 <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
   13a4c:	e0bff917 	ldw	r2,-28(fp)
   13a50:	10c00417 	ldw	r3,16(r2)
   13a54:	e0bff917 	ldw	r2,-28(fp)
   13a58:	10800117 	ldw	r2,4(r2)
   13a5c:	1880041e 	bne	r3,r2,13a70 <OSQPostFront+0x10c>
        pq->OSQOut = pq->OSQEnd;
   13a60:	e0bff917 	ldw	r2,-28(fp)
   13a64:	10c00217 	ldw	r3,8(r2)
   13a68:	e0bff917 	ldw	r2,-28(fp)
   13a6c:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
   13a70:	e0bff917 	ldw	r2,-28(fp)
   13a74:	10800417 	ldw	r2,16(r2)
   13a78:	10ffff04 	addi	r3,r2,-4
   13a7c:	e0bff917 	ldw	r2,-28(fp)
   13a80:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
   13a84:	e0bff917 	ldw	r2,-28(fp)
   13a88:	10800417 	ldw	r2,16(r2)
   13a8c:	e0ffff17 	ldw	r3,-4(fp)
   13a90:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   13a94:	e0bff917 	ldw	r2,-28(fp)
   13a98:	1080058b 	ldhu	r2,22(r2)
   13a9c:	10800044 	addi	r2,r2,1
   13aa0:	1007883a 	mov	r3,r2
   13aa4:	e0bff917 	ldw	r2,-28(fp)
   13aa8:	10c0058d 	sth	r3,22(r2)
   13aac:	e0bff817 	ldw	r2,-32(fp)
   13ab0:	e0bffd15 	stw	r2,-12(fp)
   13ab4:	e0bffd17 	ldw	r2,-12(fp)
   13ab8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   13abc:	0005883a 	mov	r2,zero
}
   13ac0:	e037883a 	mov	sp,fp
   13ac4:	dfc00117 	ldw	ra,4(sp)
   13ac8:	df000017 	ldw	fp,0(sp)
   13acc:	dec00204 	addi	sp,sp,8
   13ad0:	f800283a 	ret

00013ad4 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
   13ad4:	defff504 	addi	sp,sp,-44
   13ad8:	dfc00a15 	stw	ra,40(sp)
   13adc:	df000915 	stw	fp,36(sp)
   13ae0:	df000904 	addi	fp,sp,36
   13ae4:	e13ffd15 	stw	r4,-12(fp)
   13ae8:	e17ffe15 	stw	r5,-8(fp)
   13aec:	3005883a 	mov	r2,r6
   13af0:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   13af4:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   13af8:	e0bffd17 	ldw	r2,-12(fp)
   13afc:	1000021e 	bne	r2,zero,13b08 <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
   13b00:	00800104 	movi	r2,4
   13b04:	00007106 	br	13ccc <OSQPostOpt+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   13b08:	e0bffd17 	ldw	r2,-12(fp)
   13b0c:	10800003 	ldbu	r2,0(r2)
   13b10:	10803fcc 	andi	r2,r2,255
   13b14:	108000a0 	cmpeqi	r2,r2,2
   13b18:	1000021e 	bne	r2,zero,13b24 <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
   13b1c:	00800044 	movi	r2,1
   13b20:	00006a06 	br	13ccc <OSQPostOpt+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13b24:	0005303a 	rdctl	r2,status
   13b28:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13b2c:	e0fff917 	ldw	r3,-28(fp)
   13b30:	00bfff84 	movi	r2,-2
   13b34:	1884703a 	and	r2,r3,r2
   13b38:	1001703a 	wrctl	status,r2
  
  return context;
   13b3c:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   13b40:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
   13b44:	e0bffd17 	ldw	r2,-12(fp)
   13b48:	10800283 	ldbu	r2,10(r2)
   13b4c:	10803fcc 	andi	r2,r2,255
   13b50:	10001d26 	beq	r2,zero,13bc8 <OSQPostOpt+0xf4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
   13b54:	e0bfff03 	ldbu	r2,-4(fp)
   13b58:	1080004c 	andi	r2,r2,1
   13b5c:	10000b26 	beq	r2,zero,13b8c <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   13b60:	00000506 	br	13b78 <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   13b64:	e13ffd17 	ldw	r4,-12(fp)
   13b68:	e17ffe17 	ldw	r5,-8(fp)
   13b6c:	01800104 	movi	r6,4
   13b70:	000f883a 	mov	r7,zero
   13b74:	000fac00 	call	fac0 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   13b78:	e0bffd17 	ldw	r2,-12(fp)
   13b7c:	10800283 	ldbu	r2,10(r2)
   13b80:	10803fcc 	andi	r2,r2,255
   13b84:	103ff71e 	bne	r2,zero,13b64 <OSQPostOpt+0x90>
   13b88:	00000506 	br	13ba0 <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   13b8c:	e13ffd17 	ldw	r4,-12(fp)
   13b90:	e17ffe17 	ldw	r5,-8(fp)
   13b94:	01800104 	movi	r6,4
   13b98:	000f883a 	mov	r7,zero
   13b9c:	000fac00 	call	fac0 <OS_EventTaskRdy>
   13ba0:	e0bff717 	ldw	r2,-36(fp)
   13ba4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13ba8:	e0bffa17 	ldw	r2,-24(fp)
   13bac:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
   13bb0:	e0bfff03 	ldbu	r2,-4(fp)
   13bb4:	1080010c 	andi	r2,r2,4
   13bb8:	1000011e 	bne	r2,zero,13bc0 <OSQPostOpt+0xec>
            OS_Sched();                               /* Find highest priority task ready to run       */
   13bbc:	00104d80 	call	104d8 <OS_Sched>
        }
        return (OS_ERR_NONE);
   13bc0:	0005883a 	mov	r2,zero
   13bc4:	00004106 	br	13ccc <OSQPostOpt+0x1f8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   13bc8:	e0bffd17 	ldw	r2,-12(fp)
   13bcc:	10800117 	ldw	r2,4(r2)
   13bd0:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   13bd4:	e0bff817 	ldw	r2,-32(fp)
   13bd8:	10c0058b 	ldhu	r3,22(r2)
   13bdc:	e0bff817 	ldw	r2,-32(fp)
   13be0:	1080050b 	ldhu	r2,20(r2)
   13be4:	18ffffcc 	andi	r3,r3,65535
   13be8:	10bfffcc 	andi	r2,r2,65535
   13bec:	18800636 	bltu	r3,r2,13c08 <OSQPostOpt+0x134>
   13bf0:	e0bff717 	ldw	r2,-36(fp)
   13bf4:	e0bffb15 	stw	r2,-20(fp)
   13bf8:	e0bffb17 	ldw	r2,-20(fp)
   13bfc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   13c00:	00800784 	movi	r2,30
   13c04:	00003106 	br	13ccc <OSQPostOpt+0x1f8>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
   13c08:	e0bfff03 	ldbu	r2,-4(fp)
   13c0c:	1080008c 	andi	r2,r2,2
   13c10:	10001326 	beq	r2,zero,13c60 <OSQPostOpt+0x18c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
   13c14:	e0bff817 	ldw	r2,-32(fp)
   13c18:	10c00417 	ldw	r3,16(r2)
   13c1c:	e0bff817 	ldw	r2,-32(fp)
   13c20:	10800117 	ldw	r2,4(r2)
   13c24:	1880041e 	bne	r3,r2,13c38 <OSQPostOpt+0x164>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
   13c28:	e0bff817 	ldw	r2,-32(fp)
   13c2c:	10c00217 	ldw	r3,8(r2)
   13c30:	e0bff817 	ldw	r2,-32(fp)
   13c34:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
   13c38:	e0bff817 	ldw	r2,-32(fp)
   13c3c:	10800417 	ldw	r2,16(r2)
   13c40:	10ffff04 	addi	r3,r2,-4
   13c44:	e0bff817 	ldw	r2,-32(fp)
   13c48:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
   13c4c:	e0bff817 	ldw	r2,-32(fp)
   13c50:	10800417 	ldw	r2,16(r2)
   13c54:	e0fffe17 	ldw	r3,-8(fp)
   13c58:	10c00015 	stw	r3,0(r2)
   13c5c:	00001006 	br	13ca0 <OSQPostOpt+0x1cc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
   13c60:	e0bff817 	ldw	r2,-32(fp)
   13c64:	10800317 	ldw	r2,12(r2)
   13c68:	11000104 	addi	r4,r2,4
   13c6c:	e0fff817 	ldw	r3,-32(fp)
   13c70:	19000315 	stw	r4,12(r3)
   13c74:	e0fffe17 	ldw	r3,-8(fp)
   13c78:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
   13c7c:	e0bff817 	ldw	r2,-32(fp)
   13c80:	10c00317 	ldw	r3,12(r2)
   13c84:	e0bff817 	ldw	r2,-32(fp)
   13c88:	10800217 	ldw	r2,8(r2)
   13c8c:	1880041e 	bne	r3,r2,13ca0 <OSQPostOpt+0x1cc>
            pq->OSQIn = pq->OSQStart;
   13c90:	e0bff817 	ldw	r2,-32(fp)
   13c94:	10c00117 	ldw	r3,4(r2)
   13c98:	e0bff817 	ldw	r2,-32(fp)
   13c9c:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   13ca0:	e0bff817 	ldw	r2,-32(fp)
   13ca4:	1080058b 	ldhu	r2,22(r2)
   13ca8:	10800044 	addi	r2,r2,1
   13cac:	1007883a 	mov	r3,r2
   13cb0:	e0bff817 	ldw	r2,-32(fp)
   13cb4:	10c0058d 	sth	r3,22(r2)
   13cb8:	e0bff717 	ldw	r2,-36(fp)
   13cbc:	e0bffc15 	stw	r2,-16(fp)
   13cc0:	e0bffc17 	ldw	r2,-16(fp)
   13cc4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   13cc8:	0005883a 	mov	r2,zero
}
   13ccc:	e037883a 	mov	sp,fp
   13cd0:	dfc00117 	ldw	ra,4(sp)
   13cd4:	df000017 	ldw	fp,0(sp)
   13cd8:	dec00204 	addi	sp,sp,8
   13cdc:	f800283a 	ret

00013ce0 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
   13ce0:	defff604 	addi	sp,sp,-40
   13ce4:	df000915 	stw	fp,36(sp)
   13ce8:	df000904 	addi	fp,sp,36
   13cec:	e13ffe15 	stw	r4,-8(fp)
   13cf0:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   13cf4:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   13cf8:	e0bffe17 	ldw	r2,-8(fp)
   13cfc:	1000021e 	bne	r2,zero,13d08 <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   13d00:	00800104 	movi	r2,4
   13d04:	00004906 	br	13e2c <OSQQuery+0x14c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
   13d08:	e0bfff17 	ldw	r2,-4(fp)
   13d0c:	1000021e 	bne	r2,zero,13d18 <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   13d10:	00800244 	movi	r2,9
   13d14:	00004506 	br	13e2c <OSQQuery+0x14c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   13d18:	e0bffe17 	ldw	r2,-8(fp)
   13d1c:	10800003 	ldbu	r2,0(r2)
   13d20:	10803fcc 	andi	r2,r2,255
   13d24:	108000a0 	cmpeqi	r2,r2,2
   13d28:	1000021e 	bne	r2,zero,13d34 <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   13d2c:	00800044 	movi	r2,1
   13d30:	00003e06 	br	13e2c <OSQQuery+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13d34:	0005303a 	rdctl	r2,status
   13d38:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13d3c:	e0fffc17 	ldw	r3,-16(fp)
   13d40:	00bfff84 	movi	r2,-2
   13d44:	1884703a 	and	r2,r3,r2
   13d48:	1001703a 	wrctl	status,r2
  
  return context;
   13d4c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   13d50:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
   13d54:	e0bffe17 	ldw	r2,-8(fp)
   13d58:	10c00283 	ldbu	r3,10(r2)
   13d5c:	e0bfff17 	ldw	r2,-4(fp)
   13d60:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
   13d64:	e0bffe17 	ldw	r2,-8(fp)
   13d68:	108002c4 	addi	r2,r2,11
   13d6c:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
   13d70:	e0bfff17 	ldw	r2,-4(fp)
   13d74:	10800204 	addi	r2,r2,8
   13d78:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   13d7c:	e03ff705 	stb	zero,-36(fp)
   13d80:	00000b06 	br	13db0 <OSQQuery+0xd0>
        *pdest++ = *psrc++;
   13d84:	e0bff917 	ldw	r2,-28(fp)
   13d88:	10c00044 	addi	r3,r2,1
   13d8c:	e0fff915 	stw	r3,-28(fp)
   13d90:	e0fff817 	ldw	r3,-32(fp)
   13d94:	19000044 	addi	r4,r3,1
   13d98:	e13ff815 	stw	r4,-32(fp)
   13d9c:	18c00003 	ldbu	r3,0(r3)
   13da0:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   13da4:	e0bff703 	ldbu	r2,-36(fp)
   13da8:	10800044 	addi	r2,r2,1
   13dac:	e0bff705 	stb	r2,-36(fp)
   13db0:	e0bff703 	ldbu	r2,-36(fp)
   13db4:	108000f0 	cmpltui	r2,r2,3
   13db8:	103ff21e 	bne	r2,zero,13d84 <OSQQuery+0xa4>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
   13dbc:	e0bffe17 	ldw	r2,-8(fp)
   13dc0:	10800117 	ldw	r2,4(r2)
   13dc4:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {
   13dc8:	e0bffb17 	ldw	r2,-20(fp)
   13dcc:	1080058b 	ldhu	r2,22(r2)
   13dd0:	10bfffcc 	andi	r2,r2,65535
   13dd4:	10000626 	beq	r2,zero,13df0 <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
   13dd8:	e0bffb17 	ldw	r2,-20(fp)
   13ddc:	10800417 	ldw	r2,16(r2)
   13de0:	10c00017 	ldw	r3,0(r2)
   13de4:	e0bfff17 	ldw	r2,-4(fp)
   13de8:	10c00015 	stw	r3,0(r2)
   13dec:	00000206 	br	13df8 <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
   13df0:	e0bfff17 	ldw	r2,-4(fp)
   13df4:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
   13df8:	e0bffb17 	ldw	r2,-20(fp)
   13dfc:	10c0058b 	ldhu	r3,22(r2)
   13e00:	e0bfff17 	ldw	r2,-4(fp)
   13e04:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
   13e08:	e0bffb17 	ldw	r2,-20(fp)
   13e0c:	10c0050b 	ldhu	r3,20(r2)
   13e10:	e0bfff17 	ldw	r2,-4(fp)
   13e14:	10c0018d 	sth	r3,6(r2)
   13e18:	e0bffa17 	ldw	r2,-24(fp)
   13e1c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13e20:	e0bffd17 	ldw	r2,-12(fp)
   13e24:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   13e28:	0005883a 	mov	r2,zero
}
   13e2c:	e037883a 	mov	sp,fp
   13e30:	df000017 	ldw	fp,0(sp)
   13e34:	dec00104 	addi	sp,sp,4
   13e38:	f800283a 	ret

00013e3c <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
   13e3c:	defffb04 	addi	sp,sp,-20
   13e40:	dfc00415 	stw	ra,16(sp)
   13e44:	df000315 	stw	fp,12(sp)
   13e48:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
   13e4c:	010000b4 	movhi	r4,2
   13e50:	21124c04 	addi	r4,r4,18736
   13e54:	01407804 	movi	r5,480
   13e58:	00104240 	call	10424 <OS_MemClr>
    pq1 = &OSQTbl[0];
   13e5c:	008000b4 	movhi	r2,2
   13e60:	10924c04 	addi	r2,r2,18736
   13e64:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
   13e68:	008000b4 	movhi	r2,2
   13e6c:	10925204 	addi	r2,r2,18760
   13e70:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   13e74:	e03ffd0d 	sth	zero,-12(fp)
   13e78:	00000c06 	br	13eac <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
   13e7c:	e0bffe17 	ldw	r2,-8(fp)
   13e80:	e0ffff17 	ldw	r3,-4(fp)
   13e84:	10c00015 	stw	r3,0(r2)
        pq1++;
   13e88:	e0bffe17 	ldw	r2,-8(fp)
   13e8c:	10800604 	addi	r2,r2,24
   13e90:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
   13e94:	e0bfff17 	ldw	r2,-4(fp)
   13e98:	10800604 	addi	r2,r2,24
   13e9c:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   13ea0:	e0bffd0b 	ldhu	r2,-12(fp)
   13ea4:	10800044 	addi	r2,r2,1
   13ea8:	e0bffd0d 	sth	r2,-12(fp)
   13eac:	e0bffd0b 	ldhu	r2,-12(fp)
   13eb0:	108004f0 	cmpltui	r2,r2,19
   13eb4:	103ff11e 	bne	r2,zero,13e7c <OS_QInit+0x40>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
   13eb8:	e0bffe17 	ldw	r2,-8(fp)
   13ebc:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
   13ec0:	008000b4 	movhi	r2,2
   13ec4:	10b40f04 	addi	r2,r2,-12228
   13ec8:	00c000b4 	movhi	r3,2
   13ecc:	18d24c04 	addi	r3,r3,18736
   13ed0:	10c00015 	stw	r3,0(r2)
#endif
}
   13ed4:	e037883a 	mov	sp,fp
   13ed8:	dfc00117 	ldw	ra,4(sp)
   13edc:	df000017 	ldw	fp,0(sp)
   13ee0:	dec00204 	addi	sp,sp,8
   13ee4:	f800283a 	ret

00013ee8 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
   13ee8:	defffa04 	addi	sp,sp,-24
   13eec:	df000515 	stw	fp,20(sp)
   13ef0:	df000504 	addi	fp,sp,20
   13ef4:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   13ef8:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   13efc:	e0bfff17 	ldw	r2,-4(fp)
   13f00:	1000021e 	bne	r2,zero,13f0c <OSSemAccept+0x24>
        return (0);
   13f04:	0005883a 	mov	r2,zero
   13f08:	00001f06 	br	13f88 <OSSemAccept+0xa0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   13f0c:	e0bfff17 	ldw	r2,-4(fp)
   13f10:	10800003 	ldbu	r2,0(r2)
   13f14:	10803fcc 	andi	r2,r2,255
   13f18:	108000e0 	cmpeqi	r2,r2,3
   13f1c:	1000021e 	bne	r2,zero,13f28 <OSSemAccept+0x40>
        return (0);
   13f20:	0005883a 	mov	r2,zero
   13f24:	00001806 	br	13f88 <OSSemAccept+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13f28:	0005303a 	rdctl	r2,status
   13f2c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13f30:	e0fffd17 	ldw	r3,-12(fp)
   13f34:	00bfff84 	movi	r2,-2
   13f38:	1884703a 	and	r2,r3,r2
   13f3c:	1001703a 	wrctl	status,r2
  
  return context;
   13f40:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   13f44:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
   13f48:	e0bfff17 	ldw	r2,-4(fp)
   13f4c:	1080020b 	ldhu	r2,8(r2)
   13f50:	e0bffc0d 	sth	r2,-16(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
   13f54:	e0bffc0b 	ldhu	r2,-16(fp)
   13f58:	10000626 	beq	r2,zero,13f74 <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
   13f5c:	e0bfff17 	ldw	r2,-4(fp)
   13f60:	1080020b 	ldhu	r2,8(r2)
   13f64:	10bfffc4 	addi	r2,r2,-1
   13f68:	1007883a 	mov	r3,r2
   13f6c:	e0bfff17 	ldw	r2,-4(fp)
   13f70:	10c0020d 	sth	r3,8(r2)
   13f74:	e0bffb17 	ldw	r2,-20(fp)
   13f78:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13f7c:	e0bffe17 	ldw	r2,-8(fp)
   13f80:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
   13f84:	e0bffc0b 	ldhu	r2,-16(fp)
}
   13f88:	e037883a 	mov	sp,fp
   13f8c:	df000017 	ldw	fp,0(sp)
   13f90:	dec00104 	addi	sp,sp,4
   13f94:	f800283a 	ret

00013f98 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
   13f98:	defff904 	addi	sp,sp,-28
   13f9c:	dfc00615 	stw	ra,24(sp)
   13fa0:	df000515 	stw	fp,20(sp)
   13fa4:	df000504 	addi	fp,sp,20
   13fa8:	2005883a 	mov	r2,r4
   13fac:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   13fb0:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   13fb4:	008000b4 	movhi	r2,2
   13fb8:	10b41204 	addi	r2,r2,-12216
   13fbc:	10800003 	ldbu	r2,0(r2)
   13fc0:	10803fcc 	andi	r2,r2,255
   13fc4:	10000226 	beq	r2,zero,13fd0 <OSSemCreate+0x38>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
   13fc8:	0005883a 	mov	r2,zero
   13fcc:	00002d06 	br	14084 <OSSemCreate+0xec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13fd0:	0005303a 	rdctl	r2,status
   13fd4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13fd8:	e0fffd17 	ldw	r3,-12(fp)
   13fdc:	00bfff84 	movi	r2,-2
   13fe0:	1884703a 	and	r2,r3,r2
   13fe4:	1001703a 	wrctl	status,r2
  
  return context;
   13fe8:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   13fec:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
   13ff0:	008000b4 	movhi	r2,2
   13ff4:	10b41104 	addi	r2,r2,-12220
   13ff8:	10800017 	ldw	r2,0(r2)
   13ffc:	e0bffc15 	stw	r2,-16(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
   14000:	008000b4 	movhi	r2,2
   14004:	10b41104 	addi	r2,r2,-12220
   14008:	10800017 	ldw	r2,0(r2)
   1400c:	10000726 	beq	r2,zero,1402c <OSSemCreate+0x94>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   14010:	008000b4 	movhi	r2,2
   14014:	10b41104 	addi	r2,r2,-12220
   14018:	10800017 	ldw	r2,0(r2)
   1401c:	10c00117 	ldw	r3,4(r2)
   14020:	008000b4 	movhi	r2,2
   14024:	10b41104 	addi	r2,r2,-12220
   14028:	10c00015 	stw	r3,0(r2)
   1402c:	e0bffb17 	ldw	r2,-20(fp)
   14030:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14034:	e0bffe17 	ldw	r2,-8(fp)
   14038:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
   1403c:	e0bffc17 	ldw	r2,-16(fp)
   14040:	10000f26 	beq	r2,zero,14080 <OSSemCreate+0xe8>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
   14044:	e0bffc17 	ldw	r2,-16(fp)
   14048:	00c000c4 	movi	r3,3
   1404c:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
   14050:	e0bffc17 	ldw	r2,-16(fp)
   14054:	e0ffff0b 	ldhu	r3,-4(fp)
   14058:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
   1405c:	e0bffc17 	ldw	r2,-16(fp)
   14060:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
   14064:	e0bffc17 	ldw	r2,-16(fp)
   14068:	00c00fc4 	movi	r3,63
   1406c:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
   14070:	e0bffc17 	ldw	r2,-16(fp)
   14074:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
   14078:	e13ffc17 	ldw	r4,-16(fp)
   1407c:	00100600 	call	10060 <OS_EventWaitListInit>
    }
    return (pevent);
   14080:	e0bffc17 	ldw	r2,-16(fp)
}
   14084:	e037883a 	mov	sp,fp
   14088:	dfc00117 	ldw	ra,4(sp)
   1408c:	df000017 	ldw	fp,0(sp)
   14090:	dec00204 	addi	sp,sp,8
   14094:	f800283a 	ret

00014098 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   14098:	defff304 	addi	sp,sp,-52
   1409c:	dfc00c15 	stw	ra,48(sp)
   140a0:	df000b15 	stw	fp,44(sp)
   140a4:	df000b04 	addi	fp,sp,44
   140a8:	e13ffd15 	stw	r4,-12(fp)
   140ac:	2805883a 	mov	r2,r5
   140b0:	e1bfff15 	stw	r6,-4(fp)
   140b4:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   140b8:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   140bc:	e0bfff17 	ldw	r2,-4(fp)
   140c0:	1000021e 	bne	r2,zero,140cc <OSSemDel+0x34>
        return (pevent);
   140c4:	e0bffd17 	ldw	r2,-12(fp)
   140c8:	00008806 	br	142ec <OSSemDel+0x254>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   140cc:	e0bffd17 	ldw	r2,-12(fp)
   140d0:	1000051e 	bne	r2,zero,140e8 <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   140d4:	e0bfff17 	ldw	r2,-4(fp)
   140d8:	00c00104 	movi	r3,4
   140dc:	10c00005 	stb	r3,0(r2)
        return (pevent);
   140e0:	e0bffd17 	ldw	r2,-12(fp)
   140e4:	00008106 	br	142ec <OSSemDel+0x254>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   140e8:	e0bffd17 	ldw	r2,-12(fp)
   140ec:	10800003 	ldbu	r2,0(r2)
   140f0:	10803fcc 	andi	r2,r2,255
   140f4:	108000e0 	cmpeqi	r2,r2,3
   140f8:	1000051e 	bne	r2,zero,14110 <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   140fc:	e0bfff17 	ldw	r2,-4(fp)
   14100:	00c00044 	movi	r3,1
   14104:	10c00005 	stb	r3,0(r2)
        return (pevent);
   14108:	e0bffd17 	ldw	r2,-12(fp)
   1410c:	00007706 	br	142ec <OSSemDel+0x254>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   14110:	008000b4 	movhi	r2,2
   14114:	10b41204 	addi	r2,r2,-12216
   14118:	10800003 	ldbu	r2,0(r2)
   1411c:	10803fcc 	andi	r2,r2,255
   14120:	10000526 	beq	r2,zero,14138 <OSSemDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
   14124:	e0bfff17 	ldw	r2,-4(fp)
   14128:	00c003c4 	movi	r3,15
   1412c:	10c00005 	stb	r3,0(r2)
        return (pevent);
   14130:	e0bffd17 	ldw	r2,-12(fp)
   14134:	00006d06 	br	142ec <OSSemDel+0x254>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14138:	0005303a 	rdctl	r2,status
   1413c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14140:	e0fff817 	ldw	r3,-32(fp)
   14144:	00bfff84 	movi	r2,-2
   14148:	1884703a 	and	r2,r3,r2
   1414c:	1001703a 	wrctl	status,r2
  
  return context;
   14150:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   14154:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
   14158:	e0bffd17 	ldw	r2,-12(fp)
   1415c:	10800283 	ldbu	r2,10(r2)
   14160:	10803fcc 	andi	r2,r2,255
   14164:	10000326 	beq	r2,zero,14174 <OSSemDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   14168:	00800044 	movi	r2,1
   1416c:	e0bff505 	stb	r2,-44(fp)
   14170:	00000106 	br	14178 <OSSemDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   14174:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
   14178:	e0bffe03 	ldbu	r2,-8(fp)
   1417c:	10000326 	beq	r2,zero,1418c <OSSemDel+0xf4>
   14180:	10800060 	cmpeqi	r2,r2,1
   14184:	10002c1e 	bne	r2,zero,14238 <OSSemDel+0x1a0>
   14188:	00004d06 	br	142c0 <OSSemDel+0x228>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
   1418c:	e0bff503 	ldbu	r2,-44(fp)
   14190:	10001a1e 	bne	r2,zero,141fc <OSSemDel+0x164>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   14194:	e0bffd17 	ldw	r2,-12(fp)
   14198:	00c00fc4 	movi	r3,63
   1419c:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   141a0:	e0bffd17 	ldw	r2,-12(fp)
   141a4:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   141a8:	e0bffd17 	ldw	r2,-12(fp)
   141ac:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   141b0:	008000b4 	movhi	r2,2
   141b4:	10b41104 	addi	r2,r2,-12220
   141b8:	10c00017 	ldw	r3,0(r2)
   141bc:	e0bffd17 	ldw	r2,-12(fp)
   141c0:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   141c4:	e0bffd17 	ldw	r2,-12(fp)
   141c8:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   141cc:	008000b4 	movhi	r2,2
   141d0:	10b41104 	addi	r2,r2,-12220
   141d4:	e0fffd17 	ldw	r3,-12(fp)
   141d8:	10c00015 	stw	r3,0(r2)
   141dc:	e0bff717 	ldw	r2,-36(fp)
   141e0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   141e4:	e0bff917 	ldw	r2,-28(fp)
   141e8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   141ec:	e0bfff17 	ldw	r2,-4(fp)
   141f0:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
   141f4:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   141f8:	00003b06 	br	142e8 <OSSemDel+0x250>
   141fc:	e0bff717 	ldw	r2,-36(fp)
   14200:	e0bffa15 	stw	r2,-24(fp)
   14204:	e0bffa17 	ldw	r2,-24(fp)
   14208:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   1420c:	e0bfff17 	ldw	r2,-4(fp)
   14210:	00c01244 	movi	r3,73
   14214:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   14218:	e0bffd17 	ldw	r2,-12(fp)
   1421c:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   14220:	00003106 	br	142e8 <OSSemDel+0x250>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   14224:	e13ffd17 	ldw	r4,-12(fp)
   14228:	000b883a 	mov	r5,zero
   1422c:	01800044 	movi	r6,1
   14230:	000f883a 	mov	r7,zero
   14234:	000fac00 	call	fac0 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
   14238:	e0bffd17 	ldw	r2,-12(fp)
   1423c:	10800283 	ldbu	r2,10(r2)
   14240:	10803fcc 	andi	r2,r2,255
   14244:	103ff71e 	bne	r2,zero,14224 <OSSemDel+0x18c>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   14248:	e0bffd17 	ldw	r2,-12(fp)
   1424c:	00c00fc4 	movi	r3,63
   14250:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   14254:	e0bffd17 	ldw	r2,-12(fp)
   14258:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   1425c:	e0bffd17 	ldw	r2,-12(fp)
   14260:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   14264:	008000b4 	movhi	r2,2
   14268:	10b41104 	addi	r2,r2,-12220
   1426c:	10c00017 	ldw	r3,0(r2)
   14270:	e0bffd17 	ldw	r2,-12(fp)
   14274:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   14278:	e0bffd17 	ldw	r2,-12(fp)
   1427c:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   14280:	008000b4 	movhi	r2,2
   14284:	10b41104 	addi	r2,r2,-12220
   14288:	e0fffd17 	ldw	r3,-12(fp)
   1428c:	10c00015 	stw	r3,0(r2)
   14290:	e0bff717 	ldw	r2,-36(fp)
   14294:	e0bffb15 	stw	r2,-20(fp)
   14298:	e0bffb17 	ldw	r2,-20(fp)
   1429c:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   142a0:	e0bff503 	ldbu	r2,-44(fp)
   142a4:	10800058 	cmpnei	r2,r2,1
   142a8:	1000011e 	bne	r2,zero,142b0 <OSSemDel+0x218>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   142ac:	00104d80 	call	104d8 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   142b0:	e0bfff17 	ldw	r2,-4(fp)
   142b4:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
   142b8:	e03ff615 	stw	zero,-40(fp)
             break;
   142bc:	00000a06 	br	142e8 <OSSemDel+0x250>
   142c0:	e0bff717 	ldw	r2,-36(fp)
   142c4:	e0bffc15 	stw	r2,-16(fp)
   142c8:	e0bffc17 	ldw	r2,-16(fp)
   142cc:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   142d0:	e0bfff17 	ldw	r2,-4(fp)
   142d4:	00c001c4 	movi	r3,7
   142d8:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   142dc:	e0bffd17 	ldw	r2,-12(fp)
   142e0:	e0bff615 	stw	r2,-40(fp)
             break;
   142e4:	0001883a 	nop
    }
    return (pevent_return);
   142e8:	e0bff617 	ldw	r2,-40(fp)
}
   142ec:	e037883a 	mov	sp,fp
   142f0:	dfc00117 	ldw	ra,4(sp)
   142f4:	df000017 	ldw	fp,0(sp)
   142f8:	dec00204 	addi	sp,sp,8
   142fc:	f800283a 	ret

00014300 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   14300:	defff504 	addi	sp,sp,-44
   14304:	dfc00a15 	stw	ra,40(sp)
   14308:	df000915 	stw	fp,36(sp)
   1430c:	df000904 	addi	fp,sp,36
   14310:	e13ffd15 	stw	r4,-12(fp)
   14314:	2805883a 	mov	r2,r5
   14318:	e1bfff15 	stw	r6,-4(fp)
   1431c:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   14320:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   14324:	e0bfff17 	ldw	r2,-4(fp)
   14328:	1000011e 	bne	r2,zero,14330 <OSSemPend+0x30>
        return;
   1432c:	00008906 	br	14554 <OSSemPend+0x254>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   14330:	e0bffd17 	ldw	r2,-12(fp)
   14334:	1000041e 	bne	r2,zero,14348 <OSSemPend+0x48>
        *perr = OS_ERR_PEVENT_NULL;
   14338:	e0bfff17 	ldw	r2,-4(fp)
   1433c:	00c00104 	movi	r3,4
   14340:	10c00005 	stb	r3,0(r2)
        return;
   14344:	00008306 	br	14554 <OSSemPend+0x254>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   14348:	e0bffd17 	ldw	r2,-12(fp)
   1434c:	10800003 	ldbu	r2,0(r2)
   14350:	10803fcc 	andi	r2,r2,255
   14354:	108000e0 	cmpeqi	r2,r2,3
   14358:	1000041e 	bne	r2,zero,1436c <OSSemPend+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   1435c:	e0bfff17 	ldw	r2,-4(fp)
   14360:	00c00044 	movi	r3,1
   14364:	10c00005 	stb	r3,0(r2)
        return;
   14368:	00007a06 	br	14554 <OSSemPend+0x254>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
   1436c:	008000b4 	movhi	r2,2
   14370:	10b41204 	addi	r2,r2,-12216
   14374:	10800003 	ldbu	r2,0(r2)
   14378:	10803fcc 	andi	r2,r2,255
   1437c:	10000426 	beq	r2,zero,14390 <OSSemPend+0x90>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
   14380:	e0bfff17 	ldw	r2,-4(fp)
   14384:	00c00084 	movi	r3,2
   14388:	10c00005 	stb	r3,0(r2)
        return;
   1438c:	00007106 	br	14554 <OSSemPend+0x254>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
   14390:	008000b4 	movhi	r2,2
   14394:	10b40404 	addi	r2,r2,-12272
   14398:	10800003 	ldbu	r2,0(r2)
   1439c:	10803fcc 	andi	r2,r2,255
   143a0:	10000426 	beq	r2,zero,143b4 <OSSemPend+0xb4>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
   143a4:	e0bfff17 	ldw	r2,-4(fp)
   143a8:	00c00344 	movi	r3,13
   143ac:	10c00005 	stb	r3,0(r2)
        return;
   143b0:	00006806 	br	14554 <OSSemPend+0x254>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   143b4:	0005303a 	rdctl	r2,status
   143b8:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   143bc:	e0fff817 	ldw	r3,-32(fp)
   143c0:	00bfff84 	movi	r2,-2
   143c4:	1884703a 	and	r2,r3,r2
   143c8:	1001703a 	wrctl	status,r2
  
  return context;
   143cc:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   143d0:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
   143d4:	e0bffd17 	ldw	r2,-12(fp)
   143d8:	1080020b 	ldhu	r2,8(r2)
   143dc:	10bfffcc 	andi	r2,r2,65535
   143e0:	10000d26 	beq	r2,zero,14418 <OSSemPend+0x118>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
   143e4:	e0bffd17 	ldw	r2,-12(fp)
   143e8:	1080020b 	ldhu	r2,8(r2)
   143ec:	10bfffc4 	addi	r2,r2,-1
   143f0:	1007883a 	mov	r3,r2
   143f4:	e0bffd17 	ldw	r2,-12(fp)
   143f8:	10c0020d 	sth	r3,8(r2)
   143fc:	e0bff717 	ldw	r2,-36(fp)
   14400:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14404:	e0bff917 	ldw	r2,-28(fp)
   14408:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   1440c:	e0bfff17 	ldw	r2,-4(fp)
   14410:	10000005 	stb	zero,0(r2)
        return;
   14414:	00004f06 	br	14554 <OSSemPend+0x254>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
   14418:	008000b4 	movhi	r2,2
   1441c:	10b41304 	addi	r2,r2,-12212
   14420:	10c00017 	ldw	r3,0(r2)
   14424:	008000b4 	movhi	r2,2
   14428:	10b41304 	addi	r2,r2,-12212
   1442c:	10800017 	ldw	r2,0(r2)
   14430:	10800c03 	ldbu	r2,48(r2)
   14434:	10800054 	ori	r2,r2,1
   14438:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   1443c:	008000b4 	movhi	r2,2
   14440:	10b41304 	addi	r2,r2,-12212
   14444:	10800017 	ldw	r2,0(r2)
   14448:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
   1444c:	008000b4 	movhi	r2,2
   14450:	10b41304 	addi	r2,r2,-12212
   14454:	10800017 	ldw	r2,0(r2)
   14458:	e0fffe0b 	ldhu	r3,-8(fp)
   1445c:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
   14460:	e13ffd17 	ldw	r4,-12(fp)
   14464:	000fc580 	call	fc58 <OS_EventTaskWait>
   14468:	e0bff717 	ldw	r2,-36(fp)
   1446c:	e0bffa15 	stw	r2,-24(fp)
   14470:	e0bffa17 	ldw	r2,-24(fp)
   14474:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
   14478:	00104d80 	call	104d8 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1447c:	0005303a 	rdctl	r2,status
   14480:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14484:	e0fffb17 	ldw	r3,-20(fp)
   14488:	00bfff84 	movi	r2,-2
   1448c:	1884703a 	and	r2,r3,r2
   14490:	1001703a 	wrctl	status,r2
  
  return context;
   14494:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
   14498:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   1449c:	008000b4 	movhi	r2,2
   144a0:	10b41304 	addi	r2,r2,-12212
   144a4:	10800017 	ldw	r2,0(r2)
   144a8:	10800c43 	ldbu	r2,49(r2)
   144ac:	10803fcc 	andi	r2,r2,255
   144b0:	10000326 	beq	r2,zero,144c0 <OSSemPend+0x1c0>
   144b4:	108000a0 	cmpeqi	r2,r2,2
   144b8:	1000041e 	bne	r2,zero,144cc <OSSemPend+0x1cc>
   144bc:	00000706 	br	144dc <OSSemPend+0x1dc>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
   144c0:	e0bfff17 	ldw	r2,-4(fp)
   144c4:	10000005 	stb	zero,0(r2)
             break;
   144c8:	00000e06 	br	14504 <OSSemPend+0x204>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   144cc:	e0bfff17 	ldw	r2,-4(fp)
   144d0:	00c00384 	movi	r3,14
   144d4:	10c00005 	stb	r3,0(r2)
             break;
   144d8:	00000a06 	br	14504 <OSSemPend+0x204>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
   144dc:	008000b4 	movhi	r2,2
   144e0:	10b41304 	addi	r2,r2,-12212
   144e4:	10800017 	ldw	r2,0(r2)
   144e8:	1009883a 	mov	r4,r2
   144ec:	e17ffd17 	ldw	r5,-12(fp)
   144f0:	000feb00 	call	feb0 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   144f4:	e0bfff17 	ldw	r2,-4(fp)
   144f8:	00c00284 	movi	r3,10
   144fc:	10c00005 	stb	r3,0(r2)
             break;
   14500:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   14504:	008000b4 	movhi	r2,2
   14508:	10b41304 	addi	r2,r2,-12212
   1450c:	10800017 	ldw	r2,0(r2)
   14510:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   14514:	008000b4 	movhi	r2,2
   14518:	10b41304 	addi	r2,r2,-12212
   1451c:	10800017 	ldw	r2,0(r2)
   14520:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   14524:	008000b4 	movhi	r2,2
   14528:	10b41304 	addi	r2,r2,-12212
   1452c:	10800017 	ldw	r2,0(r2)
   14530:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   14534:	008000b4 	movhi	r2,2
   14538:	10b41304 	addi	r2,r2,-12212
   1453c:	10800017 	ldw	r2,0(r2)
   14540:	10000815 	stw	zero,32(r2)
   14544:	e0bff717 	ldw	r2,-36(fp)
   14548:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1454c:	e0bffc17 	ldw	r2,-16(fp)
   14550:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
}
   14554:	e037883a 	mov	sp,fp
   14558:	dfc00117 	ldw	ra,4(sp)
   1455c:	df000017 	ldw	fp,0(sp)
   14560:	dec00204 	addi	sp,sp,8
   14564:	f800283a 	ret

00014568 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   14568:	defff604 	addi	sp,sp,-40
   1456c:	dfc00915 	stw	ra,36(sp)
   14570:	df000815 	stw	fp,32(sp)
   14574:	df000804 	addi	fp,sp,32
   14578:	e13ffd15 	stw	r4,-12(fp)
   1457c:	2805883a 	mov	r2,r5
   14580:	e1bfff15 	stw	r6,-4(fp)
   14584:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   14588:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   1458c:	e0bfff17 	ldw	r2,-4(fp)
   14590:	1000021e 	bne	r2,zero,1459c <OSSemPendAbort+0x34>
        return (0);
   14594:	0005883a 	mov	r2,zero
   14598:	00004906 	br	146c0 <OSSemPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   1459c:	e0bffd17 	ldw	r2,-12(fp)
   145a0:	1000051e 	bne	r2,zero,145b8 <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   145a4:	e0bfff17 	ldw	r2,-4(fp)
   145a8:	00c00104 	movi	r3,4
   145ac:	10c00005 	stb	r3,0(r2)
        return (0);
   145b0:	0005883a 	mov	r2,zero
   145b4:	00004206 	br	146c0 <OSSemPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   145b8:	e0bffd17 	ldw	r2,-12(fp)
   145bc:	10800003 	ldbu	r2,0(r2)
   145c0:	10803fcc 	andi	r2,r2,255
   145c4:	108000e0 	cmpeqi	r2,r2,3
   145c8:	1000051e 	bne	r2,zero,145e0 <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   145cc:	e0bfff17 	ldw	r2,-4(fp)
   145d0:	00c00044 	movi	r3,1
   145d4:	10c00005 	stb	r3,0(r2)
        return (0);
   145d8:	0005883a 	mov	r2,zero
   145dc:	00003806 	br	146c0 <OSSemPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   145e0:	0005303a 	rdctl	r2,status
   145e4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   145e8:	e0fffa17 	ldw	r3,-24(fp)
   145ec:	00bfff84 	movi	r2,-2
   145f0:	1884703a 	and	r2,r3,r2
   145f4:	1001703a 	wrctl	status,r2
  
  return context;
   145f8:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   145fc:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
   14600:	e0bffd17 	ldw	r2,-12(fp)
   14604:	10800283 	ldbu	r2,10(r2)
   14608:	10803fcc 	andi	r2,r2,255
   1460c:	10002526 	beq	r2,zero,146a4 <OSSemPendAbort+0x13c>
        nbr_tasks = 0;
   14610:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   14614:	e0bffe03 	ldbu	r2,-8(fp)
   14618:	10800060 	cmpeqi	r2,r2,1
   1461c:	10000e26 	beq	r2,zero,14658 <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   14620:	00000806 	br	14644 <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   14624:	e13ffd17 	ldw	r4,-12(fp)
   14628:	000b883a 	mov	r5,zero
   1462c:	01800044 	movi	r6,1
   14630:	01c00084 	movi	r7,2
   14634:	000fac00 	call	fac0 <OS_EventTaskRdy>
                     nbr_tasks++;
   14638:	e0bff803 	ldbu	r2,-32(fp)
   1463c:	10800044 	addi	r2,r2,1
   14640:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   14644:	e0bffd17 	ldw	r2,-12(fp)
   14648:	10800283 	ldbu	r2,10(r2)
   1464c:	10803fcc 	andi	r2,r2,255
   14650:	103ff41e 	bne	r2,zero,14624 <OSSemPendAbort+0xbc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   14654:	00000906 	br	1467c <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   14658:	e13ffd17 	ldw	r4,-12(fp)
   1465c:	000b883a 	mov	r5,zero
   14660:	01800044 	movi	r6,1
   14664:	01c00084 	movi	r7,2
   14668:	000fac00 	call	fac0 <OS_EventTaskRdy>
                 nbr_tasks++;
   1466c:	e0bff803 	ldbu	r2,-32(fp)
   14670:	10800044 	addi	r2,r2,1
   14674:	e0bff805 	stb	r2,-32(fp)
                 break;
   14678:	0001883a 	nop
   1467c:	e0bff917 	ldw	r2,-28(fp)
   14680:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14684:	e0bffb17 	ldw	r2,-20(fp)
   14688:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   1468c:	00104d80 	call	104d8 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   14690:	e0bfff17 	ldw	r2,-4(fp)
   14694:	00c00384 	movi	r3,14
   14698:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   1469c:	e0bff803 	ldbu	r2,-32(fp)
   146a0:	00000706 	br	146c0 <OSSemPendAbort+0x158>
   146a4:	e0bff917 	ldw	r2,-28(fp)
   146a8:	e0bffc15 	stw	r2,-16(fp)
   146ac:	e0bffc17 	ldw	r2,-16(fp)
   146b0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   146b4:	e0bfff17 	ldw	r2,-4(fp)
   146b8:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
   146bc:	0005883a 	mov	r2,zero
}
   146c0:	e037883a 	mov	sp,fp
   146c4:	dfc00117 	ldw	ra,4(sp)
   146c8:	df000017 	ldw	fp,0(sp)
   146cc:	dec00204 	addi	sp,sp,8
   146d0:	f800283a 	ret

000146d4 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
   146d4:	defff804 	addi	sp,sp,-32
   146d8:	dfc00715 	stw	ra,28(sp)
   146dc:	df000615 	stw	fp,24(sp)
   146e0:	df000604 	addi	fp,sp,24
   146e4:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   146e8:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   146ec:	e0bfff17 	ldw	r2,-4(fp)
   146f0:	1000021e 	bne	r2,zero,146fc <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
   146f4:	00800104 	movi	r2,4
   146f8:	00003506 	br	147d0 <OSSemPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   146fc:	e0bfff17 	ldw	r2,-4(fp)
   14700:	10800003 	ldbu	r2,0(r2)
   14704:	10803fcc 	andi	r2,r2,255
   14708:	108000e0 	cmpeqi	r2,r2,3
   1470c:	1000021e 	bne	r2,zero,14718 <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
   14710:	00800044 	movi	r2,1
   14714:	00002e06 	br	147d0 <OSSemPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14718:	0005303a 	rdctl	r2,status
   1471c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14720:	e0fffb17 	ldw	r3,-20(fp)
   14724:	00bfff84 	movi	r2,-2
   14728:	1884703a 	and	r2,r3,r2
   1472c:	1001703a 	wrctl	status,r2
  
  return context;
   14730:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   14734:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
   14738:	e0bfff17 	ldw	r2,-4(fp)
   1473c:	10800283 	ldbu	r2,10(r2)
   14740:	10803fcc 	andi	r2,r2,255
   14744:	10000c26 	beq	r2,zero,14778 <OSSemPost+0xa4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   14748:	e13fff17 	ldw	r4,-4(fp)
   1474c:	000b883a 	mov	r5,zero
   14750:	01800044 	movi	r6,1
   14754:	000f883a 	mov	r7,zero
   14758:	000fac00 	call	fac0 <OS_EventTaskRdy>
   1475c:	e0bffa17 	ldw	r2,-24(fp)
   14760:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14764:	e0bffc17 	ldw	r2,-16(fp)
   14768:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   1476c:	00104d80 	call	104d8 <OS_Sched>
        return (OS_ERR_NONE);
   14770:	0005883a 	mov	r2,zero
   14774:	00001606 	br	147d0 <OSSemPost+0xfc>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
   14778:	e0bfff17 	ldw	r2,-4(fp)
   1477c:	1080020b 	ldhu	r2,8(r2)
   14780:	10ffffcc 	andi	r3,r2,65535
   14784:	00bfffd4 	movui	r2,65535
   14788:	18800c26 	beq	r3,r2,147bc <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
   1478c:	e0bfff17 	ldw	r2,-4(fp)
   14790:	1080020b 	ldhu	r2,8(r2)
   14794:	10800044 	addi	r2,r2,1
   14798:	1007883a 	mov	r3,r2
   1479c:	e0bfff17 	ldw	r2,-4(fp)
   147a0:	10c0020d 	sth	r3,8(r2)
   147a4:	e0bffa17 	ldw	r2,-24(fp)
   147a8:	e0bffd15 	stw	r2,-12(fp)
   147ac:	e0bffd17 	ldw	r2,-12(fp)
   147b0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   147b4:	0005883a 	mov	r2,zero
   147b8:	00000506 	br	147d0 <OSSemPost+0xfc>
   147bc:	e0bffa17 	ldw	r2,-24(fp)
   147c0:	e0bffe15 	stw	r2,-8(fp)
   147c4:	e0bffe17 	ldw	r2,-8(fp)
   147c8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
   147cc:	00800c84 	movi	r2,50
}
   147d0:	e037883a 	mov	sp,fp
   147d4:	dfc00117 	ldw	ra,4(sp)
   147d8:	df000017 	ldw	fp,0(sp)
   147dc:	dec00204 	addi	sp,sp,8
   147e0:	f800283a 	ret

000147e4 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
   147e4:	defff704 	addi	sp,sp,-36
   147e8:	df000815 	stw	fp,32(sp)
   147ec:	df000804 	addi	fp,sp,32
   147f0:	e13ffe15 	stw	r4,-8(fp)
   147f4:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   147f8:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   147fc:	e0bffe17 	ldw	r2,-8(fp)
   14800:	1000021e 	bne	r2,zero,1480c <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   14804:	00800104 	movi	r2,4
   14808:	00003606 	br	148e4 <OSSemQuery+0x100>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
   1480c:	e0bfff17 	ldw	r2,-4(fp)
   14810:	1000021e 	bne	r2,zero,1481c <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   14814:	00800244 	movi	r2,9
   14818:	00003206 	br	148e4 <OSSemQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   1481c:	e0bffe17 	ldw	r2,-8(fp)
   14820:	10800003 	ldbu	r2,0(r2)
   14824:	10803fcc 	andi	r2,r2,255
   14828:	108000e0 	cmpeqi	r2,r2,3
   1482c:	1000021e 	bne	r2,zero,14838 <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   14830:	00800044 	movi	r2,1
   14834:	00002b06 	br	148e4 <OSSemQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14838:	0005303a 	rdctl	r2,status
   1483c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14840:	e0fffc17 	ldw	r3,-16(fp)
   14844:	00bfff84 	movi	r2,-2
   14848:	1884703a 	and	r2,r3,r2
   1484c:	1001703a 	wrctl	status,r2
  
  return context;
   14850:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   14854:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
   14858:	e0bffe17 	ldw	r2,-8(fp)
   1485c:	10c00283 	ldbu	r3,10(r2)
   14860:	e0bfff17 	ldw	r2,-4(fp)
   14864:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
   14868:	e0bffe17 	ldw	r2,-8(fp)
   1486c:	108002c4 	addi	r2,r2,11
   14870:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
   14874:	e0bfff17 	ldw	r2,-4(fp)
   14878:	10800084 	addi	r2,r2,2
   1487c:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   14880:	e03ffa05 	stb	zero,-24(fp)
   14884:	00000b06 	br	148b4 <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
   14888:	e0bff917 	ldw	r2,-28(fp)
   1488c:	10c00044 	addi	r3,r2,1
   14890:	e0fff915 	stw	r3,-28(fp)
   14894:	e0fff817 	ldw	r3,-32(fp)
   14898:	19000044 	addi	r4,r3,1
   1489c:	e13ff815 	stw	r4,-32(fp)
   148a0:	18c00003 	ldbu	r3,0(r3)
   148a4:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   148a8:	e0bffa03 	ldbu	r2,-24(fp)
   148ac:	10800044 	addi	r2,r2,1
   148b0:	e0bffa05 	stb	r2,-24(fp)
   148b4:	e0bffa03 	ldbu	r2,-24(fp)
   148b8:	108000f0 	cmpltui	r2,r2,3
   148bc:	103ff21e 	bne	r2,zero,14888 <OSSemQuery+0xa4>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
   148c0:	e0bffe17 	ldw	r2,-8(fp)
   148c4:	10c0020b 	ldhu	r3,8(r2)
   148c8:	e0bfff17 	ldw	r2,-4(fp)
   148cc:	10c0000d 	sth	r3,0(r2)
   148d0:	e0bffb17 	ldw	r2,-20(fp)
   148d4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   148d8:	e0bffd17 	ldw	r2,-12(fp)
   148dc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   148e0:	0005883a 	mov	r2,zero
}
   148e4:	e037883a 	mov	sp,fp
   148e8:	df000017 	ldw	fp,0(sp)
   148ec:	dec00104 	addi	sp,sp,4
   148f0:	f800283a 	ret

000148f4 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
   148f4:	defff904 	addi	sp,sp,-28
   148f8:	df000615 	stw	fp,24(sp)
   148fc:	df000604 	addi	fp,sp,24
   14900:	e13ffd15 	stw	r4,-12(fp)
   14904:	2805883a 	mov	r2,r5
   14908:	e1bfff15 	stw	r6,-4(fp)
   1490c:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   14910:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   14914:	e0bfff17 	ldw	r2,-4(fp)
   14918:	1000011e 	bne	r2,zero,14920 <OSSemSet+0x2c>
        return;
   1491c:	00003006 	br	149e0 <OSSemSet+0xec>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   14920:	e0bffd17 	ldw	r2,-12(fp)
   14924:	1000041e 	bne	r2,zero,14938 <OSSemSet+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   14928:	e0bfff17 	ldw	r2,-4(fp)
   1492c:	00c00104 	movi	r3,4
   14930:	10c00005 	stb	r3,0(r2)
        return;
   14934:	00002a06 	br	149e0 <OSSemSet+0xec>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   14938:	e0bffd17 	ldw	r2,-12(fp)
   1493c:	10800003 	ldbu	r2,0(r2)
   14940:	10803fcc 	andi	r2,r2,255
   14944:	108000e0 	cmpeqi	r2,r2,3
   14948:	1000041e 	bne	r2,zero,1495c <OSSemSet+0x68>
        *perr = OS_ERR_EVENT_TYPE;
   1494c:	e0bfff17 	ldw	r2,-4(fp)
   14950:	00c00044 	movi	r3,1
   14954:	10c00005 	stb	r3,0(r2)
        return;
   14958:	00002106 	br	149e0 <OSSemSet+0xec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1495c:	0005303a 	rdctl	r2,status
   14960:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14964:	e0fffb17 	ldw	r3,-20(fp)
   14968:	00bfff84 	movi	r2,-2
   1496c:	1884703a 	and	r2,r3,r2
   14970:	1001703a 	wrctl	status,r2
  
  return context;
   14974:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   14978:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
   1497c:	e0bfff17 	ldw	r2,-4(fp)
   14980:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
   14984:	e0bffd17 	ldw	r2,-12(fp)
   14988:	1080020b 	ldhu	r2,8(r2)
   1498c:	10bfffcc 	andi	r2,r2,65535
   14990:	10000426 	beq	r2,zero,149a4 <OSSemSet+0xb0>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
   14994:	e0bffd17 	ldw	r2,-12(fp)
   14998:	e0fffe0b 	ldhu	r3,-8(fp)
   1499c:	10c0020d 	sth	r3,8(r2)
   149a0:	00000b06 	br	149d0 <OSSemSet+0xdc>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
   149a4:	e0bffd17 	ldw	r2,-12(fp)
   149a8:	10800283 	ldbu	r2,10(r2)
   149ac:	10803fcc 	andi	r2,r2,255
   149b0:	1000041e 	bne	r2,zero,149c4 <OSSemSet+0xd0>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
   149b4:	e0bffd17 	ldw	r2,-12(fp)
   149b8:	e0fffe0b 	ldhu	r3,-8(fp)
   149bc:	10c0020d 	sth	r3,8(r2)
   149c0:	00000306 	br	149d0 <OSSemSet+0xdc>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
   149c4:	e0bfff17 	ldw	r2,-4(fp)
   149c8:	00c01244 	movi	r3,73
   149cc:	10c00005 	stb	r3,0(r2)
   149d0:	e0bffa17 	ldw	r2,-24(fp)
   149d4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   149d8:	e0bffc17 	ldw	r2,-16(fp)
   149dc:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
}
   149e0:	e037883a 	mov	sp,fp
   149e4:	df000017 	ldw	fp,0(sp)
   149e8:	dec00104 	addi	sp,sp,4
   149ec:	f800283a 	ret

000149f0 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
   149f0:	defff104 	addi	sp,sp,-60
   149f4:	dfc00e15 	stw	ra,56(sp)
   149f8:	df000d15 	stw	fp,52(sp)
   149fc:	df000d04 	addi	fp,sp,52
   14a00:	2007883a 	mov	r3,r4
   14a04:	2805883a 	mov	r2,r5
   14a08:	e0fffe05 	stb	r3,-8(fp)
   14a0c:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
   14a10:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
   14a14:	e0bffe03 	ldbu	r2,-8(fp)
   14a18:	10800530 	cmpltui	r2,r2,20
   14a1c:	1000051e 	bne	r2,zero,14a34 <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
   14a20:	e0bffe03 	ldbu	r2,-8(fp)
   14a24:	10803fe0 	cmpeqi	r2,r2,255
   14a28:	1000021e 	bne	r2,zero,14a34 <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
   14a2c:	00800a84 	movi	r2,42
   14a30:	00013a06 	br	14f1c <OSTaskChangePrio+0x52c>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
   14a34:	e0bfff03 	ldbu	r2,-4(fp)
   14a38:	10800530 	cmpltui	r2,r2,20
   14a3c:	1000021e 	bne	r2,zero,14a48 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
   14a40:	00800a84 	movi	r2,42
   14a44:	00013506 	br	14f1c <OSTaskChangePrio+0x52c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14a48:	0005303a 	rdctl	r2,status
   14a4c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14a50:	e0fff917 	ldw	r3,-28(fp)
   14a54:	00bfff84 	movi	r2,-2
   14a58:	1884703a 	and	r2,r3,r2
   14a5c:	1001703a 	wrctl	status,r2
  
  return context;
   14a60:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   14a64:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
   14a68:	e0ffff03 	ldbu	r3,-4(fp)
   14a6c:	008000b4 	movhi	r2,2
   14a70:	1098d804 	addi	r2,r2,25440
   14a74:	18c7883a 	add	r3,r3,r3
   14a78:	18c7883a 	add	r3,r3,r3
   14a7c:	10c5883a 	add	r2,r2,r3
   14a80:	10800017 	ldw	r2,0(r2)
   14a84:	10000626 	beq	r2,zero,14aa0 <OSTaskChangePrio+0xb0>
   14a88:	e0bff517 	ldw	r2,-44(fp)
   14a8c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14a90:	e0bffa17 	ldw	r2,-24(fp)
   14a94:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
   14a98:	00800a04 	movi	r2,40
   14a9c:	00011f06 	br	14f1c <OSTaskChangePrio+0x52c>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
   14aa0:	e0bffe03 	ldbu	r2,-8(fp)
   14aa4:	10803fd8 	cmpnei	r2,r2,255
   14aa8:	1000051e 	bne	r2,zero,14ac0 <OSTaskChangePrio+0xd0>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
   14aac:	008000b4 	movhi	r2,2
   14ab0:	10b41304 	addi	r2,r2,-12212
   14ab4:	10800017 	ldw	r2,0(r2)
   14ab8:	10800c83 	ldbu	r2,50(r2)
   14abc:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
   14ac0:	e0fffe03 	ldbu	r3,-8(fp)
   14ac4:	008000b4 	movhi	r2,2
   14ac8:	1098d804 	addi	r2,r2,25440
   14acc:	18c7883a 	add	r3,r3,r3
   14ad0:	18c7883a 	add	r3,r3,r3
   14ad4:	10c5883a 	add	r2,r2,r3
   14ad8:	10800017 	ldw	r2,0(r2)
   14adc:	e0bff615 	stw	r2,-40(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
   14ae0:	e0bff617 	ldw	r2,-40(fp)
   14ae4:	1000061e 	bne	r2,zero,14b00 <OSTaskChangePrio+0x110>
   14ae8:	e0bff517 	ldw	r2,-44(fp)
   14aec:	e0bffb15 	stw	r2,-20(fp)
   14af0:	e0bffb17 	ldw	r2,-20(fp)
   14af4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
   14af8:	00800a44 	movi	r2,41
   14afc:	00010706 	br	14f1c <OSTaskChangePrio+0x52c>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
   14b00:	e0bff617 	ldw	r2,-40(fp)
   14b04:	10800058 	cmpnei	r2,r2,1
   14b08:	1000061e 	bne	r2,zero,14b24 <OSTaskChangePrio+0x134>
   14b0c:	e0bff517 	ldw	r2,-44(fp)
   14b10:	e0bffc15 	stw	r2,-16(fp)
   14b14:	e0bffc17 	ldw	r2,-16(fp)
   14b18:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
   14b1c:	008010c4 	movi	r2,67
   14b20:	0000fe06 	br	14f1c <OSTaskChangePrio+0x52c>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
   14b24:	e0bfff03 	ldbu	r2,-4(fp)
   14b28:	1004d0fa 	srli	r2,r2,3
   14b2c:	e0bff705 	stb	r2,-36(fp)
    x_new                 = (INT8U)(newprio & 0x07);
   14b30:	e0bfff03 	ldbu	r2,-4(fp)
   14b34:	108001cc 	andi	r2,r2,7
   14b38:	e0bff745 	stb	r2,-35(fp)
    bity_new              = (INT8U)(1 << y_new);
   14b3c:	e0bff703 	ldbu	r2,-36(fp)
   14b40:	00c00044 	movi	r3,1
   14b44:	1884983a 	sll	r2,r3,r2
   14b48:	e0bff785 	stb	r2,-34(fp)
    bitx_new              = (INT8U)(1 << x_new);
   14b4c:	e0bff743 	ldbu	r2,-35(fp)
   14b50:	00c00044 	movi	r3,1
   14b54:	1884983a 	sll	r2,r3,r2
   14b58:	e0bff7c5 	stb	r2,-33(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
   14b5c:	e0fffe03 	ldbu	r3,-8(fp)
   14b60:	008000b4 	movhi	r2,2
   14b64:	1098d804 	addi	r2,r2,25440
   14b68:	18c7883a 	add	r3,r3,r3
   14b6c:	18c7883a 	add	r3,r3,r3
   14b70:	10c5883a 	add	r2,r2,r3
   14b74:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
   14b78:	e0ffff03 	ldbu	r3,-4(fp)
   14b7c:	008000b4 	movhi	r2,2
   14b80:	1098d804 	addi	r2,r2,25440
   14b84:	18c7883a 	add	r3,r3,r3
   14b88:	18c7883a 	add	r3,r3,r3
   14b8c:	10c5883a 	add	r2,r2,r3
   14b90:	e0fff617 	ldw	r3,-40(fp)
   14b94:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
   14b98:	e0bff617 	ldw	r2,-40(fp)
   14b9c:	10800d03 	ldbu	r2,52(r2)
   14ba0:	e0bff805 	stb	r2,-32(fp)
    bity_old              =  ptcb->OSTCBBitY;
   14ba4:	e0bff617 	ldw	r2,-40(fp)
   14ba8:	10800d83 	ldbu	r2,54(r2)
   14bac:	e0bff845 	stb	r2,-31(fp)
    bitx_old              =  ptcb->OSTCBBitX;
   14bb0:	e0bff617 	ldw	r2,-40(fp)
   14bb4:	10800d43 	ldbu	r2,53(r2)
   14bb8:	e0bff885 	stb	r2,-30(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
   14bbc:	e0fff803 	ldbu	r3,-32(fp)
   14bc0:	008000b4 	movhi	r2,2
   14bc4:	10b41044 	addi	r2,r2,-12223
   14bc8:	10c5883a 	add	r2,r2,r3
   14bcc:	10c00003 	ldbu	r3,0(r2)
   14bd0:	e0bff883 	ldbu	r2,-30(fp)
   14bd4:	1884703a 	and	r2,r3,r2
   14bd8:	10803fcc 	andi	r2,r2,255
   14bdc:	10003726 	beq	r2,zero,14cbc <OSTaskChangePrio+0x2cc>
         OSRdyTbl[y_old] &= ~bitx_old;
   14be0:	e0fff803 	ldbu	r3,-32(fp)
   14be4:	e13ff803 	ldbu	r4,-32(fp)
   14be8:	008000b4 	movhi	r2,2
   14bec:	10b41044 	addi	r2,r2,-12223
   14bf0:	1105883a 	add	r2,r2,r4
   14bf4:	10800003 	ldbu	r2,0(r2)
   14bf8:	1009883a 	mov	r4,r2
   14bfc:	e0bff883 	ldbu	r2,-30(fp)
   14c00:	0084303a 	nor	r2,zero,r2
   14c04:	2084703a 	and	r2,r4,r2
   14c08:	1009883a 	mov	r4,r2
   14c0c:	008000b4 	movhi	r2,2
   14c10:	10b41044 	addi	r2,r2,-12223
   14c14:	10c5883a 	add	r2,r2,r3
   14c18:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
   14c1c:	e0fff803 	ldbu	r3,-32(fp)
   14c20:	008000b4 	movhi	r2,2
   14c24:	10b41044 	addi	r2,r2,-12223
   14c28:	10c5883a 	add	r2,r2,r3
   14c2c:	10800003 	ldbu	r2,0(r2)
   14c30:	10803fcc 	andi	r2,r2,255
   14c34:	10000b1e 	bne	r2,zero,14c64 <OSTaskChangePrio+0x274>
             OSRdyGrp &= ~bity_old;
   14c38:	e0bff843 	ldbu	r2,-31(fp)
   14c3c:	0084303a 	nor	r2,zero,r2
   14c40:	1007883a 	mov	r3,r2
   14c44:	008000b4 	movhi	r2,2
   14c48:	10b41004 	addi	r2,r2,-12224
   14c4c:	10800003 	ldbu	r2,0(r2)
   14c50:	1884703a 	and	r2,r3,r2
   14c54:	1007883a 	mov	r3,r2
   14c58:	008000b4 	movhi	r2,2
   14c5c:	10b41004 	addi	r2,r2,-12224
   14c60:	10c00005 	stb	r3,0(r2)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
   14c64:	008000b4 	movhi	r2,2
   14c68:	10b41004 	addi	r2,r2,-12224
   14c6c:	10c00003 	ldbu	r3,0(r2)
   14c70:	e0bff783 	ldbu	r2,-34(fp)
   14c74:	1884b03a 	or	r2,r3,r2
   14c78:	1007883a 	mov	r3,r2
   14c7c:	008000b4 	movhi	r2,2
   14c80:	10b41004 	addi	r2,r2,-12224
   14c84:	10c00005 	stb	r3,0(r2)
         OSRdyTbl[y_new] |= bitx_new;
   14c88:	e0fff703 	ldbu	r3,-36(fp)
   14c8c:	e13ff703 	ldbu	r4,-36(fp)
   14c90:	008000b4 	movhi	r2,2
   14c94:	10b41044 	addi	r2,r2,-12223
   14c98:	1105883a 	add	r2,r2,r4
   14c9c:	11000003 	ldbu	r4,0(r2)
   14ca0:	e0bff7c3 	ldbu	r2,-33(fp)
   14ca4:	2084b03a 	or	r2,r4,r2
   14ca8:	1009883a 	mov	r4,r2
   14cac:	008000b4 	movhi	r2,2
   14cb0:	10b41044 	addi	r2,r2,-12223
   14cb4:	10c5883a 	add	r2,r2,r3
   14cb8:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
   14cbc:	e0bff617 	ldw	r2,-40(fp)
   14cc0:	10800717 	ldw	r2,28(r2)
   14cc4:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
   14cc8:	e0bff317 	ldw	r2,-52(fp)
   14ccc:	10003326 	beq	r2,zero,14d9c <OSTaskChangePrio+0x3ac>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
   14cd0:	e0bff803 	ldbu	r2,-32(fp)
   14cd4:	e0fff803 	ldbu	r3,-32(fp)
   14cd8:	e13ff317 	ldw	r4,-52(fp)
   14cdc:	20c7883a 	add	r3,r4,r3
   14ce0:	18c00204 	addi	r3,r3,8
   14ce4:	18c000c3 	ldbu	r3,3(r3)
   14ce8:	1809883a 	mov	r4,r3
   14cec:	e0fff883 	ldbu	r3,-30(fp)
   14cf0:	00c6303a 	nor	r3,zero,r3
   14cf4:	20c6703a 	and	r3,r4,r3
   14cf8:	1809883a 	mov	r4,r3
   14cfc:	e0fff317 	ldw	r3,-52(fp)
   14d00:	1885883a 	add	r2,r3,r2
   14d04:	10800204 	addi	r2,r2,8
   14d08:	110000c5 	stb	r4,3(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
   14d0c:	e0bff803 	ldbu	r2,-32(fp)
   14d10:	e0fff317 	ldw	r3,-52(fp)
   14d14:	1885883a 	add	r2,r3,r2
   14d18:	10800204 	addi	r2,r2,8
   14d1c:	108000c3 	ldbu	r2,3(r2)
   14d20:	10803fcc 	andi	r2,r2,255
   14d24:	1000091e 	bne	r2,zero,14d4c <OSTaskChangePrio+0x35c>
            pevent->OSEventGrp    &= ~bity_old;
   14d28:	e0bff317 	ldw	r2,-52(fp)
   14d2c:	10800283 	ldbu	r2,10(r2)
   14d30:	1007883a 	mov	r3,r2
   14d34:	e0bff843 	ldbu	r2,-31(fp)
   14d38:	0084303a 	nor	r2,zero,r2
   14d3c:	1884703a 	and	r2,r3,r2
   14d40:	1007883a 	mov	r3,r2
   14d44:	e0bff317 	ldw	r2,-52(fp)
   14d48:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
   14d4c:	e0bff317 	ldw	r2,-52(fp)
   14d50:	10c00283 	ldbu	r3,10(r2)
   14d54:	e0bff783 	ldbu	r2,-34(fp)
   14d58:	1884b03a 	or	r2,r3,r2
   14d5c:	1007883a 	mov	r3,r2
   14d60:	e0bff317 	ldw	r2,-52(fp)
   14d64:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
   14d68:	e0bff703 	ldbu	r2,-36(fp)
   14d6c:	e0fff703 	ldbu	r3,-36(fp)
   14d70:	e13ff317 	ldw	r4,-52(fp)
   14d74:	20c7883a 	add	r3,r4,r3
   14d78:	18c00204 	addi	r3,r3,8
   14d7c:	190000c3 	ldbu	r4,3(r3)
   14d80:	e0fff7c3 	ldbu	r3,-33(fp)
   14d84:	20c6b03a 	or	r3,r4,r3
   14d88:	1809883a 	mov	r4,r3
   14d8c:	e0fff317 	ldw	r3,-52(fp)
   14d90:	1885883a 	add	r2,r3,r2
   14d94:	10800204 	addi	r2,r2,8
   14d98:	110000c5 	stb	r4,3(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
   14d9c:	e0bff617 	ldw	r2,-40(fp)
   14da0:	10800817 	ldw	r2,32(r2)
   14da4:	10004226 	beq	r2,zero,14eb0 <OSTaskChangePrio+0x4c0>
        pevents =  ptcb->OSTCBEventMultiPtr;
   14da8:	e0bff617 	ldw	r2,-40(fp)
   14dac:	10800817 	ldw	r2,32(r2)
   14db0:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
   14db4:	e0bff417 	ldw	r2,-48(fp)
   14db8:	10800017 	ldw	r2,0(r2)
   14dbc:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
   14dc0:	00003906 	br	14ea8 <OSTaskChangePrio+0x4b8>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
   14dc4:	e0bff803 	ldbu	r2,-32(fp)
   14dc8:	e0fff803 	ldbu	r3,-32(fp)
   14dcc:	e13ff317 	ldw	r4,-52(fp)
   14dd0:	20c7883a 	add	r3,r4,r3
   14dd4:	18c00204 	addi	r3,r3,8
   14dd8:	18c000c3 	ldbu	r3,3(r3)
   14ddc:	1809883a 	mov	r4,r3
   14de0:	e0fff883 	ldbu	r3,-30(fp)
   14de4:	00c6303a 	nor	r3,zero,r3
   14de8:	20c6703a 	and	r3,r4,r3
   14dec:	1809883a 	mov	r4,r3
   14df0:	e0fff317 	ldw	r3,-52(fp)
   14df4:	1885883a 	add	r2,r3,r2
   14df8:	10800204 	addi	r2,r2,8
   14dfc:	110000c5 	stb	r4,3(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
   14e00:	e0bff803 	ldbu	r2,-32(fp)
   14e04:	e0fff317 	ldw	r3,-52(fp)
   14e08:	1885883a 	add	r2,r3,r2
   14e0c:	10800204 	addi	r2,r2,8
   14e10:	108000c3 	ldbu	r2,3(r2)
   14e14:	10803fcc 	andi	r2,r2,255
   14e18:	1000091e 	bne	r2,zero,14e40 <OSTaskChangePrio+0x450>
                pevent->OSEventGrp    &= ~bity_old;
   14e1c:	e0bff317 	ldw	r2,-52(fp)
   14e20:	10800283 	ldbu	r2,10(r2)
   14e24:	1007883a 	mov	r3,r2
   14e28:	e0bff843 	ldbu	r2,-31(fp)
   14e2c:	0084303a 	nor	r2,zero,r2
   14e30:	1884703a 	and	r2,r3,r2
   14e34:	1007883a 	mov	r3,r2
   14e38:	e0bff317 	ldw	r2,-52(fp)
   14e3c:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
   14e40:	e0bff317 	ldw	r2,-52(fp)
   14e44:	10c00283 	ldbu	r3,10(r2)
   14e48:	e0bff783 	ldbu	r2,-34(fp)
   14e4c:	1884b03a 	or	r2,r3,r2
   14e50:	1007883a 	mov	r3,r2
   14e54:	e0bff317 	ldw	r2,-52(fp)
   14e58:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
   14e5c:	e0bff703 	ldbu	r2,-36(fp)
   14e60:	e0fff703 	ldbu	r3,-36(fp)
   14e64:	e13ff317 	ldw	r4,-52(fp)
   14e68:	20c7883a 	add	r3,r4,r3
   14e6c:	18c00204 	addi	r3,r3,8
   14e70:	190000c3 	ldbu	r4,3(r3)
   14e74:	e0fff7c3 	ldbu	r3,-33(fp)
   14e78:	20c6b03a 	or	r3,r4,r3
   14e7c:	1809883a 	mov	r4,r3
   14e80:	e0fff317 	ldw	r3,-52(fp)
   14e84:	1885883a 	add	r2,r3,r2
   14e88:	10800204 	addi	r2,r2,8
   14e8c:	110000c5 	stb	r4,3(r2)
            pevents++;
   14e90:	e0bff417 	ldw	r2,-48(fp)
   14e94:	10800104 	addi	r2,r2,4
   14e98:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
   14e9c:	e0bff417 	ldw	r2,-48(fp)
   14ea0:	10800017 	ldw	r2,0(r2)
   14ea4:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
   14ea8:	e0bff317 	ldw	r2,-52(fp)
   14eac:	103fc51e 	bne	r2,zero,14dc4 <OSTaskChangePrio+0x3d4>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
   14eb0:	e0bff617 	ldw	r2,-40(fp)
   14eb4:	e0ffff03 	ldbu	r3,-4(fp)
   14eb8:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
   14ebc:	e0bff617 	ldw	r2,-40(fp)
   14ec0:	e0fff703 	ldbu	r3,-36(fp)
   14ec4:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
   14ec8:	e0bff617 	ldw	r2,-40(fp)
   14ecc:	e0fff743 	ldbu	r3,-35(fp)
   14ed0:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
   14ed4:	e0bff617 	ldw	r2,-40(fp)
   14ed8:	e0fff783 	ldbu	r3,-34(fp)
   14edc:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
   14ee0:	e0bff617 	ldw	r2,-40(fp)
   14ee4:	e0fff7c3 	ldbu	r3,-33(fp)
   14ee8:	10c00d45 	stb	r3,53(r2)
   14eec:	e0bff517 	ldw	r2,-44(fp)
   14ef0:	e0bffd15 	stw	r2,-12(fp)
   14ef4:	e0bffd17 	ldw	r2,-12(fp)
   14ef8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   14efc:	008000b4 	movhi	r2,2
   14f00:	10b40444 	addi	r2,r2,-12271
   14f04:	10800003 	ldbu	r2,0(r2)
   14f08:	10803fcc 	andi	r2,r2,255
   14f0c:	10800058 	cmpnei	r2,r2,1
   14f10:	1000011e 	bne	r2,zero,14f18 <OSTaskChangePrio+0x528>
        OS_Sched();                                         /* Find new highest priority task          */
   14f14:	00104d80 	call	104d8 <OS_Sched>
    }
    return (OS_ERR_NONE);
   14f18:	0005883a 	mov	r2,zero
}
   14f1c:	e037883a 	mov	sp,fp
   14f20:	dfc00117 	ldw	ra,4(sp)
   14f24:	df000017 	ldw	fp,0(sp)
   14f28:	dec00204 	addi	sp,sp,8
   14f2c:	f800283a 	ret

00014f30 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
   14f30:	deffee04 	addi	sp,sp,-72
   14f34:	dfc01115 	stw	ra,68(sp)
   14f38:	df001015 	stw	fp,64(sp)
   14f3c:	df001004 	addi	fp,sp,64
   14f40:	e13ffc15 	stw	r4,-16(fp)
   14f44:	e17ffd15 	stw	r5,-12(fp)
   14f48:	e1bffe15 	stw	r6,-8(fp)
   14f4c:	3805883a 	mov	r2,r7
   14f50:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   14f54:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   14f58:	e0bfff03 	ldbu	r2,-4(fp)
   14f5c:	10800570 	cmpltui	r2,r2,21
   14f60:	1000021e 	bne	r2,zero,14f6c <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
   14f64:	00800a84 	movi	r2,42
   14f68:	00005b06 	br	150d8 <OSTaskCreate+0x1a8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14f6c:	0005303a 	rdctl	r2,status
   14f70:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14f74:	e0fff617 	ldw	r3,-40(fp)
   14f78:	00bfff84 	movi	r2,-2
   14f7c:	1884703a 	and	r2,r3,r2
   14f80:	1001703a 	wrctl	status,r2
  
  return context;
   14f84:	e0bff617 	ldw	r2,-40(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   14f88:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   14f8c:	008000b4 	movhi	r2,2
   14f90:	10b41204 	addi	r2,r2,-12216
   14f94:	10800003 	ldbu	r2,0(r2)
   14f98:	10803fcc 	andi	r2,r2,255
   14f9c:	10000626 	beq	r2,zero,14fb8 <OSTaskCreate+0x88>
   14fa0:	e0bff317 	ldw	r2,-52(fp)
   14fa4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14fa8:	e0bff717 	ldw	r2,-36(fp)
   14fac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   14fb0:	00800f04 	movi	r2,60
   14fb4:	00004806 	br	150d8 <OSTaskCreate+0x1a8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   14fb8:	e0ffff03 	ldbu	r3,-4(fp)
   14fbc:	008000b4 	movhi	r2,2
   14fc0:	1098d804 	addi	r2,r2,25440
   14fc4:	18c7883a 	add	r3,r3,r3
   14fc8:	18c7883a 	add	r3,r3,r3
   14fcc:	10c5883a 	add	r2,r2,r3
   14fd0:	10800017 	ldw	r2,0(r2)
   14fd4:	10003b1e 	bne	r2,zero,150c4 <OSTaskCreate+0x194>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   14fd8:	e0ffff03 	ldbu	r3,-4(fp)
   14fdc:	008000b4 	movhi	r2,2
   14fe0:	1098d804 	addi	r2,r2,25440
   14fe4:	18c7883a 	add	r3,r3,r3
   14fe8:	18c7883a 	add	r3,r3,r3
   14fec:	10c5883a 	add	r2,r2,r3
   14ff0:	00c00044 	movi	r3,1
   14ff4:	10c00015 	stw	r3,0(r2)
   14ff8:	e0bff317 	ldw	r2,-52(fp)
   14ffc:	e0bff815 	stw	r2,-32(fp)
   15000:	e0bff817 	ldw	r2,-32(fp)
   15004:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
   15008:	e13ffc17 	ldw	r4,-16(fp)
   1500c:	e17ffd17 	ldw	r5,-12(fp)
   15010:	e1bffe17 	ldw	r6,-8(fp)
   15014:	000f883a 	mov	r7,zero
   15018:	0019fa00 	call	19fa0 <OSTaskStkInit>
   1501c:	e0bff415 	stw	r2,-48(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
   15020:	e0bfff03 	ldbu	r2,-4(fp)
   15024:	d8000015 	stw	zero,0(sp)
   15028:	d8000115 	stw	zero,4(sp)
   1502c:	d8000215 	stw	zero,8(sp)
   15030:	1009883a 	mov	r4,r2
   15034:	e17ff417 	ldw	r5,-48(fp)
   15038:	000d883a 	mov	r6,zero
   1503c:	000f883a 	mov	r7,zero
   15040:	00108cc0 	call	108cc <OS_TCBInit>
   15044:	e0bff505 	stb	r2,-44(fp)
        if (err == OS_ERR_NONE) {
   15048:	e0bff503 	ldbu	r2,-44(fp)
   1504c:	1000081e 	bne	r2,zero,15070 <OSTaskCreate+0x140>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
   15050:	008000b4 	movhi	r2,2
   15054:	10b40444 	addi	r2,r2,-12271
   15058:	10800003 	ldbu	r2,0(r2)
   1505c:	10803fcc 	andi	r2,r2,255
   15060:	10800058 	cmpnei	r2,r2,1
   15064:	1000151e 	bne	r2,zero,150bc <OSTaskCreate+0x18c>
                OS_Sched();
   15068:	00104d80 	call	104d8 <OS_Sched>
   1506c:	00001306 	br	150bc <OSTaskCreate+0x18c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15070:	0005303a 	rdctl	r2,status
   15074:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15078:	e0fff917 	ldw	r3,-28(fp)
   1507c:	00bfff84 	movi	r2,-2
   15080:	1884703a 	and	r2,r3,r2
   15084:	1001703a 	wrctl	status,r2
  
  return context;
   15088:	e0bff917 	ldw	r2,-28(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   1508c:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
   15090:	e0ffff03 	ldbu	r3,-4(fp)
   15094:	008000b4 	movhi	r2,2
   15098:	1098d804 	addi	r2,r2,25440
   1509c:	18c7883a 	add	r3,r3,r3
   150a0:	18c7883a 	add	r3,r3,r3
   150a4:	10c5883a 	add	r2,r2,r3
   150a8:	10000015 	stw	zero,0(r2)
   150ac:	e0bff317 	ldw	r2,-52(fp)
   150b0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   150b4:	e0bffa17 	ldw	r2,-24(fp)
   150b8:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   150bc:	e0bff503 	ldbu	r2,-44(fp)
   150c0:	00000506 	br	150d8 <OSTaskCreate+0x1a8>
   150c4:	e0bff317 	ldw	r2,-52(fp)
   150c8:	e0bffb15 	stw	r2,-20(fp)
   150cc:	e0bffb17 	ldw	r2,-20(fp)
   150d0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   150d4:	00800a04 	movi	r2,40
}
   150d8:	e037883a 	mov	sp,fp
   150dc:	dfc00117 	ldw	ra,4(sp)
   150e0:	df000017 	ldw	fp,0(sp)
   150e4:	dec00204 	addi	sp,sp,8
   150e8:	f800283a 	ret

000150ec <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
   150ec:	deffec04 	addi	sp,sp,-80
   150f0:	dfc01315 	stw	ra,76(sp)
   150f4:	df001215 	stw	fp,72(sp)
   150f8:	df001204 	addi	fp,sp,72
   150fc:	e13ffa15 	stw	r4,-24(fp)
   15100:	e17ffb15 	stw	r5,-20(fp)
   15104:	e1bffc15 	stw	r6,-16(fp)
   15108:	3809883a 	mov	r4,r7
   1510c:	e0c00217 	ldw	r3,8(fp)
   15110:	e0800617 	ldw	r2,24(fp)
   15114:	e13ffd05 	stb	r4,-12(fp)
   15118:	e0fffe0d 	sth	r3,-8(fp)
   1511c:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   15120:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   15124:	e0bffd03 	ldbu	r2,-12(fp)
   15128:	10800570 	cmpltui	r2,r2,21
   1512c:	1000021e 	bne	r2,zero,15138 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
   15130:	00800a84 	movi	r2,42
   15134:	00006306 	br	152c4 <OSTaskCreateExt+0x1d8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15138:	0005303a 	rdctl	r2,status
   1513c:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15140:	e0fff417 	ldw	r3,-48(fp)
   15144:	00bfff84 	movi	r2,-2
   15148:	1884703a 	and	r2,r3,r2
   1514c:	1001703a 	wrctl	status,r2
  
  return context;
   15150:	e0bff417 	ldw	r2,-48(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   15154:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   15158:	008000b4 	movhi	r2,2
   1515c:	10b41204 	addi	r2,r2,-12216
   15160:	10800003 	ldbu	r2,0(r2)
   15164:	10803fcc 	andi	r2,r2,255
   15168:	10000626 	beq	r2,zero,15184 <OSTaskCreateExt+0x98>
   1516c:	e0bff117 	ldw	r2,-60(fp)
   15170:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15174:	e0bff517 	ldw	r2,-44(fp)
   15178:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   1517c:	00800f04 	movi	r2,60
   15180:	00005006 	br	152c4 <OSTaskCreateExt+0x1d8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   15184:	e0fffd03 	ldbu	r3,-12(fp)
   15188:	008000b4 	movhi	r2,2
   1518c:	1098d804 	addi	r2,r2,25440
   15190:	18c7883a 	add	r3,r3,r3
   15194:	18c7883a 	add	r3,r3,r3
   15198:	10c5883a 	add	r2,r2,r3
   1519c:	10800017 	ldw	r2,0(r2)
   151a0:	1000431e 	bne	r2,zero,152b0 <OSTaskCreateExt+0x1c4>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   151a4:	e0fffd03 	ldbu	r3,-12(fp)
   151a8:	008000b4 	movhi	r2,2
   151ac:	1098d804 	addi	r2,r2,25440
   151b0:	18c7883a 	add	r3,r3,r3
   151b4:	18c7883a 	add	r3,r3,r3
   151b8:	10c5883a 	add	r2,r2,r3
   151bc:	00c00044 	movi	r3,1
   151c0:	10c00015 	stw	r3,0(r2)
   151c4:	e0bff117 	ldw	r2,-60(fp)
   151c8:	e0bff615 	stw	r2,-40(fp)
   151cc:	e0bff617 	ldw	r2,-40(fp)
   151d0:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
   151d4:	e0bfff0b 	ldhu	r2,-4(fp)
   151d8:	e1000317 	ldw	r4,12(fp)
   151dc:	e1400417 	ldw	r5,16(fp)
   151e0:	100d883a 	mov	r6,r2
   151e4:	00162780 	call	16278 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
   151e8:	e0bfff0b 	ldhu	r2,-4(fp)
   151ec:	e13ffa17 	ldw	r4,-24(fp)
   151f0:	e17ffb17 	ldw	r5,-20(fp)
   151f4:	e1bffc17 	ldw	r6,-16(fp)
   151f8:	100f883a 	mov	r7,r2
   151fc:	0019fa00 	call	19fa0 <OSTaskStkInit>
   15200:	e0bff215 	stw	r2,-56(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
   15204:	e13ffd03 	ldbu	r4,-12(fp)
   15208:	e1fffe0b 	ldhu	r7,-8(fp)
   1520c:	e0bfff0b 	ldhu	r2,-4(fp)
   15210:	e0c00417 	ldw	r3,16(fp)
   15214:	d8c00015 	stw	r3,0(sp)
   15218:	e0c00517 	ldw	r3,20(fp)
   1521c:	d8c00115 	stw	r3,4(sp)
   15220:	d8800215 	stw	r2,8(sp)
   15224:	e17ff217 	ldw	r5,-56(fp)
   15228:	e1800317 	ldw	r6,12(fp)
   1522c:	00108cc0 	call	108cc <OS_TCBInit>
   15230:	e0bff305 	stb	r2,-52(fp)
        if (err == OS_ERR_NONE) {
   15234:	e0bff303 	ldbu	r2,-52(fp)
   15238:	1000081e 	bne	r2,zero,1525c <OSTaskCreateExt+0x170>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
   1523c:	008000b4 	movhi	r2,2
   15240:	10b40444 	addi	r2,r2,-12271
   15244:	10800003 	ldbu	r2,0(r2)
   15248:	10803fcc 	andi	r2,r2,255
   1524c:	10800058 	cmpnei	r2,r2,1
   15250:	1000151e 	bne	r2,zero,152a8 <OSTaskCreateExt+0x1bc>
                OS_Sched();
   15254:	00104d80 	call	104d8 <OS_Sched>
   15258:	00001306 	br	152a8 <OSTaskCreateExt+0x1bc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1525c:	0005303a 	rdctl	r2,status
   15260:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15264:	e0fff717 	ldw	r3,-36(fp)
   15268:	00bfff84 	movi	r2,-2
   1526c:	1884703a 	and	r2,r3,r2
   15270:	1001703a 	wrctl	status,r2
  
  return context;
   15274:	e0bff717 	ldw	r2,-36(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   15278:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
   1527c:	e0fffd03 	ldbu	r3,-12(fp)
   15280:	008000b4 	movhi	r2,2
   15284:	1098d804 	addi	r2,r2,25440
   15288:	18c7883a 	add	r3,r3,r3
   1528c:	18c7883a 	add	r3,r3,r3
   15290:	10c5883a 	add	r2,r2,r3
   15294:	10000015 	stw	zero,0(r2)
   15298:	e0bff117 	ldw	r2,-60(fp)
   1529c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   152a0:	e0bff817 	ldw	r2,-32(fp)
   152a4:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   152a8:	e0bff303 	ldbu	r2,-52(fp)
   152ac:	00000506 	br	152c4 <OSTaskCreateExt+0x1d8>
   152b0:	e0bff117 	ldw	r2,-60(fp)
   152b4:	e0bff915 	stw	r2,-28(fp)
   152b8:	e0bff917 	ldw	r2,-28(fp)
   152bc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   152c0:	00800a04 	movi	r2,40
}
   152c4:	e037883a 	mov	sp,fp
   152c8:	dfc00117 	ldw	ra,4(sp)
   152cc:	df000017 	ldw	fp,0(sp)
   152d0:	dec00204 	addi	sp,sp,8
   152d4:	f800283a 	ret

000152d8 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
   152d8:	defff404 	addi	sp,sp,-48
   152dc:	dfc00b15 	stw	ra,44(sp)
   152e0:	df000a15 	stw	fp,40(sp)
   152e4:	df000a04 	addi	fp,sp,40
   152e8:	2005883a 	mov	r2,r4
   152ec:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
   152f0:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
   152f4:	008000b4 	movhi	r2,2
   152f8:	10b41204 	addi	r2,r2,-12216
   152fc:	10800003 	ldbu	r2,0(r2)
   15300:	10803fcc 	andi	r2,r2,255
   15304:	10000226 	beq	r2,zero,15310 <OSTaskDel+0x38>
        return (OS_ERR_TASK_DEL_ISR);
   15308:	00801004 	movi	r2,64
   1530c:	0000e506 	br	156a4 <OSTaskDel+0x3cc>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
   15310:	e0bfff03 	ldbu	r2,-4(fp)
   15314:	10800518 	cmpnei	r2,r2,20
   15318:	1000021e 	bne	r2,zero,15324 <OSTaskDel+0x4c>
        return (OS_ERR_TASK_DEL_IDLE);
   1531c:	00800f84 	movi	r2,62
   15320:	0000e006 	br	156a4 <OSTaskDel+0x3cc>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
   15324:	e0bfff03 	ldbu	r2,-4(fp)
   15328:	10800530 	cmpltui	r2,r2,20
   1532c:	1000051e 	bne	r2,zero,15344 <OSTaskDel+0x6c>
        if (prio != OS_PRIO_SELF) {
   15330:	e0bfff03 	ldbu	r2,-4(fp)
   15334:	10803fe0 	cmpeqi	r2,r2,255
   15338:	1000021e 	bne	r2,zero,15344 <OSTaskDel+0x6c>
            return (OS_ERR_PRIO_INVALID);
   1533c:	00800a84 	movi	r2,42
   15340:	0000d806 	br	156a4 <OSTaskDel+0x3cc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15344:	0005303a 	rdctl	r2,status
   15348:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1534c:	e0fff917 	ldw	r3,-28(fp)
   15350:	00bfff84 	movi	r2,-2
   15354:	1884703a 	and	r2,r3,r2
   15358:	1001703a 	wrctl	status,r2
  
  return context;
   1535c:	e0bff917 	ldw	r2,-28(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
   15360:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
   15364:	e0bfff03 	ldbu	r2,-4(fp)
   15368:	10803fd8 	cmpnei	r2,r2,255
   1536c:	1000051e 	bne	r2,zero,15384 <OSTaskDel+0xac>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
   15370:	008000b4 	movhi	r2,2
   15374:	10b41304 	addi	r2,r2,-12212
   15378:	10800017 	ldw	r2,0(r2)
   1537c:	10800c83 	ldbu	r2,50(r2)
   15380:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   15384:	e0ffff03 	ldbu	r3,-4(fp)
   15388:	008000b4 	movhi	r2,2
   1538c:	1098d804 	addi	r2,r2,25440
   15390:	18c7883a 	add	r3,r3,r3
   15394:	18c7883a 	add	r3,r3,r3
   15398:	10c5883a 	add	r2,r2,r3
   1539c:	10800017 	ldw	r2,0(r2)
   153a0:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
   153a4:	e0bff717 	ldw	r2,-36(fp)
   153a8:	1000061e 	bne	r2,zero,153c4 <OSTaskDel+0xec>
   153ac:	e0bff617 	ldw	r2,-40(fp)
   153b0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   153b4:	e0bffa17 	ldw	r2,-24(fp)
   153b8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   153bc:	008010c4 	movi	r2,67
   153c0:	0000b806 	br	156a4 <OSTaskDel+0x3cc>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
   153c4:	e0bff717 	ldw	r2,-36(fp)
   153c8:	10800058 	cmpnei	r2,r2,1
   153cc:	1000061e 	bne	r2,zero,153e8 <OSTaskDel+0x110>
   153d0:	e0bff617 	ldw	r2,-40(fp)
   153d4:	e0bffb15 	stw	r2,-20(fp)
   153d8:	e0bffb17 	ldw	r2,-20(fp)
   153dc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   153e0:	00800f44 	movi	r2,61
   153e4:	0000af06 	br	156a4 <OSTaskDel+0x3cc>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
   153e8:	e0bff717 	ldw	r2,-36(fp)
   153ec:	10800d03 	ldbu	r2,52(r2)
   153f0:	10c03fcc 	andi	r3,r2,255
   153f4:	e0bff717 	ldw	r2,-36(fp)
   153f8:	10800d03 	ldbu	r2,52(r2)
   153fc:	11003fcc 	andi	r4,r2,255
   15400:	008000b4 	movhi	r2,2
   15404:	10b41044 	addi	r2,r2,-12223
   15408:	1105883a 	add	r2,r2,r4
   1540c:	10800003 	ldbu	r2,0(r2)
   15410:	1009883a 	mov	r4,r2
   15414:	e0bff717 	ldw	r2,-36(fp)
   15418:	10800d43 	ldbu	r2,53(r2)
   1541c:	0084303a 	nor	r2,zero,r2
   15420:	2084703a 	and	r2,r4,r2
   15424:	1009883a 	mov	r4,r2
   15428:	008000b4 	movhi	r2,2
   1542c:	10b41044 	addi	r2,r2,-12223
   15430:	10c5883a 	add	r2,r2,r3
   15434:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
   15438:	e0bff717 	ldw	r2,-36(fp)
   1543c:	10800d03 	ldbu	r2,52(r2)
   15440:	10c03fcc 	andi	r3,r2,255
   15444:	008000b4 	movhi	r2,2
   15448:	10b41044 	addi	r2,r2,-12223
   1544c:	10c5883a 	add	r2,r2,r3
   15450:	10800003 	ldbu	r2,0(r2)
   15454:	10803fcc 	andi	r2,r2,255
   15458:	10000c1e 	bne	r2,zero,1548c <OSTaskDel+0x1b4>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
   1545c:	e0bff717 	ldw	r2,-36(fp)
   15460:	10800d83 	ldbu	r2,54(r2)
   15464:	0084303a 	nor	r2,zero,r2
   15468:	1007883a 	mov	r3,r2
   1546c:	008000b4 	movhi	r2,2
   15470:	10b41004 	addi	r2,r2,-12224
   15474:	10800003 	ldbu	r2,0(r2)
   15478:	1884703a 	and	r2,r3,r2
   1547c:	1007883a 	mov	r3,r2
   15480:	008000b4 	movhi	r2,2
   15484:	10b41004 	addi	r2,r2,-12224
   15488:	10c00005 	stb	r3,0(r2)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
   1548c:	e0bff717 	ldw	r2,-36(fp)
   15490:	10800717 	ldw	r2,28(r2)
   15494:	10000526 	beq	r2,zero,154ac <OSTaskDel+0x1d4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
   15498:	e0bff717 	ldw	r2,-36(fp)
   1549c:	10800717 	ldw	r2,28(r2)
   154a0:	e13ff717 	ldw	r4,-36(fp)
   154a4:	100b883a 	mov	r5,r2
   154a8:	000feb00 	call	feb0 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
   154ac:	e0bff717 	ldw	r2,-36(fp)
   154b0:	10800817 	ldw	r2,32(r2)
   154b4:	10000526 	beq	r2,zero,154cc <OSTaskDel+0x1f4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   154b8:	e0bff717 	ldw	r2,-36(fp)
   154bc:	10800817 	ldw	r2,32(r2)
   154c0:	e13ff717 	ldw	r4,-36(fp)
   154c4:	100b883a 	mov	r5,r2
   154c8:	000ff640 	call	ff64 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
   154cc:	e0bff717 	ldw	r2,-36(fp)
   154d0:	10800a17 	ldw	r2,40(r2)
   154d4:	e0bff815 	stw	r2,-32(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
   154d8:	e0bff817 	ldw	r2,-32(fp)
   154dc:	10000226 	beq	r2,zero,154e8 <OSTaskDel+0x210>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
   154e0:	e13ff817 	ldw	r4,-32(fp)
   154e4:	00124a80 	call	124a8 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
   154e8:	e0bff717 	ldw	r2,-36(fp)
   154ec:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
   154f0:	e0bff717 	ldw	r2,-36(fp)
   154f4:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
   154f8:	e0bff717 	ldw	r2,-36(fp)
   154fc:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
   15500:	008000b4 	movhi	r2,2
   15504:	10b40404 	addi	r2,r2,-12272
   15508:	10800003 	ldbu	r2,0(r2)
   1550c:	10803fcc 	andi	r2,r2,255
   15510:	10803fe0 	cmpeqi	r2,r2,255
   15514:	1000081e 	bne	r2,zero,15538 <OSTaskDel+0x260>
        OSLockNesting++;
   15518:	008000b4 	movhi	r2,2
   1551c:	10b40404 	addi	r2,r2,-12272
   15520:	10800003 	ldbu	r2,0(r2)
   15524:	10800044 	addi	r2,r2,1
   15528:	1007883a 	mov	r3,r2
   1552c:	008000b4 	movhi	r2,2
   15530:	10b40404 	addi	r2,r2,-12272
   15534:	10c00005 	stb	r3,0(r2)
   15538:	e0bff617 	ldw	r2,-40(fp)
   1553c:	e0bffc15 	stw	r2,-16(fp)
   15540:	e0bffc17 	ldw	r2,-16(fp)
   15544:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
   15548:	000faa40 	call	faa4 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1554c:	0005303a 	rdctl	r2,status
   15550:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15554:	e0fffd17 	ldw	r3,-12(fp)
   15558:	00bfff84 	movi	r2,-2
   1555c:	1884703a 	and	r2,r3,r2
   15560:	1001703a 	wrctl	status,r2
  
  return context;
   15564:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
   15568:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
   1556c:	008000b4 	movhi	r2,2
   15570:	10b40404 	addi	r2,r2,-12272
   15574:	10800003 	ldbu	r2,0(r2)
   15578:	10803fcc 	andi	r2,r2,255
   1557c:	10000826 	beq	r2,zero,155a0 <OSTaskDel+0x2c8>
        OSLockNesting--;
   15580:	008000b4 	movhi	r2,2
   15584:	10b40404 	addi	r2,r2,-12272
   15588:	10800003 	ldbu	r2,0(r2)
   1558c:	10bfffc4 	addi	r2,r2,-1
   15590:	1007883a 	mov	r3,r2
   15594:	008000b4 	movhi	r2,2
   15598:	10b40404 	addi	r2,r2,-12272
   1559c:	10c00005 	stb	r3,0(r2)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
   155a0:	e13ff717 	ldw	r4,-36(fp)
   155a4:	001a11c0 	call	1a11c <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
   155a8:	008000b4 	movhi	r2,2
   155ac:	10b40c44 	addi	r2,r2,-12239
   155b0:	10800003 	ldbu	r2,0(r2)
   155b4:	10bfffc4 	addi	r2,r2,-1
   155b8:	1007883a 	mov	r3,r2
   155bc:	008000b4 	movhi	r2,2
   155c0:	10b40c44 	addi	r2,r2,-12239
   155c4:	10c00005 	stb	r3,0(r2)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
   155c8:	e0ffff03 	ldbu	r3,-4(fp)
   155cc:	008000b4 	movhi	r2,2
   155d0:	1098d804 	addi	r2,r2,25440
   155d4:	18c7883a 	add	r3,r3,r3
   155d8:	18c7883a 	add	r3,r3,r3
   155dc:	10c5883a 	add	r2,r2,r3
   155e0:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
   155e4:	e0bff717 	ldw	r2,-36(fp)
   155e8:	10800617 	ldw	r2,24(r2)
   155ec:	1000091e 	bne	r2,zero,15614 <OSTaskDel+0x33c>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
   155f0:	e0bff717 	ldw	r2,-36(fp)
   155f4:	10800517 	ldw	r2,20(r2)
   155f8:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
   155fc:	e0bff717 	ldw	r2,-36(fp)
   15600:	10c00517 	ldw	r3,20(r2)
   15604:	008000b4 	movhi	r2,2
   15608:	10b40704 	addi	r2,r2,-12260
   1560c:	10c00015 	stw	r3,0(r2)
   15610:	00000a06 	br	1563c <OSTaskDel+0x364>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
   15614:	e0bff717 	ldw	r2,-36(fp)
   15618:	10800617 	ldw	r2,24(r2)
   1561c:	e0fff717 	ldw	r3,-36(fp)
   15620:	18c00517 	ldw	r3,20(r3)
   15624:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
   15628:	e0bff717 	ldw	r2,-36(fp)
   1562c:	10800517 	ldw	r2,20(r2)
   15630:	e0fff717 	ldw	r3,-36(fp)
   15634:	18c00617 	ldw	r3,24(r3)
   15638:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
   1563c:	008000b4 	movhi	r2,2
   15640:	10b40b04 	addi	r2,r2,-12244
   15644:	10c00017 	ldw	r3,0(r2)
   15648:	e0bff717 	ldw	r2,-36(fp)
   1564c:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
   15650:	008000b4 	movhi	r2,2
   15654:	10b40b04 	addi	r2,r2,-12244
   15658:	e0fff717 	ldw	r3,-36(fp)
   1565c:	10c00015 	stw	r3,0(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
   15660:	e0bff717 	ldw	r2,-36(fp)
   15664:	00c00fc4 	movi	r3,63
   15668:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   1566c:	e0bff717 	ldw	r2,-36(fp)
   15670:	10001345 	stb	zero,77(r2)
   15674:	e0bff617 	ldw	r2,-40(fp)
   15678:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1567c:	e0bffe17 	ldw	r2,-8(fp)
   15680:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   15684:	008000b4 	movhi	r2,2
   15688:	10b40444 	addi	r2,r2,-12271
   1568c:	10800003 	ldbu	r2,0(r2)
   15690:	10803fcc 	andi	r2,r2,255
   15694:	10800058 	cmpnei	r2,r2,1
   15698:	1000011e 	bne	r2,zero,156a0 <OSTaskDel+0x3c8>
        OS_Sched();                                     /* Find new highest priority task              */
   1569c:	00104d80 	call	104d8 <OS_Sched>
    }
    return (OS_ERR_NONE);
   156a0:	0005883a 	mov	r2,zero
}
   156a4:	e037883a 	mov	sp,fp
   156a8:	dfc00117 	ldw	ra,4(sp)
   156ac:	df000017 	ldw	fp,0(sp)
   156b0:	dec00204 	addi	sp,sp,8
   156b4:	f800283a 	ret

000156b8 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
   156b8:	defff504 	addi	sp,sp,-44
   156bc:	df000a15 	stw	fp,40(sp)
   156c0:	df000a04 	addi	fp,sp,40
   156c4:	2005883a 	mov	r2,r4
   156c8:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   156cc:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
   156d0:	e0bfff03 	ldbu	r2,-4(fp)
   156d4:	10800518 	cmpnei	r2,r2,20
   156d8:	1000021e 	bne	r2,zero,156e4 <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
   156dc:	00800f84 	movi	r2,62
   156e0:	00004706 	br	15800 <OSTaskDelReq+0x148>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   156e4:	e0bfff03 	ldbu	r2,-4(fp)
   156e8:	10800530 	cmpltui	r2,r2,20
   156ec:	1000051e 	bne	r2,zero,15704 <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
   156f0:	e0bfff03 	ldbu	r2,-4(fp)
   156f4:	10803fe0 	cmpeqi	r2,r2,255
   156f8:	1000021e 	bne	r2,zero,15704 <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
   156fc:	00800a84 	movi	r2,42
   15700:	00003f06 	br	15800 <OSTaskDelReq+0x148>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
   15704:	e0bfff03 	ldbu	r2,-4(fp)
   15708:	10803fd8 	cmpnei	r2,r2,255
   1570c:	1000131e 	bne	r2,zero,1575c <OSTaskDelReq+0xa4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15710:	0005303a 	rdctl	r2,status
   15714:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15718:	e0fff917 	ldw	r3,-28(fp)
   1571c:	00bfff84 	movi	r2,-2
   15720:	1884703a 	and	r2,r3,r2
   15724:	1001703a 	wrctl	status,r2
  
  return context;
   15728:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
   1572c:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
   15730:	008000b4 	movhi	r2,2
   15734:	10b41304 	addi	r2,r2,-12212
   15738:	10800017 	ldw	r2,0(r2)
   1573c:	10800dc3 	ldbu	r2,55(r2)
   15740:	e0bff705 	stb	r2,-36(fp)
   15744:	e0bff617 	ldw	r2,-40(fp)
   15748:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1574c:	e0bffa17 	ldw	r2,-24(fp)
   15750:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
   15754:	e0bff703 	ldbu	r2,-36(fp)
   15758:	00002906 	br	15800 <OSTaskDelReq+0x148>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1575c:	0005303a 	rdctl	r2,status
   15760:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15764:	e0fffb17 	ldw	r3,-20(fp)
   15768:	00bfff84 	movi	r2,-2
   1576c:	1884703a 	and	r2,r3,r2
   15770:	1001703a 	wrctl	status,r2
  
  return context;
   15774:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   15778:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   1577c:	e0ffff03 	ldbu	r3,-4(fp)
   15780:	008000b4 	movhi	r2,2
   15784:	1098d804 	addi	r2,r2,25440
   15788:	18c7883a 	add	r3,r3,r3
   1578c:	18c7883a 	add	r3,r3,r3
   15790:	10c5883a 	add	r2,r2,r3
   15794:	10800017 	ldw	r2,0(r2)
   15798:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
   1579c:	e0bff817 	ldw	r2,-32(fp)
   157a0:	1000061e 	bne	r2,zero,157bc <OSTaskDelReq+0x104>
   157a4:	e0bff617 	ldw	r2,-40(fp)
   157a8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   157ac:	e0bffc17 	ldw	r2,-16(fp)
   157b0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
   157b4:	008010c4 	movi	r2,67
   157b8:	00001106 	br	15800 <OSTaskDelReq+0x148>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
   157bc:	e0bff817 	ldw	r2,-32(fp)
   157c0:	10800058 	cmpnei	r2,r2,1
   157c4:	1000061e 	bne	r2,zero,157e0 <OSTaskDelReq+0x128>
   157c8:	e0bff617 	ldw	r2,-40(fp)
   157cc:	e0bffd15 	stw	r2,-12(fp)
   157d0:	e0bffd17 	ldw	r2,-12(fp)
   157d4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   157d8:	00800f44 	movi	r2,61
   157dc:	00000806 	br	15800 <OSTaskDelReq+0x148>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
   157e0:	e0bff817 	ldw	r2,-32(fp)
   157e4:	00c00fc4 	movi	r3,63
   157e8:	10c00dc5 	stb	r3,55(r2)
   157ec:	e0bff617 	ldw	r2,-40(fp)
   157f0:	e0bffe15 	stw	r2,-8(fp)
   157f4:	e0bffe17 	ldw	r2,-8(fp)
   157f8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   157fc:	0005883a 	mov	r2,zero
}
   15800:	e037883a 	mov	sp,fp
   15804:	df000017 	ldw	fp,0(sp)
   15808:	dec00104 	addi	sp,sp,4
   1580c:	f800283a 	ret

00015810 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
   15810:	defff404 	addi	sp,sp,-48
   15814:	dfc00b15 	stw	ra,44(sp)
   15818:	df000a15 	stw	fp,40(sp)
   1581c:	df000a04 	addi	fp,sp,40
   15820:	2005883a 	mov	r2,r4
   15824:	e17ffe15 	stw	r5,-8(fp)
   15828:	e1bfff15 	stw	r6,-4(fp)
   1582c:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
   15830:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
   15834:	e0bfff17 	ldw	r2,-4(fp)
   15838:	1000021e 	bne	r2,zero,15844 <OSTaskNameGet+0x34>
        return (0);
   1583c:	0005883a 	mov	r2,zero
   15840:	00005806 	br	159a4 <OSTaskNameGet+0x194>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
   15844:	e0bffd03 	ldbu	r2,-12(fp)
   15848:	10800570 	cmpltui	r2,r2,21
   1584c:	1000081e 	bne	r2,zero,15870 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
   15850:	e0bffd03 	ldbu	r2,-12(fp)
   15854:	10803fe0 	cmpeqi	r2,r2,255
   15858:	1000051e 	bne	r2,zero,15870 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
   1585c:	e0bfff17 	ldw	r2,-4(fp)
   15860:	00c00a84 	movi	r3,42
   15864:	10c00005 	stb	r3,0(r2)
            return (0);
   15868:	0005883a 	mov	r2,zero
   1586c:	00004d06 	br	159a4 <OSTaskNameGet+0x194>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
   15870:	e0bffe17 	ldw	r2,-8(fp)
   15874:	1000051e 	bne	r2,zero,1588c <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
   15878:	e0bfff17 	ldw	r2,-4(fp)
   1587c:	00c00304 	movi	r3,12
   15880:	10c00005 	stb	r3,0(r2)
        return (0);
   15884:	0005883a 	mov	r2,zero
   15888:	00004606 	br	159a4 <OSTaskNameGet+0x194>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
   1588c:	008000b4 	movhi	r2,2
   15890:	10b41204 	addi	r2,r2,-12216
   15894:	10800003 	ldbu	r2,0(r2)
   15898:	10803fcc 	andi	r2,r2,255
   1589c:	10000526 	beq	r2,zero,158b4 <OSTaskNameGet+0xa4>
        *perr = OS_ERR_NAME_GET_ISR;
   158a0:	e0bfff17 	ldw	r2,-4(fp)
   158a4:	00c00444 	movi	r3,17
   158a8:	10c00005 	stb	r3,0(r2)
        return (0);
   158ac:	0005883a 	mov	r2,zero
   158b0:	00003c06 	br	159a4 <OSTaskNameGet+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   158b4:	0005303a 	rdctl	r2,status
   158b8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   158bc:	e0fff917 	ldw	r3,-28(fp)
   158c0:	00bfff84 	movi	r2,-2
   158c4:	1884703a 	and	r2,r3,r2
   158c8:	1001703a 	wrctl	status,r2
  
  return context;
   158cc:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   158d0:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
   158d4:	e0bffd03 	ldbu	r2,-12(fp)
   158d8:	10803fd8 	cmpnei	r2,r2,255
   158dc:	1000051e 	bne	r2,zero,158f4 <OSTaskNameGet+0xe4>
        prio = OSTCBCur->OSTCBPrio;
   158e0:	008000b4 	movhi	r2,2
   158e4:	10b41304 	addi	r2,r2,-12212
   158e8:	10800017 	ldw	r2,0(r2)
   158ec:	10800c83 	ldbu	r2,50(r2)
   158f0:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   158f4:	e0fffd03 	ldbu	r3,-12(fp)
   158f8:	008000b4 	movhi	r2,2
   158fc:	1098d804 	addi	r2,r2,25440
   15900:	18c7883a 	add	r3,r3,r3
   15904:	18c7883a 	add	r3,r3,r3
   15908:	10c5883a 	add	r2,r2,r3
   1590c:	10800017 	ldw	r2,0(r2)
   15910:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
   15914:	e0bff717 	ldw	r2,-36(fp)
   15918:	1000091e 	bne	r2,zero,15940 <OSTaskNameGet+0x130>
   1591c:	e0bff617 	ldw	r2,-40(fp)
   15920:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15924:	e0bffa17 	ldw	r2,-24(fp)
   15928:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
   1592c:	e0bfff17 	ldw	r2,-4(fp)
   15930:	00c010c4 	movi	r3,67
   15934:	10c00005 	stb	r3,0(r2)
        return (0);
   15938:	0005883a 	mov	r2,zero
   1593c:	00001906 	br	159a4 <OSTaskNameGet+0x194>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
   15940:	e0bff717 	ldw	r2,-36(fp)
   15944:	10800058 	cmpnei	r2,r2,1
   15948:	1000091e 	bne	r2,zero,15970 <OSTaskNameGet+0x160>
   1594c:	e0bff617 	ldw	r2,-40(fp)
   15950:	e0bffb15 	stw	r2,-20(fp)
   15954:	e0bffb17 	ldw	r2,-20(fp)
   15958:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
   1595c:	e0bfff17 	ldw	r2,-4(fp)
   15960:	00c010c4 	movi	r3,67
   15964:	10c00005 	stb	r3,0(r2)
        return (0);
   15968:	0005883a 	mov	r2,zero
   1596c:	00000d06 	br	159a4 <OSTaskNameGet+0x194>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
   15970:	e0bff717 	ldw	r2,-36(fp)
   15974:	10801304 	addi	r2,r2,76
   15978:	e13ffe17 	ldw	r4,-8(fp)
   1597c:	100b883a 	mov	r5,r2
   15980:	00106140 	call	10614 <OS_StrCopy>
   15984:	e0bff805 	stb	r2,-32(fp)
   15988:	e0bff617 	ldw	r2,-40(fp)
   1598c:	e0bffc15 	stw	r2,-16(fp)
   15990:	e0bffc17 	ldw	r2,-16(fp)
   15994:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   15998:	e0bfff17 	ldw	r2,-4(fp)
   1599c:	10000005 	stb	zero,0(r2)
    return (len);
   159a0:	e0bff803 	ldbu	r2,-32(fp)
}
   159a4:	e037883a 	mov	sp,fp
   159a8:	dfc00117 	ldw	ra,4(sp)
   159ac:	df000017 	ldw	fp,0(sp)
   159b0:	dec00204 	addi	sp,sp,8
   159b4:	f800283a 	ret

000159b8 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
   159b8:	defff304 	addi	sp,sp,-52
   159bc:	dfc00c15 	stw	ra,48(sp)
   159c0:	df000b15 	stw	fp,44(sp)
   159c4:	df000b04 	addi	fp,sp,44
   159c8:	2005883a 	mov	r2,r4
   159cc:	e17ffe15 	stw	r5,-8(fp)
   159d0:	e1bfff15 	stw	r6,-4(fp)
   159d4:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   159d8:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   159dc:	e0bfff17 	ldw	r2,-4(fp)
   159e0:	1000011e 	bne	r2,zero,159e8 <OSTaskNameSet+0x30>
        return;
   159e4:	00005f06 	br	15b64 <OSTaskNameSet+0x1ac>
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
   159e8:	e0bffd03 	ldbu	r2,-12(fp)
   159ec:	10800570 	cmpltui	r2,r2,21
   159f0:	1000071e 	bne	r2,zero,15a10 <OSTaskNameSet+0x58>
        if (prio != OS_PRIO_SELF) {
   159f4:	e0bffd03 	ldbu	r2,-12(fp)
   159f8:	10803fe0 	cmpeqi	r2,r2,255
   159fc:	1000041e 	bne	r2,zero,15a10 <OSTaskNameSet+0x58>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
   15a00:	e0bfff17 	ldw	r2,-4(fp)
   15a04:	00c00a84 	movi	r3,42
   15a08:	10c00005 	stb	r3,0(r2)
            return;
   15a0c:	00005506 	br	15b64 <OSTaskNameSet+0x1ac>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
   15a10:	e0bffe17 	ldw	r2,-8(fp)
   15a14:	1000041e 	bne	r2,zero,15a28 <OSTaskNameSet+0x70>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
   15a18:	e0bfff17 	ldw	r2,-4(fp)
   15a1c:	00c00304 	movi	r3,12
   15a20:	10c00005 	stb	r3,0(r2)
        return;
   15a24:	00004f06 	br	15b64 <OSTaskNameSet+0x1ac>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
   15a28:	008000b4 	movhi	r2,2
   15a2c:	10b41204 	addi	r2,r2,-12216
   15a30:	10800003 	ldbu	r2,0(r2)
   15a34:	10803fcc 	andi	r2,r2,255
   15a38:	10000426 	beq	r2,zero,15a4c <OSTaskNameSet+0x94>
        *perr = OS_ERR_NAME_SET_ISR;
   15a3c:	e0bfff17 	ldw	r2,-4(fp)
   15a40:	00c00484 	movi	r3,18
   15a44:	10c00005 	stb	r3,0(r2)
        return;
   15a48:	00004606 	br	15b64 <OSTaskNameSet+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15a4c:	0005303a 	rdctl	r2,status
   15a50:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15a54:	e0fff817 	ldw	r3,-32(fp)
   15a58:	00bfff84 	movi	r2,-2
   15a5c:	1884703a 	and	r2,r3,r2
   15a60:	1001703a 	wrctl	status,r2
  
  return context;
   15a64:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   15a68:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
   15a6c:	e0bffd03 	ldbu	r2,-12(fp)
   15a70:	10803fd8 	cmpnei	r2,r2,255
   15a74:	1000051e 	bne	r2,zero,15a8c <OSTaskNameSet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
   15a78:	008000b4 	movhi	r2,2
   15a7c:	10b41304 	addi	r2,r2,-12212
   15a80:	10800017 	ldw	r2,0(r2)
   15a84:	10800c83 	ldbu	r2,50(r2)
   15a88:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   15a8c:	e0fffd03 	ldbu	r3,-12(fp)
   15a90:	008000b4 	movhi	r2,2
   15a94:	1098d804 	addi	r2,r2,25440
   15a98:	18c7883a 	add	r3,r3,r3
   15a9c:	18c7883a 	add	r3,r3,r3
   15aa0:	10c5883a 	add	r2,r2,r3
   15aa4:	10800017 	ldw	r2,0(r2)
   15aa8:	e0bff615 	stw	r2,-40(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
   15aac:	e0bff617 	ldw	r2,-40(fp)
   15ab0:	1000081e 	bne	r2,zero,15ad4 <OSTaskNameSet+0x11c>
   15ab4:	e0bff517 	ldw	r2,-44(fp)
   15ab8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15abc:	e0bff917 	ldw	r2,-28(fp)
   15ac0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
   15ac4:	e0bfff17 	ldw	r2,-4(fp)
   15ac8:	00c010c4 	movi	r3,67
   15acc:	10c00005 	stb	r3,0(r2)
        return;
   15ad0:	00002406 	br	15b64 <OSTaskNameSet+0x1ac>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
   15ad4:	e0bff617 	ldw	r2,-40(fp)
   15ad8:	10800058 	cmpnei	r2,r2,1
   15adc:	1000081e 	bne	r2,zero,15b00 <OSTaskNameSet+0x148>
   15ae0:	e0bff517 	ldw	r2,-44(fp)
   15ae4:	e0bffa15 	stw	r2,-24(fp)
   15ae8:	e0bffa17 	ldw	r2,-24(fp)
   15aec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
   15af0:	e0bfff17 	ldw	r2,-4(fp)
   15af4:	00c010c4 	movi	r3,67
   15af8:	10c00005 	stb	r3,0(r2)
        return;
   15afc:	00001906 	br	15b64 <OSTaskNameSet+0x1ac>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
   15b00:	e13ffe17 	ldw	r4,-8(fp)
   15b04:	00106880 	call	10688 <OS_StrLen>
   15b08:	e0bff705 	stb	r2,-36(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
   15b0c:	e0bff703 	ldbu	r2,-36(fp)
   15b10:	10800830 	cmpltui	r2,r2,32
   15b14:	1000081e 	bne	r2,zero,15b38 <OSTaskNameSet+0x180>
   15b18:	e0bff517 	ldw	r2,-44(fp)
   15b1c:	e0bffb15 	stw	r2,-20(fp)
   15b20:	e0bffb17 	ldw	r2,-20(fp)
   15b24:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
   15b28:	e0bfff17 	ldw	r2,-4(fp)
   15b2c:	00c01044 	movi	r3,65
   15b30:	10c00005 	stb	r3,0(r2)
        return;
   15b34:	00000b06 	br	15b64 <OSTaskNameSet+0x1ac>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
   15b38:	e0bff617 	ldw	r2,-40(fp)
   15b3c:	10801304 	addi	r2,r2,76
   15b40:	1009883a 	mov	r4,r2
   15b44:	e17ffe17 	ldw	r5,-8(fp)
   15b48:	00106140 	call	10614 <OS_StrCopy>
   15b4c:	e0bff517 	ldw	r2,-44(fp)
   15b50:	e0bffc15 	stw	r2,-16(fp)
   15b54:	e0bffc17 	ldw	r2,-16(fp)
   15b58:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   15b5c:	e0bfff17 	ldw	r2,-4(fp)
   15b60:	10000005 	stb	zero,0(r2)
}
   15b64:	e037883a 	mov	sp,fp
   15b68:	dfc00117 	ldw	ra,4(sp)
   15b6c:	df000017 	ldw	fp,0(sp)
   15b70:	dec00204 	addi	sp,sp,8
   15b74:	f800283a 	ret

00015b78 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
   15b78:	defff404 	addi	sp,sp,-48
   15b7c:	dfc00b15 	stw	ra,44(sp)
   15b80:	df000a15 	stw	fp,40(sp)
   15b84:	df000a04 	addi	fp,sp,40
   15b88:	2005883a 	mov	r2,r4
   15b8c:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   15b90:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
   15b94:	e0bfff03 	ldbu	r2,-4(fp)
   15b98:	10800530 	cmpltui	r2,r2,20
   15b9c:	1000021e 	bne	r2,zero,15ba8 <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   15ba0:	00800a84 	movi	r2,42
   15ba4:	00006d06 	br	15d5c <OSTaskResume+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15ba8:	0005303a 	rdctl	r2,status
   15bac:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15bb0:	e0fff817 	ldw	r3,-32(fp)
   15bb4:	00bfff84 	movi	r2,-2
   15bb8:	1884703a 	and	r2,r3,r2
   15bbc:	1001703a 	wrctl	status,r2
  
  return context;
   15bc0:	e0bff817 	ldw	r2,-32(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   15bc4:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   15bc8:	e0ffff03 	ldbu	r3,-4(fp)
   15bcc:	008000b4 	movhi	r2,2
   15bd0:	1098d804 	addi	r2,r2,25440
   15bd4:	18c7883a 	add	r3,r3,r3
   15bd8:	18c7883a 	add	r3,r3,r3
   15bdc:	10c5883a 	add	r2,r2,r3
   15be0:	10800017 	ldw	r2,0(r2)
   15be4:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
   15be8:	e0bff717 	ldw	r2,-36(fp)
   15bec:	1000061e 	bne	r2,zero,15c08 <OSTaskResume+0x90>
   15bf0:	e0bff617 	ldw	r2,-40(fp)
   15bf4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15bf8:	e0bff917 	ldw	r2,-28(fp)
   15bfc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
   15c00:	00801184 	movi	r2,70
   15c04:	00005506 	br	15d5c <OSTaskResume+0x1e4>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
   15c08:	e0bff717 	ldw	r2,-36(fp)
   15c0c:	10800058 	cmpnei	r2,r2,1
   15c10:	1000061e 	bne	r2,zero,15c2c <OSTaskResume+0xb4>
   15c14:	e0bff617 	ldw	r2,-40(fp)
   15c18:	e0bffa15 	stw	r2,-24(fp)
   15c1c:	e0bffa17 	ldw	r2,-24(fp)
   15c20:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   15c24:	008010c4 	movi	r2,67
   15c28:	00004c06 	br	15d5c <OSTaskResume+0x1e4>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
   15c2c:	e0bff717 	ldw	r2,-36(fp)
   15c30:	10800c03 	ldbu	r2,48(r2)
   15c34:	10803fcc 	andi	r2,r2,255
   15c38:	1080020c 	andi	r2,r2,8
   15c3c:	10004226 	beq	r2,zero,15d48 <OSTaskResume+0x1d0>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
   15c40:	e0bff717 	ldw	r2,-36(fp)
   15c44:	10c00c03 	ldbu	r3,48(r2)
   15c48:	00bffdc4 	movi	r2,-9
   15c4c:	1884703a 	and	r2,r3,r2
   15c50:	1007883a 	mov	r3,r2
   15c54:	e0bff717 	ldw	r2,-36(fp)
   15c58:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
   15c5c:	e0bff717 	ldw	r2,-36(fp)
   15c60:	10800c03 	ldbu	r2,48(r2)
   15c64:	10803fcc 	andi	r2,r2,255
   15c68:	1000311e 	bne	r2,zero,15d30 <OSTaskResume+0x1b8>
            if (ptcb->OSTCBDly == 0) {
   15c6c:	e0bff717 	ldw	r2,-36(fp)
   15c70:	10800b8b 	ldhu	r2,46(r2)
   15c74:	10bfffcc 	andi	r2,r2,65535
   15c78:	1000281e 	bne	r2,zero,15d1c <OSTaskResume+0x1a4>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
   15c7c:	e0bff717 	ldw	r2,-36(fp)
   15c80:	10c00d83 	ldbu	r3,54(r2)
   15c84:	008000b4 	movhi	r2,2
   15c88:	10b41004 	addi	r2,r2,-12224
   15c8c:	10800003 	ldbu	r2,0(r2)
   15c90:	1884b03a 	or	r2,r3,r2
   15c94:	1007883a 	mov	r3,r2
   15c98:	008000b4 	movhi	r2,2
   15c9c:	10b41004 	addi	r2,r2,-12224
   15ca0:	10c00005 	stb	r3,0(r2)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   15ca4:	e0bff717 	ldw	r2,-36(fp)
   15ca8:	10800d03 	ldbu	r2,52(r2)
   15cac:	10c03fcc 	andi	r3,r2,255
   15cb0:	e0bff717 	ldw	r2,-36(fp)
   15cb4:	10800d03 	ldbu	r2,52(r2)
   15cb8:	11003fcc 	andi	r4,r2,255
   15cbc:	008000b4 	movhi	r2,2
   15cc0:	10b41044 	addi	r2,r2,-12223
   15cc4:	1105883a 	add	r2,r2,r4
   15cc8:	11000003 	ldbu	r4,0(r2)
   15ccc:	e0bff717 	ldw	r2,-36(fp)
   15cd0:	10800d43 	ldbu	r2,53(r2)
   15cd4:	2084b03a 	or	r2,r4,r2
   15cd8:	1009883a 	mov	r4,r2
   15cdc:	008000b4 	movhi	r2,2
   15ce0:	10b41044 	addi	r2,r2,-12223
   15ce4:	10c5883a 	add	r2,r2,r3
   15ce8:	11000005 	stb	r4,0(r2)
   15cec:	e0bff617 	ldw	r2,-40(fp)
   15cf0:	e0bffb15 	stw	r2,-20(fp)
   15cf4:	e0bffb17 	ldw	r2,-20(fp)
   15cf8:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
   15cfc:	008000b4 	movhi	r2,2
   15d00:	10b40444 	addi	r2,r2,-12271
   15d04:	10800003 	ldbu	r2,0(r2)
   15d08:	10803fcc 	andi	r2,r2,255
   15d0c:	10800058 	cmpnei	r2,r2,1
   15d10:	10000b1e 	bne	r2,zero,15d40 <OSTaskResume+0x1c8>
                    OS_Sched();                               /* Find new highest priority task        */
   15d14:	00104d80 	call	104d8 <OS_Sched>
   15d18:	00000906 	br	15d40 <OSTaskResume+0x1c8>
   15d1c:	e0bff617 	ldw	r2,-40(fp)
   15d20:	e0bffc15 	stw	r2,-16(fp)
   15d24:	e0bffc17 	ldw	r2,-16(fp)
   15d28:	1001703a 	wrctl	status,r2
   15d2c:	00000406 	br	15d40 <OSTaskResume+0x1c8>
   15d30:	e0bff617 	ldw	r2,-40(fp)
   15d34:	e0bffd15 	stw	r2,-12(fp)
   15d38:	e0bffd17 	ldw	r2,-12(fp)
   15d3c:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
   15d40:	0005883a 	mov	r2,zero
   15d44:	00000506 	br	15d5c <OSTaskResume+0x1e4>
   15d48:	e0bff617 	ldw	r2,-40(fp)
   15d4c:	e0bffe15 	stw	r2,-8(fp)
   15d50:	e0bffe17 	ldw	r2,-8(fp)
   15d54:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
   15d58:	00801104 	movi	r2,68
}
   15d5c:	e037883a 	mov	sp,fp
   15d60:	dfc00117 	ldw	ra,4(sp)
   15d64:	df000017 	ldw	fp,0(sp)
   15d68:	dec00204 	addi	sp,sp,8
   15d6c:	f800283a 	ret

00015d70 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
   15d70:	defff304 	addi	sp,sp,-52
   15d74:	df000c15 	stw	fp,48(sp)
   15d78:	df000c04 	addi	fp,sp,48
   15d7c:	2005883a 	mov	r2,r4
   15d80:	e17fff15 	stw	r5,-4(fp)
   15d84:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   15d88:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
   15d8c:	e0bffe03 	ldbu	r2,-8(fp)
   15d90:	10800570 	cmpltui	r2,r2,21
   15d94:	1000051e 	bne	r2,zero,15dac <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
   15d98:	e0bffe03 	ldbu	r2,-8(fp)
   15d9c:	10803fe0 	cmpeqi	r2,r2,255
   15da0:	1000021e 	bne	r2,zero,15dac <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
   15da4:	00800a84 	movi	r2,42
   15da8:	00005f06 	br	15f28 <OSTaskStkChk+0x1b8>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
   15dac:	e0bfff17 	ldw	r2,-4(fp)
   15db0:	1000021e 	bne	r2,zero,15dbc <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
   15db4:	00800244 	movi	r2,9
   15db8:	00005b06 	br	15f28 <OSTaskStkChk+0x1b8>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
   15dbc:	e0bfff17 	ldw	r2,-4(fp)
   15dc0:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
   15dc4:	e0bfff17 	ldw	r2,-4(fp)
   15dc8:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15dcc:	0005303a 	rdctl	r2,status
   15dd0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15dd4:	e0fff917 	ldw	r3,-28(fp)
   15dd8:	00bfff84 	movi	r2,-2
   15ddc:	1884703a 	and	r2,r3,r2
   15de0:	1001703a 	wrctl	status,r2
  
  return context;
   15de4:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   15de8:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
   15dec:	e0bffe03 	ldbu	r2,-8(fp)
   15df0:	10803fd8 	cmpnei	r2,r2,255
   15df4:	1000051e 	bne	r2,zero,15e0c <OSTaskStkChk+0x9c>
        prio = OSTCBCur->OSTCBPrio;
   15df8:	008000b4 	movhi	r2,2
   15dfc:	10b41304 	addi	r2,r2,-12212
   15e00:	10800017 	ldw	r2,0(r2)
   15e04:	10800c83 	ldbu	r2,50(r2)
   15e08:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   15e0c:	e0fffe03 	ldbu	r3,-8(fp)
   15e10:	008000b4 	movhi	r2,2
   15e14:	1098d804 	addi	r2,r2,25440
   15e18:	18c7883a 	add	r3,r3,r3
   15e1c:	18c7883a 	add	r3,r3,r3
   15e20:	10c5883a 	add	r2,r2,r3
   15e24:	10800017 	ldw	r2,0(r2)
   15e28:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
   15e2c:	e0bff717 	ldw	r2,-36(fp)
   15e30:	1000061e 	bne	r2,zero,15e4c <OSTaskStkChk+0xdc>
   15e34:	e0bff617 	ldw	r2,-40(fp)
   15e38:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15e3c:	e0bffa17 	ldw	r2,-24(fp)
   15e40:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   15e44:	008010c4 	movi	r2,67
   15e48:	00003706 	br	15f28 <OSTaskStkChk+0x1b8>
    }
    if (ptcb == OS_TCB_RESERVED) {
   15e4c:	e0bff717 	ldw	r2,-36(fp)
   15e50:	10800058 	cmpnei	r2,r2,1
   15e54:	1000061e 	bne	r2,zero,15e70 <OSTaskStkChk+0x100>
   15e58:	e0bff617 	ldw	r2,-40(fp)
   15e5c:	e0bffb15 	stw	r2,-20(fp)
   15e60:	e0bffb17 	ldw	r2,-20(fp)
   15e64:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   15e68:	008010c4 	movi	r2,67
   15e6c:	00002e06 	br	15f28 <OSTaskStkChk+0x1b8>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
   15e70:	e0bff717 	ldw	r2,-36(fp)
   15e74:	1080040b 	ldhu	r2,16(r2)
   15e78:	10bfffcc 	andi	r2,r2,65535
   15e7c:	1080004c 	andi	r2,r2,1
   15e80:	1000061e 	bne	r2,zero,15e9c <OSTaskStkChk+0x12c>
   15e84:	e0bff617 	ldw	r2,-40(fp)
   15e88:	e0bffc15 	stw	r2,-16(fp)
   15e8c:	e0bffc17 	ldw	r2,-16(fp)
   15e90:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
   15e94:	00801144 	movi	r2,69
   15e98:	00002306 	br	15f28 <OSTaskStkChk+0x1b8>
    }
    nfree = 0;
   15e9c:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
   15ea0:	e0bff717 	ldw	r2,-36(fp)
   15ea4:	10800317 	ldw	r2,12(r2)
   15ea8:	e0bff815 	stw	r2,-32(fp)
    pchk  = ptcb->OSTCBStkBottom;
   15eac:	e0bff717 	ldw	r2,-36(fp)
   15eb0:	10800217 	ldw	r2,8(r2)
   15eb4:	e0bff415 	stw	r2,-48(fp)
   15eb8:	e0bff617 	ldw	r2,-40(fp)
   15ebc:	e0bffd15 	stw	r2,-12(fp)
   15ec0:	e0bffd17 	ldw	r2,-12(fp)
   15ec4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   15ec8:	00000306 	br	15ed8 <OSTaskStkChk+0x168>
        nfree++;
   15ecc:	e0bff517 	ldw	r2,-44(fp)
   15ed0:	10800044 	addi	r2,r2,1
   15ed4:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   15ed8:	e0bff417 	ldw	r2,-48(fp)
   15edc:	10c00104 	addi	r3,r2,4
   15ee0:	e0fff415 	stw	r3,-48(fp)
   15ee4:	10800017 	ldw	r2,0(r2)
   15ee8:	103ff826 	beq	r2,zero,15ecc <OSTaskStkChk+0x15c>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
   15eec:	e0bff517 	ldw	r2,-44(fp)
   15ef0:	1085883a 	add	r2,r2,r2
   15ef4:	1085883a 	add	r2,r2,r2
   15ef8:	1007883a 	mov	r3,r2
   15efc:	e0bfff17 	ldw	r2,-4(fp)
   15f00:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
   15f04:	e0fff817 	ldw	r3,-32(fp)
   15f08:	e0bff517 	ldw	r2,-44(fp)
   15f0c:	1885c83a 	sub	r2,r3,r2
   15f10:	1085883a 	add	r2,r2,r2
   15f14:	1085883a 	add	r2,r2,r2
   15f18:	1007883a 	mov	r3,r2
   15f1c:	e0bfff17 	ldw	r2,-4(fp)
   15f20:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
   15f24:	0005883a 	mov	r2,zero
}
   15f28:	e037883a 	mov	sp,fp
   15f2c:	df000017 	ldw	fp,0(sp)
   15f30:	dec00104 	addi	sp,sp,4
   15f34:	f800283a 	ret

00015f38 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
   15f38:	defff504 	addi	sp,sp,-44
   15f3c:	dfc00a15 	stw	ra,40(sp)
   15f40:	df000915 	stw	fp,36(sp)
   15f44:	df000904 	addi	fp,sp,36
   15f48:	2005883a 	mov	r2,r4
   15f4c:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   15f50:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
   15f54:	e0bfff03 	ldbu	r2,-4(fp)
   15f58:	10800518 	cmpnei	r2,r2,20
   15f5c:	1000021e 	bne	r2,zero,15f68 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
   15f60:	008011c4 	movi	r2,71
   15f64:	00007406 	br	16138 <OSTaskSuspend+0x200>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   15f68:	e0bfff03 	ldbu	r2,-4(fp)
   15f6c:	10800530 	cmpltui	r2,r2,20
   15f70:	1000051e 	bne	r2,zero,15f88 <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
   15f74:	e0bfff03 	ldbu	r2,-4(fp)
   15f78:	10803fe0 	cmpeqi	r2,r2,255
   15f7c:	1000021e 	bne	r2,zero,15f88 <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
   15f80:	00800a84 	movi	r2,42
   15f84:	00006c06 	br	16138 <OSTaskSuspend+0x200>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15f88:	0005303a 	rdctl	r2,status
   15f8c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15f90:	e0fffb17 	ldw	r3,-20(fp)
   15f94:	00bfff84 	movi	r2,-2
   15f98:	1884703a 	and	r2,r3,r2
   15f9c:	1001703a 	wrctl	status,r2
  
  return context;
   15fa0:	e0bffb17 	ldw	r2,-20(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
   15fa4:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
   15fa8:	e0bfff03 	ldbu	r2,-4(fp)
   15fac:	10803fd8 	cmpnei	r2,r2,255
   15fb0:	1000081e 	bne	r2,zero,15fd4 <OSTaskSuspend+0x9c>
        prio = OSTCBCur->OSTCBPrio;
   15fb4:	008000b4 	movhi	r2,2
   15fb8:	10b41304 	addi	r2,r2,-12212
   15fbc:	10800017 	ldw	r2,0(r2)
   15fc0:	10800c83 	ldbu	r2,50(r2)
   15fc4:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
   15fc8:	00800044 	movi	r2,1
   15fcc:	e0bff705 	stb	r2,-36(fp)
   15fd0:	00000b06 	br	16000 <OSTaskSuspend+0xc8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
   15fd4:	008000b4 	movhi	r2,2
   15fd8:	10b41304 	addi	r2,r2,-12212
   15fdc:	10800017 	ldw	r2,0(r2)
   15fe0:	10800c83 	ldbu	r2,50(r2)
   15fe4:	10c03fcc 	andi	r3,r2,255
   15fe8:	e0bfff03 	ldbu	r2,-4(fp)
   15fec:	1880031e 	bne	r3,r2,15ffc <OSTaskSuspend+0xc4>
        self = OS_TRUE;
   15ff0:	00800044 	movi	r2,1
   15ff4:	e0bff705 	stb	r2,-36(fp)
   15ff8:	00000106 	br	16000 <OSTaskSuspend+0xc8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
   15ffc:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   16000:	e0ffff03 	ldbu	r3,-4(fp)
   16004:	008000b4 	movhi	r2,2
   16008:	1098d804 	addi	r2,r2,25440
   1600c:	18c7883a 	add	r3,r3,r3
   16010:	18c7883a 	add	r3,r3,r3
   16014:	10c5883a 	add	r2,r2,r3
   16018:	10800017 	ldw	r2,0(r2)
   1601c:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
   16020:	e0bff917 	ldw	r2,-28(fp)
   16024:	1000061e 	bne	r2,zero,16040 <OSTaskSuspend+0x108>
   16028:	e0bff817 	ldw	r2,-32(fp)
   1602c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16030:	e0bffc17 	ldw	r2,-16(fp)
   16034:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
   16038:	00801204 	movi	r2,72
   1603c:	00003e06 	br	16138 <OSTaskSuspend+0x200>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
   16040:	e0bff917 	ldw	r2,-28(fp)
   16044:	10800058 	cmpnei	r2,r2,1
   16048:	1000061e 	bne	r2,zero,16064 <OSTaskSuspend+0x12c>
   1604c:	e0bff817 	ldw	r2,-32(fp)
   16050:	e0bffd15 	stw	r2,-12(fp)
   16054:	e0bffd17 	ldw	r2,-12(fp)
   16058:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   1605c:	008010c4 	movi	r2,67
   16060:	00003506 	br	16138 <OSTaskSuspend+0x200>
    }
    y            = ptcb->OSTCBY;
   16064:	e0bff917 	ldw	r2,-28(fp)
   16068:	10800d03 	ldbu	r2,52(r2)
   1606c:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
   16070:	e0fffa03 	ldbu	r3,-24(fp)
   16074:	e13ffa03 	ldbu	r4,-24(fp)
   16078:	008000b4 	movhi	r2,2
   1607c:	10b41044 	addi	r2,r2,-12223
   16080:	1105883a 	add	r2,r2,r4
   16084:	10800003 	ldbu	r2,0(r2)
   16088:	1009883a 	mov	r4,r2
   1608c:	e0bff917 	ldw	r2,-28(fp)
   16090:	10800d43 	ldbu	r2,53(r2)
   16094:	0084303a 	nor	r2,zero,r2
   16098:	2084703a 	and	r2,r4,r2
   1609c:	1009883a 	mov	r4,r2
   160a0:	008000b4 	movhi	r2,2
   160a4:	10b41044 	addi	r2,r2,-12223
   160a8:	10c5883a 	add	r2,r2,r3
   160ac:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   160b0:	e0fffa03 	ldbu	r3,-24(fp)
   160b4:	008000b4 	movhi	r2,2
   160b8:	10b41044 	addi	r2,r2,-12223
   160bc:	10c5883a 	add	r2,r2,r3
   160c0:	10800003 	ldbu	r2,0(r2)
   160c4:	10803fcc 	andi	r2,r2,255
   160c8:	10000c1e 	bne	r2,zero,160fc <OSTaskSuspend+0x1c4>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
   160cc:	e0bff917 	ldw	r2,-28(fp)
   160d0:	10800d83 	ldbu	r2,54(r2)
   160d4:	0084303a 	nor	r2,zero,r2
   160d8:	1007883a 	mov	r3,r2
   160dc:	008000b4 	movhi	r2,2
   160e0:	10b41004 	addi	r2,r2,-12224
   160e4:	10800003 	ldbu	r2,0(r2)
   160e8:	1884703a 	and	r2,r3,r2
   160ec:	1007883a 	mov	r3,r2
   160f0:	008000b4 	movhi	r2,2
   160f4:	10b41004 	addi	r2,r2,-12224
   160f8:	10c00005 	stb	r3,0(r2)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
   160fc:	e0bff917 	ldw	r2,-28(fp)
   16100:	10800c03 	ldbu	r2,48(r2)
   16104:	10800214 	ori	r2,r2,8
   16108:	1007883a 	mov	r3,r2
   1610c:	e0bff917 	ldw	r2,-28(fp)
   16110:	10c00c05 	stb	r3,48(r2)
   16114:	e0bff817 	ldw	r2,-32(fp)
   16118:	e0bffe15 	stw	r2,-8(fp)
   1611c:	e0bffe17 	ldw	r2,-8(fp)
   16120:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
   16124:	e0bff703 	ldbu	r2,-36(fp)
   16128:	10800058 	cmpnei	r2,r2,1
   1612c:	1000011e 	bne	r2,zero,16134 <OSTaskSuspend+0x1fc>
        OS_Sched();                                             /* Find new highest priority task      */
   16130:	00104d80 	call	104d8 <OS_Sched>
    }
    return (OS_ERR_NONE);
   16134:	0005883a 	mov	r2,zero
}
   16138:	e037883a 	mov	sp,fp
   1613c:	dfc00117 	ldw	ra,4(sp)
   16140:	df000017 	ldw	fp,0(sp)
   16144:	dec00204 	addi	sp,sp,8
   16148:	f800283a 	ret

0001614c <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
   1614c:	defff604 	addi	sp,sp,-40
   16150:	dfc00915 	stw	ra,36(sp)
   16154:	df000815 	stw	fp,32(sp)
   16158:	df000804 	addi	fp,sp,32
   1615c:	2005883a 	mov	r2,r4
   16160:	e17fff15 	stw	r5,-4(fp)
   16164:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   16168:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
   1616c:	e0bffe03 	ldbu	r2,-8(fp)
   16170:	10800570 	cmpltui	r2,r2,21
   16174:	1000051e 	bne	r2,zero,1618c <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
   16178:	e0bffe03 	ldbu	r2,-8(fp)
   1617c:	10803fe0 	cmpeqi	r2,r2,255
   16180:	1000021e 	bne	r2,zero,1618c <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
   16184:	00800a84 	movi	r2,42
   16188:	00003606 	br	16264 <OSTaskQuery+0x118>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
   1618c:	e0bfff17 	ldw	r2,-4(fp)
   16190:	1000021e 	bne	r2,zero,1619c <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
   16194:	00800244 	movi	r2,9
   16198:	00003206 	br	16264 <OSTaskQuery+0x118>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1619c:	0005303a 	rdctl	r2,status
   161a0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   161a4:	e0fffa17 	ldw	r3,-24(fp)
   161a8:	00bfff84 	movi	r2,-2
   161ac:	1884703a 	and	r2,r3,r2
   161b0:	1001703a 	wrctl	status,r2
  
  return context;
   161b4:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   161b8:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
   161bc:	e0bffe03 	ldbu	r2,-8(fp)
   161c0:	10803fd8 	cmpnei	r2,r2,255
   161c4:	1000051e 	bne	r2,zero,161dc <OSTaskQuery+0x90>
        prio = OSTCBCur->OSTCBPrio;
   161c8:	008000b4 	movhi	r2,2
   161cc:	10b41304 	addi	r2,r2,-12212
   161d0:	10800017 	ldw	r2,0(r2)
   161d4:	10800c83 	ldbu	r2,50(r2)
   161d8:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   161dc:	e0fffe03 	ldbu	r3,-8(fp)
   161e0:	008000b4 	movhi	r2,2
   161e4:	1098d804 	addi	r2,r2,25440
   161e8:	18c7883a 	add	r3,r3,r3
   161ec:	18c7883a 	add	r3,r3,r3
   161f0:	10c5883a 	add	r2,r2,r3
   161f4:	10800017 	ldw	r2,0(r2)
   161f8:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
   161fc:	e0bff917 	ldw	r2,-28(fp)
   16200:	1000061e 	bne	r2,zero,1621c <OSTaskQuery+0xd0>
   16204:	e0bff817 	ldw	r2,-32(fp)
   16208:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1620c:	e0bffb17 	ldw	r2,-20(fp)
   16210:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
   16214:	00800a44 	movi	r2,41
   16218:	00001206 	br	16264 <OSTaskQuery+0x118>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
   1621c:	e0bff917 	ldw	r2,-28(fp)
   16220:	10800058 	cmpnei	r2,r2,1
   16224:	1000061e 	bne	r2,zero,16240 <OSTaskQuery+0xf4>
   16228:	e0bff817 	ldw	r2,-32(fp)
   1622c:	e0bffc15 	stw	r2,-16(fp)
   16230:	e0bffc17 	ldw	r2,-16(fp)
   16234:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   16238:	008010c4 	movi	r2,67
   1623c:	00000906 	br	16264 <OSTaskQuery+0x118>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
   16240:	e13fff17 	ldw	r4,-4(fp)
   16244:	e17ff917 	ldw	r5,-28(fp)
   16248:	01801b04 	movi	r6,108
   1624c:	00104740 	call	10474 <OS_MemCopy>
   16250:	e0bff817 	ldw	r2,-32(fp)
   16254:	e0bffd15 	stw	r2,-12(fp)
   16258:	e0bffd17 	ldw	r2,-12(fp)
   1625c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   16260:	0005883a 	mov	r2,zero
}
   16264:	e037883a 	mov	sp,fp
   16268:	dfc00117 	ldw	ra,4(sp)
   1626c:	df000017 	ldw	fp,0(sp)
   16270:	dec00204 	addi	sp,sp,8
   16274:	f800283a 	ret

00016278 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
   16278:	defffc04 	addi	sp,sp,-16
   1627c:	df000315 	stw	fp,12(sp)
   16280:	df000304 	addi	fp,sp,12
   16284:	e13ffd15 	stw	r4,-12(fp)
   16288:	e17ffe15 	stw	r5,-8(fp)
   1628c:	3005883a 	mov	r2,r6
   16290:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
   16294:	e0bfff0b 	ldhu	r2,-4(fp)
   16298:	1080004c 	andi	r2,r2,1
   1629c:	10000d26 	beq	r2,zero,162d4 <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
   162a0:	e0bfff0b 	ldhu	r2,-4(fp)
   162a4:	1080008c 	andi	r2,r2,2
   162a8:	10000a26 	beq	r2,zero,162d4 <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   162ac:	00000706 	br	162cc <OS_TaskStkClr+0x54>
                size--;
   162b0:	e0bffe17 	ldw	r2,-8(fp)
   162b4:	10bfffc4 	addi	r2,r2,-1
   162b8:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
   162bc:	e0bffd17 	ldw	r2,-12(fp)
   162c0:	10c00104 	addi	r3,r2,4
   162c4:	e0fffd15 	stw	r3,-12(fp)
   162c8:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   162cc:	e0bffe17 	ldw	r2,-8(fp)
   162d0:	103ff71e 	bne	r2,zero,162b0 <OS_TaskStkClr+0x38>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
   162d4:	e037883a 	mov	sp,fp
   162d8:	df000017 	ldw	fp,0(sp)
   162dc:	dec00104 	addi	sp,sp,4
   162e0:	f800283a 	ret

000162e4 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
   162e4:	defff904 	addi	sp,sp,-28
   162e8:	dfc00615 	stw	ra,24(sp)
   162ec:	df000515 	stw	fp,20(sp)
   162f0:	df000504 	addi	fp,sp,20
   162f4:	2005883a 	mov	r2,r4
   162f8:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   162fc:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   16300:	008000b4 	movhi	r2,2
   16304:	10b41204 	addi	r2,r2,-12216
   16308:	10800003 	ldbu	r2,0(r2)
   1630c:	10803fcc 	andi	r2,r2,255
   16310:	10000126 	beq	r2,zero,16318 <OSTimeDly+0x34>
        return;
   16314:	00004006 	br	16418 <OSTimeDly+0x134>
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
   16318:	e0bfff0b 	ldhu	r2,-4(fp)
   1631c:	10003e26 	beq	r2,zero,16418 <OSTimeDly+0x134>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16320:	0005303a 	rdctl	r2,status
   16324:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16328:	e0fffd17 	ldw	r3,-12(fp)
   1632c:	00bfff84 	movi	r2,-2
   16330:	1884703a 	and	r2,r3,r2
   16334:	1001703a 	wrctl	status,r2
  
  return context;
   16338:	e0bffd17 	ldw	r2,-12(fp)
        OS_ENTER_CRITICAL();
   1633c:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
   16340:	008000b4 	movhi	r2,2
   16344:	10b41304 	addi	r2,r2,-12212
   16348:	10800017 	ldw	r2,0(r2)
   1634c:	10800d03 	ldbu	r2,52(r2)
   16350:	e0bffc05 	stb	r2,-16(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   16354:	e0fffc03 	ldbu	r3,-16(fp)
   16358:	e13ffc03 	ldbu	r4,-16(fp)
   1635c:	008000b4 	movhi	r2,2
   16360:	10b41044 	addi	r2,r2,-12223
   16364:	1105883a 	add	r2,r2,r4
   16368:	10800003 	ldbu	r2,0(r2)
   1636c:	1009883a 	mov	r4,r2
   16370:	008000b4 	movhi	r2,2
   16374:	10b41304 	addi	r2,r2,-12212
   16378:	10800017 	ldw	r2,0(r2)
   1637c:	10800d43 	ldbu	r2,53(r2)
   16380:	0084303a 	nor	r2,zero,r2
   16384:	2084703a 	and	r2,r4,r2
   16388:	1009883a 	mov	r4,r2
   1638c:	008000b4 	movhi	r2,2
   16390:	10b41044 	addi	r2,r2,-12223
   16394:	10c5883a 	add	r2,r2,r3
   16398:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
   1639c:	e0fffc03 	ldbu	r3,-16(fp)
   163a0:	008000b4 	movhi	r2,2
   163a4:	10b41044 	addi	r2,r2,-12223
   163a8:	10c5883a 	add	r2,r2,r3
   163ac:	10800003 	ldbu	r2,0(r2)
   163b0:	10803fcc 	andi	r2,r2,255
   163b4:	10000e1e 	bne	r2,zero,163f0 <OSTimeDly+0x10c>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   163b8:	008000b4 	movhi	r2,2
   163bc:	10b41304 	addi	r2,r2,-12212
   163c0:	10800017 	ldw	r2,0(r2)
   163c4:	10800d83 	ldbu	r2,54(r2)
   163c8:	0084303a 	nor	r2,zero,r2
   163cc:	1007883a 	mov	r3,r2
   163d0:	008000b4 	movhi	r2,2
   163d4:	10b41004 	addi	r2,r2,-12224
   163d8:	10800003 	ldbu	r2,0(r2)
   163dc:	1884703a 	and	r2,r3,r2
   163e0:	1007883a 	mov	r3,r2
   163e4:	008000b4 	movhi	r2,2
   163e8:	10b41004 	addi	r2,r2,-12224
   163ec:	10c00005 	stb	r3,0(r2)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
   163f0:	008000b4 	movhi	r2,2
   163f4:	10b41304 	addi	r2,r2,-12212
   163f8:	10800017 	ldw	r2,0(r2)
   163fc:	e0ffff0b 	ldhu	r3,-4(fp)
   16400:	10c00b8d 	sth	r3,46(r2)
   16404:	e0bffb17 	ldw	r2,-20(fp)
   16408:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1640c:	e0bffe17 	ldw	r2,-8(fp)
   16410:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
   16414:	00104d80 	call	104d8 <OS_Sched>
    }
}
   16418:	e037883a 	mov	sp,fp
   1641c:	dfc00117 	ldw	ra,4(sp)
   16420:	df000017 	ldw	fp,0(sp)
   16424:	dec00204 	addi	sp,sp,8
   16428:	f800283a 	ret

0001642c <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
   1642c:	defff604 	addi	sp,sp,-40
   16430:	dfc00915 	stw	ra,36(sp)
   16434:	df000815 	stw	fp,32(sp)
   16438:	dc400715 	stw	r17,28(sp)
   1643c:	dc000615 	stw	r16,24(sp)
   16440:	df000804 	addi	fp,sp,32
   16444:	2011883a 	mov	r8,r4
   16448:	2809883a 	mov	r4,r5
   1644c:	3007883a 	mov	r3,r6
   16450:	3805883a 	mov	r2,r7
   16454:	e23ffa05 	stb	r8,-24(fp)
   16458:	e13ffb05 	stb	r4,-20(fp)
   1645c:	e0fffc05 	stb	r3,-16(fp)
   16460:	e0bffd0d 	sth	r2,-12(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   16464:	008000b4 	movhi	r2,2
   16468:	10b41204 	addi	r2,r2,-12216
   1646c:	10800003 	ldbu	r2,0(r2)
   16470:	10803fcc 	andi	r2,r2,255
   16474:	10000226 	beq	r2,zero,16480 <OSTimeDlyHMSM+0x54>
        return (OS_ERR_TIME_DLY_ISR);
   16478:	00801544 	movi	r2,85
   1647c:	00007706 	br	1665c <OSTimeDlyHMSM+0x230>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
   16480:	e0bffa03 	ldbu	r2,-24(fp)
   16484:	1000081e 	bne	r2,zero,164a8 <OSTimeDlyHMSM+0x7c>
        if (minutes == 0) {
   16488:	e0bffb03 	ldbu	r2,-20(fp)
   1648c:	1000061e 	bne	r2,zero,164a8 <OSTimeDlyHMSM+0x7c>
            if (seconds == 0) {
   16490:	e0bffc03 	ldbu	r2,-16(fp)
   16494:	1000041e 	bne	r2,zero,164a8 <OSTimeDlyHMSM+0x7c>
                if (ms == 0) {
   16498:	e0bffd0b 	ldhu	r2,-12(fp)
   1649c:	1000021e 	bne	r2,zero,164a8 <OSTimeDlyHMSM+0x7c>
                    return (OS_ERR_TIME_ZERO_DLY);
   164a0:	00801504 	movi	r2,84
   164a4:	00006d06 	br	1665c <OSTimeDlyHMSM+0x230>
                }
            }
        }
    }
    if (minutes > 59) {
   164a8:	e0bffb03 	ldbu	r2,-20(fp)
   164ac:	10800f30 	cmpltui	r2,r2,60
   164b0:	1000021e 	bne	r2,zero,164bc <OSTimeDlyHMSM+0x90>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
   164b4:	00801444 	movi	r2,81
   164b8:	00006806 	br	1665c <OSTimeDlyHMSM+0x230>
    }
    if (seconds > 59) {
   164bc:	e0bffc03 	ldbu	r2,-16(fp)
   164c0:	10800f30 	cmpltui	r2,r2,60
   164c4:	1000021e 	bne	r2,zero,164d0 <OSTimeDlyHMSM+0xa4>
        return (OS_ERR_TIME_INVALID_SECONDS);
   164c8:	00801484 	movi	r2,82
   164cc:	00006306 	br	1665c <OSTimeDlyHMSM+0x230>
    }
    if (ms > 999) {
   164d0:	e0bffd0b 	ldhu	r2,-12(fp)
   164d4:	1080fa30 	cmpltui	r2,r2,1000
   164d8:	1000021e 	bne	r2,zero,164e4 <OSTimeDlyHMSM+0xb8>
        return (OS_ERR_TIME_INVALID_MS);
   164dc:	008014c4 	movi	r2,83
   164e0:	00005e06 	br	1665c <OSTimeDlyHMSM+0x230>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   164e4:	e0bffa03 	ldbu	r2,-24(fp)
   164e8:	1009883a 	mov	r4,r2
   164ec:	01438404 	movi	r5,3600
   164f0:	000129c0 	call	129c <__mulsi3>
   164f4:	1021883a 	mov	r16,r2
   164f8:	e0bffb03 	ldbu	r2,-20(fp)
   164fc:	1009883a 	mov	r4,r2
   16500:	01400f04 	movi	r5,60
   16504:	000129c0 	call	129c <__mulsi3>
   16508:	8087883a 	add	r3,r16,r2
   1650c:	e0bffc03 	ldbu	r2,-16(fp)
   16510:	1885883a 	add	r2,r3,r2
   16514:	1009883a 	mov	r4,r2
   16518:	000dc140 	call	dc14 <__floatunsidf>
   1651c:	100b883a 	mov	r5,r2
   16520:	180d883a 	mov	r6,r3
   16524:	2809883a 	mov	r4,r5
   16528:	300b883a 	mov	r5,r6
   1652c:	000d883a 	mov	r6,zero
   16530:	01d023f4 	movhi	r7,16527
   16534:	39d00004 	addi	r7,r7,16384
   16538:	0001e040 	call	1e04 <__muldf3>
   1653c:	1009883a 	mov	r4,r2
   16540:	180b883a 	mov	r5,r3
   16544:	2021883a 	mov	r16,r4
   16548:	2823883a 	mov	r17,r5
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
   1654c:	e0bffd0b 	ldhu	r2,-12(fp)
   16550:	1009883a 	mov	r4,r2
   16554:	000dc140 	call	dc14 <__floatunsidf>
   16558:	100b883a 	mov	r5,r2
   1655c:	180d883a 	mov	r6,r3
   16560:	2809883a 	mov	r4,r5
   16564:	300b883a 	mov	r5,r6
   16568:	000d883a 	mov	r6,zero
   1656c:	01cff834 	movhi	r7,16352
   16570:	000d2f40 	call	d2f4 <__adddf3>
   16574:	1009883a 	mov	r4,r2
   16578:	180b883a 	mov	r5,r3
   1657c:	2005883a 	mov	r2,r4
   16580:	2807883a 	mov	r3,r5
   16584:	1009883a 	mov	r4,r2
   16588:	180b883a 	mov	r5,r3
   1658c:	000d883a 	mov	r6,zero
   16590:	01d023f4 	movhi	r7,16527
   16594:	39d00004 	addi	r7,r7,16384
   16598:	0001e040 	call	1e04 <__muldf3>
   1659c:	1009883a 	mov	r4,r2
   165a0:	180b883a 	mov	r5,r3
   165a4:	2005883a 	mov	r2,r4
   165a8:	2807883a 	mov	r3,r5
   165ac:	1009883a 	mov	r4,r2
   165b0:	180b883a 	mov	r5,r3
   165b4:	000d883a 	mov	r6,zero
   165b8:	01d023f4 	movhi	r7,16527
   165bc:	39d00004 	addi	r7,r7,16384
   165c0:	00012c40 	call	12c4 <__divdf3>
   165c4:	1009883a 	mov	r4,r2
   165c8:	180b883a 	mov	r5,r3
   165cc:	2005883a 	mov	r2,r4
   165d0:	2807883a 	mov	r3,r5
   165d4:	8009883a 	mov	r4,r16
   165d8:	880b883a 	mov	r5,r17
   165dc:	100d883a 	mov	r6,r2
   165e0:	180f883a 	mov	r7,r3
   165e4:	000d2f40 	call	d2f4 <__adddf3>
   165e8:	1009883a 	mov	r4,r2
   165ec:	180b883a 	mov	r5,r3
   165f0:	2005883a 	mov	r2,r4
   165f4:	2807883a 	mov	r3,r5
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   165f8:	1009883a 	mov	r4,r2
   165fc:	180b883a 	mov	r5,r3
   16600:	00012280 	call	1228 <__fixunsdfsi>
   16604:	e0bff915 	stw	r2,-28(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
   16608:	e0bff917 	ldw	r2,-28(fp)
   1660c:	1004d43a 	srli	r2,r2,16
   16610:	e0bff80d 	sth	r2,-32(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
   16614:	e0bff917 	ldw	r2,-28(fp)
   16618:	10bfffcc 	andi	r2,r2,65535
   1661c:	e0bff915 	stw	r2,-28(fp)
    OSTimeDly((INT16U)ticks);
   16620:	e0bff917 	ldw	r2,-28(fp)
   16624:	10bfffcc 	andi	r2,r2,65535
   16628:	1009883a 	mov	r4,r2
   1662c:	00162e40 	call	162e4 <OSTimeDly>
    while (loops > 0) {
   16630:	00000706 	br	16650 <OSTimeDlyHMSM+0x224>
        OSTimeDly((INT16U)32768u);
   16634:	01200014 	movui	r4,32768
   16638:	00162e40 	call	162e4 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
   1663c:	01200014 	movui	r4,32768
   16640:	00162e40 	call	162e4 <OSTimeDly>
        loops--;
   16644:	e0bff80b 	ldhu	r2,-32(fp)
   16648:	10bfffc4 	addi	r2,r2,-1
   1664c:	e0bff80d 	sth	r2,-32(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
   16650:	e0bff80b 	ldhu	r2,-32(fp)
   16654:	103ff71e 	bne	r2,zero,16634 <OSTimeDlyHMSM+0x208>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
   16658:	0005883a 	mov	r2,zero
}
   1665c:	e6fffe04 	addi	sp,fp,-8
   16660:	dfc00317 	ldw	ra,12(sp)
   16664:	df000217 	ldw	fp,8(sp)
   16668:	dc400117 	ldw	r17,4(sp)
   1666c:	dc000017 	ldw	r16,0(sp)
   16670:	dec00404 	addi	sp,sp,16
   16674:	f800283a 	ret

00016678 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
   16678:	defff504 	addi	sp,sp,-44
   1667c:	dfc00a15 	stw	ra,40(sp)
   16680:	df000915 	stw	fp,36(sp)
   16684:	df000904 	addi	fp,sp,36
   16688:	2005883a 	mov	r2,r4
   1668c:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   16690:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
   16694:	e0bfff03 	ldbu	r2,-4(fp)
   16698:	10800530 	cmpltui	r2,r2,20
   1669c:	1000021e 	bne	r2,zero,166a8 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   166a0:	00800a84 	movi	r2,42
   166a4:	00006b06 	br	16854 <OSTimeDlyResume+0x1dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   166a8:	0005303a 	rdctl	r2,status
   166ac:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   166b0:	e0fff917 	ldw	r3,-28(fp)
   166b4:	00bfff84 	movi	r2,-2
   166b8:	1884703a 	and	r2,r3,r2
   166bc:	1001703a 	wrctl	status,r2
  
  return context;
   166c0:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   166c4:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
   166c8:	e0ffff03 	ldbu	r3,-4(fp)
   166cc:	008000b4 	movhi	r2,2
   166d0:	1098d804 	addi	r2,r2,25440
   166d4:	18c7883a 	add	r3,r3,r3
   166d8:	18c7883a 	add	r3,r3,r3
   166dc:	10c5883a 	add	r2,r2,r3
   166e0:	10800017 	ldw	r2,0(r2)
   166e4:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {
   166e8:	e0bff817 	ldw	r2,-32(fp)
   166ec:	1000061e 	bne	r2,zero,16708 <OSTimeDlyResume+0x90>
   166f0:	e0bff717 	ldw	r2,-36(fp)
   166f4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   166f8:	e0bffa17 	ldw	r2,-24(fp)
   166fc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   16700:	008010c4 	movi	r2,67
   16704:	00005306 	br	16854 <OSTimeDlyResume+0x1dc>
    }
    if (ptcb == OS_TCB_RESERVED) {
   16708:	e0bff817 	ldw	r2,-32(fp)
   1670c:	10800058 	cmpnei	r2,r2,1
   16710:	1000061e 	bne	r2,zero,1672c <OSTimeDlyResume+0xb4>
   16714:	e0bff717 	ldw	r2,-36(fp)
   16718:	e0bffb15 	stw	r2,-20(fp)
   1671c:	e0bffb17 	ldw	r2,-20(fp)
   16720:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   16724:	008010c4 	movi	r2,67
   16728:	00004a06 	br	16854 <OSTimeDlyResume+0x1dc>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
   1672c:	e0bff817 	ldw	r2,-32(fp)
   16730:	10800b8b 	ldhu	r2,46(r2)
   16734:	10bfffcc 	andi	r2,r2,65535
   16738:	1000061e 	bne	r2,zero,16754 <OSTimeDlyResume+0xdc>
   1673c:	e0bff717 	ldw	r2,-36(fp)
   16740:	e0bffc15 	stw	r2,-16(fp)
   16744:	e0bffc17 	ldw	r2,-16(fp)
   16748:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
   1674c:	00801404 	movi	r2,80
   16750:	00004006 	br	16854 <OSTimeDlyResume+0x1dc>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
   16754:	e0bff817 	ldw	r2,-32(fp)
   16758:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   1675c:	e0bff817 	ldw	r2,-32(fp)
   16760:	10800c03 	ldbu	r2,48(r2)
   16764:	10803fcc 	andi	r2,r2,255
   16768:	10800dcc 	andi	r2,r2,55
   1676c:	10000b26 	beq	r2,zero,1679c <OSTimeDlyResume+0x124>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
   16770:	e0bff817 	ldw	r2,-32(fp)
   16774:	10c00c03 	ldbu	r3,48(r2)
   16778:	00bff204 	movi	r2,-56
   1677c:	1884703a 	and	r2,r3,r2
   16780:	1007883a 	mov	r3,r2
   16784:	e0bff817 	ldw	r2,-32(fp)
   16788:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
   1678c:	e0bff817 	ldw	r2,-32(fp)
   16790:	00c00044 	movi	r3,1
   16794:	10c00c45 	stb	r3,49(r2)
   16798:	00000206 	br	167a4 <OSTimeDlyResume+0x12c>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
   1679c:	e0bff817 	ldw	r2,-32(fp)
   167a0:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
   167a4:	e0bff817 	ldw	r2,-32(fp)
   167a8:	10800c03 	ldbu	r2,48(r2)
   167ac:	10803fcc 	andi	r2,r2,255
   167b0:	1080020c 	andi	r2,r2,8
   167b4:	1000221e 	bne	r2,zero,16840 <OSTimeDlyResume+0x1c8>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
   167b8:	e0bff817 	ldw	r2,-32(fp)
   167bc:	10c00d83 	ldbu	r3,54(r2)
   167c0:	008000b4 	movhi	r2,2
   167c4:	10b41004 	addi	r2,r2,-12224
   167c8:	10800003 	ldbu	r2,0(r2)
   167cc:	1884b03a 	or	r2,r3,r2
   167d0:	1007883a 	mov	r3,r2
   167d4:	008000b4 	movhi	r2,2
   167d8:	10b41004 	addi	r2,r2,-12224
   167dc:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   167e0:	e0bff817 	ldw	r2,-32(fp)
   167e4:	10800d03 	ldbu	r2,52(r2)
   167e8:	10c03fcc 	andi	r3,r2,255
   167ec:	e0bff817 	ldw	r2,-32(fp)
   167f0:	10800d03 	ldbu	r2,52(r2)
   167f4:	11003fcc 	andi	r4,r2,255
   167f8:	008000b4 	movhi	r2,2
   167fc:	10b41044 	addi	r2,r2,-12223
   16800:	1105883a 	add	r2,r2,r4
   16804:	11000003 	ldbu	r4,0(r2)
   16808:	e0bff817 	ldw	r2,-32(fp)
   1680c:	10800d43 	ldbu	r2,53(r2)
   16810:	2084b03a 	or	r2,r4,r2
   16814:	1009883a 	mov	r4,r2
   16818:	008000b4 	movhi	r2,2
   1681c:	10b41044 	addi	r2,r2,-12223
   16820:	10c5883a 	add	r2,r2,r3
   16824:	11000005 	stb	r4,0(r2)
   16828:	e0bff717 	ldw	r2,-36(fp)
   1682c:	e0bffd15 	stw	r2,-12(fp)
   16830:	e0bffd17 	ldw	r2,-12(fp)
   16834:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
   16838:	00104d80 	call	104d8 <OS_Sched>
   1683c:	00000406 	br	16850 <OSTimeDlyResume+0x1d8>
   16840:	e0bff717 	ldw	r2,-36(fp)
   16844:	e0bffe15 	stw	r2,-8(fp)
   16848:	e0bffe17 	ldw	r2,-8(fp)
   1684c:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
   16850:	0005883a 	mov	r2,zero
}
   16854:	e037883a 	mov	sp,fp
   16858:	dfc00117 	ldw	ra,4(sp)
   1685c:	df000017 	ldw	fp,0(sp)
   16860:	dec00204 	addi	sp,sp,8
   16864:	f800283a 	ret

00016868 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
   16868:	defffb04 	addi	sp,sp,-20
   1686c:	df000415 	stw	fp,16(sp)
   16870:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   16874:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16878:	0005303a 	rdctl	r2,status
   1687c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16880:	e0fffe17 	ldw	r3,-8(fp)
   16884:	00bfff84 	movi	r2,-2
   16888:	1884703a 	and	r2,r3,r2
   1688c:	1001703a 	wrctl	status,r2
  
  return context;
   16890:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   16894:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
   16898:	008000b4 	movhi	r2,2
   1689c:	10b41404 	addi	r2,r2,-12208
   168a0:	10800017 	ldw	r2,0(r2)
   168a4:	e0bffd15 	stw	r2,-12(fp)
   168a8:	e0bffc17 	ldw	r2,-16(fp)
   168ac:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   168b0:	e0bfff17 	ldw	r2,-4(fp)
   168b4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
   168b8:	e0bffd17 	ldw	r2,-12(fp)
}
   168bc:	e037883a 	mov	sp,fp
   168c0:	df000017 	ldw	fp,0(sp)
   168c4:	dec00104 	addi	sp,sp,4
   168c8:	f800283a 	ret

000168cc <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
   168cc:	defffb04 	addi	sp,sp,-20
   168d0:	df000415 	stw	fp,16(sp)
   168d4:	df000404 	addi	fp,sp,16
   168d8:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   168dc:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   168e0:	0005303a 	rdctl	r2,status
   168e4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   168e8:	e0fffd17 	ldw	r3,-12(fp)
   168ec:	00bfff84 	movi	r2,-2
   168f0:	1884703a 	and	r2,r3,r2
   168f4:	1001703a 	wrctl	status,r2
  
  return context;
   168f8:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
   168fc:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
   16900:	008000b4 	movhi	r2,2
   16904:	10b41404 	addi	r2,r2,-12208
   16908:	e0ffff17 	ldw	r3,-4(fp)
   1690c:	10c00015 	stw	r3,0(r2)
   16910:	e0bffc17 	ldw	r2,-16(fp)
   16914:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16918:	e0bffe17 	ldw	r2,-8(fp)
   1691c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
   16920:	e037883a 	mov	sp,fp
   16924:	df000017 	ldw	fp,0(sp)
   16928:	dec00104 	addi	sp,sp,4
   1692c:	f800283a 	ret

00016930 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   16930:	defffd04 	addi	sp,sp,-12
   16934:	dfc00215 	stw	ra,8(sp)
   16938:	df000115 	stw	fp,4(sp)
   1693c:	df000104 	addi	fp,sp,4
   16940:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   16944:	e13fff17 	ldw	r4,-4(fp)
   16948:	014000b4 	movhi	r5,2
   1694c:	2973c904 	addi	r5,r5,-12508
   16950:	00197040 	call	19704 <alt_dev_llist_insert>
}
   16954:	e037883a 	mov	sp,fp
   16958:	dfc00117 	ldw	ra,4(sp)
   1695c:	df000017 	ldw	fp,0(sp)
   16960:	dec00204 	addi	sp,sp,8
   16964:	f800283a 	ret

00016968 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   16968:	defffd04 	addi	sp,sp,-12
   1696c:	dfc00215 	stw	ra,8(sp)
   16970:	df000115 	stw	fp,4(sp)
   16974:	df000104 	addi	fp,sp,4
   16978:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
   1697c:	0019eb00 	call	19eb0 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   16980:	00800044 	movi	r2,1
   16984:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   16988:	e037883a 	mov	sp,fp
   1698c:	dfc00117 	ldw	ra,4(sp)
   16990:	df000017 	ldw	fp,0(sp)
   16994:	dec00204 	addi	sp,sp,8
   16998:	f800283a 	ret

0001699c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   1699c:	defffe04 	addi	sp,sp,-8
   169a0:	dfc00115 	stw	ra,4(sp)
   169a4:	df000015 	stw	fp,0(sp)
   169a8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
   169ac:	01008074 	movhi	r4,513
   169b0:	2128b804 	addi	r4,r4,-23840
   169b4:	000b883a 	mov	r5,zero
   169b8:	000d883a 	mov	r6,zero
   169bc:	01c0fa04 	movi	r7,1000
   169c0:	001834c0 	call	1834c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_EPCS_FLASH_CONTROLLER_INIT ( EPCS_FLASH_CONTROLLER_0, epcs_flash_controller_0);
   169c4:	010000b4 	movhi	r4,2
   169c8:	212e6f04 	addi	r4,r4,-17988
   169cc:	0016aec0 	call	16aec <alt_epcs_flash_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   169d0:	010000b4 	movhi	r4,2
   169d4:	212eac04 	addi	r4,r4,-17744
   169d8:	000b883a 	mov	r5,zero
   169dc:	018000c4 	movi	r6,3
   169e0:	00177100 	call	17710 <altera_avalon_jtag_uart_init>
   169e4:	010000b4 	movhi	r4,2
   169e8:	212ea204 	addi	r4,r4,-17784
   169ec:	00169300 	call	16930 <alt_dev_reg>
    ALTERA_AVALON_PERFORMANCE_COUNTER_INIT ( PERFORMANCE_COUNTER, performance_counter);
   169f0:	00c00044 	movi	r3,1
   169f4:	00808074 	movhi	r2,513
   169f8:	10a80004 	addi	r2,r2,-24576
   169fc:	10c00035 	stwio	r3,0(r2)
    ALTERA_AVALON_UART_INIT ( NEW_ULTRASOUND0, New_UltraSound0);
   16a00:	010000b4 	movhi	r4,2
   16a04:	2132c704 	addi	r4,r4,-13540
   16a08:	000b883a 	mov	r5,zero
   16a0c:	01800184 	movi	r6,6
   16a10:	00184e40 	call	184e4 <altera_avalon_uart_init>
   16a14:	010000b4 	movhi	r4,2
   16a18:	2132bd04 	addi	r4,r4,-13580
   16a1c:	00169300 	call	16930 <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( NEW_ULTRASOUND1, New_UltraSound1);
   16a20:	010000b4 	movhi	r4,2
   16a24:	2132fb04 	addi	r4,r4,-13332
   16a28:	000b883a 	mov	r5,zero
   16a2c:	018001c4 	movi	r6,7
   16a30:	00184e40 	call	184e4 <altera_avalon_uart_init>
   16a34:	010000b4 	movhi	r4,2
   16a38:	2132f104 	addi	r4,r4,-13372
   16a3c:	00169300 	call	16930 <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( NEW_ULTRASOUND2, New_UltraSound2);
   16a40:	010000b4 	movhi	r4,2
   16a44:	21332f04 	addi	r4,r4,-13124
   16a48:	000b883a 	mov	r5,zero
   16a4c:	01800204 	movi	r6,8
   16a50:	00184e40 	call	184e4 <altera_avalon_uart_init>
   16a54:	010000b4 	movhi	r4,2
   16a58:	21332504 	addi	r4,r4,-13164
   16a5c:	00169300 	call	16930 <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( NEW_ULTRASOUND3, New_UltraSound3);
   16a60:	010000b4 	movhi	r4,2
   16a64:	21336304 	addi	r4,r4,-12916
   16a68:	000b883a 	mov	r5,zero
   16a6c:	01800244 	movi	r6,9
   16a70:	00184e40 	call	184e4 <altera_avalon_uart_init>
   16a74:	010000b4 	movhi	r4,2
   16a78:	21335904 	addi	r4,r4,-12956
   16a7c:	00169300 	call	16930 <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( UART_0, uart_0);
   16a80:	010000b4 	movhi	r4,2
   16a84:	21339704 	addi	r4,r4,-12708
   16a88:	000b883a 	mov	r5,zero
   16a8c:	01800104 	movi	r6,4
   16a90:	00184e40 	call	184e4 <altera_avalon_uart_init>
   16a94:	010000b4 	movhi	r4,2
   16a98:	21338d04 	addi	r4,r4,-12748
   16a9c:	00169300 	call	16930 <alt_dev_reg>
}
   16aa0:	e037883a 	mov	sp,fp
   16aa4:	dfc00117 	ldw	ra,4(sp)
   16aa8:	df000017 	ldw	fp,0(sp)
   16aac:	dec00204 	addi	sp,sp,8
   16ab0:	f800283a 	ret

00016ab4 <alt_flash_device_register>:

typedef struct alt_flash_dev alt_flash_dev; 
typedef alt_flash_dev alt_flash_fd;

static ALT_INLINE int alt_flash_device_register( alt_flash_fd* fd)
{
   16ab4:	defffd04 	addi	sp,sp,-12
   16ab8:	dfc00215 	stw	ra,8(sp)
   16abc:	df000115 	stw	fp,4(sp)
   16ac0:	df000104 	addi	fp,sp,4
   16ac4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_flash_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) fd, &alt_flash_dev_list);
   16ac8:	e13fff17 	ldw	r4,-4(fp)
   16acc:	014000b4 	movhi	r5,2
   16ad0:	2973ee04 	addi	r5,r5,-12360
   16ad4:	00197040 	call	19704 <alt_dev_llist_insert>
}
   16ad8:	e037883a 	mov	sp,fp
   16adc:	dfc00117 	ldw	ra,4(sp)
   16ae0:	df000017 	ldw	fp,0(sp)
   16ae4:	dec00204 	addi	sp,sp,8
   16ae8:	f800283a 	ret

00016aec <alt_epcs_flash_init>:
/*
 * alt_epcs_flash_init
 *
 */
int alt_epcs_flash_init(alt_flash_epcs_dev* flash)
{
   16aec:	defffc04 	addi	sp,sp,-16
   16af0:	dfc00315 	stw	ra,12(sp)
   16af4:	df000215 	stw	fp,8(sp)
   16af8:	df000204 	addi	fp,sp,8
   16afc:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
   16b00:	e03ffe15 	stw	zero,-8(fp)

  /* Set up function pointers and/or data structures as needed. */
  ret_code = alt_epcs_flash_query(flash);
   16b04:	e13fff17 	ldw	r4,-4(fp)
   16b08:	0016b400 	call	16b40 <alt_epcs_flash_query>
   16b0c:	e0bffe15 	stw	r2,-8(fp)
  */

  /*
  *  Register this device as a valid flash device type
  */
  if (!ret_code)
   16b10:	e0bffe17 	ldw	r2,-8(fp)
   16b14:	1000041e 	bne	r2,zero,16b28 <alt_epcs_flash_init+0x3c>
    ret_code = alt_flash_device_register(&(flash->dev));
   16b18:	e0bfff17 	ldw	r2,-4(fp)
   16b1c:	1009883a 	mov	r4,r2
   16b20:	0016ab40 	call	16ab4 <alt_flash_device_register>
   16b24:	e0bffe15 	stw	r2,-8(fp)

  return ret_code;
   16b28:	e0bffe17 	ldw	r2,-8(fp)
}
   16b2c:	e037883a 	mov	sp,fp
   16b30:	dfc00117 	ldw	ra,4(sp)
   16b34:	df000017 	ldw	fp,0(sp)
   16b38:	dec00204 	addi	sp,sp,8
   16b3c:	f800283a 	ret

00016b40 <alt_epcs_flash_query>:


static int alt_epcs_flash_query(alt_flash_epcs_dev* flash)
{
   16b40:	defffc04 	addi	sp,sp,-16
   16b44:	dfc00315 	stw	ra,12(sp)
   16b48:	df000215 	stw	fp,8(sp)
   16b4c:	df000204 	addi	fp,sp,8
   16b50:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
   16b54:	e03ffe15 	stw	zero,-8(fp)
   * reset the device, or whatever, to ensure that
   * it's in a known working state.
  */
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
   16b58:	e0bfff17 	ldw	r2,-4(fp)
   16b5c:	10003215 	stw	zero,200(r2)
  
  /* Send the RES command sequence */
  flash->silicon_id =
    epcs_read_electronic_signature(flash->register_base);
   16b60:	e0bfff17 	ldw	r2,-4(fp)
   16b64:	10802e17 	ldw	r2,184(r2)
   16b68:	1009883a 	mov	r4,r2
   16b6c:	00193d40 	call	193d4 <epcs_read_electronic_signature>
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
  
  /* Send the RES command sequence */
  flash->silicon_id =
   16b70:	10c03fcc 	andi	r3,r2,255
   16b74:	e0bfff17 	ldw	r2,-4(fp)
   16b78:	10c03015 	stw	r3,192(r2)
    epcs_read_electronic_signature(flash->register_base);

  /* Fill in all device-specific parameters. */
  if (flash->silicon_id == 0x16) /* EPCS64 */
   16b7c:	e0bfff17 	ldw	r2,-4(fp)
   16b80:	10803017 	ldw	r2,192(r2)
   16b84:	10800598 	cmpnei	r2,r2,22
   16b88:	10000a1e 	bne	r2,zero,16bb4 <alt_epcs_flash_query+0x74>
  {
    flash->dev.region_info[0].region_size = 64 * 1024 * 1024 / 8;
   16b8c:	e0bfff17 	ldw	r2,-4(fp)
   16b90:	00c02034 	movhi	r3,128
   16b94:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 128;
   16b98:	e0bfff17 	ldw	r2,-4(fp)
   16b9c:	00c02004 	movi	r3,128
   16ba0:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
   16ba4:	e0bfff17 	ldw	r2,-4(fp)
   16ba8:	00c00074 	movhi	r3,1
   16bac:	10c01015 	stw	r3,64(r2)
   16bb0:	0000ce06 	br	16eec <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x14) /* EPCS16 */
   16bb4:	e0bfff17 	ldw	r2,-4(fp)
   16bb8:	10803017 	ldw	r2,192(r2)
   16bbc:	10800518 	cmpnei	r2,r2,20
   16bc0:	10000a1e 	bne	r2,zero,16bec <alt_epcs_flash_query+0xac>
  {
    flash->dev.region_info[0].region_size = 16 * 1024 * 1024 / 8;
   16bc4:	e0bfff17 	ldw	r2,-4(fp)
   16bc8:	00c00834 	movhi	r3,32
   16bcc:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 32;
   16bd0:	e0bfff17 	ldw	r2,-4(fp)
   16bd4:	00c00804 	movi	r3,32
   16bd8:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
   16bdc:	e0bfff17 	ldw	r2,-4(fp)
   16be0:	00c00074 	movhi	r3,1
   16be4:	10c01015 	stw	r3,64(r2)
   16be8:	0000c006 	br	16eec <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x13) /* EPCS8 */
   16bec:	e0bfff17 	ldw	r2,-4(fp)
   16bf0:	10803017 	ldw	r2,192(r2)
   16bf4:	108004d8 	cmpnei	r2,r2,19
   16bf8:	10000a1e 	bne	r2,zero,16c24 <alt_epcs_flash_query+0xe4>
  {
    flash->dev.region_info[0].region_size = 8 * 1024 * 1024 / 8;
   16bfc:	e0bfff17 	ldw	r2,-4(fp)
   16c00:	00c00434 	movhi	r3,16
   16c04:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 16;
   16c08:	e0bfff17 	ldw	r2,-4(fp)
   16c0c:	00c00404 	movi	r3,16
   16c10:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
   16c14:	e0bfff17 	ldw	r2,-4(fp)
   16c18:	00c00074 	movhi	r3,1
   16c1c:	10c01015 	stw	r3,64(r2)
   16c20:	0000b206 	br	16eec <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x12) /* EPCS4 */
   16c24:	e0bfff17 	ldw	r2,-4(fp)
   16c28:	10803017 	ldw	r2,192(r2)
   16c2c:	10800498 	cmpnei	r2,r2,18
   16c30:	10000a1e 	bne	r2,zero,16c5c <alt_epcs_flash_query+0x11c>
  {
    flash->dev.region_info[0].region_size = 4 * 1024 * 1024 / 8;
   16c34:	e0bfff17 	ldw	r2,-4(fp)
   16c38:	00c00234 	movhi	r3,8
   16c3c:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 8;
   16c40:	e0bfff17 	ldw	r2,-4(fp)
   16c44:	00c00204 	movi	r3,8
   16c48:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
   16c4c:	e0bfff17 	ldw	r2,-4(fp)
   16c50:	00c00074 	movhi	r3,1
   16c54:	10c01015 	stw	r3,64(r2)
   16c58:	0000a406 	br	16eec <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x10) /* EPCS1 */
   16c5c:	e0bfff17 	ldw	r2,-4(fp)
   16c60:	10803017 	ldw	r2,192(r2)
   16c64:	10800418 	cmpnei	r2,r2,16
   16c68:	10000a1e 	bne	r2,zero,16c94 <alt_epcs_flash_query+0x154>
  {
    flash->dev.region_info[0].region_size = 1 * 1024 * 1024 / 8;
   16c6c:	e0bfff17 	ldw	r2,-4(fp)
   16c70:	00c000b4 	movhi	r3,2
   16c74:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 4;
   16c78:	e0bfff17 	ldw	r2,-4(fp)
   16c7c:	00c00104 	movi	r3,4
   16c80:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 32768;
   16c84:	e0bfff17 	ldw	r2,-4(fp)
   16c88:	00e00014 	movui	r3,32768
   16c8c:	10c01015 	stw	r3,64(r2)
   16c90:	00009606 	br	16eec <alt_epcs_flash_query+0x3ac>
  {
    /* 
     * Read electronic signature doesn't work for newer devices; try 
     * the "Read Device ID" command" before giving up.
     */
    flash->silicon_id = epcs_read_device_id(flash->register_base);
   16c94:	e0bfff17 	ldw	r2,-4(fp)
   16c98:	10802e17 	ldw	r2,184(r2)
   16c9c:	1009883a 	mov	r4,r2
   16ca0:	001943c0 	call	1943c <epcs_read_device_id>
   16ca4:	1007883a 	mov	r3,r2
   16ca8:	e0bfff17 	ldw	r2,-4(fp)
   16cac:	10c03015 	stw	r3,192(r2)
    /*
     * Last byte is the density ID. Note the difference between
     * EPCS128 and EPCQ128 -- arranged differently, though the 
     * least significant byte of each is '0x18'.
     */
    if((flash->silicon_id & 0xFFFFFF) == 0x20BA15) /* EPCQ16 */
   16cb0:	e0bfff17 	ldw	r2,-4(fp)
   16cb4:	10c03017 	ldw	r3,192(r2)
   16cb8:	00804034 	movhi	r2,256
   16cbc:	10bfffc4 	addi	r2,r2,-1
   16cc0:	1886703a 	and	r3,r3,r2
   16cc4:	00800874 	movhi	r2,33
   16cc8:	10ae8544 	addi	r2,r2,-17899
   16ccc:	18800a1e 	bne	r3,r2,16cf8 <alt_epcs_flash_query+0x1b8>
    {
      flash->dev.region_info[0].region_size = 16 * 1024 * 1024 / 8;
   16cd0:	e0bfff17 	ldw	r2,-4(fp)
   16cd4:	00c00834 	movhi	r3,32
   16cd8:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 32; /* number of sectors */
   16cdc:	e0bfff17 	ldw	r2,-4(fp)
   16ce0:	00c00804 	movi	r3,32
   16ce4:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
   16ce8:	e0bfff17 	ldw	r2,-4(fp)
   16cec:	00c00074 	movhi	r3,1
   16cf0:	10c01015 	stw	r3,64(r2)
   16cf4:	00007d06 	br	16eec <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFFFFFF) == 0x20BA16) /* EPCQ32 */
   16cf8:	e0bfff17 	ldw	r2,-4(fp)
   16cfc:	10c03017 	ldw	r3,192(r2)
   16d00:	00804034 	movhi	r2,256
   16d04:	10bfffc4 	addi	r2,r2,-1
   16d08:	1886703a 	and	r3,r3,r2
   16d0c:	00800874 	movhi	r2,33
   16d10:	10ae8584 	addi	r2,r2,-17898
   16d14:	18800a1e 	bne	r3,r2,16d40 <alt_epcs_flash_query+0x200>
    {
      flash->dev.region_info[0].region_size = 32 * 1024 * 1024 / 8;
   16d18:	e0bfff17 	ldw	r2,-4(fp)
   16d1c:	00c01034 	movhi	r3,64
   16d20:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 64; /* number of sectors */
   16d24:	e0bfff17 	ldw	r2,-4(fp)
   16d28:	00c01004 	movi	r3,64
   16d2c:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
   16d30:	e0bfff17 	ldw	r2,-4(fp)
   16d34:	00c00074 	movhi	r3,1
   16d38:	10c01015 	stw	r3,64(r2)
   16d3c:	00006b06 	br	16eec <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFFFFFF) == 0x20BA17) /* EPCQ64 */
   16d40:	e0bfff17 	ldw	r2,-4(fp)
   16d44:	10c03017 	ldw	r3,192(r2)
   16d48:	00804034 	movhi	r2,256
   16d4c:	10bfffc4 	addi	r2,r2,-1
   16d50:	1886703a 	and	r3,r3,r2
   16d54:	00800874 	movhi	r2,33
   16d58:	10ae85c4 	addi	r2,r2,-17897
   16d5c:	18800a1e 	bne	r3,r2,16d88 <alt_epcs_flash_query+0x248>
    {
      flash->dev.region_info[0].region_size = 64 * 1024 * 1024 / 8;
   16d60:	e0bfff17 	ldw	r2,-4(fp)
   16d64:	00c02034 	movhi	r3,128
   16d68:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 128; /* number of sectors */
   16d6c:	e0bfff17 	ldw	r2,-4(fp)
   16d70:	00c02004 	movi	r3,128
   16d74:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
   16d78:	e0bfff17 	ldw	r2,-4(fp)
   16d7c:	00c00074 	movhi	r3,1
   16d80:	10c01015 	stw	r3,64(r2)
   16d84:	00005906 	br	16eec <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFFFFFF) == 0x20BA18) /* EPCQ128 */
   16d88:	e0bfff17 	ldw	r2,-4(fp)
   16d8c:	10c03017 	ldw	r3,192(r2)
   16d90:	00804034 	movhi	r2,256
   16d94:	10bfffc4 	addi	r2,r2,-1
   16d98:	1886703a 	and	r3,r3,r2
   16d9c:	00800874 	movhi	r2,33
   16da0:	10ae8604 	addi	r2,r2,-17896
   16da4:	18800a1e 	bne	r3,r2,16dd0 <alt_epcs_flash_query+0x290>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
   16da8:	e0bfff17 	ldw	r2,-4(fp)
   16dac:	00c04034 	movhi	r3,256
   16db0:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 256; /* number of sectors */
   16db4:	e0bfff17 	ldw	r2,-4(fp)
   16db8:	00c04004 	movi	r3,256
   16dbc:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
   16dc0:	e0bfff17 	ldw	r2,-4(fp)
   16dc4:	00c00074 	movhi	r3,1
   16dc8:	10c01015 	stw	r3,64(r2)
   16dcc:	00004706 	br	16eec <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF) == 0x18) /* EPCS128 */
   16dd0:	e0bfff17 	ldw	r2,-4(fp)
   16dd4:	10803017 	ldw	r2,192(r2)
   16dd8:	10803fcc 	andi	r2,r2,255
   16ddc:	10800618 	cmpnei	r2,r2,24
   16de0:	10000a1e 	bne	r2,zero,16e0c <alt_epcs_flash_query+0x2cc>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
   16de4:	e0bfff17 	ldw	r2,-4(fp)
   16de8:	00c04034 	movhi	r3,256
   16dec:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 64;
   16df0:	e0bfff17 	ldw	r2,-4(fp)
   16df4:	00c01004 	movi	r3,64
   16df8:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 262144;
   16dfc:	e0bfff17 	ldw	r2,-4(fp)
   16e00:	00c00134 	movhi	r3,4
   16e04:	10c01015 	stw	r3,64(r2)
   16e08:	00003806 	br	16eec <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF ) == 0x19) /* EPCQ256 */
   16e0c:	e0bfff17 	ldw	r2,-4(fp)
   16e10:	10803017 	ldw	r2,192(r2)
   16e14:	10803fcc 	andi	r2,r2,255
   16e18:	10800658 	cmpnei	r2,r2,25
   16e1c:	10000d1e 	bne	r2,zero,16e54 <alt_epcs_flash_query+0x314>
    {
      flash->dev.region_info[0].region_size = 256 * 1024 * 1024 / 8;
   16e20:	e0bfff17 	ldw	r2,-4(fp)
   16e24:	00c08034 	movhi	r3,512
   16e28:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 512; /* number of sectors */
   16e2c:	e0bfff17 	ldw	r2,-4(fp)
   16e30:	00c08004 	movi	r3,512
   16e34:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
   16e38:	e0bfff17 	ldw	r2,-4(fp)
   16e3c:	00c00074 	movhi	r3,1
   16e40:	10c01015 	stw	r3,64(r2)
       * must first be programmed into the device, though. To complicate things, 
       * other Altera IP expects the chip to be in 3 byte address mode when they 
       * start using it. To be nice, we'll place the device into 4-byte address mode
       * when we need to, and take it back out when we're done.
       */
      flash->four_bytes_mode = 1;
   16e44:	e0bfff17 	ldw	r2,-4(fp)
   16e48:	00c00044 	movi	r3,1
   16e4c:	10c03215 	stw	r3,200(r2)
   16e50:	00002606 	br	16eec <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF ) == 0x20) /* EPCQ512 */
   16e54:	e0bfff17 	ldw	r2,-4(fp)
   16e58:	10803017 	ldw	r2,192(r2)
   16e5c:	10803fcc 	andi	r2,r2,255
   16e60:	10800818 	cmpnei	r2,r2,32
   16e64:	10000d1e 	bne	r2,zero,16e9c <alt_epcs_flash_query+0x35c>
    {
      flash->dev.region_info[0].region_size = 512 * 1024 * 1024 / 8;
   16e68:	e0bfff17 	ldw	r2,-4(fp)
   16e6c:	00c10034 	movhi	r3,1024
   16e70:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 1024; /* number of sectors */
   16e74:	e0bfff17 	ldw	r2,-4(fp)
   16e78:	00c10004 	movi	r3,1024
   16e7c:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
   16e80:	e0bfff17 	ldw	r2,-4(fp)
   16e84:	00c00074 	movhi	r3,1
   16e88:	10c01015 	stw	r3,64(r2)

      /* Enable 4-bytes address mode if the device density is greater than 256Mbit. */
      flash->four_bytes_mode = 1;
   16e8c:	e0bfff17 	ldw	r2,-4(fp)
   16e90:	00c00044 	movi	r3,1
   16e94:	10c03215 	stw	r3,200(r2)
   16e98:	00001406 	br	16eec <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF ) == 0x21) /* EPCQ1024 */
   16e9c:	e0bfff17 	ldw	r2,-4(fp)
   16ea0:	10803017 	ldw	r2,192(r2)
   16ea4:	10803fcc 	andi	r2,r2,255
   16ea8:	10800858 	cmpnei	r2,r2,33
   16eac:	10000d1e 	bne	r2,zero,16ee4 <alt_epcs_flash_query+0x3a4>
    {
      flash->dev.region_info[0].region_size = 1024 * 1024 * 1024 / 8;
   16eb0:	e0bfff17 	ldw	r2,-4(fp)
   16eb4:	00c20034 	movhi	r3,2048
   16eb8:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 2048; /* number of sectors */
   16ebc:	e0bfff17 	ldw	r2,-4(fp)
   16ec0:	00c20004 	movi	r3,2048
   16ec4:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
   16ec8:	e0bfff17 	ldw	r2,-4(fp)
   16ecc:	00c00074 	movhi	r3,1
   16ed0:	10c01015 	stw	r3,64(r2)

      /* Enable 4-bytes address mode if the device density is greater than 256Mbit. */
      flash->four_bytes_mode = 1;
   16ed4:	e0bfff17 	ldw	r2,-4(fp)
   16ed8:	00c00044 	movi	r3,1
   16edc:	10c03215 	stw	r3,200(r2)
   16ee0:	00000206 	br	16eec <alt_epcs_flash_query+0x3ac>
    }
    else 
    {
      ret_code = -ENODEV; /* No known device found! */
   16ee4:	00bffb44 	movi	r2,-19
   16ee8:	e0bffe15 	stw	r2,-8(fp)
    }
  }
  
  flash->size_in_bytes = flash->dev.region_info[0].region_size;
   16eec:	e0bfff17 	ldw	r2,-4(fp)
   16ef0:	10800e17 	ldw	r2,56(r2)
   16ef4:	1007883a 	mov	r3,r2
   16ef8:	e0bfff17 	ldw	r2,-4(fp)
   16efc:	10c02f15 	stw	r3,188(r2)
  flash->dev.number_of_regions = 1;
   16f00:	e0bfff17 	ldw	r2,-4(fp)
   16f04:	00c00044 	movi	r3,1
   16f08:	10c00c15 	stw	r3,48(r2)
  flash->dev.region_info[0].offset = 0;
   16f0c:	e0bfff17 	ldw	r2,-4(fp)
   16f10:	10000d15 	stw	zero,52(r2)
  flash->page_size = 256;
   16f14:	e0bfff17 	ldw	r2,-4(fp)
   16f18:	00c04004 	movi	r3,256
   16f1c:	10c03115 	stw	r3,196(r2)

  /* Consider clearing all BP bits here. */
  return ret_code;
   16f20:	e0bffe17 	ldw	r2,-8(fp)
}
   16f24:	e037883a 	mov	sp,fp
   16f28:	dfc00117 	ldw	ra,4(sp)
   16f2c:	df000017 	ldw	fp,0(sp)
   16f30:	dec00204 	addi	sp,sp,8
   16f34:	f800283a 	ret

00016f38 <alt_epcs_flash_memcmp>:
  alt_flash_dev* flash_info,
  const void* src_buffer,
  int offset,
  size_t n
)
{
   16f38:	deffee04 	addi	sp,sp,-72
   16f3c:	dfc01115 	stw	ra,68(sp)
   16f40:	df001015 	stw	fp,64(sp)
   16f44:	df001004 	addi	fp,sp,64
   16f48:	e13ffc15 	stw	r4,-16(fp)
   16f4c:	e17ffd15 	stw	r5,-12(fp)
   16f50:	e1bffe15 	stw	r6,-8(fp)
   16f54:	e1ffff15 	stw	r7,-4(fp)
  /*
   * Compare chunks of memory at a time, for better serial-flash
   * read efficiency.
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
   16f58:	00800804 	movi	r2,32
   16f5c:	e0bff115 	stw	r2,-60(fp)
  int current_offset = 0;
   16f60:	e03ff015 	stw	zero,-64(fp)

  while (n > 0)
   16f64:	00002606 	br	17000 <alt_epcs_flash_memcmp+0xc8>
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
   16f68:	e0bff117 	ldw	r2,-60(fp)
   16f6c:	e0ffff17 	ldw	r3,-4(fp)
   16f70:	1880012e 	bgeu	r3,r2,16f78 <alt_epcs_flash_memcmp+0x40>
   16f74:	1805883a 	mov	r2,r3
   16f78:	e0bff215 	stw	r2,-56(fp)
    int this_chunk_cmp;

    if (
      alt_epcs_flash_read(
   16f7c:	e0fffe17 	ldw	r3,-8(fp)
   16f80:	e0bff017 	ldw	r2,-64(fp)
   16f84:	1887883a 	add	r3,r3,r2
   16f88:	e0bff404 	addi	r2,fp,-48
   16f8c:	e13ffc17 	ldw	r4,-16(fp)
   16f90:	180b883a 	mov	r5,r3
   16f94:	100d883a 	mov	r6,r2
   16f98:	e1fff217 	ldw	r7,-56(fp)
   16f9c:	00175140 	call	17514 <alt_epcs_flash_read>
  while (n > 0)
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
    int this_chunk_cmp;

    if (
   16fa0:	1000020e 	bge	r2,zero,16fac <alt_epcs_flash_memcmp+0x74>
    {
      /*
      * If the read fails, I'm not sure what the appropriate action is.
      * Compare success seems wrong, so make it compare fail.
      */
      return -1;
   16fa4:	00bfffc4 	movi	r2,-1
   16fa8:	00001806 	br	1700c <alt_epcs_flash_memcmp+0xd4>
    }

    /* Compare this chunk against the source memory buffer. */
    this_chunk_cmp = memcmp(&((unsigned char*)(src_buffer))[current_offset], chunk_buffer, this_chunk_size);
   16fac:	e0bff017 	ldw	r2,-64(fp)
   16fb0:	e0fffd17 	ldw	r3,-12(fp)
   16fb4:	1889883a 	add	r4,r3,r2
   16fb8:	e0bff217 	ldw	r2,-56(fp)
   16fbc:	e0fff404 	addi	r3,fp,-48
   16fc0:	180b883a 	mov	r5,r3
   16fc4:	100d883a 	mov	r6,r2
   16fc8:	001a70c0 	call	1a70c <memcmp>
   16fcc:	e0bff315 	stw	r2,-52(fp)
    if (this_chunk_cmp)
   16fd0:	e0bff317 	ldw	r2,-52(fp)
   16fd4:	10000226 	beq	r2,zero,16fe0 <alt_epcs_flash_memcmp+0xa8>
    {
      return this_chunk_cmp;
   16fd8:	e0bff317 	ldw	r2,-52(fp)
   16fdc:	00000b06 	br	1700c <alt_epcs_flash_memcmp+0xd4>
    }

    n -= this_chunk_size;
   16fe0:	e0bff217 	ldw	r2,-56(fp)
   16fe4:	e0ffff17 	ldw	r3,-4(fp)
   16fe8:	1885c83a 	sub	r2,r3,r2
   16fec:	e0bfff15 	stw	r2,-4(fp)
    current_offset += this_chunk_size;
   16ff0:	e0fff017 	ldw	r3,-64(fp)
   16ff4:	e0bff217 	ldw	r2,-56(fp)
   16ff8:	1885883a 	add	r2,r3,r2
   16ffc:	e0bff015 	stw	r2,-64(fp)
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
  int current_offset = 0;

  while (n > 0)
   17000:	e0bfff17 	ldw	r2,-4(fp)
   17004:	103fd81e 	bne	r2,zero,16f68 <alt_epcs_flash_memcmp+0x30>
  }

  /*
   * If execution made it to this point, compare is successful.
   */
  return 0;
   17008:	0005883a 	mov	r2,zero
}
   1700c:	e037883a 	mov	sp,fp
   17010:	dfc00117 	ldw	ra,4(sp)
   17014:	df000017 	ldw	fp,0(sp)
   17018:	dec00204 	addi	sp,sp,8
   1701c:	f800283a 	ret

00017020 <alt_epcs_flash_write>:
 * large buffer to tie up in our programming library, when not all users will
 * want that functionality.
 */
int alt_epcs_flash_write(alt_flash_dev* flash_info, int offset,
                          const void* src_addr, int length)
{
   17020:	defff404 	addi	sp,sp,-48
   17024:	dfc00b15 	stw	ra,44(sp)
   17028:	df000a15 	stw	fp,40(sp)
   1702c:	df000a04 	addi	fp,sp,40
   17030:	e13ffc15 	stw	r4,-16(fp)
   17034:	e17ffd15 	stw	r5,-12(fp)
   17038:	e1bffe15 	stw	r6,-8(fp)
   1703c:	e1ffff15 	stw	r7,-4(fp)
  int         ret_code = 0;
   17040:	e03ff715 	stw	zero,-36(fp)
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
   17044:	e03ff815 	stw	zero,-32(fp)
   17048:	00008306 	br	17258 <alt_epcs_flash_write+0x238>
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
   1704c:	e0fffc17 	ldw	r3,-16(fp)
   17050:	e0bff817 	ldw	r2,-32(fp)
   17054:	1004913a 	slli	r2,r2,4
   17058:	10800d04 	addi	r2,r2,52
   1705c:	1885883a 	add	r2,r3,r2
   17060:	10800017 	ldw	r2,0(r2)
   17064:	e0fffd17 	ldw	r3,-12(fp)
   17068:	18807816 	blt	r3,r2,1724c <alt_epcs_flash_write+0x22c>
      (offset < (flash_info->region_info[i].offset +
   1706c:	e0fffc17 	ldw	r3,-16(fp)
   17070:	e0bff817 	ldw	r2,-32(fp)
   17074:	1004913a 	slli	r2,r2,4
   17078:	10800d04 	addi	r2,r2,52
   1707c:	1885883a 	add	r2,r3,r2
   17080:	10c00017 	ldw	r3,0(r2)
      flash_info->region_info[i].region_size)))
   17084:	e13ffc17 	ldw	r4,-16(fp)
   17088:	e0bff817 	ldw	r2,-32(fp)
   1708c:	1004913a 	slli	r2,r2,4
   17090:	10800e04 	addi	r2,r2,56
   17094:	2085883a 	add	r2,r4,r2
   17098:	10800017 	ldw	r2,0(r2)
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
      (offset < (flash_info->region_info[i].offset +
   1709c:	1885883a 	add	r2,r3,r2
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
   170a0:	e0fffd17 	ldw	r3,-12(fp)
   170a4:	1880690e 	bge	r3,r2,1724c <alt_epcs_flash_write+0x22c>
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;
   170a8:	e0fffc17 	ldw	r3,-16(fp)
   170ac:	e0bff817 	ldw	r2,-32(fp)
   170b0:	1004913a 	slli	r2,r2,4
   170b4:	10800d04 	addi	r2,r2,52
   170b8:	1885883a 	add	r2,r3,r2
   170bc:	10800017 	ldw	r2,0(r2)
   170c0:	e0bffa15 	stw	r2,-24(fp)

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
   170c4:	e03ff915 	stw	zero,-28(fp)
   170c8:	00005806 	br	1722c <alt_epcs_flash_write+0x20c>
      {
        if ((offset >= current_offset ) &&
   170cc:	e0fffd17 	ldw	r3,-12(fp)
   170d0:	e0bffa17 	ldw	r2,-24(fp)
   170d4:	18804916 	blt	r3,r2,171fc <alt_epcs_flash_write+0x1dc>
            (offset < (current_offset +
            flash_info->region_info[i].block_size)))
   170d8:	e0fffc17 	ldw	r3,-16(fp)
   170dc:	e0bff817 	ldw	r2,-32(fp)
   170e0:	10800104 	addi	r2,r2,4
   170e4:	1004913a 	slli	r2,r2,4
   170e8:	1885883a 	add	r2,r3,r2
   170ec:	10c00017 	ldw	r3,0(r2)
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
      {
        if ((offset >= current_offset ) &&
            (offset < (current_offset +
   170f0:	e0bffa17 	ldw	r2,-24(fp)
   170f4:	1885883a 	add	r2,r3,r2
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
      {
        if ((offset >= current_offset ) &&
   170f8:	e0fffd17 	ldw	r3,-12(fp)
   170fc:	18803f0e 	bge	r3,r2,171fc <alt_epcs_flash_write+0x1dc>
        {
          /*
           * Check if the contents of the block are different
           * from the data we wish to put there
           */
          data_to_write = ( current_offset + flash_info->region_info[i].block_size
   17100:	e0fffc17 	ldw	r3,-16(fp)
   17104:	e0bff817 	ldw	r2,-32(fp)
   17108:	10800104 	addi	r2,r2,4
   1710c:	1004913a 	slli	r2,r2,4
   17110:	1885883a 	add	r2,r3,r2
   17114:	10c00017 	ldw	r3,0(r2)
   17118:	e0bffa17 	ldw	r2,-24(fp)
   1711c:	1887883a 	add	r3,r3,r2
   17120:	e0bffd17 	ldw	r2,-12(fp)
   17124:	1885c83a 	sub	r2,r3,r2
   17128:	e0bffb15 	stw	r2,-20(fp)
                            - offset);
          data_to_write = MIN(data_to_write, length);
   1712c:	e0fffb17 	ldw	r3,-20(fp)
   17130:	e0bfff17 	ldw	r2,-4(fp)
   17134:	1880010e 	bge	r3,r2,1713c <alt_epcs_flash_write+0x11c>
   17138:	1805883a 	mov	r2,r3
   1713c:	e0bffb15 	stw	r2,-20(fp)

          if(alt_epcs_flash_memcmp(flash_info, src_addr, offset, data_to_write))
   17140:	e0bffb17 	ldw	r2,-20(fp)
   17144:	e13ffc17 	ldw	r4,-16(fp)
   17148:	e17ffe17 	ldw	r5,-8(fp)
   1714c:	e1bffd17 	ldw	r6,-12(fp)
   17150:	100f883a 	mov	r7,r2
   17154:	0016f380 	call	16f38 <alt_epcs_flash_memcmp>
   17158:	10001226 	beq	r2,zero,171a4 <alt_epcs_flash_write+0x184>
          {
            ret_code = (*flash_info->erase_block)(flash_info, current_offset);
   1715c:	e0bffc17 	ldw	r2,-16(fp)
   17160:	10800817 	ldw	r2,32(r2)
   17164:	e13ffc17 	ldw	r4,-16(fp)
   17168:	e17ffa17 	ldw	r5,-24(fp)
   1716c:	103ee83a 	callr	r2
   17170:	e0bff715 	stw	r2,-36(fp)

            if (!ret_code)
   17174:	e0bff717 	ldw	r2,-36(fp)
   17178:	10000a1e 	bne	r2,zero,171a4 <alt_epcs_flash_write+0x184>
            {
              ret_code = (*flash_info->write_block)(
   1717c:	e0bffc17 	ldw	r2,-16(fp)
   17180:	10800917 	ldw	r2,36(r2)
   17184:	e0fffb17 	ldw	r3,-20(fp)
   17188:	d8c00015 	stw	r3,0(sp)
   1718c:	e13ffc17 	ldw	r4,-16(fp)
   17190:	e17ffa17 	ldw	r5,-24(fp)
   17194:	e1bffd17 	ldw	r6,-12(fp)
   17198:	e1fffe17 	ldw	r7,-8(fp)
   1719c:	103ee83a 	callr	r2
   171a0:	e0bff715 	stw	r2,-36(fp)
                                                  data_to_write);
            }
          }

          /* Was this the last block? */
          if ((length == data_to_write) || ret_code)
   171a4:	e0ffff17 	ldw	r3,-4(fp)
   171a8:	e0bffb17 	ldw	r2,-20(fp)
   171ac:	18802e26 	beq	r3,r2,17268 <alt_epcs_flash_write+0x248>
   171b0:	e0bff717 	ldw	r2,-36(fp)
   171b4:	10002c1e 	bne	r2,zero,17268 <alt_epcs_flash_write+0x248>
          {
            goto finished;
          }

          length -= data_to_write;
   171b8:	e0ffff17 	ldw	r3,-4(fp)
   171bc:	e0bffb17 	ldw	r2,-20(fp)
   171c0:	1885c83a 	sub	r2,r3,r2
   171c4:	e0bfff15 	stw	r2,-4(fp)
          offset = current_offset + flash_info->region_info[i].block_size;
   171c8:	e0fffc17 	ldw	r3,-16(fp)
   171cc:	e0bff817 	ldw	r2,-32(fp)
   171d0:	10800104 	addi	r2,r2,4
   171d4:	1004913a 	slli	r2,r2,4
   171d8:	1885883a 	add	r2,r3,r2
   171dc:	10c00017 	ldw	r3,0(r2)
   171e0:	e0bffa17 	ldw	r2,-24(fp)
   171e4:	1885883a 	add	r2,r3,r2
   171e8:	e0bffd15 	stw	r2,-12(fp)
          src_addr = (alt_u8*)src_addr + data_to_write;
   171ec:	e0bffb17 	ldw	r2,-20(fp)
   171f0:	e0fffe17 	ldw	r3,-8(fp)
   171f4:	1885883a 	add	r2,r3,r2
   171f8:	e0bffe15 	stw	r2,-8(fp)
        }
        current_offset += flash_info->region_info[i].block_size;
   171fc:	e0fffc17 	ldw	r3,-16(fp)
   17200:	e0bff817 	ldw	r2,-32(fp)
   17204:	10800104 	addi	r2,r2,4
   17208:	1004913a 	slli	r2,r2,4
   1720c:	1885883a 	add	r2,r3,r2
   17210:	10800017 	ldw	r2,0(r2)
   17214:	e0fffa17 	ldw	r3,-24(fp)
   17218:	1885883a 	add	r2,r3,r2
   1721c:	e0bffa15 	stw	r2,-24(fp)
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
   17220:	e0bff917 	ldw	r2,-28(fp)
   17224:	10800044 	addi	r2,r2,1
   17228:	e0bff915 	stw	r2,-28(fp)
   1722c:	e0fffc17 	ldw	r3,-16(fp)
   17230:	e0bff817 	ldw	r2,-32(fp)
   17234:	1004913a 	slli	r2,r2,4
   17238:	10800f04 	addi	r2,r2,60
   1723c:	1885883a 	add	r2,r3,r2
   17240:	10800017 	ldw	r2,0(r2)
   17244:	e0fff917 	ldw	r3,-28(fp)
   17248:	18bfa016 	blt	r3,r2,170cc <alt_epcs_flash_write+0xac>
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
   1724c:	e0bff817 	ldw	r2,-32(fp)
   17250:	10800044 	addi	r2,r2,1
   17254:	e0bff815 	stw	r2,-32(fp)
   17258:	e0bffc17 	ldw	r2,-16(fp)
   1725c:	10800c17 	ldw	r2,48(r2)
   17260:	e0fff817 	ldw	r3,-32(fp)
   17264:	18bf7916 	blt	r3,r2,1704c <alt_epcs_flash_write+0x2c>
      }
    }
  }

finished:
  return ret_code;
   17268:	e0bff717 	ldw	r2,-36(fp)
}
   1726c:	e037883a 	mov	sp,fp
   17270:	dfc00117 	ldw	ra,4(sp)
   17274:	df000017 	ldw	fp,0(sp)
   17278:	dec00204 	addi	sp,sp,8
   1727c:	f800283a 	ret

00017280 <alt_epcs_flash_get_info>:
 *
 *  Pass the table of erase blocks to the user
 */
int alt_epcs_flash_get_info(alt_flash_fd* fd, flash_region** info,
                            int* number_of_regions)
{
   17280:	defffa04 	addi	sp,sp,-24
   17284:	df000515 	stw	fp,20(sp)
   17288:	df000504 	addi	fp,sp,20
   1728c:	e13ffd15 	stw	r4,-12(fp)
   17290:	e17ffe15 	stw	r5,-8(fp)
   17294:	e1bfff15 	stw	r6,-4(fp)
  int ret_code = 0;
   17298:	e03ffb15 	stw	zero,-20(fp)

  alt_flash_dev* flash = (alt_flash_dev*)fd;
   1729c:	e0bffd17 	ldw	r2,-12(fp)
   172a0:	e0bffc15 	stw	r2,-16(fp)

  *number_of_regions = flash->number_of_regions;
   172a4:	e0bffc17 	ldw	r2,-16(fp)
   172a8:	10c00c17 	ldw	r3,48(r2)
   172ac:	e0bfff17 	ldw	r2,-4(fp)
   172b0:	10c00015 	stw	r3,0(r2)

  if (!flash->number_of_regions)
   172b4:	e0bffc17 	ldw	r2,-16(fp)
   172b8:	10800c17 	ldw	r2,48(r2)
   172bc:	1000031e 	bne	r2,zero,172cc <alt_epcs_flash_get_info+0x4c>
  {
    ret_code = -EIO;
   172c0:	00bffec4 	movi	r2,-5
   172c4:	e0bffb15 	stw	r2,-20(fp)
   172c8:	00000b06 	br	172f8 <alt_epcs_flash_get_info+0x78>
  }
  else if (flash->number_of_regions > ALT_MAX_NUMBER_OF_FLASH_REGIONS)
   172cc:	e0bffc17 	ldw	r2,-16(fp)
   172d0:	10800c17 	ldw	r2,48(r2)
   172d4:	10800250 	cmplti	r2,r2,9
   172d8:	1000031e 	bne	r2,zero,172e8 <alt_epcs_flash_get_info+0x68>
  {
    ret_code = -ENOMEM;
   172dc:	00bffd04 	movi	r2,-12
   172e0:	e0bffb15 	stw	r2,-20(fp)
   172e4:	00000406 	br	172f8 <alt_epcs_flash_get_info+0x78>
  }
  else
  {
    *info = &flash->region_info[0];
   172e8:	e0bffc17 	ldw	r2,-16(fp)
   172ec:	10c00d04 	addi	r3,r2,52
   172f0:	e0bffe17 	ldw	r2,-8(fp)
   172f4:	10c00015 	stw	r3,0(r2)
  }

  return ret_code;
   172f8:	e0bffb17 	ldw	r2,-20(fp)
}
   172fc:	e037883a 	mov	sp,fp
   17300:	df000017 	ldw	fp,0(sp)
   17304:	dec00104 	addi	sp,sp,4
   17308:	f800283a 	ret

0001730c <alt_epcs_test_address>:


/* This might be a candidate for optimization.  Precompute the last-address? */
static ALT_INLINE int alt_epcs_test_address(alt_flash_dev* flash_info, int offset)
{
   1730c:	defff904 	addi	sp,sp,-28
   17310:	df000615 	stw	fp,24(sp)
   17314:	df000604 	addi	fp,sp,24
   17318:	e13ffe15 	stw	r4,-8(fp)
   1731c:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
   17320:	e03ffa15 	stw	zero,-24(fp)
  /* Error checking:
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
   17324:	e0bffe17 	ldw	r2,-8(fp)
   17328:	e0bffb15 	stw	r2,-20(fp)

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
   1732c:	e0bffb17 	ldw	r2,-20(fp)
   17330:	10800c17 	ldw	r2,48(r2)
   17334:	10bfffc4 	addi	r2,r2,-1
   17338:	e0bffc15 	stw	r2,-16(fp)
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
   1733c:	e0fffb17 	ldw	r3,-20(fp)
   17340:	e0bffc17 	ldw	r2,-16(fp)
   17344:	1004913a 	slli	r2,r2,4
   17348:	10800d04 	addi	r2,r2,52
   1734c:	1885883a 	add	r2,r3,r2
   17350:	10800017 	ldw	r2,0(r2)
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
    -1 +
   17354:	10ffffc4 	addi	r3,r2,-1
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;
   17358:	e13ffb17 	ldw	r4,-20(fp)
   1735c:	e0bffc17 	ldw	r2,-16(fp)
   17360:	1004913a 	slli	r2,r2,4
   17364:	10800e04 	addi	r2,r2,56
   17368:	2085883a 	add	r2,r4,r2
   1736c:	10800017 	ldw	r2,0(r2)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
   17370:	1885883a 	add	r2,r3,r2
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
   17374:	e0bffd15 	stw	r2,-12(fp)
    -1 +
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;

  if (offset > last_device_address)
   17378:	e0bfff17 	ldw	r2,-4(fp)
   1737c:	e0fffd17 	ldw	r3,-12(fp)
   17380:	1880022e 	bgeu	r3,r2,1738c <alt_epcs_test_address+0x80>
  {
    /* Someone tried to erase a block outside of this device's range. */
    ret_code = -EIO;
   17384:	00bffec4 	movi	r2,-5
   17388:	e0bffa15 	stw	r2,-24(fp)
  }
  return ret_code;
   1738c:	e0bffa17 	ldw	r2,-24(fp)
}
   17390:	e037883a 	mov	sp,fp
   17394:	df000017 	ldw	fp,0(sp)
   17398:	dec00104 	addi	sp,sp,4
   1739c:	f800283a 	ret

000173a0 <alt_epcs_flash_erase_block>:
 *
 * Erase the selected erase block ("sector erase", from the POV
 * of the EPCS data sheet).
 */
int alt_epcs_flash_erase_block(alt_flash_dev* flash_info, int block_offset)
{
   173a0:	defffa04 	addi	sp,sp,-24
   173a4:	dfc00515 	stw	ra,20(sp)
   173a8:	df000415 	stw	fp,16(sp)
   173ac:	df000404 	addi	fp,sp,16
   173b0:	e13ffe15 	stw	r4,-8(fp)
   173b4:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
   173b8:	e03ffc15 	stw	zero,-16(fp)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
   173bc:	e0bffe17 	ldw	r2,-8(fp)
   173c0:	e0bffd15 	stw	r2,-12(fp)

  ret_code = alt_epcs_test_address(flash_info, block_offset);
   173c4:	e13ffe17 	ldw	r4,-8(fp)
   173c8:	e17fff17 	ldw	r5,-4(fp)
   173cc:	001730c0 	call	1730c <alt_epcs_test_address>
   173d0:	e0bffc15 	stw	r2,-16(fp)

  if (ret_code >= 0)
   173d4:	e0bffc17 	ldw	r2,-16(fp)
   173d8:	10000816 	blt	r2,zero,173fc <alt_epcs_flash_erase_block+0x5c>
  {
    /* Send the Sector Erase command, whose 3 address bytes are anywhere
     * within the chosen sector.
     */
    epcs_sector_erase(f->register_base, block_offset, f->four_bytes_mode);
   173dc:	e0bffd17 	ldw	r2,-12(fp)
   173e0:	11002e17 	ldw	r4,184(r2)
   173e4:	e0ffff17 	ldw	r3,-4(fp)
   173e8:	e0bffd17 	ldw	r2,-12(fp)
   173ec:	10803217 	ldw	r2,200(r2)
   173f0:	180b883a 	mov	r5,r3
   173f4:	100d883a 	mov	r6,r2
   173f8:	00190140 	call	19014 <epcs_sector_erase>
  }
  return ret_code;
   173fc:	e0bffc17 	ldw	r2,-16(fp)
}
   17400:	e037883a 	mov	sp,fp
   17404:	dfc00117 	ldw	ra,4(sp)
   17408:	df000017 	ldw	fp,0(sp)
   1740c:	dec00204 	addi	sp,sp,8
   17410:	f800283a 	ret

00017414 <alt_epcs_flash_write_block>:
 * function type compatibility.
 */
int alt_epcs_flash_write_block(alt_flash_dev* flash_info, int block_offset,
                                      int data_offset, const void* data,
                                      int length)
{
   17414:	defff404 	addi	sp,sp,-48
   17418:	dfc00b15 	stw	ra,44(sp)
   1741c:	df000a15 	stw	fp,40(sp)
   17420:	df000a04 	addi	fp,sp,40
   17424:	e13ffc15 	stw	r4,-16(fp)
   17428:	e17ffd15 	stw	r5,-12(fp)
   1742c:	e1bffe15 	stw	r6,-8(fp)
   17430:	e1ffff15 	stw	r7,-4(fp)
  int ret_code;
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
   17434:	e0bffc17 	ldw	r2,-16(fp)
   17438:	e0bff815 	stw	r2,-32(fp)

  int buffer_offset = 0;
   1743c:	e03ff715 	stw	zero,-36(fp)
  int length_of_current_write;
  ret_code = alt_epcs_test_address(flash_info, data_offset);
   17440:	e13ffc17 	ldw	r4,-16(fp)
   17444:	e17ffe17 	ldw	r5,-8(fp)
   17448:	001730c0 	call	1730c <alt_epcs_test_address>
   1744c:	e0bff915 	stw	r2,-28(fp)

  if (ret_code >= 0)
   17450:	e0bff917 	ldw	r2,-28(fp)
   17454:	10002916 	blt	r2,zero,174fc <alt_epcs_flash_write_block+0xe8>
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
   17458:	00002606 	br	174f4 <alt_epcs_flash_write_block+0xe0>
    {
      int next_page_start = (data_offset + f->page_size) & ~(f->page_size - 1);
   1745c:	e0bff817 	ldw	r2,-32(fp)
   17460:	10c03117 	ldw	r3,196(r2)
   17464:	e0bffe17 	ldw	r2,-8(fp)
   17468:	1887883a 	add	r3,r3,r2
   1746c:	e0bff817 	ldw	r2,-32(fp)
   17470:	10803117 	ldw	r2,196(r2)
   17474:	0085c83a 	sub	r2,zero,r2
   17478:	1884703a 	and	r2,r3,r2
   1747c:	e0bffa15 	stw	r2,-24(fp)
      length_of_current_write = MIN(length, next_page_start - data_offset);
   17480:	e0fffa17 	ldw	r3,-24(fp)
   17484:	e0bffe17 	ldw	r2,-8(fp)
   17488:	1885c83a 	sub	r2,r3,r2
   1748c:	e0c00217 	ldw	r3,8(fp)
   17490:	1880010e 	bge	r3,r2,17498 <alt_epcs_flash_write_block+0x84>
   17494:	1805883a 	mov	r2,r3
   17498:	e0bffb15 	stw	r2,-20(fp)

      epcs_write_buffer(f->register_base, data_offset, &((const alt_u8*)data)[buffer_offset], length_of_current_write,
   1749c:	e0bff817 	ldw	r2,-32(fp)
   174a0:	11002e17 	ldw	r4,184(r2)
   174a4:	e0bff717 	ldw	r2,-36(fp)
   174a8:	e0ffff17 	ldw	r3,-4(fp)
   174ac:	1887883a 	add	r3,r3,r2
   174b0:	e0bff817 	ldw	r2,-32(fp)
   174b4:	10803217 	ldw	r2,200(r2)
   174b8:	d8800015 	stw	r2,0(sp)
   174bc:	e17ffe17 	ldw	r5,-8(fp)
   174c0:	180d883a 	mov	r6,r3
   174c4:	e1fffb17 	ldw	r7,-20(fp)
   174c8:	00192b80 	call	192b8 <epcs_write_buffer>
          f->four_bytes_mode);

      length -= length_of_current_write;
   174cc:	e0c00217 	ldw	r3,8(fp)
   174d0:	e0bffb17 	ldw	r2,-20(fp)
   174d4:	1885c83a 	sub	r2,r3,r2
   174d8:	e0800215 	stw	r2,8(fp)
      buffer_offset += length_of_current_write;
   174dc:	e0fff717 	ldw	r3,-36(fp)
   174e0:	e0bffb17 	ldw	r2,-20(fp)
   174e4:	1885883a 	add	r2,r3,r2
   174e8:	e0bff715 	stw	r2,-36(fp)
      data_offset = next_page_start;
   174ec:	e0bffa17 	ldw	r2,-24(fp)
   174f0:	e0bffe15 	stw	r2,-8(fp)
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
   174f4:	e0800217 	ldw	r2,8(fp)
   174f8:	103fd81e 	bne	r2,zero,1745c <alt_epcs_flash_write_block+0x48>
      length -= length_of_current_write;
      buffer_offset += length_of_current_write;
      data_offset = next_page_start;
    }
  }
  return ret_code;
   174fc:	e0bff917 	ldw	r2,-28(fp)
}
   17500:	e037883a 	mov	sp,fp
   17504:	dfc00117 	ldw	ra,4(sp)
   17508:	df000017 	ldw	fp,0(sp)
   1750c:	dec00204 	addi	sp,sp,8
   17510:	f800283a 	ret

00017514 <alt_epcs_flash_read>:
 *  to the beginning.  Reads that start beyond the end of the memory are
 *  flagged as errors with EIO (is there a better error code?).
 */
int alt_epcs_flash_read(alt_flash_dev* flash_info, int offset,
                        void* dest_addr, int length)
{
   17514:	defff704 	addi	sp,sp,-36
   17518:	dfc00815 	stw	ra,32(sp)
   1751c:	df000715 	stw	fp,28(sp)
   17520:	df000704 	addi	fp,sp,28
   17524:	e13ffc15 	stw	r4,-16(fp)
   17528:	e17ffd15 	stw	r5,-12(fp)
   1752c:	e1bffe15 	stw	r6,-8(fp)
   17530:	e1ffff15 	stw	r7,-4(fp)
  int ret_code = 0;
   17534:	e03ffa15 	stw	zero,-24(fp)

  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
   17538:	e0bffc17 	ldw	r2,-16(fp)
   1753c:	e0bffb15 	stw	r2,-20(fp)

  ret_code = alt_epcs_test_address(flash_info, offset);
   17540:	e13ffc17 	ldw	r4,-16(fp)
   17544:	e17ffd17 	ldw	r5,-12(fp)
   17548:	001730c0 	call	1730c <alt_epcs_test_address>
   1754c:	e0bffa15 	stw	r2,-24(fp)

  if (ret_code >= 0)
   17550:	e0bffa17 	ldw	r2,-24(fp)
   17554:	10000f16 	blt	r2,zero,17594 <alt_epcs_flash_read+0x80>
  {
    ret_code = epcs_read_buffer(f->register_base, offset, dest_addr, length,
   17558:	e0bffb17 	ldw	r2,-20(fp)
   1755c:	10c02e17 	ldw	r3,184(r2)
   17560:	e0bffb17 	ldw	r2,-20(fp)
   17564:	10803217 	ldw	r2,200(r2)
   17568:	d8800015 	stw	r2,0(sp)
   1756c:	1809883a 	mov	r4,r3
   17570:	e17ffd17 	ldw	r5,-12(fp)
   17574:	e1bffe17 	ldw	r6,-8(fp)
   17578:	e1ffff17 	ldw	r7,-4(fp)
   1757c:	001910c0 	call	1910c <epcs_read_buffer>
   17580:	e0bffa15 	stw	r2,-24(fp)
                                f->four_bytes_mode);

    /* epcs_read_buffer returns the number of buffers read, but
     * alt_epcs_flash_read returns 0 on success, <0 on failure.
     */
    if (ret_code == length)
   17584:	e0fffa17 	ldw	r3,-24(fp)
   17588:	e0bfff17 	ldw	r2,-4(fp)
   1758c:	1880011e 	bne	r3,r2,17594 <alt_epcs_flash_read+0x80>
    {
      ret_code = 0;
   17590:	e03ffa15 	stw	zero,-24(fp)
    }
  }
  return ret_code;
   17594:	e0bffa17 	ldw	r2,-24(fp)
}
   17598:	e037883a 	mov	sp,fp
   1759c:	dfc00117 	ldw	ra,4(sp)
   175a0:	df000017 	ldw	fp,0(sp)
   175a4:	dec00204 	addi	sp,sp,8
   175a8:	f800283a 	ret

000175ac <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   175ac:	defffa04 	addi	sp,sp,-24
   175b0:	dfc00515 	stw	ra,20(sp)
   175b4:	df000415 	stw	fp,16(sp)
   175b8:	df000404 	addi	fp,sp,16
   175bc:	e13ffd15 	stw	r4,-12(fp)
   175c0:	e17ffe15 	stw	r5,-8(fp)
   175c4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   175c8:	e0bffd17 	ldw	r2,-12(fp)
   175cc:	10800017 	ldw	r2,0(r2)
   175d0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   175d4:	e0bffc17 	ldw	r2,-16(fp)
   175d8:	10c00a04 	addi	r3,r2,40
   175dc:	e0bffd17 	ldw	r2,-12(fp)
   175e0:	10800217 	ldw	r2,8(r2)
   175e4:	1809883a 	mov	r4,r3
   175e8:	e17ffe17 	ldw	r5,-8(fp)
   175ec:	e1bfff17 	ldw	r6,-4(fp)
   175f0:	100f883a 	mov	r7,r2
   175f4:	0017d640 	call	17d64 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   175f8:	e037883a 	mov	sp,fp
   175fc:	dfc00117 	ldw	ra,4(sp)
   17600:	df000017 	ldw	fp,0(sp)
   17604:	dec00204 	addi	sp,sp,8
   17608:	f800283a 	ret

0001760c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   1760c:	defffa04 	addi	sp,sp,-24
   17610:	dfc00515 	stw	ra,20(sp)
   17614:	df000415 	stw	fp,16(sp)
   17618:	df000404 	addi	fp,sp,16
   1761c:	e13ffd15 	stw	r4,-12(fp)
   17620:	e17ffe15 	stw	r5,-8(fp)
   17624:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   17628:	e0bffd17 	ldw	r2,-12(fp)
   1762c:	10800017 	ldw	r2,0(r2)
   17630:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   17634:	e0bffc17 	ldw	r2,-16(fp)
   17638:	10c00a04 	addi	r3,r2,40
   1763c:	e0bffd17 	ldw	r2,-12(fp)
   17640:	10800217 	ldw	r2,8(r2)
   17644:	1809883a 	mov	r4,r3
   17648:	e17ffe17 	ldw	r5,-8(fp)
   1764c:	e1bfff17 	ldw	r6,-4(fp)
   17650:	100f883a 	mov	r7,r2
   17654:	00180180 	call	18018 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   17658:	e037883a 	mov	sp,fp
   1765c:	dfc00117 	ldw	ra,4(sp)
   17660:	df000017 	ldw	fp,0(sp)
   17664:	dec00204 	addi	sp,sp,8
   17668:	f800283a 	ret

0001766c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   1766c:	defffc04 	addi	sp,sp,-16
   17670:	dfc00315 	stw	ra,12(sp)
   17674:	df000215 	stw	fp,8(sp)
   17678:	df000204 	addi	fp,sp,8
   1767c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   17680:	e0bfff17 	ldw	r2,-4(fp)
   17684:	10800017 	ldw	r2,0(r2)
   17688:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   1768c:	e0bffe17 	ldw	r2,-8(fp)
   17690:	10c00a04 	addi	r3,r2,40
   17694:	e0bfff17 	ldw	r2,-4(fp)
   17698:	10800217 	ldw	r2,8(r2)
   1769c:	1809883a 	mov	r4,r3
   176a0:	100b883a 	mov	r5,r2
   176a4:	0017c100 	call	17c10 <altera_avalon_jtag_uart_close>
}
   176a8:	e037883a 	mov	sp,fp
   176ac:	dfc00117 	ldw	ra,4(sp)
   176b0:	df000017 	ldw	fp,0(sp)
   176b4:	dec00204 	addi	sp,sp,8
   176b8:	f800283a 	ret

000176bc <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   176bc:	defffa04 	addi	sp,sp,-24
   176c0:	dfc00515 	stw	ra,20(sp)
   176c4:	df000415 	stw	fp,16(sp)
   176c8:	df000404 	addi	fp,sp,16
   176cc:	e13ffd15 	stw	r4,-12(fp)
   176d0:	e17ffe15 	stw	r5,-8(fp)
   176d4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   176d8:	e0bffd17 	ldw	r2,-12(fp)
   176dc:	10800017 	ldw	r2,0(r2)
   176e0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   176e4:	e0bffc17 	ldw	r2,-16(fp)
   176e8:	10800a04 	addi	r2,r2,40
   176ec:	1009883a 	mov	r4,r2
   176f0:	e17ffe17 	ldw	r5,-8(fp)
   176f4:	e1bfff17 	ldw	r6,-4(fp)
   176f8:	0017c780 	call	17c78 <altera_avalon_jtag_uart_ioctl>
}
   176fc:	e037883a 	mov	sp,fp
   17700:	dfc00117 	ldw	ra,4(sp)
   17704:	df000017 	ldw	fp,0(sp)
   17708:	dec00204 	addi	sp,sp,8
   1770c:	f800283a 	ret

00017710 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   17710:	defff004 	addi	sp,sp,-64
   17714:	dfc00f15 	stw	ra,60(sp)
   17718:	df000e15 	stw	fp,56(sp)
   1771c:	df000e04 	addi	fp,sp,56
   17720:	e13ff915 	stw	r4,-28(fp)
   17724:	e17ffa15 	stw	r5,-24(fp)
   17728:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
   1772c:	e0bff917 	ldw	r2,-28(fp)
   17730:	10800c04 	addi	r2,r2,48
   17734:	e0bff315 	stw	r2,-52(fp)
   17738:	e03ff40d 	sth	zero,-48(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
   1773c:	e0fff40b 	ldhu	r3,-48(fp)
   17740:	e0bff884 	addi	r2,fp,-30
   17744:	1809883a 	mov	r4,r3
   17748:	100b883a 	mov	r5,r2
   1774c:	00110340 	call	11034 <OSFlagCreate>
   17750:	1007883a 	mov	r3,r2
   17754:	e0bff317 	ldw	r2,-52(fp)
   17758:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
   1775c:	e0bff917 	ldw	r2,-28(fp)
   17760:	10800a04 	addi	r2,r2,40
   17764:	e0bff515 	stw	r2,-44(fp)
   17768:	00800044 	movi	r2,1
   1776c:	e0bff60d 	sth	r2,-40(fp)
   17770:	e0bff60b 	ldhu	r2,-40(fp)
   17774:	1009883a 	mov	r4,r2
   17778:	0013f980 	call	13f98 <OSSemCreate>
   1777c:	1007883a 	mov	r3,r2
   17780:	e0bff517 	ldw	r2,-44(fp)
   17784:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
   17788:	e0bff917 	ldw	r2,-28(fp)
   1778c:	10800b04 	addi	r2,r2,44
   17790:	e0bff715 	stw	r2,-36(fp)
   17794:	00800044 	movi	r2,1
   17798:	e0bff80d 	sth	r2,-32(fp)
   1779c:	e0bff80b 	ldhu	r2,-32(fp)
   177a0:	1009883a 	mov	r4,r2
   177a4:	0013f980 	call	13f98 <OSSemCreate>
   177a8:	1007883a 	mov	r3,r2
   177ac:	e0bff717 	ldw	r2,-36(fp)
   177b0:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   177b4:	e0bff917 	ldw	r2,-28(fp)
   177b8:	00c00044 	movi	r3,1
   177bc:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   177c0:	e0bff917 	ldw	r2,-28(fp)
   177c4:	10800017 	ldw	r2,0(r2)
   177c8:	10800104 	addi	r2,r2,4
   177cc:	1007883a 	mov	r3,r2
   177d0:	e0bff917 	ldw	r2,-28(fp)
   177d4:	10800817 	ldw	r2,32(r2)
   177d8:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   177dc:	e0fffa17 	ldw	r3,-24(fp)
   177e0:	e0bffb17 	ldw	r2,-20(fp)
   177e4:	d8000015 	stw	zero,0(sp)
   177e8:	1809883a 	mov	r4,r3
   177ec:	100b883a 	mov	r5,r2
   177f0:	01800074 	movhi	r6,1
   177f4:	319e1704 	addi	r6,r6,30812
   177f8:	e1fff917 	ldw	r7,-28(fp)
   177fc:	000df140 	call	df14 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   17800:	e0bff917 	ldw	r2,-28(fp)
   17804:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   17808:	e0bff917 	ldw	r2,-28(fp)
   1780c:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   17810:	008000b4 	movhi	r2,2
   17814:	10b41804 	addi	r2,r2,-12192
   17818:	10800017 	ldw	r2,0(r2)
   1781c:	1809883a 	mov	r4,r3
   17820:	100b883a 	mov	r5,r2
   17824:	01800074 	movhi	r6,1
   17828:	319ec004 	addi	r6,r6,31488
   1782c:	e1fff917 	ldw	r7,-28(fp)
   17830:	00195740 	call	19574 <alt_alarm_start>
   17834:	1000040e 	bge	r2,zero,17848 <altera_avalon_jtag_uart_init+0x138>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   17838:	e0fff917 	ldw	r3,-28(fp)
   1783c:	00a00034 	movhi	r2,32768
   17840:	10bfffc4 	addi	r2,r2,-1
   17844:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   17848:	e037883a 	mov	sp,fp
   1784c:	dfc00117 	ldw	ra,4(sp)
   17850:	df000017 	ldw	fp,0(sp)
   17854:	dec00204 	addi	sp,sp,8
   17858:	f800283a 	ret

0001785c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   1785c:	defff204 	addi	sp,sp,-56
   17860:	dfc00d15 	stw	ra,52(sp)
   17864:	df000c15 	stw	fp,48(sp)
   17868:	df000c04 	addi	fp,sp,48
   1786c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   17870:	e0bfff17 	ldw	r2,-4(fp)
   17874:	e0bff615 	stw	r2,-40(fp)
  unsigned int base = sp->base;
   17878:	e0bff617 	ldw	r2,-40(fp)
   1787c:	10800017 	ldw	r2,0(r2)
   17880:	e0bff715 	stw	r2,-36(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   17884:	e0bff717 	ldw	r2,-36(fp)
   17888:	10800104 	addi	r2,r2,4
   1788c:	10800037 	ldwio	r2,0(r2)
   17890:	e0bff815 	stw	r2,-32(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   17894:	e0bff817 	ldw	r2,-32(fp)
   17898:	1080c00c 	andi	r2,r2,768
   1789c:	1000011e 	bne	r2,zero,178a4 <altera_avalon_jtag_uart_irq+0x48>
      break;
   178a0:	00009206 	br	17aec <altera_avalon_jtag_uart_irq+0x290>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   178a4:	e0bff817 	ldw	r2,-32(fp)
   178a8:	1080400c 	andi	r2,r2,256
   178ac:	10004726 	beq	r2,zero,179cc <altera_avalon_jtag_uart_irq+0x170>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   178b0:	00800074 	movhi	r2,1
   178b4:	e0bff415 	stw	r2,-48(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   178b8:	e0bff617 	ldw	r2,-40(fp)
   178bc:	10800d17 	ldw	r2,52(r2)
   178c0:	10800044 	addi	r2,r2,1
   178c4:	1081ffcc 	andi	r2,r2,2047
   178c8:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
   178cc:	e0bff617 	ldw	r2,-40(fp)
   178d0:	10c00e17 	ldw	r3,56(r2)
   178d4:	e0bff917 	ldw	r2,-28(fp)
   178d8:	1880011e 	bne	r3,r2,178e0 <altera_avalon_jtag_uart_irq+0x84>
          break;
   178dc:	00002906 	br	17984 <altera_avalon_jtag_uart_irq+0x128>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   178e0:	e0bff717 	ldw	r2,-36(fp)
   178e4:	10800037 	ldwio	r2,0(r2)
   178e8:	e0bff415 	stw	r2,-48(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   178ec:	e0bff417 	ldw	r2,-48(fp)
   178f0:	10a0000c 	andi	r2,r2,32768
   178f4:	1000011e 	bne	r2,zero,178fc <altera_avalon_jtag_uart_irq+0xa0>
          break;
   178f8:	00002206 	br	17984 <altera_avalon_jtag_uart_irq+0x128>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   178fc:	e0bff617 	ldw	r2,-40(fp)
   17900:	10800d17 	ldw	r2,52(r2)
   17904:	e0fff417 	ldw	r3,-48(fp)
   17908:	1809883a 	mov	r4,r3
   1790c:	e0fff617 	ldw	r3,-40(fp)
   17910:	1885883a 	add	r2,r3,r2
   17914:	10801104 	addi	r2,r2,68
   17918:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1791c:	e0bff617 	ldw	r2,-40(fp)
   17920:	10800d17 	ldw	r2,52(r2)
   17924:	10800044 	addi	r2,r2,1
   17928:	10c1ffcc 	andi	r3,r2,2047
   1792c:	e0bff617 	ldw	r2,-40(fp)
   17930:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
   17934:	e0bff617 	ldw	r2,-40(fp)
   17938:	10800c17 	ldw	r2,48(r2)
   1793c:	e0bffa15 	stw	r2,-24(fp)
   17940:	00800044 	movi	r2,1
   17944:	e0bffb0d 	sth	r2,-20(fp)
   17948:	00800044 	movi	r2,1
   1794c:	e0bffb85 	stb	r2,-18(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   17950:	008000b4 	movhi	r2,2
   17954:	10b40444 	addi	r2,r2,-12271
   17958:	10800003 	ldbu	r2,0(r2)
   1795c:	10803fcc 	andi	r2,r2,255
   17960:	103fd526 	beq	r2,zero,178b8 <altera_avalon_jtag_uart_irq+0x5c>
  {
    OSFlagPost (group, flags, opt, &err);
   17964:	e17ffb0b 	ldhu	r5,-20(fp)
   17968:	e0fffb83 	ldbu	r3,-18(fp)
   1796c:	e0bffdc4 	addi	r2,fp,-9
   17970:	e13ffa17 	ldw	r4,-24(fp)
   17974:	180d883a 	mov	r6,r3
   17978:	100f883a 	mov	r7,r2
   1797c:	0011ca40 	call	11ca4 <OSFlagPost>
      }
   17980:	003fcd06 	br	178b8 <altera_avalon_jtag_uart_irq+0x5c>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   17984:	e0bff417 	ldw	r2,-48(fp)
   17988:	10bfffec 	andhi	r2,r2,65535
   1798c:	10000f26 	beq	r2,zero,179cc <altera_avalon_jtag_uart_irq+0x170>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   17990:	e0bff617 	ldw	r2,-40(fp)
   17994:	10c00817 	ldw	r3,32(r2)
   17998:	00bfff84 	movi	r2,-2
   1799c:	1886703a 	and	r3,r3,r2
   179a0:	e0bff617 	ldw	r2,-40(fp)
   179a4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   179a8:	e0bff717 	ldw	r2,-36(fp)
   179ac:	10800104 	addi	r2,r2,4
   179b0:	1007883a 	mov	r3,r2
   179b4:	e0bff617 	ldw	r2,-40(fp)
   179b8:	10800817 	ldw	r2,32(r2)
   179bc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   179c0:	e0bff717 	ldw	r2,-36(fp)
   179c4:	10800104 	addi	r2,r2,4
   179c8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   179cc:	e0bff817 	ldw	r2,-32(fp)
   179d0:	1080800c 	andi	r2,r2,512
   179d4:	10004426 	beq	r2,zero,17ae8 <altera_avalon_jtag_uart_irq+0x28c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   179d8:	e0bff817 	ldw	r2,-32(fp)
   179dc:	1004d43a 	srli	r2,r2,16
   179e0:	e0bff515 	stw	r2,-44(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   179e4:	00002706 	br	17a84 <altera_avalon_jtag_uart_irq+0x228>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   179e8:	e0bff717 	ldw	r2,-36(fp)
   179ec:	e0fff617 	ldw	r3,-40(fp)
   179f0:	18c01017 	ldw	r3,64(r3)
   179f4:	e13ff617 	ldw	r4,-40(fp)
   179f8:	20c7883a 	add	r3,r4,r3
   179fc:	18c21104 	addi	r3,r3,2116
   17a00:	18c00003 	ldbu	r3,0(r3)
   17a04:	18c03fcc 	andi	r3,r3,255
   17a08:	18c0201c 	xori	r3,r3,128
   17a0c:	18ffe004 	addi	r3,r3,-128
   17a10:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   17a14:	e0bff617 	ldw	r2,-40(fp)
   17a18:	10801017 	ldw	r2,64(r2)
   17a1c:	10800044 	addi	r2,r2,1
   17a20:	10c1ffcc 	andi	r3,r2,2047
   17a24:	e0bff617 	ldw	r2,-40(fp)
   17a28:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
   17a2c:	e0bff617 	ldw	r2,-40(fp)
   17a30:	10800c17 	ldw	r2,48(r2)
   17a34:	e0bffc15 	stw	r2,-16(fp)
   17a38:	00800084 	movi	r2,2
   17a3c:	e0bffd0d 	sth	r2,-12(fp)
   17a40:	00800044 	movi	r2,1
   17a44:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   17a48:	008000b4 	movhi	r2,2
   17a4c:	10b40444 	addi	r2,r2,-12271
   17a50:	10800003 	ldbu	r2,0(r2)
   17a54:	10803fcc 	andi	r2,r2,255
   17a58:	10000726 	beq	r2,zero,17a78 <altera_avalon_jtag_uart_irq+0x21c>
  {
    OSFlagPost (group, flags, opt, &err);
   17a5c:	e17ffd0b 	ldhu	r5,-12(fp)
   17a60:	e0fffd83 	ldbu	r3,-10(fp)
   17a64:	e0bffe04 	addi	r2,fp,-8
   17a68:	e13ffc17 	ldw	r4,-16(fp)
   17a6c:	180d883a 	mov	r6,r3
   17a70:	100f883a 	mov	r7,r2
   17a74:	0011ca40 	call	11ca4 <OSFlagPost>

        space--;
   17a78:	e0bff517 	ldw	r2,-44(fp)
   17a7c:	10bfffc4 	addi	r2,r2,-1
   17a80:	e0bff515 	stw	r2,-44(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   17a84:	e0bff517 	ldw	r2,-44(fp)
   17a88:	10000526 	beq	r2,zero,17aa0 <altera_avalon_jtag_uart_irq+0x244>
   17a8c:	e0bff617 	ldw	r2,-40(fp)
   17a90:	10c01017 	ldw	r3,64(r2)
   17a94:	e0bff617 	ldw	r2,-40(fp)
   17a98:	10800f17 	ldw	r2,60(r2)
   17a9c:	18bfd21e 	bne	r3,r2,179e8 <altera_avalon_jtag_uart_irq+0x18c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   17aa0:	e0bff517 	ldw	r2,-44(fp)
   17aa4:	10001026 	beq	r2,zero,17ae8 <altera_avalon_jtag_uart_irq+0x28c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   17aa8:	e0bff617 	ldw	r2,-40(fp)
   17aac:	10c00817 	ldw	r3,32(r2)
   17ab0:	00bfff44 	movi	r2,-3
   17ab4:	1886703a 	and	r3,r3,r2
   17ab8:	e0bff617 	ldw	r2,-40(fp)
   17abc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   17ac0:	e0bff617 	ldw	r2,-40(fp)
   17ac4:	10800017 	ldw	r2,0(r2)
   17ac8:	10800104 	addi	r2,r2,4
   17acc:	1007883a 	mov	r3,r2
   17ad0:	e0bff617 	ldw	r2,-40(fp)
   17ad4:	10800817 	ldw	r2,32(r2)
   17ad8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   17adc:	e0bff717 	ldw	r2,-36(fp)
   17ae0:	10800104 	addi	r2,r2,4
   17ae4:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   17ae8:	003f6606 	br	17884 <altera_avalon_jtag_uart_irq+0x28>
}
   17aec:	e037883a 	mov	sp,fp
   17af0:	dfc00117 	ldw	ra,4(sp)
   17af4:	df000017 	ldw	fp,0(sp)
   17af8:	dec00204 	addi	sp,sp,8
   17afc:	f800283a 	ret

00017b00 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   17b00:	defff904 	addi	sp,sp,-28
   17b04:	dfc00615 	stw	ra,24(sp)
   17b08:	df000515 	stw	fp,20(sp)
   17b0c:	df000504 	addi	fp,sp,20
   17b10:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   17b14:	e0bfff17 	ldw	r2,-4(fp)
   17b18:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   17b1c:	e0bffb17 	ldw	r2,-20(fp)
   17b20:	10800017 	ldw	r2,0(r2)
   17b24:	10800104 	addi	r2,r2,4
   17b28:	10800037 	ldwio	r2,0(r2)
   17b2c:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   17b30:	e0bffc17 	ldw	r2,-16(fp)
   17b34:	1081000c 	andi	r2,r2,1024
   17b38:	10000b26 	beq	r2,zero,17b68 <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   17b3c:	e0bffb17 	ldw	r2,-20(fp)
   17b40:	10800017 	ldw	r2,0(r2)
   17b44:	10800104 	addi	r2,r2,4
   17b48:	1007883a 	mov	r3,r2
   17b4c:	e0bffb17 	ldw	r2,-20(fp)
   17b50:	10800817 	ldw	r2,32(r2)
   17b54:	10810014 	ori	r2,r2,1024
   17b58:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   17b5c:	e0bffb17 	ldw	r2,-20(fp)
   17b60:	10000915 	stw	zero,36(r2)
   17b64:	00002206 	br	17bf0 <altera_avalon_jtag_uart_timeout+0xf0>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   17b68:	e0bffb17 	ldw	r2,-20(fp)
   17b6c:	10c00917 	ldw	r3,36(r2)
   17b70:	00a00034 	movhi	r2,32768
   17b74:	10bfff04 	addi	r2,r2,-4
   17b78:	10c01d36 	bltu	r2,r3,17bf0 <altera_avalon_jtag_uart_timeout+0xf0>
    sp->host_inactive++;
   17b7c:	e0bffb17 	ldw	r2,-20(fp)
   17b80:	10800917 	ldw	r2,36(r2)
   17b84:	10c00044 	addi	r3,r2,1
   17b88:	e0bffb17 	ldw	r2,-20(fp)
   17b8c:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
   17b90:	e0bffb17 	ldw	r2,-20(fp)
   17b94:	10c00917 	ldw	r3,36(r2)
   17b98:	e0bffb17 	ldw	r2,-20(fp)
   17b9c:	10800117 	ldw	r2,4(r2)
   17ba0:	18801336 	bltu	r3,r2,17bf0 <altera_avalon_jtag_uart_timeout+0xf0>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
   17ba4:	e0bffb17 	ldw	r2,-20(fp)
   17ba8:	10800c17 	ldw	r2,48(r2)
   17bac:	e0bffd15 	stw	r2,-12(fp)
   17bb0:	00800104 	movi	r2,4
   17bb4:	e0bffe0d 	sth	r2,-8(fp)
   17bb8:	00800044 	movi	r2,1
   17bbc:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   17bc0:	008000b4 	movhi	r2,2
   17bc4:	10b40444 	addi	r2,r2,-12271
   17bc8:	10800003 	ldbu	r2,0(r2)
   17bcc:	10803fcc 	andi	r2,r2,255
   17bd0:	10000726 	beq	r2,zero,17bf0 <altera_avalon_jtag_uart_timeout+0xf0>
  {
    OSFlagPost (group, flags, opt, &err);
   17bd4:	e17ffe0b 	ldhu	r5,-8(fp)
   17bd8:	e0fffe83 	ldbu	r3,-6(fp)
   17bdc:	e0bffec4 	addi	r2,fp,-5
   17be0:	e13ffd17 	ldw	r4,-12(fp)
   17be4:	180d883a 	mov	r6,r3
   17be8:	100f883a 	mov	r7,r2
   17bec:	0011ca40 	call	11ca4 <OSFlagPost>
   17bf0:	008000b4 	movhi	r2,2
   17bf4:	10b41804 	addi	r2,r2,-12192
   17bf8:	10800017 	ldw	r2,0(r2)
    }
  }

  return alt_ticks_per_second();
}
   17bfc:	e037883a 	mov	sp,fp
   17c00:	dfc00117 	ldw	ra,4(sp)
   17c04:	df000017 	ldw	fp,0(sp)
   17c08:	dec00204 	addi	sp,sp,8
   17c0c:	f800283a 	ret

00017c10 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   17c10:	defffd04 	addi	sp,sp,-12
   17c14:	df000215 	stw	fp,8(sp)
   17c18:	df000204 	addi	fp,sp,8
   17c1c:	e13ffe15 	stw	r4,-8(fp)
   17c20:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   17c24:	00000506 	br	17c3c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   17c28:	e0bfff17 	ldw	r2,-4(fp)
   17c2c:	1090000c 	andi	r2,r2,16384
   17c30:	10000226 	beq	r2,zero,17c3c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   17c34:	00bffd44 	movi	r2,-11
   17c38:	00000b06 	br	17c68 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   17c3c:	e0bffe17 	ldw	r2,-8(fp)
   17c40:	10c01017 	ldw	r3,64(r2)
   17c44:	e0bffe17 	ldw	r2,-8(fp)
   17c48:	10800f17 	ldw	r2,60(r2)
   17c4c:	18800526 	beq	r3,r2,17c64 <altera_avalon_jtag_uart_close+0x54>
   17c50:	e0bffe17 	ldw	r2,-8(fp)
   17c54:	10c00917 	ldw	r3,36(r2)
   17c58:	e0bffe17 	ldw	r2,-8(fp)
   17c5c:	10800117 	ldw	r2,4(r2)
   17c60:	18bff136 	bltu	r3,r2,17c28 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   17c64:	0005883a 	mov	r2,zero
}
   17c68:	e037883a 	mov	sp,fp
   17c6c:	df000017 	ldw	fp,0(sp)
   17c70:	dec00104 	addi	sp,sp,4
   17c74:	f800283a 	ret

00017c78 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   17c78:	defffa04 	addi	sp,sp,-24
   17c7c:	df000515 	stw	fp,20(sp)
   17c80:	df000504 	addi	fp,sp,20
   17c84:	e13ffd15 	stw	r4,-12(fp)
   17c88:	e17ffe15 	stw	r5,-8(fp)
   17c8c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   17c90:	00bff9c4 	movi	r2,-25
   17c94:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   17c98:	e0bffe17 	ldw	r2,-8(fp)
   17c9c:	10da8060 	cmpeqi	r3,r2,27137
   17ca0:	1800031e 	bne	r3,zero,17cb0 <altera_avalon_jtag_uart_ioctl+0x38>
   17ca4:	109a80a0 	cmpeqi	r2,r2,27138
   17ca8:	1000191e 	bne	r2,zero,17d10 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
   17cac:	00002806 	br	17d50 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   17cb0:	e0bffd17 	ldw	r2,-12(fp)
   17cb4:	10c00117 	ldw	r3,4(r2)
   17cb8:	00a00034 	movhi	r2,32768
   17cbc:	10bfffc4 	addi	r2,r2,-1
   17cc0:	18801226 	beq	r3,r2,17d0c <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
   17cc4:	e0bfff17 	ldw	r2,-4(fp)
   17cc8:	10800017 	ldw	r2,0(r2)
   17ccc:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   17cd0:	e0bffc17 	ldw	r2,-16(fp)
   17cd4:	10800090 	cmplti	r2,r2,2
   17cd8:	1000061e 	bne	r2,zero,17cf4 <altera_avalon_jtag_uart_ioctl+0x7c>
   17cdc:	e0fffc17 	ldw	r3,-16(fp)
   17ce0:	00a00034 	movhi	r2,32768
   17ce4:	10bfffc4 	addi	r2,r2,-1
   17ce8:	18800226 	beq	r3,r2,17cf4 <altera_avalon_jtag_uart_ioctl+0x7c>
   17cec:	e0bffc17 	ldw	r2,-16(fp)
   17cf0:	00000206 	br	17cfc <altera_avalon_jtag_uart_ioctl+0x84>
   17cf4:	00a00034 	movhi	r2,32768
   17cf8:	10bfff84 	addi	r2,r2,-2
   17cfc:	e0fffd17 	ldw	r3,-12(fp)
   17d00:	18800115 	stw	r2,4(r3)
      rc = 0;
   17d04:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   17d08:	00001106 	br	17d50 <altera_avalon_jtag_uart_ioctl+0xd8>
   17d0c:	00001006 	br	17d50 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   17d10:	e0bffd17 	ldw	r2,-12(fp)
   17d14:	10c00117 	ldw	r3,4(r2)
   17d18:	00a00034 	movhi	r2,32768
   17d1c:	10bfffc4 	addi	r2,r2,-1
   17d20:	18800a26 	beq	r3,r2,17d4c <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   17d24:	e0bffd17 	ldw	r2,-12(fp)
   17d28:	10c00917 	ldw	r3,36(r2)
   17d2c:	e0bffd17 	ldw	r2,-12(fp)
   17d30:	10800117 	ldw	r2,4(r2)
   17d34:	1885803a 	cmpltu	r2,r3,r2
   17d38:	10c03fcc 	andi	r3,r2,255
   17d3c:	e0bfff17 	ldw	r2,-4(fp)
   17d40:	10c00015 	stw	r3,0(r2)
      rc = 0;
   17d44:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   17d48:	00000006 	br	17d4c <altera_avalon_jtag_uart_ioctl+0xd4>
   17d4c:	0001883a 	nop

  default:
    break;
  }

  return rc;
   17d50:	e0bffb17 	ldw	r2,-20(fp)
}
   17d54:	e037883a 	mov	sp,fp
   17d58:	df000017 	ldw	fp,0(sp)
   17d5c:	dec00104 	addi	sp,sp,4
   17d60:	f800283a 	ret

00017d64 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   17d64:	deffec04 	addi	sp,sp,-80
   17d68:	dfc01315 	stw	ra,76(sp)
   17d6c:	df001215 	stw	fp,72(sp)
   17d70:	df001204 	addi	fp,sp,72
   17d74:	e13ffc15 	stw	r4,-16(fp)
   17d78:	e17ffd15 	stw	r5,-12(fp)
   17d7c:	e1bffe15 	stw	r6,-8(fp)
   17d80:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   17d84:	e0bffd17 	ldw	r2,-12(fp)
   17d88:	e0bfef15 	stw	r2,-68(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
   17d8c:	e0bffc17 	ldw	r2,-16(fp)
   17d90:	10800a17 	ldw	r2,40(r2)
   17d94:	e0bff415 	stw	r2,-48(fp)
   17d98:	e03ff50d 	sth	zero,-44(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
   17d9c:	e0fff50b 	ldhu	r3,-44(fp)
   17da0:	e0bffb04 	addi	r2,fp,-20
   17da4:	e13ff417 	ldw	r4,-48(fp)
   17da8:	180b883a 	mov	r5,r3
   17dac:	100d883a 	mov	r6,r2
   17db0:	00143000 	call	14300 <OSSemPend>

  while (space > 0)
   17db4:	00006506 	br	17f4c <altera_avalon_jtag_uart_read+0x1e8>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   17db8:	e0bffc17 	ldw	r2,-16(fp)
   17dbc:	10800d17 	ldw	r2,52(r2)
   17dc0:	e0bff115 	stw	r2,-60(fp)
      out = sp->rx_out;
   17dc4:	e0bffc17 	ldw	r2,-16(fp)
   17dc8:	10800e17 	ldw	r2,56(r2)
   17dcc:	e0bff215 	stw	r2,-56(fp)

      if (in >= out)
   17dd0:	e0fff117 	ldw	r3,-60(fp)
   17dd4:	e0bff217 	ldw	r2,-56(fp)
   17dd8:	18800536 	bltu	r3,r2,17df0 <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
   17ddc:	e0fff117 	ldw	r3,-60(fp)
   17de0:	e0bff217 	ldw	r2,-56(fp)
   17de4:	1885c83a 	sub	r2,r3,r2
   17de8:	e0bff015 	stw	r2,-64(fp)
   17dec:	00000406 	br	17e00 <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   17df0:	00c20004 	movi	r3,2048
   17df4:	e0bff217 	ldw	r2,-56(fp)
   17df8:	1885c83a 	sub	r2,r3,r2
   17dfc:	e0bff015 	stw	r2,-64(fp)

      if (n == 0)
   17e00:	e0bff017 	ldw	r2,-64(fp)
   17e04:	1000011e 	bne	r2,zero,17e0c <altera_avalon_jtag_uart_read+0xa8>
        break; /* No more data available */
   17e08:	00001d06 	br	17e80 <altera_avalon_jtag_uart_read+0x11c>

      if (n > space)
   17e0c:	e0fffe17 	ldw	r3,-8(fp)
   17e10:	e0bff017 	ldw	r2,-64(fp)
   17e14:	1880022e 	bgeu	r3,r2,17e20 <altera_avalon_jtag_uart_read+0xbc>
        n = space;
   17e18:	e0bffe17 	ldw	r2,-8(fp)
   17e1c:	e0bff015 	stw	r2,-64(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   17e20:	e0bff217 	ldw	r2,-56(fp)
   17e24:	10801104 	addi	r2,r2,68
   17e28:	e0fffc17 	ldw	r3,-16(fp)
   17e2c:	1885883a 	add	r2,r3,r2
   17e30:	e13fef17 	ldw	r4,-68(fp)
   17e34:	100b883a 	mov	r5,r2
   17e38:	e1bff017 	ldw	r6,-64(fp)
   17e3c:	00087200 	call	8720 <memcpy>
      ptr   += n;
   17e40:	e0ffef17 	ldw	r3,-68(fp)
   17e44:	e0bff017 	ldw	r2,-64(fp)
   17e48:	1885883a 	add	r2,r3,r2
   17e4c:	e0bfef15 	stw	r2,-68(fp)
      space -= n;
   17e50:	e0fffe17 	ldw	r3,-8(fp)
   17e54:	e0bff017 	ldw	r2,-64(fp)
   17e58:	1885c83a 	sub	r2,r3,r2
   17e5c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   17e60:	e0fff217 	ldw	r3,-56(fp)
   17e64:	e0bff017 	ldw	r2,-64(fp)
   17e68:	1885883a 	add	r2,r3,r2
   17e6c:	10c1ffcc 	andi	r3,r2,2047
   17e70:	e0bffc17 	ldw	r2,-16(fp)
   17e74:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
   17e78:	e0bffe17 	ldw	r2,-8(fp)
   17e7c:	00bfce16 	blt	zero,r2,17db8 <altera_avalon_jtag_uart_read+0x54>

    /* If we read any data then return it */
    if (ptr != buffer)
   17e80:	e0ffef17 	ldw	r3,-68(fp)
   17e84:	e0bffd17 	ldw	r2,-12(fp)
   17e88:	18800126 	beq	r3,r2,17e90 <altera_avalon_jtag_uart_read+0x12c>
      break;
   17e8c:	00003106 	br	17f54 <altera_avalon_jtag_uart_read+0x1f0>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   17e90:	e0bfff17 	ldw	r2,-4(fp)
   17e94:	1090000c 	andi	r2,r2,16384
   17e98:	10000126 	beq	r2,zero,17ea0 <altera_avalon_jtag_uart_read+0x13c>
      break;
   17e9c:	00002d06 	br	17f54 <altera_avalon_jtag_uart_read+0x1f0>

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
   17ea0:	008000b4 	movhi	r2,2
   17ea4:	10b40444 	addi	r2,r2,-12271
   17ea8:	10800003 	ldbu	r2,0(r2)
   17eac:	10803fcc 	andi	r2,r2,255
   17eb0:	10800058 	cmpnei	r2,r2,1
   17eb4:	1000161e 	bne	r2,zero,17f10 <altera_avalon_jtag_uart_read+0x1ac>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
   17eb8:	e0bffc17 	ldw	r2,-16(fp)
   17ebc:	10800c17 	ldw	r2,48(r2)
   17ec0:	e0bff615 	stw	r2,-40(fp)
   17ec4:	00800144 	movi	r2,5
   17ec8:	e0bff70d 	sth	r2,-36(fp)
   17ecc:	00bfe0c4 	movi	r2,-125
   17ed0:	e0bff785 	stb	r2,-34(fp)
   17ed4:	e03ff80d 	sth	zero,-32(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   17ed8:	008000b4 	movhi	r2,2
   17edc:	10b40444 	addi	r2,r2,-12271
   17ee0:	10800003 	ldbu	r2,0(r2)
   17ee4:	10803fcc 	andi	r2,r2,255
   17ee8:	10001326 	beq	r2,zero,17f38 <altera_avalon_jtag_uart_read+0x1d4>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   17eec:	e17ff70b 	ldhu	r5,-36(fp)
   17ef0:	e1bff783 	ldbu	r6,-34(fp)
   17ef4:	e0fff80b 	ldhu	r3,-32(fp)
   17ef8:	e0bffb44 	addi	r2,fp,-19
   17efc:	d8800015 	stw	r2,0(sp)
   17f00:	e13ff617 	ldw	r4,-40(fp)
   17f04:	180f883a 	mov	r7,r3
   17f08:	001164c0 	call	1164c <OSFlagPend>
   17f0c:	00000a06 	br	17f38 <altera_avalon_jtag_uart_read+0x1d4>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   17f10:	0001883a 	nop
   17f14:	e0bffc17 	ldw	r2,-16(fp)
   17f18:	10c00d17 	ldw	r3,52(r2)
   17f1c:	e0bff117 	ldw	r2,-60(fp)
   17f20:	1880051e 	bne	r3,r2,17f38 <altera_avalon_jtag_uart_read+0x1d4>
   17f24:	e0bffc17 	ldw	r2,-16(fp)
   17f28:	10c00917 	ldw	r3,36(r2)
   17f2c:	e0bffc17 	ldw	r2,-16(fp)
   17f30:	10800117 	ldw	r2,4(r2)
   17f34:	18bff736 	bltu	r3,r2,17f14 <altera_avalon_jtag_uart_read+0x1b0>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   17f38:	e0bffc17 	ldw	r2,-16(fp)
   17f3c:	10c00d17 	ldw	r3,52(r2)
   17f40:	e0bff117 	ldw	r2,-60(fp)
   17f44:	1880011e 	bne	r3,r2,17f4c <altera_avalon_jtag_uart_read+0x1e8>
      break;
   17f48:	00000206 	br	17f54 <altera_avalon_jtag_uart_read+0x1f0>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   17f4c:	e0bffe17 	ldw	r2,-8(fp)
   17f50:	00bf9916 	blt	zero,r2,17db8 <altera_avalon_jtag_uart_read+0x54>
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
   17f54:	e0bffc17 	ldw	r2,-16(fp)
   17f58:	10800a17 	ldw	r2,40(r2)
   17f5c:	1009883a 	mov	r4,r2
   17f60:	00146d40 	call	146d4 <OSSemPost>

  if (ptr != buffer)
   17f64:	e0ffef17 	ldw	r3,-68(fp)
   17f68:	e0bffd17 	ldw	r2,-12(fp)
   17f6c:	18801826 	beq	r3,r2,17fd0 <altera_avalon_jtag_uart_read+0x26c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17f70:	0005303a 	rdctl	r2,status
   17f74:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17f78:	e0fff917 	ldw	r3,-28(fp)
   17f7c:	00bfff84 	movi	r2,-2
   17f80:	1884703a 	and	r2,r3,r2
   17f84:	1001703a 	wrctl	status,r2
  
  return context;
   17f88:	e0bff917 	ldw	r2,-28(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   17f8c:	e0bff315 	stw	r2,-52(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   17f90:	e0bffc17 	ldw	r2,-16(fp)
   17f94:	10800817 	ldw	r2,32(r2)
   17f98:	10c00054 	ori	r3,r2,1
   17f9c:	e0bffc17 	ldw	r2,-16(fp)
   17fa0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   17fa4:	e0bffc17 	ldw	r2,-16(fp)
   17fa8:	10800017 	ldw	r2,0(r2)
   17fac:	10800104 	addi	r2,r2,4
   17fb0:	1007883a 	mov	r3,r2
   17fb4:	e0bffc17 	ldw	r2,-16(fp)
   17fb8:	10800817 	ldw	r2,32(r2)
   17fbc:	18800035 	stwio	r2,0(r3)
   17fc0:	e0bff317 	ldw	r2,-52(fp)
   17fc4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17fc8:	e0bffa17 	ldw	r2,-24(fp)
   17fcc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   17fd0:	e0ffef17 	ldw	r3,-68(fp)
   17fd4:	e0bffd17 	ldw	r2,-12(fp)
   17fd8:	18800426 	beq	r3,r2,17fec <altera_avalon_jtag_uart_read+0x288>
    return ptr - buffer;
   17fdc:	e0ffef17 	ldw	r3,-68(fp)
   17fe0:	e0bffd17 	ldw	r2,-12(fp)
   17fe4:	1885c83a 	sub	r2,r3,r2
   17fe8:	00000606 	br	18004 <altera_avalon_jtag_uart_read+0x2a0>
  else if (flags & O_NONBLOCK)
   17fec:	e0bfff17 	ldw	r2,-4(fp)
   17ff0:	1090000c 	andi	r2,r2,16384
   17ff4:	10000226 	beq	r2,zero,18000 <altera_avalon_jtag_uart_read+0x29c>
    return -EWOULDBLOCK;
   17ff8:	00bffd44 	movi	r2,-11
   17ffc:	00000106 	br	18004 <altera_avalon_jtag_uart_read+0x2a0>
  else
    return -EIO;
   18000:	00bffec4 	movi	r2,-5
}
   18004:	e037883a 	mov	sp,fp
   18008:	dfc00117 	ldw	ra,4(sp)
   1800c:	df000017 	ldw	fp,0(sp)
   18010:	dec00204 	addi	sp,sp,8
   18014:	f800283a 	ret

00018018 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   18018:	deffed04 	addi	sp,sp,-76
   1801c:	dfc01215 	stw	ra,72(sp)
   18020:	df001115 	stw	fp,68(sp)
   18024:	df001104 	addi	fp,sp,68
   18028:	e13ffc15 	stw	r4,-16(fp)
   1802c:	e17ffd15 	stw	r5,-12(fp)
   18030:	e1bffe15 	stw	r6,-8(fp)
   18034:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   18038:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   1803c:	e0bffd17 	ldw	r2,-12(fp)
   18040:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
   18044:	e0bffc17 	ldw	r2,-16(fp)
   18048:	10800b17 	ldw	r2,44(r2)
   1804c:	e0bff515 	stw	r2,-44(fp)
   18050:	e03ff60d 	sth	zero,-40(fp)
   18054:	e0fff60b 	ldhu	r3,-40(fp)
   18058:	e0bffbc4 	addi	r2,fp,-17
   1805c:	e13ff517 	ldw	r4,-44(fp)
   18060:	180b883a 	mov	r5,r3
   18064:	100d883a 	mov	r6,r2
   18068:	00143000 	call	14300 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   1806c:	00003806 	br	18150 <altera_avalon_jtag_uart_write+0x138>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   18070:	e0bffc17 	ldw	r2,-16(fp)
   18074:	10800f17 	ldw	r2,60(r2)
   18078:	e0bff315 	stw	r2,-52(fp)
      out = sp->tx_out;
   1807c:	e0bffc17 	ldw	r2,-16(fp)
   18080:	10801017 	ldw	r2,64(r2)
   18084:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
   18088:	e0fff317 	ldw	r3,-52(fp)
   1808c:	e0bff017 	ldw	r2,-64(fp)
   18090:	1880062e 	bgeu	r3,r2,180ac <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
   18094:	e0fff017 	ldw	r3,-64(fp)
   18098:	e0bff317 	ldw	r2,-52(fp)
   1809c:	1885c83a 	sub	r2,r3,r2
   180a0:	10bfffc4 	addi	r2,r2,-1
   180a4:	e0bff115 	stw	r2,-60(fp)
   180a8:	00000b06 	br	180d8 <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
   180ac:	e0bff017 	ldw	r2,-64(fp)
   180b0:	10000526 	beq	r2,zero,180c8 <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   180b4:	00c20004 	movi	r3,2048
   180b8:	e0bff317 	ldw	r2,-52(fp)
   180bc:	1885c83a 	sub	r2,r3,r2
   180c0:	e0bff115 	stw	r2,-60(fp)
   180c4:	00000406 	br	180d8 <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   180c8:	00c1ffc4 	movi	r3,2047
   180cc:	e0bff317 	ldw	r2,-52(fp)
   180d0:	1885c83a 	sub	r2,r3,r2
   180d4:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
   180d8:	e0bff117 	ldw	r2,-60(fp)
   180dc:	1000011e 	bne	r2,zero,180e4 <altera_avalon_jtag_uart_write+0xcc>
        break;
   180e0:	00001d06 	br	18158 <altera_avalon_jtag_uart_write+0x140>

      if (n > count)
   180e4:	e0fffe17 	ldw	r3,-8(fp)
   180e8:	e0bff117 	ldw	r2,-60(fp)
   180ec:	1880022e 	bgeu	r3,r2,180f8 <altera_avalon_jtag_uart_write+0xe0>
        n = count;
   180f0:	e0bffe17 	ldw	r2,-8(fp)
   180f4:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   180f8:	e0bff317 	ldw	r2,-52(fp)
   180fc:	10821104 	addi	r2,r2,2116
   18100:	e0fffc17 	ldw	r3,-16(fp)
   18104:	1885883a 	add	r2,r3,r2
   18108:	1009883a 	mov	r4,r2
   1810c:	e17ffd17 	ldw	r5,-12(fp)
   18110:	e1bff117 	ldw	r6,-60(fp)
   18114:	00087200 	call	8720 <memcpy>
      ptr   += n;
   18118:	e0fffd17 	ldw	r3,-12(fp)
   1811c:	e0bff117 	ldw	r2,-60(fp)
   18120:	1885883a 	add	r2,r3,r2
   18124:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   18128:	e0fffe17 	ldw	r3,-8(fp)
   1812c:	e0bff117 	ldw	r2,-60(fp)
   18130:	1885c83a 	sub	r2,r3,r2
   18134:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   18138:	e0fff317 	ldw	r3,-52(fp)
   1813c:	e0bff117 	ldw	r2,-60(fp)
   18140:	1885883a 	add	r2,r3,r2
   18144:	10c1ffcc 	andi	r3,r2,2047
   18148:	e0bffc17 	ldw	r2,-16(fp)
   1814c:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   18150:	e0bffe17 	ldw	r2,-8(fp)
   18154:	00bfc616 	blt	zero,r2,18070 <altera_avalon_jtag_uart_write+0x58>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18158:	0005303a 	rdctl	r2,status
   1815c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18160:	e0fff717 	ldw	r3,-36(fp)
   18164:	00bfff84 	movi	r2,-2
   18168:	1884703a 	and	r2,r3,r2
   1816c:	1001703a 	wrctl	status,r2
  
  return context;
   18170:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   18174:	e0bff415 	stw	r2,-48(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   18178:	e0bffc17 	ldw	r2,-16(fp)
   1817c:	10800817 	ldw	r2,32(r2)
   18180:	10c00094 	ori	r3,r2,2
   18184:	e0bffc17 	ldw	r2,-16(fp)
   18188:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1818c:	e0bffc17 	ldw	r2,-16(fp)
   18190:	10800017 	ldw	r2,0(r2)
   18194:	10800104 	addi	r2,r2,4
   18198:	1007883a 	mov	r3,r2
   1819c:	e0bffc17 	ldw	r2,-16(fp)
   181a0:	10800817 	ldw	r2,32(r2)
   181a4:	18800035 	stwio	r2,0(r3)
   181a8:	e0bff417 	ldw	r2,-48(fp)
   181ac:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   181b0:	e0bff817 	ldw	r2,-32(fp)
   181b4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   181b8:	e0bffe17 	ldw	r2,-8(fp)
   181bc:	00802e0e 	bge	zero,r2,18278 <altera_avalon_jtag_uart_write+0x260>
    {
      if (flags & O_NONBLOCK)
   181c0:	e0bfff17 	ldw	r2,-4(fp)
   181c4:	1090000c 	andi	r2,r2,16384
   181c8:	10000126 	beq	r2,zero,181d0 <altera_avalon_jtag_uart_write+0x1b8>
        break;
   181cc:	00002c06 	br	18280 <altera_avalon_jtag_uart_write+0x268>

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
   181d0:	008000b4 	movhi	r2,2
   181d4:	10b40444 	addi	r2,r2,-12271
   181d8:	10800003 	ldbu	r2,0(r2)
   181dc:	10803fcc 	andi	r2,r2,255
   181e0:	10800058 	cmpnei	r2,r2,1
   181e4:	1000161e 	bne	r2,zero,18240 <altera_avalon_jtag_uart_write+0x228>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
   181e8:	e0bffc17 	ldw	r2,-16(fp)
   181ec:	10800c17 	ldw	r2,48(r2)
   181f0:	e0bff915 	stw	r2,-28(fp)
   181f4:	00800184 	movi	r2,6
   181f8:	e0bffa0d 	sth	r2,-24(fp)
   181fc:	00bfe0c4 	movi	r2,-125
   18200:	e0bffa85 	stb	r2,-22(fp)
   18204:	e03ffb0d 	sth	zero,-20(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   18208:	008000b4 	movhi	r2,2
   1820c:	10b40444 	addi	r2,r2,-12271
   18210:	10800003 	ldbu	r2,0(r2)
   18214:	10803fcc 	andi	r2,r2,255
   18218:	10001326 	beq	r2,zero,18268 <altera_avalon_jtag_uart_write+0x250>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   1821c:	e17ffa0b 	ldhu	r5,-24(fp)
   18220:	e1bffa83 	ldbu	r6,-22(fp)
   18224:	e0fffb0b 	ldhu	r3,-20(fp)
   18228:	e0bffb84 	addi	r2,fp,-18
   1822c:	d8800015 	stw	r2,0(sp)
   18230:	e13ff917 	ldw	r4,-28(fp)
   18234:	180f883a 	mov	r7,r3
   18238:	001164c0 	call	1164c <OSFlagPend>
   1823c:	00000a06 	br	18268 <altera_avalon_jtag_uart_write+0x250>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   18240:	0001883a 	nop
   18244:	e0bffc17 	ldw	r2,-16(fp)
   18248:	10c01017 	ldw	r3,64(r2)
   1824c:	e0bff017 	ldw	r2,-64(fp)
   18250:	1880051e 	bne	r3,r2,18268 <altera_avalon_jtag_uart_write+0x250>
   18254:	e0bffc17 	ldw	r2,-16(fp)
   18258:	10c00917 	ldw	r3,36(r2)
   1825c:	e0bffc17 	ldw	r2,-16(fp)
   18260:	10800117 	ldw	r2,4(r2)
   18264:	18bff736 	bltu	r3,r2,18244 <altera_avalon_jtag_uart_write+0x22c>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   18268:	e0bffc17 	ldw	r2,-16(fp)
   1826c:	10800917 	ldw	r2,36(r2)
   18270:	10000126 	beq	r2,zero,18278 <altera_avalon_jtag_uart_write+0x260>
         break;
   18274:	00000206 	br	18280 <altera_avalon_jtag_uart_write+0x268>
    }
  }
  while (count > 0);
   18278:	e0bffe17 	ldw	r2,-8(fp)
   1827c:	00bf7b16 	blt	zero,r2,1806c <altera_avalon_jtag_uart_write+0x54>

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
   18280:	e0bffc17 	ldw	r2,-16(fp)
   18284:	10800b17 	ldw	r2,44(r2)
   18288:	1009883a 	mov	r4,r2
   1828c:	00146d40 	call	146d4 <OSSemPost>

  if (ptr != start)
   18290:	e0fffd17 	ldw	r3,-12(fp)
   18294:	e0bff217 	ldw	r2,-56(fp)
   18298:	18800426 	beq	r3,r2,182ac <altera_avalon_jtag_uart_write+0x294>
    return ptr - start;
   1829c:	e0fffd17 	ldw	r3,-12(fp)
   182a0:	e0bff217 	ldw	r2,-56(fp)
   182a4:	1885c83a 	sub	r2,r3,r2
   182a8:	00000606 	br	182c4 <altera_avalon_jtag_uart_write+0x2ac>
  else if (flags & O_NONBLOCK)
   182ac:	e0bfff17 	ldw	r2,-4(fp)
   182b0:	1090000c 	andi	r2,r2,16384
   182b4:	10000226 	beq	r2,zero,182c0 <altera_avalon_jtag_uart_write+0x2a8>
    return -EWOULDBLOCK;
   182b8:	00bffd44 	movi	r2,-11
   182bc:	00000106 	br	182c4 <altera_avalon_jtag_uart_write+0x2ac>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   182c0:	00bffec4 	movi	r2,-5
}
   182c4:	e037883a 	mov	sp,fp
   182c8:	dfc00117 	ldw	ra,4(sp)
   182cc:	df000017 	ldw	fp,0(sp)
   182d0:	dec00204 	addi	sp,sp,8
   182d4:	f800283a 	ret

000182d8 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   182d8:	defffa04 	addi	sp,sp,-24
   182dc:	dfc00515 	stw	ra,20(sp)
   182e0:	df000415 	stw	fp,16(sp)
   182e4:	df000404 	addi	fp,sp,16
   182e8:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   182ec:	0007883a 	mov	r3,zero
   182f0:	e0bfff17 	ldw	r2,-4(fp)
   182f4:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   182f8:	e0bfff17 	ldw	r2,-4(fp)
   182fc:	10800104 	addi	r2,r2,4
   18300:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18304:	0005303a 	rdctl	r2,status
   18308:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1830c:	e0fffd17 	ldw	r3,-12(fp)
   18310:	00bfff84 	movi	r2,-2
   18314:	1884703a 	and	r2,r3,r2
   18318:	1001703a 	wrctl	status,r2
  
  return context;
   1831c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   18320:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   18324:	0019dac0 	call	19dac <alt_tick>
   18328:	e0bffc17 	ldw	r2,-16(fp)
   1832c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18330:	e0bffe17 	ldw	r2,-8(fp)
   18334:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   18338:	e037883a 	mov	sp,fp
   1833c:	dfc00117 	ldw	ra,4(sp)
   18340:	df000017 	ldw	fp,0(sp)
   18344:	dec00204 	addi	sp,sp,8
   18348:	f800283a 	ret

0001834c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   1834c:	defff804 	addi	sp,sp,-32
   18350:	dfc00715 	stw	ra,28(sp)
   18354:	df000615 	stw	fp,24(sp)
   18358:	df000604 	addi	fp,sp,24
   1835c:	e13ffc15 	stw	r4,-16(fp)
   18360:	e17ffd15 	stw	r5,-12(fp)
   18364:	e1bffe15 	stw	r6,-8(fp)
   18368:	e1ffff15 	stw	r7,-4(fp)
   1836c:	e0bfff17 	ldw	r2,-4(fp)
   18370:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   18374:	008000b4 	movhi	r2,2
   18378:	10b41804 	addi	r2,r2,-12192
   1837c:	10800017 	ldw	r2,0(r2)
   18380:	1000041e 	bne	r2,zero,18394 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
   18384:	008000b4 	movhi	r2,2
   18388:	10b41804 	addi	r2,r2,-12192
   1838c:	e0fffb17 	ldw	r3,-20(fp)
   18390:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   18394:	e0bffc17 	ldw	r2,-16(fp)
   18398:	10800104 	addi	r2,r2,4
   1839c:	00c001c4 	movi	r3,7
   183a0:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   183a4:	d8000015 	stw	zero,0(sp)
   183a8:	e13ffd17 	ldw	r4,-12(fp)
   183ac:	e17ffe17 	ldw	r5,-8(fp)
   183b0:	018000b4 	movhi	r6,2
   183b4:	31a0b604 	addi	r6,r6,-32040
   183b8:	e1fffc17 	ldw	r7,-16(fp)
   183bc:	000df140 	call	df14 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   183c0:	e037883a 	mov	sp,fp
   183c4:	dfc00117 	ldw	ra,4(sp)
   183c8:	df000017 	ldw	fp,0(sp)
   183cc:	dec00204 	addi	sp,sp,8
   183d0:	f800283a 	ret

000183d4 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   183d4:	defffa04 	addi	sp,sp,-24
   183d8:	dfc00515 	stw	ra,20(sp)
   183dc:	df000415 	stw	fp,16(sp)
   183e0:	df000404 	addi	fp,sp,16
   183e4:	e13ffd15 	stw	r4,-12(fp)
   183e8:	e17ffe15 	stw	r5,-8(fp)
   183ec:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   183f0:	e0bffd17 	ldw	r2,-12(fp)
   183f4:	10800017 	ldw	r2,0(r2)
   183f8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
   183fc:	e0bffc17 	ldw	r2,-16(fp)
   18400:	10c00a04 	addi	r3,r2,40
   18404:	e0bffd17 	ldw	r2,-12(fp)
   18408:	10800217 	ldw	r2,8(r2)
   1840c:	1809883a 	mov	r4,r3
   18410:	e17ffe17 	ldw	r5,-8(fp)
   18414:	e1bfff17 	ldw	r6,-4(fp)
   18418:	100f883a 	mov	r7,r2
   1841c:	0018a580 	call	18a58 <altera_avalon_uart_read>
      fd->fd_flags);
}
   18420:	e037883a 	mov	sp,fp
   18424:	dfc00117 	ldw	ra,4(sp)
   18428:	df000017 	ldw	fp,0(sp)
   1842c:	dec00204 	addi	sp,sp,8
   18430:	f800283a 	ret

00018434 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   18434:	defffa04 	addi	sp,sp,-24
   18438:	dfc00515 	stw	ra,20(sp)
   1843c:	df000415 	stw	fp,16(sp)
   18440:	df000404 	addi	fp,sp,16
   18444:	e13ffd15 	stw	r4,-12(fp)
   18448:	e17ffe15 	stw	r5,-8(fp)
   1844c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   18450:	e0bffd17 	ldw	r2,-12(fp)
   18454:	10800017 	ldw	r2,0(r2)
   18458:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
   1845c:	e0bffc17 	ldw	r2,-16(fp)
   18460:	10c00a04 	addi	r3,r2,40
   18464:	e0bffd17 	ldw	r2,-12(fp)
   18468:	10800217 	ldw	r2,8(r2)
   1846c:	1809883a 	mov	r4,r3
   18470:	e17ffe17 	ldw	r5,-8(fp)
   18474:	e1bfff17 	ldw	r6,-4(fp)
   18478:	100f883a 	mov	r7,r2
   1847c:	0018d100 	call	18d10 <altera_avalon_uart_write>
      fd->fd_flags);
}
   18480:	e037883a 	mov	sp,fp
   18484:	dfc00117 	ldw	ra,4(sp)
   18488:	df000017 	ldw	fp,0(sp)
   1848c:	dec00204 	addi	sp,sp,8
   18490:	f800283a 	ret

00018494 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
   18494:	defffc04 	addi	sp,sp,-16
   18498:	dfc00315 	stw	ra,12(sp)
   1849c:	df000215 	stw	fp,8(sp)
   184a0:	df000204 	addi	fp,sp,8
   184a4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   184a8:	e0bfff17 	ldw	r2,-4(fp)
   184ac:	10800017 	ldw	r2,0(r2)
   184b0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
   184b4:	e0bffe17 	ldw	r2,-8(fp)
   184b8:	10c00a04 	addi	r3,r2,40
   184bc:	e0bfff17 	ldw	r2,-4(fp)
   184c0:	10800217 	ldw	r2,8(r2)
   184c4:	1809883a 	mov	r4,r3
   184c8:	100b883a 	mov	r5,r2
   184cc:	00189b40 	call	189b4 <altera_avalon_uart_close>
}
   184d0:	e037883a 	mov	sp,fp
   184d4:	dfc00117 	ldw	ra,4(sp)
   184d8:	df000017 	ldw	fp,0(sp)
   184dc:	dec00204 	addi	sp,sp,8
   184e0:	f800283a 	ret

000184e4 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
   184e4:	defff204 	addi	sp,sp,-56
   184e8:	dfc00d15 	stw	ra,52(sp)
   184ec:	df000c15 	stw	fp,48(sp)
   184f0:	df000c04 	addi	fp,sp,48
   184f4:	e13ffd15 	stw	r4,-12(fp)
   184f8:	e17ffe15 	stw	r5,-8(fp)
   184fc:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
   18500:	e0bffd17 	ldw	r2,-12(fp)
   18504:	10800017 	ldw	r2,0(r2)
   18508:	e0bff515 	stw	r2,-44(fp)
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
   1850c:	e0bffd17 	ldw	r2,-12(fp)
   18510:	10800704 	addi	r2,r2,28
   18514:	e0bff715 	stw	r2,-36(fp)
   18518:	e03ff80d 	sth	zero,-32(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
   1851c:	e0fff80b 	ldhu	r3,-32(fp)
   18520:	e0bffc84 	addi	r2,fp,-14
   18524:	1809883a 	mov	r4,r3
   18528:	100b883a 	mov	r5,r2
   1852c:	00110340 	call	11034 <OSFlagCreate>
   18530:	1007883a 	mov	r3,r2
   18534:	e0bff717 	ldw	r2,-36(fp)
   18538:	10c00015 	stw	r3,0(r2)
  return err;
   1853c:	e0bffc83 	ldbu	r2,-14(fp)
   18540:	10803fcc 	andi	r2,r2,255
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
   18544:	1000241e 	bne	r2,zero,185d8 <altera_avalon_uart_init+0xf4>
   18548:	e0bffd17 	ldw	r2,-12(fp)
   1854c:	10800804 	addi	r2,r2,32
   18550:	e0bff915 	stw	r2,-28(fp)
   18554:	00800044 	movi	r2,1
   18558:	e0bffa0d 	sth	r2,-24(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
   1855c:	e0bffa0b 	ldhu	r2,-24(fp)
   18560:	1009883a 	mov	r4,r2
   18564:	0013f980 	call	13f98 <OSSemCreate>
   18568:	1007883a 	mov	r3,r2
   1856c:	e0bff917 	ldw	r2,-28(fp)
   18570:	10c00015 	stw	r3,0(r2)
  return *sem ? 0 : -1;
   18574:	e0bff917 	ldw	r2,-28(fp)
   18578:	10800017 	ldw	r2,0(r2)
   1857c:	10000226 	beq	r2,zero,18588 <altera_avalon_uart_init+0xa4>
   18580:	0005883a 	mov	r2,zero
   18584:	00000106 	br	1858c <altera_avalon_uart_init+0xa8>
   18588:	00bfffc4 	movi	r2,-1
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
   1858c:	1000121e 	bne	r2,zero,185d8 <altera_avalon_uart_init+0xf4>
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);
   18590:	e0bffd17 	ldw	r2,-12(fp)
   18594:	10800904 	addi	r2,r2,36
   18598:	e0bffb15 	stw	r2,-20(fp)
   1859c:	00800044 	movi	r2,1
   185a0:	e0bffc0d 	sth	r2,-16(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
   185a4:	e0bffc0b 	ldhu	r2,-16(fp)
   185a8:	1009883a 	mov	r4,r2
   185ac:	0013f980 	call	13f98 <OSSemCreate>
   185b0:	1007883a 	mov	r3,r2
   185b4:	e0bffb17 	ldw	r2,-20(fp)
   185b8:	10c00015 	stw	r3,0(r2)
  return *sem ? 0 : -1;
   185bc:	e0bffb17 	ldw	r2,-20(fp)
   185c0:	10800017 	ldw	r2,0(r2)
   185c4:	10000226 	beq	r2,zero,185d0 <altera_avalon_uart_init+0xec>
   185c8:	0005883a 	mov	r2,zero
   185cc:	00000106 	br	185d4 <altera_avalon_uart_init+0xf0>
   185d0:	00bfffc4 	movi	r2,-1
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
   185d4:	10000226 	beq	r2,zero,185e0 <altera_avalon_uart_init+0xfc>
   185d8:	00800044 	movi	r2,1
   185dc:	00000106 	br	185e4 <altera_avalon_uart_init+0x100>
   185e0:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
   185e4:	e0bff615 	stw	r2,-40(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
   185e8:	e0bff617 	ldw	r2,-40(fp)
   185ec:	10000f1e 	bne	r2,zero,1862c <altera_avalon_uart_init+0x148>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
   185f0:	e0bffd17 	ldw	r2,-12(fp)
   185f4:	00c32004 	movi	r3,3200
   185f8:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
   185fc:	e0bff517 	ldw	r2,-44(fp)
   18600:	10800304 	addi	r2,r2,12
   18604:	e0fffd17 	ldw	r3,-12(fp)
   18608:	18c00117 	ldw	r3,4(r3)
   1860c:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
   18610:	d8000015 	stw	zero,0(sp)
   18614:	e13ffe17 	ldw	r4,-8(fp)
   18618:	e17fff17 	ldw	r5,-4(fp)
   1861c:	018000b4 	movhi	r6,2
   18620:	31a19004 	addi	r6,r6,-31168
   18624:	e1fffd17 	ldw	r7,-12(fp)
   18628:	000df140 	call	df14 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
   1862c:	e037883a 	mov	sp,fp
   18630:	dfc00117 	ldw	ra,4(sp)
   18634:	df000017 	ldw	fp,0(sp)
   18638:	dec00204 	addi	sp,sp,8
   1863c:	f800283a 	ret

00018640 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
   18640:	defffa04 	addi	sp,sp,-24
   18644:	dfc00515 	stw	ra,20(sp)
   18648:	df000415 	stw	fp,16(sp)
   1864c:	df000404 	addi	fp,sp,16
   18650:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
   18654:	e0bfff17 	ldw	r2,-4(fp)
   18658:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
   1865c:	e0bffc17 	ldw	r2,-16(fp)
   18660:	10800017 	ldw	r2,0(r2)
   18664:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
   18668:	e0bffd17 	ldw	r2,-12(fp)
   1866c:	10800204 	addi	r2,r2,8
   18670:	10800037 	ldwio	r2,0(r2)
   18674:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
   18678:	e0bffd17 	ldw	r2,-12(fp)
   1867c:	10800204 	addi	r2,r2,8
   18680:	0007883a 	mov	r3,zero
   18684:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
   18688:	e0bffd17 	ldw	r2,-12(fp)
   1868c:	10800204 	addi	r2,r2,8
   18690:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
   18694:	e0bffe17 	ldw	r2,-8(fp)
   18698:	1080200c 	andi	r2,r2,128
   1869c:	10000326 	beq	r2,zero,186ac <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
   186a0:	e13ffc17 	ldw	r4,-16(fp)
   186a4:	e17ffe17 	ldw	r5,-8(fp)
   186a8:	00186d80 	call	186d8 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
   186ac:	e0bffe17 	ldw	r2,-8(fp)
   186b0:	1081100c 	andi	r2,r2,1088
   186b4:	10000326 	beq	r2,zero,186c4 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
   186b8:	e13ffc17 	ldw	r4,-16(fp)
   186bc:	e17ffe17 	ldw	r5,-8(fp)
   186c0:	00188100 	call	18810 <altera_avalon_uart_txirq>
  }
  

}
   186c4:	e037883a 	mov	sp,fp
   186c8:	dfc00117 	ldw	ra,4(sp)
   186cc:	df000017 	ldw	fp,0(sp)
   186d0:	dec00204 	addi	sp,sp,8
   186d4:	f800283a 	ret

000186d8 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
   186d8:	defff904 	addi	sp,sp,-28
   186dc:	dfc00615 	stw	ra,24(sp)
   186e0:	df000515 	stw	fp,20(sp)
   186e4:	df000504 	addi	fp,sp,20
   186e8:	e13ffe15 	stw	r4,-8(fp)
   186ec:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
   186f0:	e0bfff17 	ldw	r2,-4(fp)
   186f4:	108000cc 	andi	r2,r2,3
   186f8:	10000126 	beq	r2,zero,18700 <altera_avalon_uart_rxirq+0x28>
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
   186fc:	00003f06 	br	187fc <altera_avalon_uart_rxirq+0x124>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
   18700:	e0bffe17 	ldw	r2,-8(fp)
   18704:	10c00317 	ldw	r3,12(r2)
   18708:	e0bffe17 	ldw	r2,-8(fp)
   1870c:	10800217 	ldw	r2,8(r2)
   18710:	1880131e 	bne	r3,r2,18760 <altera_avalon_uart_rxirq+0x88>
  {
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
   18714:	e0bffe17 	ldw	r2,-8(fp)
   18718:	10800717 	ldw	r2,28(r2)
   1871c:	e0bffc15 	stw	r2,-16(fp)
   18720:	00800044 	movi	r2,1
   18724:	e0bffd0d 	sth	r2,-12(fp)
   18728:	00800044 	movi	r2,1
   1872c:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   18730:	008000b4 	movhi	r2,2
   18734:	10b40444 	addi	r2,r2,-12271
   18738:	10800003 	ldbu	r2,0(r2)
   1873c:	10803fcc 	andi	r2,r2,255
   18740:	10000726 	beq	r2,zero,18760 <altera_avalon_uart_rxirq+0x88>
  {
    OSFlagPost (group, flags, opt, &err);
   18744:	e17ffd0b 	ldhu	r5,-12(fp)
   18748:	e0fffd83 	ldbu	r3,-10(fp)
   1874c:	e0bffdc4 	addi	r2,fp,-9
   18750:	e13ffc17 	ldw	r4,-16(fp)
   18754:	180d883a 	mov	r6,r3
   18758:	100f883a 	mov	r7,r2
   1875c:	0011ca40 	call	11ca4 <OSFlagPost>
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   18760:	e0bffe17 	ldw	r2,-8(fp)
   18764:	10800317 	ldw	r2,12(r2)
   18768:	10800044 	addi	r2,r2,1
   1876c:	10800fcc 	andi	r2,r2,63
   18770:	e0bffb15 	stw	r2,-20(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
   18774:	e0bffe17 	ldw	r2,-8(fp)
   18778:	10800317 	ldw	r2,12(r2)
   1877c:	e0fffe17 	ldw	r3,-8(fp)
   18780:	18c00017 	ldw	r3,0(r3)
   18784:	18c00037 	ldwio	r3,0(r3)
   18788:	1809883a 	mov	r4,r3
   1878c:	e0fffe17 	ldw	r3,-8(fp)
   18790:	1885883a 	add	r2,r3,r2
   18794:	10800a04 	addi	r2,r2,40
   18798:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
   1879c:	e0bffe17 	ldw	r2,-8(fp)
   187a0:	e0fffb17 	ldw	r3,-20(fp)
   187a4:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   187a8:	e0bffe17 	ldw	r2,-8(fp)
   187ac:	10800317 	ldw	r2,12(r2)
   187b0:	10800044 	addi	r2,r2,1
   187b4:	10800fcc 	andi	r2,r2,63
   187b8:	e0bffb15 	stw	r2,-20(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
   187bc:	e0bffe17 	ldw	r2,-8(fp)
   187c0:	10c00217 	ldw	r3,8(r2)
   187c4:	e0bffb17 	ldw	r2,-20(fp)
   187c8:	18800c1e 	bne	r3,r2,187fc <altera_avalon_uart_rxirq+0x124>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   187cc:	e0bffe17 	ldw	r2,-8(fp)
   187d0:	10c00117 	ldw	r3,4(r2)
   187d4:	00bfdfc4 	movi	r2,-129
   187d8:	1886703a 	and	r3,r3,r2
   187dc:	e0bffe17 	ldw	r2,-8(fp)
   187e0:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
   187e4:	e0bffe17 	ldw	r2,-8(fp)
   187e8:	10800017 	ldw	r2,0(r2)
   187ec:	10800304 	addi	r2,r2,12
   187f0:	e0fffe17 	ldw	r3,-8(fp)
   187f4:	18c00117 	ldw	r3,4(r3)
   187f8:	10c00035 	stwio	r3,0(r2)
  }   
}
   187fc:	e037883a 	mov	sp,fp
   18800:	dfc00117 	ldw	ra,4(sp)
   18804:	df000017 	ldw	fp,0(sp)
   18808:	dec00204 	addi	sp,sp,8
   1880c:	f800283a 	ret

00018810 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
   18810:	defffa04 	addi	sp,sp,-24
   18814:	dfc00515 	stw	ra,20(sp)
   18818:	df000415 	stw	fp,16(sp)
   1881c:	df000404 	addi	fp,sp,16
   18820:	e13ffe15 	stw	r4,-8(fp)
   18824:	e17fff15 	stw	r5,-4(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
   18828:	e0bffe17 	ldw	r2,-8(fp)
   1882c:	10c00417 	ldw	r3,16(r2)
   18830:	e0bffe17 	ldw	r2,-8(fp)
   18834:	10800517 	ldw	r2,20(r2)
   18838:	18804826 	beq	r3,r2,1895c <altera_avalon_uart_txirq+0x14c>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
   1883c:	e0bffe17 	ldw	r2,-8(fp)
   18840:	10800617 	ldw	r2,24(r2)
   18844:	1080008c 	andi	r2,r2,2
   18848:	10000326 	beq	r2,zero,18858 <altera_avalon_uart_txirq+0x48>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
   1884c:	e0bfff17 	ldw	r2,-4(fp)
   18850:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
   18854:	10003326 	beq	r2,zero,18924 <altera_avalon_uart_txirq+0x114>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
   18858:	e0bffe17 	ldw	r2,-8(fp)
   1885c:	10c00417 	ldw	r3,16(r2)
   18860:	e0bffe17 	ldw	r2,-8(fp)
   18864:	10800517 	ldw	r2,20(r2)
   18868:	10800044 	addi	r2,r2,1
   1886c:	10800fcc 	andi	r2,r2,63
   18870:	1880131e 	bne	r3,r2,188c0 <altera_avalon_uart_txirq+0xb0>
      { 
        ALT_FLAG_POST (sp->events, 
   18874:	e0bffe17 	ldw	r2,-8(fp)
   18878:	10800717 	ldw	r2,28(r2)
   1887c:	e0bffc15 	stw	r2,-16(fp)
   18880:	00800084 	movi	r2,2
   18884:	e0bffd0d 	sth	r2,-12(fp)
   18888:	00800044 	movi	r2,1
   1888c:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   18890:	008000b4 	movhi	r2,2
   18894:	10b40444 	addi	r2,r2,-12271
   18898:	10800003 	ldbu	r2,0(r2)
   1889c:	10803fcc 	andi	r2,r2,255
   188a0:	10000726 	beq	r2,zero,188c0 <altera_avalon_uart_txirq+0xb0>
  {
    OSFlagPost (group, flags, opt, &err);
   188a4:	e17ffd0b 	ldhu	r5,-12(fp)
   188a8:	e0fffd83 	ldbu	r3,-10(fp)
   188ac:	e0bffdc4 	addi	r2,fp,-9
   188b0:	e13ffc17 	ldw	r4,-16(fp)
   188b4:	180d883a 	mov	r6,r3
   188b8:	100f883a 	mov	r7,r2
   188bc:	0011ca40 	call	11ca4 <OSFlagPost>
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
   188c0:	e0bffe17 	ldw	r2,-8(fp)
   188c4:	10800017 	ldw	r2,0(r2)
   188c8:	10800104 	addi	r2,r2,4
   188cc:	e0fffe17 	ldw	r3,-8(fp)
   188d0:	18c00417 	ldw	r3,16(r3)
   188d4:	e13ffe17 	ldw	r4,-8(fp)
   188d8:	20c7883a 	add	r3,r4,r3
   188dc:	18c01a04 	addi	r3,r3,104
   188e0:	18c00003 	ldbu	r3,0(r3)
   188e4:	18c03fcc 	andi	r3,r3,255
   188e8:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
   188ec:	e0bffe17 	ldw	r2,-8(fp)
   188f0:	10800417 	ldw	r2,16(r2)
   188f4:	10800044 	addi	r2,r2,1
   188f8:	e0fffe17 	ldw	r3,-8(fp)
   188fc:	18800415 	stw	r2,16(r3)
   18900:	10c00fcc 	andi	r3,r2,63
   18904:	e0bffe17 	ldw	r2,-8(fp)
   18908:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   1890c:	e0bffe17 	ldw	r2,-8(fp)
   18910:	10800117 	ldw	r2,4(r2)
   18914:	10c01014 	ori	r3,r2,64
   18918:	e0bffe17 	ldw	r2,-8(fp)
   1891c:	10c00115 	stw	r3,4(r2)
   18920:	00000e06 	br	1895c <altera_avalon_uart_txirq+0x14c>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
   18924:	e0bffe17 	ldw	r2,-8(fp)
   18928:	10800017 	ldw	r2,0(r2)
   1892c:	10800204 	addi	r2,r2,8
   18930:	10800037 	ldwio	r2,0(r2)
   18934:	e0bfff15 	stw	r2,-4(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
   18938:	e0bfff17 	ldw	r2,-4(fp)
   1893c:	1082000c 	andi	r2,r2,2048
   18940:	1000061e 	bne	r2,zero,1895c <altera_avalon_uart_txirq+0x14c>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   18944:	e0bffe17 	ldw	r2,-8(fp)
   18948:	10c00117 	ldw	r3,4(r2)
   1894c:	00bfefc4 	movi	r2,-65
   18950:	1886703a 	and	r3,r3,r2
   18954:	e0bffe17 	ldw	r2,-8(fp)
   18958:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
   1895c:	e0bffe17 	ldw	r2,-8(fp)
   18960:	10c00417 	ldw	r3,16(r2)
   18964:	e0bffe17 	ldw	r2,-8(fp)
   18968:	10800517 	ldw	r2,20(r2)
   1896c:	1880061e 	bne	r3,r2,18988 <altera_avalon_uart_txirq+0x178>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   18970:	e0bffe17 	ldw	r2,-8(fp)
   18974:	10c00117 	ldw	r3,4(r2)
   18978:	00beefc4 	movi	r2,-1089
   1897c:	1886703a 	and	r3,r3,r2
   18980:	e0bffe17 	ldw	r2,-8(fp)
   18984:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   18988:	e0bffe17 	ldw	r2,-8(fp)
   1898c:	10800017 	ldw	r2,0(r2)
   18990:	10800304 	addi	r2,r2,12
   18994:	e0fffe17 	ldw	r3,-8(fp)
   18998:	18c00117 	ldw	r3,4(r3)
   1899c:	10c00035 	stwio	r3,0(r2)
}
   189a0:	e037883a 	mov	sp,fp
   189a4:	dfc00117 	ldw	ra,4(sp)
   189a8:	df000017 	ldw	fp,0(sp)
   189ac:	dec00204 	addi	sp,sp,8
   189b0:	f800283a 	ret

000189b4 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
   189b4:	defffd04 	addi	sp,sp,-12
   189b8:	df000215 	stw	fp,8(sp)
   189bc:	df000204 	addi	fp,sp,8
   189c0:	e13ffe15 	stw	r4,-8(fp)
   189c4:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
   189c8:	00000506 	br	189e0 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   189cc:	e0bfff17 	ldw	r2,-4(fp)
   189d0:	1090000c 	andi	r2,r2,16384
   189d4:	10000226 	beq	r2,zero,189e0 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
   189d8:	00bffd44 	movi	r2,-11
   189dc:	00000606 	br	189f8 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
   189e0:	e0bffe17 	ldw	r2,-8(fp)
   189e4:	10c00417 	ldw	r3,16(r2)
   189e8:	e0bffe17 	ldw	r2,-8(fp)
   189ec:	10800517 	ldw	r2,20(r2)
   189f0:	18bff61e 	bne	r3,r2,189cc <altera_avalon_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   189f4:	0005883a 	mov	r2,zero
}
   189f8:	e037883a 	mov	sp,fp
   189fc:	df000017 	ldw	fp,0(sp)
   18a00:	dec00104 	addi	sp,sp,4
   18a04:	f800283a 	ret

00018a08 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   18a08:	defffe04 	addi	sp,sp,-8
   18a0c:	dfc00115 	stw	ra,4(sp)
   18a10:	df000015 	stw	fp,0(sp)
   18a14:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   18a18:	008000b4 	movhi	r2,2
   18a1c:	10b3cc04 	addi	r2,r2,-12496
   18a20:	10800017 	ldw	r2,0(r2)
   18a24:	10000526 	beq	r2,zero,18a3c <alt_get_errno+0x34>
   18a28:	008000b4 	movhi	r2,2
   18a2c:	10b3cc04 	addi	r2,r2,-12496
   18a30:	10800017 	ldw	r2,0(r2)
   18a34:	103ee83a 	callr	r2
   18a38:	00000206 	br	18a44 <alt_get_errno+0x3c>
   18a3c:	008000b4 	movhi	r2,2
   18a40:	10b3fa04 	addi	r2,r2,-12312
}
   18a44:	e037883a 	mov	sp,fp
   18a48:	dfc00117 	ldw	ra,4(sp)
   18a4c:	df000017 	ldw	fp,0(sp)
   18a50:	dec00204 	addi	sp,sp,8
   18a54:	f800283a 	ret

00018a58 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
   18a58:	deffeb04 	addi	sp,sp,-84
   18a5c:	dfc01415 	stw	ra,80(sp)
   18a60:	df001315 	stw	fp,76(sp)
   18a64:	df001304 	addi	fp,sp,76
   18a68:	e13ffc15 	stw	r4,-16(fp)
   18a6c:	e17ffd15 	stw	r5,-12(fp)
   18a70:	e1bffe15 	stw	r6,-8(fp)
   18a74:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
   18a78:	e03fee05 	stb	zero,-72(fp)
  int             count = 0;
   18a7c:	e03fef15 	stw	zero,-68(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
   18a80:	e0bfff17 	ldw	r2,-4(fp)
   18a84:	1090000c 	andi	r2,r2,16384
   18a88:	1005003a 	cmpeq	r2,r2,zero
   18a8c:	10803fcc 	andi	r2,r2,255
   18a90:	e0bff015 	stw	r2,-64(fp)
  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */

  ALT_SEM_PEND (sp->read_lock, 0);
   18a94:	e0bffc17 	ldw	r2,-16(fp)
   18a98:	10800817 	ldw	r2,32(r2)
   18a9c:	e0bff215 	stw	r2,-56(fp)
   18aa0:	e03ff30d 	sth	zero,-52(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
   18aa4:	e0fff30b 	ldhu	r3,-52(fp)
   18aa8:	e0bffb44 	addi	r2,fp,-19
   18aac:	e13ff217 	ldw	r4,-56(fp)
   18ab0:	180b883a 	mov	r5,r3
   18ab4:	100d883a 	mov	r6,r2
   18ab8:	00143000 	call	14300 <OSSemPend>
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
   18abc:	00001306 	br	18b0c <altera_avalon_uart_read+0xb4>
    {
      count++;
   18ac0:	e0bfef17 	ldw	r2,-68(fp)
   18ac4:	10800044 	addi	r2,r2,1
   18ac8:	e0bfef15 	stw	r2,-68(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
   18acc:	e0bffd17 	ldw	r2,-12(fp)
   18ad0:	10c00044 	addi	r3,r2,1
   18ad4:	e0fffd15 	stw	r3,-12(fp)
   18ad8:	e0fffc17 	ldw	r3,-16(fp)
   18adc:	18c00217 	ldw	r3,8(r3)
   18ae0:	e13ffc17 	ldw	r4,-16(fp)
   18ae4:	20c7883a 	add	r3,r4,r3
   18ae8:	18c00a04 	addi	r3,r3,40
   18aec:	18c00003 	ldbu	r3,0(r3)
   18af0:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
   18af4:	e0bffc17 	ldw	r2,-16(fp)
   18af8:	10800217 	ldw	r2,8(r2)
   18afc:	10800044 	addi	r2,r2,1
   18b00:	10c00fcc 	andi	r3,r2,63
   18b04:	e0bffc17 	ldw	r2,-16(fp)
   18b08:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
   18b0c:	e0ffef17 	ldw	r3,-68(fp)
   18b10:	e0bffe17 	ldw	r2,-8(fp)
   18b14:	1880050e 	bge	r3,r2,18b2c <altera_avalon_uart_read+0xd4>
   18b18:	e0bffc17 	ldw	r2,-16(fp)
   18b1c:	10c00217 	ldw	r3,8(r2)
   18b20:	e0bffc17 	ldw	r2,-16(fp)
   18b24:	10800317 	ldw	r2,12(r2)
   18b28:	18bfe51e 	bne	r3,r2,18ac0 <altera_avalon_uart_read+0x68>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
   18b2c:	e0bfef17 	ldw	r2,-68(fp)
   18b30:	10003a1e 	bne	r2,zero,18c1c <altera_avalon_uart_read+0x1c4>
   18b34:	e0bffc17 	ldw	r2,-16(fp)
   18b38:	10c00217 	ldw	r3,8(r2)
   18b3c:	e0bffc17 	ldw	r2,-16(fp)
   18b40:	10800317 	ldw	r2,12(r2)
   18b44:	1880351e 	bne	r3,r2,18c1c <altera_avalon_uart_read+0x1c4>
    {
      if (!block)
   18b48:	e0bff017 	ldw	r2,-64(fp)
   18b4c:	1000071e 	bne	r2,zero,18b6c <altera_avalon_uart_read+0x114>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
   18b50:	0018a080 	call	18a08 <alt_get_errno>
   18b54:	1007883a 	mov	r3,r2
   18b58:	008002c4 	movi	r2,11
   18b5c:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
   18b60:	00800044 	movi	r2,1
   18b64:	e0bfee05 	stb	r2,-72(fp)
        break;
   18b68:	00003006 	br	18c2c <altera_avalon_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18b6c:	0005303a 	rdctl	r2,status
   18b70:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18b74:	e0fff417 	ldw	r3,-48(fp)
   18b78:	00bfff84 	movi	r2,-2
   18b7c:	1884703a 	and	r2,r3,r2
   18b80:	1001703a 	wrctl	status,r2
  
  return context;
   18b84:	e0bff417 	ldw	r2,-48(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
   18b88:	e0bff115 	stw	r2,-60(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   18b8c:	e0bffc17 	ldw	r2,-16(fp)
   18b90:	10800117 	ldw	r2,4(r2)
   18b94:	10c02014 	ori	r3,r2,128
   18b98:	e0bffc17 	ldw	r2,-16(fp)
   18b9c:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   18ba0:	e0bffc17 	ldw	r2,-16(fp)
   18ba4:	10800017 	ldw	r2,0(r2)
   18ba8:	10800304 	addi	r2,r2,12
   18bac:	e0fffc17 	ldw	r3,-16(fp)
   18bb0:	18c00117 	ldw	r3,4(r3)
   18bb4:	10c00035 	stwio	r3,0(r2)
   18bb8:	e0bff117 	ldw	r2,-60(fp)
   18bbc:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18bc0:	e0bff517 	ldw	r2,-44(fp)
   18bc4:	1001703a 	wrctl	status,r2
        * flag set in the interrupt service routine. This avoids wasting CPU
        * cycles waiting in this thread, when we could be doing something more 
        * profitable elsewhere.
        */

       ALT_FLAG_PEND (sp->events, 
   18bc8:	e0bffc17 	ldw	r2,-16(fp)
   18bcc:	10800717 	ldw	r2,28(r2)
   18bd0:	e0bff615 	stw	r2,-40(fp)
   18bd4:	00800044 	movi	r2,1
   18bd8:	e0bff70d 	sth	r2,-36(fp)
   18bdc:	00bfe0c4 	movi	r2,-125
   18be0:	e0bff785 	stb	r2,-34(fp)
   18be4:	e03ff80d 	sth	zero,-32(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   18be8:	008000b4 	movhi	r2,2
   18bec:	10b40444 	addi	r2,r2,-12271
   18bf0:	10800003 	ldbu	r2,0(r2)
   18bf4:	10803fcc 	andi	r2,r2,255
   18bf8:	10000826 	beq	r2,zero,18c1c <altera_avalon_uart_read+0x1c4>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   18bfc:	e17ff70b 	ldhu	r5,-36(fp)
   18c00:	e1bff783 	ldbu	r6,-34(fp)
   18c04:	e0fff80b 	ldhu	r3,-32(fp)
   18c08:	e0bffb04 	addi	r2,fp,-20
   18c0c:	d8800015 	stw	r2,0(sp)
   18c10:	e13ff617 	ldw	r4,-40(fp)
   18c14:	180f883a 	mov	r7,r3
   18c18:	001164c0 	call	1164c <OSFlagPend>
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
   18c1c:	e0bfef17 	ldw	r2,-68(fp)
   18c20:	1000021e 	bne	r2,zero,18c2c <altera_avalon_uart_read+0x1d4>
   18c24:	e0bffe17 	ldw	r2,-8(fp)
   18c28:	103fa41e 	bne	r2,zero,18abc <altera_avalon_uart_read+0x64>
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
   18c2c:	e0bffc17 	ldw	r2,-16(fp)
   18c30:	10800817 	ldw	r2,32(r2)
   18c34:	1009883a 	mov	r4,r2
   18c38:	00146d40 	call	146d4 <OSSemPost>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18c3c:	0005303a 	rdctl	r2,status
   18c40:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18c44:	e0fff917 	ldw	r3,-28(fp)
   18c48:	00bfff84 	movi	r2,-2
   18c4c:	1884703a 	and	r2,r3,r2
   18c50:	1001703a 	wrctl	status,r2
  
  return context;
   18c54:	e0bff917 	ldw	r2,-28(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
   18c58:	e0bff115 	stw	r2,-60(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   18c5c:	e0bffc17 	ldw	r2,-16(fp)
   18c60:	10800117 	ldw	r2,4(r2)
   18c64:	10c02014 	ori	r3,r2,128
   18c68:	e0bffc17 	ldw	r2,-16(fp)
   18c6c:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   18c70:	e0bffc17 	ldw	r2,-16(fp)
   18c74:	10800017 	ldw	r2,0(r2)
   18c78:	10800304 	addi	r2,r2,12
   18c7c:	e0fffc17 	ldw	r3,-16(fp)
   18c80:	18c00117 	ldw	r3,4(r3)
   18c84:	10c00035 	stwio	r3,0(r2)
   18c88:	e0bff117 	ldw	r2,-60(fp)
   18c8c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18c90:	e0bffa17 	ldw	r2,-24(fp)
   18c94:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
   18c98:	e0bfee03 	ldbu	r2,-72(fp)
   18c9c:	10000226 	beq	r2,zero,18ca8 <altera_avalon_uart_read+0x250>
    return -EWOULDBLOCK;
   18ca0:	00bffd44 	movi	r2,-11
   18ca4:	00000106 	br	18cac <altera_avalon_uart_read+0x254>
  }
  else {
    return count;
   18ca8:	e0bfef17 	ldw	r2,-68(fp)
  }
}
   18cac:	e037883a 	mov	sp,fp
   18cb0:	dfc00117 	ldw	ra,4(sp)
   18cb4:	df000017 	ldw	fp,0(sp)
   18cb8:	dec00204 	addi	sp,sp,8
   18cbc:	f800283a 	ret

00018cc0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   18cc0:	defffe04 	addi	sp,sp,-8
   18cc4:	dfc00115 	stw	ra,4(sp)
   18cc8:	df000015 	stw	fp,0(sp)
   18ccc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   18cd0:	008000b4 	movhi	r2,2
   18cd4:	10b3cc04 	addi	r2,r2,-12496
   18cd8:	10800017 	ldw	r2,0(r2)
   18cdc:	10000526 	beq	r2,zero,18cf4 <alt_get_errno+0x34>
   18ce0:	008000b4 	movhi	r2,2
   18ce4:	10b3cc04 	addi	r2,r2,-12496
   18ce8:	10800017 	ldw	r2,0(r2)
   18cec:	103ee83a 	callr	r2
   18cf0:	00000206 	br	18cfc <alt_get_errno+0x3c>
   18cf4:	008000b4 	movhi	r2,2
   18cf8:	10b3fa04 	addi	r2,r2,-12312
}
   18cfc:	e037883a 	mov	sp,fp
   18d00:	dfc00117 	ldw	ra,4(sp)
   18d04:	df000017 	ldw	fp,0(sp)
   18d08:	dec00204 	addi	sp,sp,8
   18d0c:	f800283a 	ret

00018d10 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
   18d10:	deffeb04 	addi	sp,sp,-84
   18d14:	dfc01415 	stw	ra,80(sp)
   18d18:	df001315 	stw	fp,76(sp)
   18d1c:	df001304 	addi	fp,sp,76
   18d20:	e13ffc15 	stw	r4,-16(fp)
   18d24:	e17ffd15 	stw	r5,-12(fp)
   18d28:	e1bffe15 	stw	r6,-8(fp)
   18d2c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
   18d30:	e0bffe17 	ldw	r2,-8(fp)
   18d34:	e0bfee15 	stw	r2,-72(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
   18d38:	e0bfff17 	ldw	r2,-4(fp)
   18d3c:	1090000c 	andi	r2,r2,16384
   18d40:	e0bfef15 	stw	r2,-68(fp)
  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */

  ALT_SEM_PEND (sp->write_lock, 0);
   18d44:	e0bffc17 	ldw	r2,-16(fp)
   18d48:	10800917 	ldw	r2,36(r2)
   18d4c:	e0bff215 	stw	r2,-56(fp)
   18d50:	e03ff30d 	sth	zero,-52(fp)
   18d54:	e0fff30b 	ldhu	r3,-52(fp)
   18d58:	e0bffb44 	addi	r2,fp,-19
   18d5c:	e13ff217 	ldw	r4,-56(fp)
   18d60:	180b883a 	mov	r5,r3
   18d64:	100d883a 	mov	r6,r2
   18d68:	00143000 	call	14300 <OSSemPend>
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
   18d6c:	00005106 	br	18eb4 <altera_avalon_uart_write+0x1a4>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   18d70:	e0bffc17 	ldw	r2,-16(fp)
   18d74:	10800517 	ldw	r2,20(r2)
   18d78:	10800044 	addi	r2,r2,1
   18d7c:	10800fcc 	andi	r2,r2,63
   18d80:	e0bff015 	stw	r2,-64(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
   18d84:	e0bffc17 	ldw	r2,-16(fp)
   18d88:	10c00417 	ldw	r3,16(r2)
   18d8c:	e0bff017 	ldw	r2,-64(fp)
   18d90:	1880371e 	bne	r3,r2,18e70 <altera_avalon_uart_write+0x160>
    {
      if (no_block)
   18d94:	e0bfef17 	ldw	r2,-68(fp)
   18d98:	10000526 	beq	r2,zero,18db0 <altera_avalon_uart_write+0xa0>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
   18d9c:	0018cc00 	call	18cc0 <alt_get_errno>
   18da0:	1007883a 	mov	r3,r2
   18da4:	008002c4 	movi	r2,11
   18da8:	18800015 	stw	r2,0(r3)
        break;
   18dac:	00004306 	br	18ebc <altera_avalon_uart_write+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18db0:	0005303a 	rdctl	r2,status
   18db4:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18db8:	e0fff417 	ldw	r3,-48(fp)
   18dbc:	00bfff84 	movi	r2,-2
   18dc0:	1884703a 	and	r2,r3,r2
   18dc4:	1001703a 	wrctl	status,r2
  
  return context;
   18dc8:	e0bff417 	ldw	r2,-48(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
   18dcc:	e0bff115 	stw	r2,-60(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   18dd0:	e0bffc17 	ldw	r2,-16(fp)
   18dd4:	10800117 	ldw	r2,4(r2)
   18dd8:	10c11014 	ori	r3,r2,1088
   18ddc:	e0bffc17 	ldw	r2,-16(fp)
   18de0:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   18de4:	e0bffc17 	ldw	r2,-16(fp)
   18de8:	10800017 	ldw	r2,0(r2)
   18dec:	10800304 	addi	r2,r2,12
   18df0:	e0fffc17 	ldw	r3,-16(fp)
   18df4:	18c00117 	ldw	r3,4(r3)
   18df8:	10c00035 	stwio	r3,0(r2)
   18dfc:	e0bff117 	ldw	r2,-60(fp)
   18e00:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18e04:	e0bff517 	ldw	r2,-44(fp)
   18e08:	1001703a 	wrctl	status,r2
           * flag set in the interrupt service routine. This avoids wasting CPU
           * cycles waiting in this thread, when we could be doing something
           * more profitable elsewhere.
           */

          ALT_FLAG_PEND (sp->events, 
   18e0c:	e0bffc17 	ldw	r2,-16(fp)
   18e10:	10800717 	ldw	r2,28(r2)
   18e14:	e0bff615 	stw	r2,-40(fp)
   18e18:	00800084 	movi	r2,2
   18e1c:	e0bff70d 	sth	r2,-36(fp)
   18e20:	00bfe0c4 	movi	r2,-125
   18e24:	e0bff785 	stb	r2,-34(fp)
   18e28:	e03ff80d 	sth	zero,-32(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   18e2c:	008000b4 	movhi	r2,2
   18e30:	10b40444 	addi	r2,r2,-12271
   18e34:	10800003 	ldbu	r2,0(r2)
   18e38:	10803fcc 	andi	r2,r2,255
   18e3c:	10000826 	beq	r2,zero,18e60 <altera_avalon_uart_write+0x150>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   18e40:	e17ff70b 	ldhu	r5,-36(fp)
   18e44:	e1bff783 	ldbu	r6,-34(fp)
   18e48:	e0fff80b 	ldhu	r3,-32(fp)
   18e4c:	e0bffb04 	addi	r2,fp,-20
   18e50:	d8800015 	stw	r2,0(sp)
   18e54:	e13ff617 	ldw	r4,-40(fp)
   18e58:	180f883a 	mov	r7,r3
   18e5c:	001164c0 	call	1164c <OSFlagPend>
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
   18e60:	e0bffc17 	ldw	r2,-16(fp)
   18e64:	10c00417 	ldw	r3,16(r2)
   18e68:	e0bff017 	ldw	r2,-64(fp)
   18e6c:	18bfe726 	beq	r3,r2,18e0c <altera_avalon_uart_write+0xfc>
      }
    }

    count--;
   18e70:	e0bfee17 	ldw	r2,-72(fp)
   18e74:	10bfffc4 	addi	r2,r2,-1
   18e78:	e0bfee15 	stw	r2,-72(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
   18e7c:	e0bffc17 	ldw	r2,-16(fp)
   18e80:	10c00517 	ldw	r3,20(r2)
   18e84:	e0bffd17 	ldw	r2,-12(fp)
   18e88:	11000044 	addi	r4,r2,1
   18e8c:	e13ffd15 	stw	r4,-12(fp)
   18e90:	10800003 	ldbu	r2,0(r2)
   18e94:	1009883a 	mov	r4,r2
   18e98:	e0bffc17 	ldw	r2,-16(fp)
   18e9c:	10c5883a 	add	r2,r2,r3
   18ea0:	10801a04 	addi	r2,r2,104
   18ea4:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
   18ea8:	e0bffc17 	ldw	r2,-16(fp)
   18eac:	e0fff017 	ldw	r3,-64(fp)
   18eb0:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
   18eb4:	e0bfee17 	ldw	r2,-72(fp)
   18eb8:	103fad1e 	bne	r2,zero,18d70 <altera_avalon_uart_write+0x60>
  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);
   18ebc:	e0bffc17 	ldw	r2,-16(fp)
   18ec0:	10800917 	ldw	r2,36(r2)
   18ec4:	1009883a 	mov	r4,r2
   18ec8:	00146d40 	call	146d4 <OSSemPost>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18ecc:	0005303a 	rdctl	r2,status
   18ed0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18ed4:	e0fff917 	ldw	r3,-28(fp)
   18ed8:	00bfff84 	movi	r2,-2
   18edc:	1884703a 	and	r2,r3,r2
   18ee0:	1001703a 	wrctl	status,r2
  
  return context;
   18ee4:	e0bff917 	ldw	r2,-28(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
   18ee8:	e0bff115 	stw	r2,-60(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   18eec:	e0bffc17 	ldw	r2,-16(fp)
   18ef0:	10800117 	ldw	r2,4(r2)
   18ef4:	10c11014 	ori	r3,r2,1088
   18ef8:	e0bffc17 	ldw	r2,-16(fp)
   18efc:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   18f00:	e0bffc17 	ldw	r2,-16(fp)
   18f04:	10800017 	ldw	r2,0(r2)
   18f08:	10800304 	addi	r2,r2,12
   18f0c:	e0fffc17 	ldw	r3,-16(fp)
   18f10:	18c00117 	ldw	r3,4(r3)
   18f14:	10c00035 	stwio	r3,0(r2)
   18f18:	e0bff117 	ldw	r2,-60(fp)
   18f1c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18f20:	e0bffa17 	ldw	r2,-24(fp)
   18f24:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
   18f28:	e0fffe17 	ldw	r3,-8(fp)
   18f2c:	e0bfee17 	ldw	r2,-72(fp)
   18f30:	1885c83a 	sub	r2,r3,r2
}
   18f34:	e037883a 	mov	sp,fp
   18f38:	dfc00117 	ldw	ra,4(sp)
   18f3c:	df000017 	ldw	fp,0(sp)
   18f40:	dec00204 	addi	sp,sp,8
   18f44:	f800283a 	ret

00018f48 <epcs_read_status_register>:
#include "alt_types.h"
#include "epcs_commands.h"
#include "altera_avalon_spi.h"

alt_u8 epcs_read_status_register(alt_u32 base)
{
   18f48:	defff904 	addi	sp,sp,-28
   18f4c:	dfc00615 	stw	ra,24(sp)
   18f50:	df000515 	stw	fp,20(sp)
   18f54:	df000504 	addi	fp,sp,20
   18f58:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rdsr = epcs_rdsr;
   18f5c:	00800144 	movi	r2,5
   18f60:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 status;
  alt_avalon_spi_command(
   18f64:	00800044 	movi	r2,1
   18f68:	d8800015 	stw	r2,0(sp)
   18f6c:	e0bffe44 	addi	r2,fp,-7
   18f70:	d8800115 	stw	r2,4(sp)
   18f74:	d8000215 	stw	zero,8(sp)
   18f78:	e13fff17 	ldw	r4,-4(fp)
   18f7c:	000b883a 	mov	r5,zero
   18f80:	01800044 	movi	r6,1
   18f84:	e1fffe04 	addi	r7,fp,-8
   18f88:	001a2040 	call	1a204 <alt_avalon_spi_command>
    1,
    &status,
    0
  );

  return status;
   18f8c:	e0bffe43 	ldbu	r2,-7(fp)
}
   18f90:	e037883a 	mov	sp,fp
   18f94:	dfc00117 	ldw	ra,4(sp)
   18f98:	df000017 	ldw	fp,0(sp)
   18f9c:	dec00204 	addi	sp,sp,8
   18fa0:	f800283a 	ret

00018fa4 <epcs_test_wip>:

static ALT_INLINE int epcs_test_wip(alt_u32 base)
{
   18fa4:	defffd04 	addi	sp,sp,-12
   18fa8:	dfc00215 	stw	ra,8(sp)
   18fac:	df000115 	stw	fp,4(sp)
   18fb0:	df000104 	addi	fp,sp,4
   18fb4:	e13fff15 	stw	r4,-4(fp)
  return epcs_read_status_register(base) & 1;
   18fb8:	e13fff17 	ldw	r4,-4(fp)
   18fbc:	0018f480 	call	18f48 <epcs_read_status_register>
   18fc0:	10803fcc 	andi	r2,r2,255
   18fc4:	1080004c 	andi	r2,r2,1
}
   18fc8:	e037883a 	mov	sp,fp
   18fcc:	dfc00117 	ldw	ra,4(sp)
   18fd0:	df000017 	ldw	fp,0(sp)
   18fd4:	dec00204 	addi	sp,sp,8
   18fd8:	f800283a 	ret

00018fdc <epcs_await_wip_released>:

static ALT_INLINE void epcs_await_wip_released(alt_u32 base)
{
   18fdc:	defffd04 	addi	sp,sp,-12
   18fe0:	dfc00215 	stw	ra,8(sp)
   18fe4:	df000115 	stw	fp,4(sp)
   18fe8:	df000104 	addi	fp,sp,4
   18fec:	e13fff15 	stw	r4,-4(fp)
  /* Wait until the WIP bit goes low. */
  while (epcs_test_wip(base))
   18ff0:	0001883a 	nop
   18ff4:	e13fff17 	ldw	r4,-4(fp)
   18ff8:	0018fa40 	call	18fa4 <epcs_test_wip>
   18ffc:	103ffd1e 	bne	r2,zero,18ff4 <epcs_await_wip_released+0x18>
  {
  }
}
   19000:	e037883a 	mov	sp,fp
   19004:	dfc00117 	ldw	ra,4(sp)
   19008:	df000017 	ldw	fp,0(sp)
   1900c:	dec00204 	addi	sp,sp,8
   19010:	f800283a 	ret

00019014 <epcs_sector_erase>:

void epcs_sector_erase(alt_u32 base, alt_u32 offset, alt_u32 four_bytes_mode)
{
   19014:	defff604 	addi	sp,sp,-40
   19018:	dfc00915 	stw	ra,36(sp)
   1901c:	df000815 	stw	fp,32(sp)
   19020:	df000804 	addi	fp,sp,32
   19024:	e13ffd15 	stw	r4,-12(fp)
   19028:	e17ffe15 	stw	r5,-8(fp)
   1902c:	e1bfff15 	stw	r6,-4(fp)
  alt_u8 se[5];
  alt_u8 len;
  
  if(four_bytes_mode)
   19030:	e0bfff17 	ldw	r2,-4(fp)
   19034:	10001226 	beq	r2,zero,19080 <epcs_sector_erase+0x6c>
  {
      se[0] = epcs_se;  /* Note: Use epcs_se for Micron EPCS256 */
   19038:	00bff604 	movi	r2,-40
   1903c:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 24) & 0xFF;
   19040:	e0bffe17 	ldw	r2,-8(fp)
   19044:	1004d63a 	srli	r2,r2,24
   19048:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 16) & 0xFF;
   1904c:	e0bffe17 	ldw	r2,-8(fp)
   19050:	1004d43a 	srli	r2,r2,16
   19054:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = (offset >> 8) & 0xFF;
   19058:	e0bffe17 	ldw	r2,-8(fp)
   1905c:	1004d23a 	srli	r2,r2,8
   19060:	e0bffc05 	stb	r2,-16(fp)
      se[4] = offset & 0xFF;
   19064:	e0bffe17 	ldw	r2,-8(fp)
   19068:	e0bffc45 	stb	r2,-15(fp)
      len   = 5;
   1906c:	00800144 	movi	r2,5
   19070:	e0bffb05 	stb	r2,-20(fp)
      epcs_enter_4_bytes_mode(base);
   19074:	e13ffd17 	ldw	r4,-12(fp)
   19078:	00194bc0 	call	194bc <epcs_enter_4_bytes_mode>
   1907c:	00000c06 	br	190b0 <epcs_sector_erase+0x9c>
  }
  else
  {
      se[0] = epcs_se;
   19080:	00bff604 	movi	r2,-40
   19084:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 16) & 0xFF;
   19088:	e0bffe17 	ldw	r2,-8(fp)
   1908c:	1004d43a 	srli	r2,r2,16
   19090:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 8) & 0xFF;
   19094:	e0bffe17 	ldw	r2,-8(fp)
   19098:	1004d23a 	srli	r2,r2,8
   1909c:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = offset & 0xFF;
   190a0:	e0bffe17 	ldw	r2,-8(fp)
   190a4:	e0bffc05 	stb	r2,-16(fp)
      len   = 4;
   190a8:	00800104 	movi	r2,4
   190ac:	e0bffb05 	stb	r2,-20(fp)
  }

  /* Execute a WREN instruction */
  epcs_write_enable(base);
   190b0:	e13ffd17 	ldw	r4,-12(fp)
   190b4:	00192000 	call	19200 <epcs_write_enable>

  alt_avalon_spi_command(
   190b8:	e0fffb03 	ldbu	r3,-20(fp)
   190bc:	e0bffb44 	addi	r2,fp,-19
   190c0:	d8000015 	stw	zero,0(sp)
   190c4:	d8000115 	stw	zero,4(sp)
   190c8:	d8000215 	stw	zero,8(sp)
   190cc:	e13ffd17 	ldw	r4,-12(fp)
   190d0:	000b883a 	mov	r5,zero
   190d4:	180d883a 	mov	r6,r3
   190d8:	100f883a 	mov	r7,r2
   190dc:	001a2040 	call	1a204 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
   190e0:	e13ffd17 	ldw	r4,-12(fp)
   190e4:	0018fdc0 	call	18fdc <epcs_await_wip_released>

  if(four_bytes_mode)
   190e8:	e0bfff17 	ldw	r2,-4(fp)
   190ec:	10000226 	beq	r2,zero,190f8 <epcs_sector_erase+0xe4>
  {
    epcs_exit_4_bytes_mode(base);
   190f0:	e13ffd17 	ldw	r4,-12(fp)
   190f4:	00195180 	call	19518 <epcs_exit_4_bytes_mode>
  }
}
   190f8:	e037883a 	mov	sp,fp
   190fc:	dfc00117 	ldw	ra,4(sp)
   19100:	df000017 	ldw	fp,0(sp)
   19104:	dec00204 	addi	sp,sp,8
   19108:	f800283a 	ret

0001910c <epcs_read_buffer>:

alt_32 epcs_read_buffer(alt_u32 base, int offset, alt_u8 *dest_addr, int length,
                        alt_u32 four_bytes_mode)
{
   1910c:	defff404 	addi	sp,sp,-48
   19110:	dfc00b15 	stw	ra,44(sp)
   19114:	df000a15 	stw	fp,40(sp)
   19118:	df000a04 	addi	fp,sp,40
   1911c:	e13ffc15 	stw	r4,-16(fp)
   19120:	e17ffd15 	stw	r5,-12(fp)
   19124:	e1bffe15 	stw	r6,-8(fp)
   19128:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 read_command[5];
  alt_u32 cmd_len;

  read_command[0] = epcs_read;
   1912c:	008000c4 	movi	r2,3
   19130:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
   19134:	e0800217 	ldw	r2,8(fp)
   19138:	10001026 	beq	r2,zero,1917c <epcs_read_buffer+0x70>
  {
        read_command[1] = (offset >> 24) & 0xFF;
   1913c:	e0bffd17 	ldw	r2,-12(fp)
   19140:	1004d63a 	srli	r2,r2,24
   19144:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 16) & 0xFF;
   19148:	e0bffd17 	ldw	r2,-12(fp)
   1914c:	1005d43a 	srai	r2,r2,16
   19150:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = (offset >> 8) & 0xFF;
   19154:	e0bffd17 	ldw	r2,-12(fp)
   19158:	1005d23a 	srai	r2,r2,8
   1915c:	e0bffac5 	stb	r2,-21(fp)
        read_command[4] = offset & 0xFF;
   19160:	e0bffd17 	ldw	r2,-12(fp)
   19164:	e0bffb05 	stb	r2,-20(fp)
        cmd_len = 5;
   19168:	00800144 	movi	r2,5
   1916c:	e0bff915 	stw	r2,-28(fp)
        epcs_enter_4_bytes_mode(base);
   19170:	e13ffc17 	ldw	r4,-16(fp)
   19174:	00194bc0 	call	194bc <epcs_enter_4_bytes_mode>
   19178:	00000a06 	br	191a4 <epcs_read_buffer+0x98>
  }
  else
  {
        read_command[1] = (offset >> 16) & 0xFF;
   1917c:	e0bffd17 	ldw	r2,-12(fp)
   19180:	1005d43a 	srai	r2,r2,16
   19184:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 8) & 0xFF;
   19188:	e0bffd17 	ldw	r2,-12(fp)
   1918c:	1005d23a 	srai	r2,r2,8
   19190:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = offset & 0xFF;
   19194:	e0bffd17 	ldw	r2,-12(fp)
   19198:	e0bffac5 	stb	r2,-21(fp)
        cmd_len = 4;
   1919c:	00800104 	movi	r2,4
   191a0:	e0bff915 	stw	r2,-28(fp)
  }

  epcs_await_wip_released(base);
   191a4:	e13ffc17 	ldw	r4,-16(fp)
   191a8:	0018fdc0 	call	18fdc <epcs_await_wip_released>

  alt_avalon_spi_command(
   191ac:	e0bfff17 	ldw	r2,-4(fp)
   191b0:	e0fffa04 	addi	r3,fp,-24
   191b4:	d8800015 	stw	r2,0(sp)
   191b8:	e0bffe17 	ldw	r2,-8(fp)
   191bc:	d8800115 	stw	r2,4(sp)
   191c0:	d8000215 	stw	zero,8(sp)
   191c4:	e13ffc17 	ldw	r4,-16(fp)
   191c8:	000b883a 	mov	r5,zero
   191cc:	e1bff917 	ldw	r6,-28(fp)
   191d0:	180f883a 	mov	r7,r3
   191d4:	001a2040 	call	1a204 <alt_avalon_spi_command>
    length,
    (alt_u8*)dest_addr,
    0
  );

  if(four_bytes_mode)
   191d8:	e0800217 	ldw	r2,8(fp)
   191dc:	10000226 	beq	r2,zero,191e8 <epcs_read_buffer+0xdc>
  {
    epcs_exit_4_bytes_mode(base);
   191e0:	e13ffc17 	ldw	r4,-16(fp)
   191e4:	00195180 	call	19518 <epcs_exit_4_bytes_mode>
  }

  return length;
   191e8:	e0bfff17 	ldw	r2,-4(fp)
}
   191ec:	e037883a 	mov	sp,fp
   191f0:	dfc00117 	ldw	ra,4(sp)
   191f4:	df000017 	ldw	fp,0(sp)
   191f8:	dec00204 	addi	sp,sp,8
   191fc:	f800283a 	ret

00019200 <epcs_write_enable>:

void epcs_write_enable(alt_u32 base)
{
   19200:	defff904 	addi	sp,sp,-28
   19204:	dfc00615 	stw	ra,24(sp)
   19208:	df000515 	stw	fp,20(sp)
   1920c:	df000504 	addi	fp,sp,20
   19210:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 wren = epcs_wren;
   19214:	00800184 	movi	r2,6
   19218:	e0bffe05 	stb	r2,-8(fp)
  alt_avalon_spi_command(
   1921c:	d8000015 	stw	zero,0(sp)
   19220:	d8000115 	stw	zero,4(sp)
   19224:	d8000215 	stw	zero,8(sp)
   19228:	e13fff17 	ldw	r4,-4(fp)
   1922c:	000b883a 	mov	r5,zero
   19230:	01800044 	movi	r6,1
   19234:	e1fffe04 	addi	r7,fp,-8
   19238:	001a2040 	call	1a204 <alt_avalon_spi_command>
    &wren,
    0,
    (alt_u8*)0,
    0
  );
}
   1923c:	e037883a 	mov	sp,fp
   19240:	dfc00117 	ldw	ra,4(sp)
   19244:	df000017 	ldw	fp,0(sp)
   19248:	dec00204 	addi	sp,sp,8
   1924c:	f800283a 	ret

00019250 <epcs_write_status_register>:

void epcs_write_status_register(alt_u32 base, alt_u8 value)
{
   19250:	defff804 	addi	sp,sp,-32
   19254:	dfc00715 	stw	ra,28(sp)
   19258:	df000615 	stw	fp,24(sp)
   1925c:	df000604 	addi	fp,sp,24
   19260:	e13ffe15 	stw	r4,-8(fp)
   19264:	2805883a 	mov	r2,r5
   19268:	e0bfff05 	stb	r2,-4(fp)
  alt_u8 wrsr[2];
  
  wrsr[0] = epcs_wrsr;
   1926c:	00800044 	movi	r2,1
   19270:	e0bffd05 	stb	r2,-12(fp)
  wrsr[1] = value;
   19274:	e0bfff03 	ldbu	r2,-4(fp)
   19278:	e0bffd45 	stb	r2,-11(fp)

  alt_avalon_spi_command(
   1927c:	d8000015 	stw	zero,0(sp)
   19280:	d8000115 	stw	zero,4(sp)
   19284:	d8000215 	stw	zero,8(sp)
   19288:	e13ffe17 	ldw	r4,-8(fp)
   1928c:	000b883a 	mov	r5,zero
   19290:	01800084 	movi	r6,2
   19294:	e1fffd04 	addi	r7,fp,-12
   19298:	001a2040 	call	1a204 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
   1929c:	e13ffe17 	ldw	r4,-8(fp)
   192a0:	0018fdc0 	call	18fdc <epcs_await_wip_released>
}
   192a4:	e037883a 	mov	sp,fp
   192a8:	dfc00117 	ldw	ra,4(sp)
   192ac:	df000017 	ldw	fp,0(sp)
   192b0:	dec00204 	addi	sp,sp,8
   192b4:	f800283a 	ret

000192b8 <epcs_write_buffer>:

/* Write a partial or full page, assuming that page has been erased */
alt_32 epcs_write_buffer(alt_u32 base, int offset, const alt_u8* src_addr, 
                         int length, alt_u32 four_bytes_mode)
{
   192b8:	defff404 	addi	sp,sp,-48
   192bc:	dfc00b15 	stw	ra,44(sp)
   192c0:	df000a15 	stw	fp,40(sp)
   192c4:	df000a04 	addi	fp,sp,40
   192c8:	e13ffc15 	stw	r4,-16(fp)
   192cc:	e17ffd15 	stw	r5,-12(fp)
   192d0:	e1bffe15 	stw	r6,-8(fp)
   192d4:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 pp[5];
  alt_u32 cmd_len;
  
  pp[0] = epcs_pp;
   192d8:	00800084 	movi	r2,2
   192dc:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
   192e0:	e0800217 	ldw	r2,8(fp)
   192e4:	10001026 	beq	r2,zero,19328 <epcs_write_buffer+0x70>
  {
      pp[1] = (offset >> 24) & 0xFF;
   192e8:	e0bffd17 	ldw	r2,-12(fp)
   192ec:	1004d63a 	srli	r2,r2,24
   192f0:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 16) & 0xFF;
   192f4:	e0bffd17 	ldw	r2,-12(fp)
   192f8:	1005d43a 	srai	r2,r2,16
   192fc:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = (offset >> 8) & 0xFF;
   19300:	e0bffd17 	ldw	r2,-12(fp)
   19304:	1005d23a 	srai	r2,r2,8
   19308:	e0bffac5 	stb	r2,-21(fp)
      pp[4] = offset & 0xFF;
   1930c:	e0bffd17 	ldw	r2,-12(fp)
   19310:	e0bffb05 	stb	r2,-20(fp)
      cmd_len = 5;
   19314:	00800144 	movi	r2,5
   19318:	e0bff915 	stw	r2,-28(fp)
      epcs_enter_4_bytes_mode(base);
   1931c:	e13ffc17 	ldw	r4,-16(fp)
   19320:	00194bc0 	call	194bc <epcs_enter_4_bytes_mode>
   19324:	00000a06 	br	19350 <epcs_write_buffer+0x98>
  }
  else
  {
      pp[1] = (offset >> 16) & 0xFF;
   19328:	e0bffd17 	ldw	r2,-12(fp)
   1932c:	1005d43a 	srai	r2,r2,16
   19330:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 8) & 0xFF;
   19334:	e0bffd17 	ldw	r2,-12(fp)
   19338:	1005d23a 	srai	r2,r2,8
   1933c:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = offset & 0xFF;
   19340:	e0bffd17 	ldw	r2,-12(fp)
   19344:	e0bffac5 	stb	r2,-21(fp)
      cmd_len = 4;
   19348:	00800104 	movi	r2,4
   1934c:	e0bff915 	stw	r2,-28(fp)
  }

  /* First, WREN */
  epcs_write_enable(base);
   19350:	e13ffc17 	ldw	r4,-16(fp)
   19354:	00192000 	call	19200 <epcs_write_enable>

  /* Send the PP command */
  alt_avalon_spi_command(
   19358:	e0fffa04 	addi	r3,fp,-24
   1935c:	d8000015 	stw	zero,0(sp)
   19360:	d8000115 	stw	zero,4(sp)
   19364:	00800044 	movi	r2,1
   19368:	d8800215 	stw	r2,8(sp)
   1936c:	e13ffc17 	ldw	r4,-16(fp)
   19370:	000b883a 	mov	r5,zero
   19374:	e1bff917 	ldw	r6,-28(fp)
   19378:	180f883a 	mov	r7,r3
   1937c:	001a2040 	call	1a204 <alt_avalon_spi_command>
    (alt_u8*)0,
    ALT_AVALON_SPI_COMMAND_MERGE
  );

  /* Send the user's buffer */
  alt_avalon_spi_command(
   19380:	e0bfff17 	ldw	r2,-4(fp)
   19384:	d8000015 	stw	zero,0(sp)
   19388:	d8000115 	stw	zero,4(sp)
   1938c:	d8000215 	stw	zero,8(sp)
   19390:	e13ffc17 	ldw	r4,-16(fp)
   19394:	000b883a 	mov	r5,zero
   19398:	100d883a 	mov	r6,r2
   1939c:	e1fffe17 	ldw	r7,-8(fp)
   193a0:	001a2040 	call	1a204 <alt_avalon_spi_command>
   * if the user's going to go off and ignore the flash for
   * a while, its writes could occur in parallel with user code
   * execution.  Unfortunately, I have to guard all reads/writes
   * with wip-tests, to make that happen.
   */
  epcs_await_wip_released(base);
   193a4:	e13ffc17 	ldw	r4,-16(fp)
   193a8:	0018fdc0 	call	18fdc <epcs_await_wip_released>

  if(four_bytes_mode)
   193ac:	e0800217 	ldw	r2,8(fp)
   193b0:	10000226 	beq	r2,zero,193bc <epcs_write_buffer+0x104>
  {
    epcs_exit_4_bytes_mode(base);
   193b4:	e13ffc17 	ldw	r4,-16(fp)
   193b8:	00195180 	call	19518 <epcs_exit_4_bytes_mode>
  }

  return length;
   193bc:	e0bfff17 	ldw	r2,-4(fp)
}
   193c0:	e037883a 	mov	sp,fp
   193c4:	dfc00117 	ldw	ra,4(sp)
   193c8:	df000017 	ldw	fp,0(sp)
   193cc:	dec00204 	addi	sp,sp,8
   193d0:	f800283a 	ret

000193d4 <epcs_read_electronic_signature>:


alt_u8 epcs_read_electronic_signature(alt_u32 base)
{
   193d4:	defff804 	addi	sp,sp,-32
   193d8:	dfc00715 	stw	ra,28(sp)
   193dc:	df000615 	stw	fp,24(sp)
   193e0:	df000604 	addi	fp,sp,24
   193e4:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 res_cmd[] = {epcs_res, 0, 0, 0};
   193e8:	00bfeac4 	movi	r2,-85
   193ec:	e0bffd05 	stb	r2,-12(fp)
   193f0:	e03ffd45 	stb	zero,-11(fp)
   193f4:	e03ffd85 	stb	zero,-10(fp)
   193f8:	e03ffdc5 	stb	zero,-9(fp)
  alt_u8 res;

  alt_avalon_spi_command(
   193fc:	00800044 	movi	r2,1
   19400:	d8800015 	stw	r2,0(sp)
   19404:	e0bffe04 	addi	r2,fp,-8
   19408:	d8800115 	stw	r2,4(sp)
   1940c:	d8000215 	stw	zero,8(sp)
   19410:	e13fff17 	ldw	r4,-4(fp)
   19414:	000b883a 	mov	r5,zero
   19418:	01800104 	movi	r6,4
   1941c:	e1fffd04 	addi	r7,fp,-12
   19420:	001a2040 	call	1a204 <alt_avalon_spi_command>
    1,
    &res,
    0
  );

  return res;
   19424:	e0bffe03 	ldbu	r2,-8(fp)
}
   19428:	e037883a 	mov	sp,fp
   1942c:	dfc00117 	ldw	ra,4(sp)
   19430:	df000017 	ldw	fp,0(sp)
   19434:	dec00204 	addi	sp,sp,8
   19438:	f800283a 	ret

0001943c <epcs_read_device_id>:

alt_u32 epcs_read_device_id(alt_u32 base)
{
   1943c:	defff904 	addi	sp,sp,-28
   19440:	dfc00615 	stw	ra,24(sp)
   19444:	df000515 	stw	fp,20(sp)
   19448:	df000504 	addi	fp,sp,20
   1944c:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rd_id_cmd[] = {epcs_rdid};
   19450:	00bfe7c4 	movi	r2,-97
   19454:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 id[3];

  alt_avalon_spi_command(
   19458:	008000c4 	movi	r2,3
   1945c:	d8800015 	stw	r2,0(sp)
   19460:	e0bffe44 	addi	r2,fp,-7
   19464:	d8800115 	stw	r2,4(sp)
   19468:	d8000215 	stw	zero,8(sp)
   1946c:	e13fff17 	ldw	r4,-4(fp)
   19470:	000b883a 	mov	r5,zero
   19474:	01800044 	movi	r6,1
   19478:	e1fffe04 	addi	r7,fp,-8
   1947c:	001a2040 	call	1a204 <alt_avalon_spi_command>
    3,
    id,
    0
  );

  return (alt_u32) ((id[0] << 16) | (id[1] << 8) | id[2]);
   19480:	e0bffe43 	ldbu	r2,-7(fp)
   19484:	10803fcc 	andi	r2,r2,255
   19488:	1006943a 	slli	r3,r2,16
   1948c:	e0bffe83 	ldbu	r2,-6(fp)
   19490:	10803fcc 	andi	r2,r2,255
   19494:	1004923a 	slli	r2,r2,8
   19498:	1886b03a 	or	r3,r3,r2
   1949c:	e0bffec3 	ldbu	r2,-5(fp)
   194a0:	10803fcc 	andi	r2,r2,255
   194a4:	1884b03a 	or	r2,r3,r2
}
   194a8:	e037883a 	mov	sp,fp
   194ac:	dfc00117 	ldw	ra,4(sp)
   194b0:	df000017 	ldw	fp,0(sp)
   194b4:	dec00204 	addi	sp,sp,8
   194b8:	f800283a 	ret

000194bc <epcs_enter_4_bytes_mode>:

void epcs_enter_4_bytes_mode(alt_u32 base)
{
   194bc:	defff904 	addi	sp,sp,-28
   194c0:	dfc00615 	stw	ra,24(sp)
   194c4:	df000515 	stw	fp,20(sp)
   194c8:	df000504 	addi	fp,sp,20
   194cc:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 en4b_cmd = epcs_en4b;
   194d0:	00bfedc4 	movi	r2,-73
   194d4:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
   194d8:	e13fff17 	ldw	r4,-4(fp)
   194dc:	00192000 	call	19200 <epcs_write_enable>

  alt_avalon_spi_command(
   194e0:	d8000015 	stw	zero,0(sp)
   194e4:	d8000115 	stw	zero,4(sp)
   194e8:	d8000215 	stw	zero,8(sp)
   194ec:	e13fff17 	ldw	r4,-4(fp)
   194f0:	000b883a 	mov	r5,zero
   194f4:	01800044 	movi	r6,1
   194f8:	e1fffe04 	addi	r7,fp,-8
   194fc:	001a2040 	call	1a204 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  return;
   19500:	0001883a 	nop
}
   19504:	e037883a 	mov	sp,fp
   19508:	dfc00117 	ldw	ra,4(sp)
   1950c:	df000017 	ldw	fp,0(sp)
   19510:	dec00204 	addi	sp,sp,8
   19514:	f800283a 	ret

00019518 <epcs_exit_4_bytes_mode>:

void epcs_exit_4_bytes_mode(alt_u32 base)
{
   19518:	defff904 	addi	sp,sp,-28
   1951c:	dfc00615 	stw	ra,24(sp)
   19520:	df000515 	stw	fp,20(sp)
   19524:	df000504 	addi	fp,sp,20
   19528:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 exit4b_cmd = epcs_dis4b;
   1952c:	00bffa44 	movi	r2,-23
   19530:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
   19534:	e13fff17 	ldw	r4,-4(fp)
   19538:	00192000 	call	19200 <epcs_write_enable>

  alt_avalon_spi_command(
   1953c:	d8000015 	stw	zero,0(sp)
   19540:	d8000115 	stw	zero,4(sp)
   19544:	d8000215 	stw	zero,8(sp)
   19548:	e13fff17 	ldw	r4,-4(fp)
   1954c:	000b883a 	mov	r5,zero
   19550:	01800044 	movi	r6,1
   19554:	e1fffe04 	addi	r7,fp,-8
   19558:	001a2040 	call	1a204 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  return;
   1955c:	0001883a 	nop
}
   19560:	e037883a 	mov	sp,fp
   19564:	dfc00117 	ldw	ra,4(sp)
   19568:	df000017 	ldw	fp,0(sp)
   1956c:	dec00204 	addi	sp,sp,8
   19570:	f800283a 	ret

00019574 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   19574:	defff504 	addi	sp,sp,-44
   19578:	df000a15 	stw	fp,40(sp)
   1957c:	df000a04 	addi	fp,sp,40
   19580:	e13ffc15 	stw	r4,-16(fp)
   19584:	e17ffd15 	stw	r5,-12(fp)
   19588:	e1bffe15 	stw	r6,-8(fp)
   1958c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   19590:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   19594:	008000b4 	movhi	r2,2
   19598:	10b41804 	addi	r2,r2,-12192
   1959c:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   195a0:	10003f26 	beq	r2,zero,196a0 <alt_alarm_start+0x12c>
  {
    if (alarm)
   195a4:	e0bffc17 	ldw	r2,-16(fp)
   195a8:	10003b26 	beq	r2,zero,19698 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   195ac:	e0bffc17 	ldw	r2,-16(fp)
   195b0:	e0fffe17 	ldw	r3,-8(fp)
   195b4:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   195b8:	e0bffc17 	ldw	r2,-16(fp)
   195bc:	e0ffff17 	ldw	r3,-4(fp)
   195c0:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   195c4:	0005303a 	rdctl	r2,status
   195c8:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   195cc:	e0fff817 	ldw	r3,-32(fp)
   195d0:	00bfff84 	movi	r2,-2
   195d4:	1884703a 	and	r2,r3,r2
   195d8:	1001703a 	wrctl	status,r2
  
  return context;
   195dc:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   195e0:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   195e4:	008000b4 	movhi	r2,2
   195e8:	10b41904 	addi	r2,r2,-12188
   195ec:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   195f0:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   195f4:	e0fffd17 	ldw	r3,-12(fp)
   195f8:	e0bff617 	ldw	r2,-40(fp)
   195fc:	1885883a 	add	r2,r3,r2
   19600:	10c00044 	addi	r3,r2,1
   19604:	e0bffc17 	ldw	r2,-16(fp)
   19608:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   1960c:	e0bffc17 	ldw	r2,-16(fp)
   19610:	10c00217 	ldw	r3,8(r2)
   19614:	e0bff617 	ldw	r2,-40(fp)
   19618:	1880042e 	bgeu	r3,r2,1962c <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   1961c:	e0bffc17 	ldw	r2,-16(fp)
   19620:	00c00044 	movi	r3,1
   19624:	10c00405 	stb	r3,16(r2)
   19628:	00000206 	br	19634 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   1962c:	e0bffc17 	ldw	r2,-16(fp)
   19630:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   19634:	e0fffc17 	ldw	r3,-16(fp)
   19638:	008000b4 	movhi	r2,2
   1963c:	10b3f004 	addi	r2,r2,-12352
   19640:	e0bff915 	stw	r2,-28(fp)
   19644:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   19648:	e0bffa17 	ldw	r2,-24(fp)
   1964c:	e0fff917 	ldw	r3,-28(fp)
   19650:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   19654:	e0bff917 	ldw	r2,-28(fp)
   19658:	10c00017 	ldw	r3,0(r2)
   1965c:	e0bffa17 	ldw	r2,-24(fp)
   19660:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   19664:	e0bff917 	ldw	r2,-28(fp)
   19668:	10800017 	ldw	r2,0(r2)
   1966c:	e0fffa17 	ldw	r3,-24(fp)
   19670:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   19674:	e0bff917 	ldw	r2,-28(fp)
   19678:	e0fffa17 	ldw	r3,-24(fp)
   1967c:	10c00015 	stw	r3,0(r2)
   19680:	e0bff717 	ldw	r2,-36(fp)
   19684:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19688:	e0bffb17 	ldw	r2,-20(fp)
   1968c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   19690:	0005883a 	mov	r2,zero
   19694:	00000306 	br	196a4 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   19698:	00bffa84 	movi	r2,-22
   1969c:	00000106 	br	196a4 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   196a0:	00bfde84 	movi	r2,-134
  }
}
   196a4:	e037883a 	mov	sp,fp
   196a8:	df000017 	ldw	fp,0(sp)
   196ac:	dec00104 	addi	sp,sp,4
   196b0:	f800283a 	ret

000196b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   196b4:	defffe04 	addi	sp,sp,-8
   196b8:	dfc00115 	stw	ra,4(sp)
   196bc:	df000015 	stw	fp,0(sp)
   196c0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   196c4:	008000b4 	movhi	r2,2
   196c8:	10b3cc04 	addi	r2,r2,-12496
   196cc:	10800017 	ldw	r2,0(r2)
   196d0:	10000526 	beq	r2,zero,196e8 <alt_get_errno+0x34>
   196d4:	008000b4 	movhi	r2,2
   196d8:	10b3cc04 	addi	r2,r2,-12496
   196dc:	10800017 	ldw	r2,0(r2)
   196e0:	103ee83a 	callr	r2
   196e4:	00000206 	br	196f0 <alt_get_errno+0x3c>
   196e8:	008000b4 	movhi	r2,2
   196ec:	10b3fa04 	addi	r2,r2,-12312
}
   196f0:	e037883a 	mov	sp,fp
   196f4:	dfc00117 	ldw	ra,4(sp)
   196f8:	df000017 	ldw	fp,0(sp)
   196fc:	dec00204 	addi	sp,sp,8
   19700:	f800283a 	ret

00019704 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   19704:	defffa04 	addi	sp,sp,-24
   19708:	dfc00515 	stw	ra,20(sp)
   1970c:	df000415 	stw	fp,16(sp)
   19710:	df000404 	addi	fp,sp,16
   19714:	e13ffe15 	stw	r4,-8(fp)
   19718:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   1971c:	e0bffe17 	ldw	r2,-8(fp)
   19720:	10000326 	beq	r2,zero,19730 <alt_dev_llist_insert+0x2c>
   19724:	e0bffe17 	ldw	r2,-8(fp)
   19728:	10800217 	ldw	r2,8(r2)
   1972c:	1000061e 	bne	r2,zero,19748 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   19730:	00196b40 	call	196b4 <alt_get_errno>
   19734:	1007883a 	mov	r3,r2
   19738:	00800584 	movi	r2,22
   1973c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   19740:	00bffa84 	movi	r2,-22
   19744:	00001306 	br	19794 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   19748:	e0bffe17 	ldw	r2,-8(fp)
   1974c:	e0ffff17 	ldw	r3,-4(fp)
   19750:	e0fffc15 	stw	r3,-16(fp)
   19754:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   19758:	e0bffd17 	ldw	r2,-12(fp)
   1975c:	e0fffc17 	ldw	r3,-16(fp)
   19760:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   19764:	e0bffc17 	ldw	r2,-16(fp)
   19768:	10c00017 	ldw	r3,0(r2)
   1976c:	e0bffd17 	ldw	r2,-12(fp)
   19770:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   19774:	e0bffc17 	ldw	r2,-16(fp)
   19778:	10800017 	ldw	r2,0(r2)
   1977c:	e0fffd17 	ldw	r3,-12(fp)
   19780:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   19784:	e0bffc17 	ldw	r2,-16(fp)
   19788:	e0fffd17 	ldw	r3,-12(fp)
   1978c:	10c00015 	stw	r3,0(r2)

  return 0;  
   19790:	0005883a 	mov	r2,zero
}
   19794:	e037883a 	mov	sp,fp
   19798:	dfc00117 	ldw	ra,4(sp)
   1979c:	df000017 	ldw	fp,0(sp)
   197a0:	dec00204 	addi	sp,sp,8
   197a4:	f800283a 	ret

000197a8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   197a8:	defffd04 	addi	sp,sp,-12
   197ac:	dfc00215 	stw	ra,8(sp)
   197b0:	df000115 	stw	fp,4(sp)
   197b4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   197b8:	008000b4 	movhi	r2,2
   197bc:	10aa9a04 	addi	r2,r2,-21912
   197c0:	e0bfff15 	stw	r2,-4(fp)
   197c4:	00000606 	br	197e0 <_do_ctors+0x38>
        (*ctor) (); 
   197c8:	e0bfff17 	ldw	r2,-4(fp)
   197cc:	10800017 	ldw	r2,0(r2)
   197d0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   197d4:	e0bfff17 	ldw	r2,-4(fp)
   197d8:	10bfff04 	addi	r2,r2,-4
   197dc:	e0bfff15 	stw	r2,-4(fp)
   197e0:	e0ffff17 	ldw	r3,-4(fp)
   197e4:	008000b4 	movhi	r2,2
   197e8:	10aa9b04 	addi	r2,r2,-21908
   197ec:	18bff62e 	bgeu	r3,r2,197c8 <_do_ctors+0x20>
        (*ctor) (); 
}
   197f0:	e037883a 	mov	sp,fp
   197f4:	dfc00117 	ldw	ra,4(sp)
   197f8:	df000017 	ldw	fp,0(sp)
   197fc:	dec00204 	addi	sp,sp,8
   19800:	f800283a 	ret

00019804 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   19804:	defffd04 	addi	sp,sp,-12
   19808:	dfc00215 	stw	ra,8(sp)
   1980c:	df000115 	stw	fp,4(sp)
   19810:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   19814:	008000b4 	movhi	r2,2
   19818:	10aa9a04 	addi	r2,r2,-21912
   1981c:	e0bfff15 	stw	r2,-4(fp)
   19820:	00000606 	br	1983c <_do_dtors+0x38>
        (*dtor) (); 
   19824:	e0bfff17 	ldw	r2,-4(fp)
   19828:	10800017 	ldw	r2,0(r2)
   1982c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   19830:	e0bfff17 	ldw	r2,-4(fp)
   19834:	10bfff04 	addi	r2,r2,-4
   19838:	e0bfff15 	stw	r2,-4(fp)
   1983c:	e0ffff17 	ldw	r3,-4(fp)
   19840:	008000b4 	movhi	r2,2
   19844:	10aa9b04 	addi	r2,r2,-21908
   19848:	18bff62e 	bgeu	r3,r2,19824 <_do_dtors+0x20>
        (*dtor) (); 
}
   1984c:	e037883a 	mov	sp,fp
   19850:	dfc00117 	ldw	ra,4(sp)
   19854:	df000017 	ldw	fp,0(sp)
   19858:	dec00204 	addi	sp,sp,8
   1985c:	f800283a 	ret

00019860 <alt_flash_open_dev>:
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
   19860:	defffc04 	addi	sp,sp,-16
   19864:	dfc00315 	stw	ra,12(sp)
   19868:	df000215 	stw	fp,8(sp)
   1986c:	df000204 	addi	fp,sp,8
   19870:	e13fff15 	stw	r4,-4(fp)
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
   19874:	e13fff17 	ldw	r4,-4(fp)
   19878:	d1602d04 	addi	r5,gp,-32588
   1987c:	001a4080 	call	1a408 <alt_find_dev>
   19880:	e0bffe15 	stw	r2,-8(fp)

  if ((dev) && dev->open)
   19884:	e0bffe17 	ldw	r2,-8(fp)
   19888:	10000926 	beq	r2,zero,198b0 <alt_flash_open_dev+0x50>
   1988c:	e0bffe17 	ldw	r2,-8(fp)
   19890:	10800317 	ldw	r2,12(r2)
   19894:	10000626 	beq	r2,zero,198b0 <alt_flash_open_dev+0x50>
  {
    return dev->open(dev, name);
   19898:	e0bffe17 	ldw	r2,-8(fp)
   1989c:	10800317 	ldw	r2,12(r2)
   198a0:	e13ffe17 	ldw	r4,-8(fp)
   198a4:	e17fff17 	ldw	r5,-4(fp)
   198a8:	103ee83a 	callr	r2
   198ac:	00000106 	br	198b4 <alt_flash_open_dev+0x54>
  }

  return dev;
   198b0:	e0bffe17 	ldw	r2,-8(fp)
}
   198b4:	e037883a 	mov	sp,fp
   198b8:	dfc00117 	ldw	ra,4(sp)
   198bc:	df000017 	ldw	fp,0(sp)
   198c0:	dec00204 	addi	sp,sp,8
   198c4:	f800283a 	ret

000198c8 <alt_flash_close_dev>:

void alt_flash_close_dev(alt_flash_fd* fd)
{
   198c8:	defffd04 	addi	sp,sp,-12
   198cc:	dfc00215 	stw	ra,8(sp)
   198d0:	df000115 	stw	fp,4(sp)
   198d4:	df000104 	addi	fp,sp,4
   198d8:	e13fff15 	stw	r4,-4(fp)
  if (fd && fd->close)
   198dc:	e0bfff17 	ldw	r2,-4(fp)
   198e0:	10000726 	beq	r2,zero,19900 <alt_flash_close_dev+0x38>
   198e4:	e0bfff17 	ldw	r2,-4(fp)
   198e8:	10800417 	ldw	r2,16(r2)
   198ec:	10000426 	beq	r2,zero,19900 <alt_flash_close_dev+0x38>
  {
    fd->close(fd);
   198f0:	e0bfff17 	ldw	r2,-4(fp)
   198f4:	10800417 	ldw	r2,16(r2)
   198f8:	e13fff17 	ldw	r4,-4(fp)
   198fc:	103ee83a 	callr	r2
  }
  return;
   19900:	0001883a 	nop
}
   19904:	e037883a 	mov	sp,fp
   19908:	dfc00117 	ldw	ra,4(sp)
   1990c:	df000017 	ldw	fp,0(sp)
   19910:	dec00204 	addi	sp,sp,8
   19914:	f800283a 	ret

00019918 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   19918:	defff804 	addi	sp,sp,-32
   1991c:	dfc00715 	stw	ra,28(sp)
   19920:	df000615 	stw	fp,24(sp)
   19924:	dc000515 	stw	r16,20(sp)
   19928:	df000604 	addi	fp,sp,24
   1992c:	e13ffb15 	stw	r4,-20(fp)
   19930:	e17ffc15 	stw	r5,-16(fp)
   19934:	e1bffd15 	stw	r6,-12(fp)
   19938:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   1993c:	e13ffc17 	ldw	r4,-16(fp)
   19940:	e17ffd17 	ldw	r5,-12(fp)
   19944:	e1bffe17 	ldw	r6,-8(fp)
   19948:	0019bb40 	call	19bb4 <open>
   1994c:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   19950:	e0bffa17 	ldw	r2,-24(fp)
   19954:	10002216 	blt	r2,zero,199e0 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   19958:	040000b4 	movhi	r16,2
   1995c:	842e0f04 	addi	r16,r16,-18372
   19960:	e0bffa17 	ldw	r2,-24(fp)
   19964:	1009883a 	mov	r4,r2
   19968:	01400304 	movi	r5,12
   1996c:	000129c0 	call	129c <__mulsi3>
   19970:	8085883a 	add	r2,r16,r2
   19974:	10c00017 	ldw	r3,0(r2)
   19978:	e0bffb17 	ldw	r2,-20(fp)
   1997c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   19980:	040000b4 	movhi	r16,2
   19984:	842e0f04 	addi	r16,r16,-18372
   19988:	e0bffa17 	ldw	r2,-24(fp)
   1998c:	1009883a 	mov	r4,r2
   19990:	01400304 	movi	r5,12
   19994:	000129c0 	call	129c <__mulsi3>
   19998:	10800104 	addi	r2,r2,4
   1999c:	8085883a 	add	r2,r16,r2
   199a0:	10c00017 	ldw	r3,0(r2)
   199a4:	e0bffb17 	ldw	r2,-20(fp)
   199a8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   199ac:	040000b4 	movhi	r16,2
   199b0:	842e0f04 	addi	r16,r16,-18372
   199b4:	e0bffa17 	ldw	r2,-24(fp)
   199b8:	1009883a 	mov	r4,r2
   199bc:	01400304 	movi	r5,12
   199c0:	000129c0 	call	129c <__mulsi3>
   199c4:	10800204 	addi	r2,r2,8
   199c8:	8085883a 	add	r2,r16,r2
   199cc:	10c00017 	ldw	r3,0(r2)
   199d0:	e0bffb17 	ldw	r2,-20(fp)
   199d4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   199d8:	e13ffa17 	ldw	r4,-24(fp)
   199dc:	000e6340 	call	e634 <alt_release_fd>
  }
} 
   199e0:	e6ffff04 	addi	sp,fp,-4
   199e4:	dfc00217 	ldw	ra,8(sp)
   199e8:	df000117 	ldw	fp,4(sp)
   199ec:	dc000017 	ldw	r16,0(sp)
   199f0:	dec00304 	addi	sp,sp,12
   199f4:	f800283a 	ret

000199f8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   199f8:	defffb04 	addi	sp,sp,-20
   199fc:	dfc00415 	stw	ra,16(sp)
   19a00:	df000315 	stw	fp,12(sp)
   19a04:	df000304 	addi	fp,sp,12
   19a08:	e13ffd15 	stw	r4,-12(fp)
   19a0c:	e17ffe15 	stw	r5,-8(fp)
   19a10:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   19a14:	010000b4 	movhi	r4,2
   19a18:	212e1204 	addi	r4,r4,-18360
   19a1c:	e17ffd17 	ldw	r5,-12(fp)
   19a20:	01800044 	movi	r6,1
   19a24:	01c07fc4 	movi	r7,511
   19a28:	00199180 	call	19918 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   19a2c:	010000b4 	movhi	r4,2
   19a30:	212e0f04 	addi	r4,r4,-18372
   19a34:	e17ffe17 	ldw	r5,-8(fp)
   19a38:	000d883a 	mov	r6,zero
   19a3c:	01c07fc4 	movi	r7,511
   19a40:	00199180 	call	19918 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   19a44:	010000b4 	movhi	r4,2
   19a48:	212e1504 	addi	r4,r4,-18348
   19a4c:	e17fff17 	ldw	r5,-4(fp)
   19a50:	01800044 	movi	r6,1
   19a54:	01c07fc4 	movi	r7,511
   19a58:	00199180 	call	19918 <alt_open_fd>
}  
   19a5c:	e037883a 	mov	sp,fp
   19a60:	dfc00117 	ldw	ra,4(sp)
   19a64:	df000017 	ldw	fp,0(sp)
   19a68:	dec00204 	addi	sp,sp,8
   19a6c:	f800283a 	ret

00019a70 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   19a70:	defffe04 	addi	sp,sp,-8
   19a74:	dfc00115 	stw	ra,4(sp)
   19a78:	df000015 	stw	fp,0(sp)
   19a7c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   19a80:	008000b4 	movhi	r2,2
   19a84:	10b3cc04 	addi	r2,r2,-12496
   19a88:	10800017 	ldw	r2,0(r2)
   19a8c:	10000526 	beq	r2,zero,19aa4 <alt_get_errno+0x34>
   19a90:	008000b4 	movhi	r2,2
   19a94:	10b3cc04 	addi	r2,r2,-12496
   19a98:	10800017 	ldw	r2,0(r2)
   19a9c:	103ee83a 	callr	r2
   19aa0:	00000206 	br	19aac <alt_get_errno+0x3c>
   19aa4:	008000b4 	movhi	r2,2
   19aa8:	10b3fa04 	addi	r2,r2,-12312
}
   19aac:	e037883a 	mov	sp,fp
   19ab0:	dfc00117 	ldw	ra,4(sp)
   19ab4:	df000017 	ldw	fp,0(sp)
   19ab8:	dec00204 	addi	sp,sp,8
   19abc:	f800283a 	ret

00019ac0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   19ac0:	defffb04 	addi	sp,sp,-20
   19ac4:	dfc00415 	stw	ra,16(sp)
   19ac8:	df000315 	stw	fp,12(sp)
   19acc:	dc000215 	stw	r16,8(sp)
   19ad0:	df000304 	addi	fp,sp,12
   19ad4:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   19ad8:	e0bffe17 	ldw	r2,-8(fp)
   19adc:	10800217 	ldw	r2,8(r2)
   19ae0:	10d00034 	orhi	r3,r2,16384
   19ae4:	e0bffe17 	ldw	r2,-8(fp)
   19ae8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   19aec:	e03ffd15 	stw	zero,-12(fp)
   19af0:	00002306 	br	19b80 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   19af4:	040000b4 	movhi	r16,2
   19af8:	842e0f04 	addi	r16,r16,-18372
   19afc:	e0bffd17 	ldw	r2,-12(fp)
   19b00:	1009883a 	mov	r4,r2
   19b04:	01400304 	movi	r5,12
   19b08:	000129c0 	call	129c <__mulsi3>
   19b0c:	8085883a 	add	r2,r16,r2
   19b10:	10c00017 	ldw	r3,0(r2)
   19b14:	e0bffe17 	ldw	r2,-8(fp)
   19b18:	10800017 	ldw	r2,0(r2)
   19b1c:	1880151e 	bne	r3,r2,19b74 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   19b20:	040000b4 	movhi	r16,2
   19b24:	842e0f04 	addi	r16,r16,-18372
   19b28:	e0bffd17 	ldw	r2,-12(fp)
   19b2c:	1009883a 	mov	r4,r2
   19b30:	01400304 	movi	r5,12
   19b34:	000129c0 	call	129c <__mulsi3>
   19b38:	10800204 	addi	r2,r2,8
   19b3c:	8085883a 	add	r2,r16,r2
   19b40:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   19b44:	10000b0e 	bge	r2,zero,19b74 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   19b48:	e13ffd17 	ldw	r4,-12(fp)
   19b4c:	01400304 	movi	r5,12
   19b50:	000129c0 	call	129c <__mulsi3>
   19b54:	1007883a 	mov	r3,r2
   19b58:	008000b4 	movhi	r2,2
   19b5c:	10ae0f04 	addi	r2,r2,-18372
   19b60:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   19b64:	e0bffe17 	ldw	r2,-8(fp)
   19b68:	18800226 	beq	r3,r2,19b74 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   19b6c:	00bffcc4 	movi	r2,-13
   19b70:	00000a06 	br	19b9c <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   19b74:	e0bffd17 	ldw	r2,-12(fp)
   19b78:	10800044 	addi	r2,r2,1
   19b7c:	e0bffd15 	stw	r2,-12(fp)
   19b80:	008000b4 	movhi	r2,2
   19b84:	10b3cb04 	addi	r2,r2,-12500
   19b88:	10800017 	ldw	r2,0(r2)
   19b8c:	1007883a 	mov	r3,r2
   19b90:	e0bffd17 	ldw	r2,-12(fp)
   19b94:	18bfd72e 	bgeu	r3,r2,19af4 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   19b98:	0005883a 	mov	r2,zero
}
   19b9c:	e6ffff04 	addi	sp,fp,-4
   19ba0:	dfc00217 	ldw	ra,8(sp)
   19ba4:	df000117 	ldw	fp,4(sp)
   19ba8:	dc000017 	ldw	r16,0(sp)
   19bac:	dec00304 	addi	sp,sp,12
   19bb0:	f800283a 	ret

00019bb4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   19bb4:	defff604 	addi	sp,sp,-40
   19bb8:	dfc00915 	stw	ra,36(sp)
   19bbc:	df000815 	stw	fp,32(sp)
   19bc0:	df000804 	addi	fp,sp,32
   19bc4:	e13ffd15 	stw	r4,-12(fp)
   19bc8:	e17ffe15 	stw	r5,-8(fp)
   19bcc:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   19bd0:	00bfffc4 	movi	r2,-1
   19bd4:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   19bd8:	00bffb44 	movi	r2,-19
   19bdc:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   19be0:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   19be4:	e13ffd17 	ldw	r4,-12(fp)
   19be8:	014000b4 	movhi	r5,2
   19bec:	2973c904 	addi	r5,r5,-12508
   19bf0:	001a4080 	call	1a408 <alt_find_dev>
   19bf4:	e0bff815 	stw	r2,-32(fp)
   19bf8:	e0bff817 	ldw	r2,-32(fp)
   19bfc:	1000051e 	bne	r2,zero,19c14 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   19c00:	e13ffd17 	ldw	r4,-12(fp)
   19c04:	001a4980 	call	1a498 <alt_find_file>
   19c08:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   19c0c:	00800044 	movi	r2,1
   19c10:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   19c14:	e0bff817 	ldw	r2,-32(fp)
   19c18:	10002b26 	beq	r2,zero,19cc8 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
   19c1c:	e13ff817 	ldw	r4,-32(fp)
   19c20:	001a5ac0 	call	1a5ac <alt_get_fd>
   19c24:	e0bff915 	stw	r2,-28(fp)
   19c28:	e0bff917 	ldw	r2,-28(fp)
   19c2c:	1000030e 	bge	r2,zero,19c3c <open+0x88>
    {
      status = index;
   19c30:	e0bff917 	ldw	r2,-28(fp)
   19c34:	e0bffa15 	stw	r2,-24(fp)
   19c38:	00002506 	br	19cd0 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
   19c3c:	e13ff917 	ldw	r4,-28(fp)
   19c40:	01400304 	movi	r5,12
   19c44:	000129c0 	call	129c <__mulsi3>
   19c48:	1007883a 	mov	r3,r2
   19c4c:	008000b4 	movhi	r2,2
   19c50:	10ae0f04 	addi	r2,r2,-18372
   19c54:	1885883a 	add	r2,r3,r2
   19c58:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   19c5c:	e0fffe17 	ldw	r3,-8(fp)
   19c60:	00900034 	movhi	r2,16384
   19c64:	10bfffc4 	addi	r2,r2,-1
   19c68:	1886703a 	and	r3,r3,r2
   19c6c:	e0bffc17 	ldw	r2,-16(fp)
   19c70:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   19c74:	e0bffb17 	ldw	r2,-20(fp)
   19c78:	1000051e 	bne	r2,zero,19c90 <open+0xdc>
   19c7c:	e13ffc17 	ldw	r4,-16(fp)
   19c80:	0019ac00 	call	19ac0 <alt_file_locked>
   19c84:	e0bffa15 	stw	r2,-24(fp)
   19c88:	e0bffa17 	ldw	r2,-24(fp)
   19c8c:	10001016 	blt	r2,zero,19cd0 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   19c90:	e0bff817 	ldw	r2,-32(fp)
   19c94:	10800317 	ldw	r2,12(r2)
   19c98:	10000826 	beq	r2,zero,19cbc <open+0x108>
   19c9c:	e0bff817 	ldw	r2,-32(fp)
   19ca0:	10800317 	ldw	r2,12(r2)
   19ca4:	e13ffc17 	ldw	r4,-16(fp)
   19ca8:	e17ffd17 	ldw	r5,-12(fp)
   19cac:	e1bffe17 	ldw	r6,-8(fp)
   19cb0:	e1ffff17 	ldw	r7,-4(fp)
   19cb4:	103ee83a 	callr	r2
   19cb8:	00000106 	br	19cc0 <open+0x10c>
   19cbc:	0005883a 	mov	r2,zero
   19cc0:	e0bffa15 	stw	r2,-24(fp)
   19cc4:	00000206 	br	19cd0 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
   19cc8:	00bffb44 	movi	r2,-19
   19ccc:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   19cd0:	e0bffa17 	ldw	r2,-24(fp)
   19cd4:	1000090e 	bge	r2,zero,19cfc <open+0x148>
  {
    alt_release_fd (index);  
   19cd8:	e13ff917 	ldw	r4,-28(fp)
   19cdc:	000e6340 	call	e634 <alt_release_fd>
    ALT_ERRNO = -status;
   19ce0:	0019a700 	call	19a70 <alt_get_errno>
   19ce4:	1007883a 	mov	r3,r2
   19ce8:	e0bffa17 	ldw	r2,-24(fp)
   19cec:	0085c83a 	sub	r2,zero,r2
   19cf0:	18800015 	stw	r2,0(r3)
    return -1;
   19cf4:	00bfffc4 	movi	r2,-1
   19cf8:	00000106 	br	19d00 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
   19cfc:	e0bff917 	ldw	r2,-28(fp)
}
   19d00:	e037883a 	mov	sp,fp
   19d04:	dfc00117 	ldw	ra,4(sp)
   19d08:	df000017 	ldw	fp,0(sp)
   19d0c:	dec00204 	addi	sp,sp,8
   19d10:	f800283a 	ret

00019d14 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   19d14:	defffa04 	addi	sp,sp,-24
   19d18:	df000515 	stw	fp,20(sp)
   19d1c:	df000504 	addi	fp,sp,20
   19d20:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19d24:	0005303a 	rdctl	r2,status
   19d28:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19d2c:	e0fffc17 	ldw	r3,-16(fp)
   19d30:	00bfff84 	movi	r2,-2
   19d34:	1884703a 	and	r2,r3,r2
   19d38:	1001703a 	wrctl	status,r2
  
  return context;
   19d3c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   19d40:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   19d44:	e0bfff17 	ldw	r2,-4(fp)
   19d48:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   19d4c:	e0bffd17 	ldw	r2,-12(fp)
   19d50:	10800017 	ldw	r2,0(r2)
   19d54:	e0fffd17 	ldw	r3,-12(fp)
   19d58:	18c00117 	ldw	r3,4(r3)
   19d5c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   19d60:	e0bffd17 	ldw	r2,-12(fp)
   19d64:	10800117 	ldw	r2,4(r2)
   19d68:	e0fffd17 	ldw	r3,-12(fp)
   19d6c:	18c00017 	ldw	r3,0(r3)
   19d70:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   19d74:	e0bffd17 	ldw	r2,-12(fp)
   19d78:	e0fffd17 	ldw	r3,-12(fp)
   19d7c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   19d80:	e0bffd17 	ldw	r2,-12(fp)
   19d84:	e0fffd17 	ldw	r3,-12(fp)
   19d88:	10c00015 	stw	r3,0(r2)
   19d8c:	e0bffb17 	ldw	r2,-20(fp)
   19d90:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19d94:	e0bffe17 	ldw	r2,-8(fp)
   19d98:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   19d9c:	e037883a 	mov	sp,fp
   19da0:	df000017 	ldw	fp,0(sp)
   19da4:	dec00104 	addi	sp,sp,4
   19da8:	f800283a 	ret

00019dac <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   19dac:	defffb04 	addi	sp,sp,-20
   19db0:	dfc00415 	stw	ra,16(sp)
   19db4:	df000315 	stw	fp,12(sp)
   19db8:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   19dbc:	d0a02f17 	ldw	r2,-32580(gp)
   19dc0:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   19dc4:	d0a05817 	ldw	r2,-32416(gp)
   19dc8:	10800044 	addi	r2,r2,1
   19dcc:	d0a05815 	stw	r2,-32416(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   19dd0:	00002e06 	br	19e8c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   19dd4:	e0bffd17 	ldw	r2,-12(fp)
   19dd8:	10800017 	ldw	r2,0(r2)
   19ddc:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   19de0:	e0bffd17 	ldw	r2,-12(fp)
   19de4:	10800403 	ldbu	r2,16(r2)
   19de8:	10803fcc 	andi	r2,r2,255
   19dec:	10000426 	beq	r2,zero,19e00 <alt_tick+0x54>
   19df0:	d0a05817 	ldw	r2,-32416(gp)
   19df4:	1000021e 	bne	r2,zero,19e00 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   19df8:	e0bffd17 	ldw	r2,-12(fp)
   19dfc:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   19e00:	e0bffd17 	ldw	r2,-12(fp)
   19e04:	10800217 	ldw	r2,8(r2)
   19e08:	d0e05817 	ldw	r3,-32416(gp)
   19e0c:	18801d36 	bltu	r3,r2,19e84 <alt_tick+0xd8>
   19e10:	e0bffd17 	ldw	r2,-12(fp)
   19e14:	10800403 	ldbu	r2,16(r2)
   19e18:	10803fcc 	andi	r2,r2,255
   19e1c:	1000191e 	bne	r2,zero,19e84 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   19e20:	e0bffd17 	ldw	r2,-12(fp)
   19e24:	10800317 	ldw	r2,12(r2)
   19e28:	e0fffd17 	ldw	r3,-12(fp)
   19e2c:	18c00517 	ldw	r3,20(r3)
   19e30:	1809883a 	mov	r4,r3
   19e34:	103ee83a 	callr	r2
   19e38:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   19e3c:	e0bfff17 	ldw	r2,-4(fp)
   19e40:	1000031e 	bne	r2,zero,19e50 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   19e44:	e13ffd17 	ldw	r4,-12(fp)
   19e48:	0019d140 	call	19d14 <alt_alarm_stop>
   19e4c:	00000d06 	br	19e84 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   19e50:	e0bffd17 	ldw	r2,-12(fp)
   19e54:	10c00217 	ldw	r3,8(r2)
   19e58:	e0bfff17 	ldw	r2,-4(fp)
   19e5c:	1887883a 	add	r3,r3,r2
   19e60:	e0bffd17 	ldw	r2,-12(fp)
   19e64:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   19e68:	e0bffd17 	ldw	r2,-12(fp)
   19e6c:	10c00217 	ldw	r3,8(r2)
   19e70:	d0a05817 	ldw	r2,-32416(gp)
   19e74:	1880032e 	bgeu	r3,r2,19e84 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   19e78:	e0bffd17 	ldw	r2,-12(fp)
   19e7c:	00c00044 	movi	r3,1
   19e80:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   19e84:	e0bffe17 	ldw	r2,-8(fp)
   19e88:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   19e8c:	e0fffd17 	ldw	r3,-12(fp)
   19e90:	d0a02f04 	addi	r2,gp,-32580
   19e94:	18bfcf1e 	bne	r3,r2,19dd4 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   19e98:	000f8680 	call	f868 <OSTimeTick>
}
   19e9c:	e037883a 	mov	sp,fp
   19ea0:	dfc00117 	ldw	ra,4(sp)
   19ea4:	df000017 	ldw	fp,0(sp)
   19ea8:	dec00204 	addi	sp,sp,8
   19eac:	f800283a 	ret

00019eb0 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   19eb0:	deffff04 	addi	sp,sp,-4
   19eb4:	df000015 	stw	fp,0(sp)
   19eb8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   19ebc:	000170fa 	wrctl	ienable,zero
}
   19ec0:	e037883a 	mov	sp,fp
   19ec4:	df000017 	ldw	fp,0(sp)
   19ec8:	dec00104 	addi	sp,sp,4
   19ecc:	f800283a 	ret

00019ed0 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
   19ed0:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
   19ed4:	d0e00117 	ldw	r3,-32764(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
   19ed8:	d1205217 	ldw	r4,-32440(gp)

      stw ra,  0(sp)
   19edc:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
   19ee0:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
   19ee4:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
   19ee8:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
   19eec:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
   19ef0:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
   19ef4:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
   19ef8:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
   19efc:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
   19f00:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
   19f04:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
   19f08:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   19f0c:	001a13c0 	call	1a13c <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
   19f10:	d1204d17 	ldw	r4,-32460(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
   19f14:	d1604507 	ldb	r5,-32492(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
   19f18:	d1205215 	stw	r4,-32440(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
   19f1c:	d1604545 	stb	r5,-32491(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
   19f20:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
   19f24:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
   19f28:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
   19f2c:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
   19f30:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
   19f34:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
   19f38:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
   19f3c:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
   19f40:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
   19f44:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
   19f48:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
   19f4c:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
   19f50:	d0e00115 	stw	r3,-32764(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
   19f54:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
   19f58:	f800283a 	ret

00019f5c <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
   19f5c:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
   19f60:	047fff84 	movi	r17,-2
      and   r18, r18, r17
   19f64:	9464703a 	and	r18,r18,r17
      wrctl status, r18
   19f68:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   19f6c:	001a13c0 	call	1a13c <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
   19f70:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
   19f74:	d4a04345 	stb	r18,-32499(gp)

      /*
       * start execution of the new task.
       */

      br 9b
   19f78:	003fe506 	br	19f10 <OSCtxSw+0x40>

00019f7c <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
   19f7c:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
   19f80:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
   19f84:	10800054 	ori	r2,r2,1
      wrctl status, r2
   19f88:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
   19f8c:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
   19f90:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
   19f94:	dec00204 	addi	sp,sp,8

      callr r2
   19f98:	103ee83a 	callr	r2

      nop
   19f9c:	0001883a 	nop

00019fa0 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
   19fa0:	defff704 	addi	sp,sp,-36
   19fa4:	dfc00815 	stw	ra,32(sp)
   19fa8:	df000715 	stw	fp,28(sp)
   19fac:	df000704 	addi	fp,sp,28
   19fb0:	e13ffc15 	stw	r4,-16(fp)
   19fb4:	e17ffd15 	stw	r5,-12(fp)
   19fb8:	e1bffe15 	stw	r6,-8(fp)
   19fbc:	3805883a 	mov	r2,r7
   19fc0:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
   19fc4:	e0fffe17 	ldw	r3,-8(fp)
   19fc8:	00bfff04 	movi	r2,-4
   19fcc:	1884703a 	and	r2,r3,r2
   19fd0:	10bef704 	addi	r2,r2,-1060
   19fd4:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
   19fd8:	e13ff917 	ldw	r4,-28(fp)
   19fdc:	000b883a 	mov	r5,zero
   19fe0:	01810904 	movi	r6,1060
   19fe4:	00088580 	call	8858 <memset>
   19fe8:	e0bff917 	ldw	r2,-28(fp)
   19fec:	10c0bb04 	addi	r3,r2,748
   19ff0:	e0bff917 	ldw	r2,-28(fp)
   19ff4:	10c00115 	stw	r3,4(r2)
   19ff8:	e0bff917 	ldw	r2,-28(fp)
   19ffc:	10c0d504 	addi	r3,r2,852
   1a000:	e0bff917 	ldw	r2,-28(fp)
   1a004:	10c00215 	stw	r3,8(r2)
   1a008:	e0bff917 	ldw	r2,-28(fp)
   1a00c:	10c0ef04 	addi	r3,r2,956
   1a010:	e0bff917 	ldw	r2,-28(fp)
   1a014:	10c00315 	stw	r3,12(r2)
   1a018:	e0fff917 	ldw	r3,-28(fp)
   1a01c:	008000b4 	movhi	r2,2
   1a020:	10abdb04 	addi	r2,r2,-20628
   1a024:	18800d15 	stw	r2,52(r3)
   1a028:	e0bff917 	ldw	r2,-28(fp)
   1a02c:	00c00044 	movi	r3,1
   1a030:	10c02915 	stw	r3,164(r2)
   1a034:	10002a15 	stw	zero,168(r2)
   1a038:	e0bff917 	ldw	r2,-28(fp)
   1a03c:	00ccc384 	movi	r3,13070
   1a040:	10c02b0d 	sth	r3,172(r2)
   1a044:	e0bff917 	ldw	r2,-28(fp)
   1a048:	00eaf344 	movi	r3,-21555
   1a04c:	10c02b8d 	sth	r3,174(r2)
   1a050:	e0bff917 	ldw	r2,-28(fp)
   1a054:	00c48d04 	movi	r3,4660
   1a058:	10c02c0d 	sth	r3,176(r2)
   1a05c:	e0bff917 	ldw	r2,-28(fp)
   1a060:	00f99b44 	movi	r3,-6547
   1a064:	10c02c8d 	sth	r3,178(r2)
   1a068:	e0bff917 	ldw	r2,-28(fp)
   1a06c:	00f7bb04 	movi	r3,-8468
   1a070:	10c02d0d 	sth	r3,180(r2)
   1a074:	e0bff917 	ldw	r2,-28(fp)
   1a078:	00c00144 	movi	r3,5
   1a07c:	10c02d8d 	sth	r3,182(r2)
   1a080:	e0bff917 	ldw	r2,-28(fp)
   1a084:	00c002c4 	movi	r3,11
   1a088:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
   1a08c:	e0bff917 	ldw	r2,-28(fp)
   1a090:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
   1a094:	e0bffa17 	ldw	r2,-24(fp)
   1a098:	10bff304 	addi	r2,r2,-52
   1a09c:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
   1a0a0:	e0bffb17 	ldw	r2,-20(fp)
   1a0a4:	10800c04 	addi	r2,r2,48
   1a0a8:	e0fffc17 	ldw	r3,-16(fp)
   1a0ac:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
   1a0b0:	e0bffb17 	ldw	r2,-20(fp)
   1a0b4:	10800b04 	addi	r2,r2,44
   1a0b8:	e0fffd17 	ldw	r3,-12(fp)
   1a0bc:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
   1a0c0:	e0bffb17 	ldw	r2,-20(fp)
   1a0c4:	10800a04 	addi	r2,r2,40
   1a0c8:	e0fff917 	ldw	r3,-28(fp)
   1a0cc:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
   1a0d0:	008000b4 	movhi	r2,2
   1a0d4:	10a7df04 	addi	r2,r2,-24708
   1a0d8:	10c00104 	addi	r3,r2,4
   1a0dc:	e0bffb17 	ldw	r2,-20(fp)
   1a0e0:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
   1a0e4:	e0bffb17 	ldw	r2,-20(fp)
}
   1a0e8:	e037883a 	mov	sp,fp
   1a0ec:	dfc00117 	ldw	ra,4(sp)
   1a0f0:	df000017 	ldw	fp,0(sp)
   1a0f4:	dec00204 	addi	sp,sp,8
   1a0f8:	f800283a 	ret

0001a0fc <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
   1a0fc:	defffe04 	addi	sp,sp,-8
   1a100:	df000115 	stw	fp,4(sp)
   1a104:	df000104 	addi	fp,sp,4
   1a108:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
   1a10c:	e037883a 	mov	sp,fp
   1a110:	df000017 	ldw	fp,0(sp)
   1a114:	dec00104 	addi	sp,sp,4
   1a118:	f800283a 	ret

0001a11c <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
   1a11c:	defffe04 	addi	sp,sp,-8
   1a120:	df000115 	stw	fp,4(sp)
   1a124:	df000104 	addi	fp,sp,4
   1a128:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
   1a12c:	e037883a 	mov	sp,fp
   1a130:	df000017 	ldw	fp,0(sp)
   1a134:	dec00104 	addi	sp,sp,4
   1a138:	f800283a 	ret

0001a13c <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
   1a13c:	deffff04 	addi	sp,sp,-4
   1a140:	df000015 	stw	fp,0(sp)
   1a144:	d839883a 	mov	fp,sp
}
   1a148:	e037883a 	mov	sp,fp
   1a14c:	df000017 	ldw	fp,0(sp)
   1a150:	dec00104 	addi	sp,sp,4
   1a154:	f800283a 	ret

0001a158 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
   1a158:	deffff04 	addi	sp,sp,-4
   1a15c:	df000015 	stw	fp,0(sp)
   1a160:	d839883a 	mov	fp,sp
}
   1a164:	e037883a 	mov	sp,fp
   1a168:	df000017 	ldw	fp,0(sp)
   1a16c:	dec00104 	addi	sp,sp,4
   1a170:	f800283a 	ret

0001a174 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
   1a174:	deffff04 	addi	sp,sp,-4
   1a178:	df000015 	stw	fp,0(sp)
   1a17c:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
   1a180:	e037883a 	mov	sp,fp
   1a184:	df000017 	ldw	fp,0(sp)
   1a188:	dec00104 	addi	sp,sp,4
   1a18c:	f800283a 	ret

0001a190 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
   1a190:	deffff04 	addi	sp,sp,-4
   1a194:	df000015 	stw	fp,0(sp)
   1a198:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
   1a19c:	e037883a 	mov	sp,fp
   1a1a0:	df000017 	ldw	fp,0(sp)
   1a1a4:	dec00104 	addi	sp,sp,4
   1a1a8:	f800283a 	ret

0001a1ac <OSInitHookEnd>:

void OSInitHookEnd(void)
{
   1a1ac:	deffff04 	addi	sp,sp,-4
   1a1b0:	df000015 	stw	fp,0(sp)
   1a1b4:	d839883a 	mov	fp,sp
}
   1a1b8:	e037883a 	mov	sp,fp
   1a1bc:	df000017 	ldw	fp,0(sp)
   1a1c0:	dec00104 	addi	sp,sp,4
   1a1c4:	f800283a 	ret

0001a1c8 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
   1a1c8:	deffff04 	addi	sp,sp,-4
   1a1cc:	df000015 	stw	fp,0(sp)
   1a1d0:	d839883a 	mov	fp,sp
}
   1a1d4:	e037883a 	mov	sp,fp
   1a1d8:	df000017 	ldw	fp,0(sp)
   1a1dc:	dec00104 	addi	sp,sp,4
   1a1e0:	f800283a 	ret

0001a1e4 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
   1a1e4:	defffe04 	addi	sp,sp,-8
   1a1e8:	df000115 	stw	fp,4(sp)
   1a1ec:	df000104 	addi	fp,sp,4
   1a1f0:	e13fff15 	stw	r4,-4(fp)
}
   1a1f4:	e037883a 	mov	sp,fp
   1a1f8:	df000017 	ldw	fp,0(sp)
   1a1fc:	dec00104 	addi	sp,sp,4
   1a200:	f800283a 	ret

0001a204 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
   1a204:	defff404 	addi	sp,sp,-48
   1a208:	df000b15 	stw	fp,44(sp)
   1a20c:	df000b04 	addi	fp,sp,44
   1a210:	e13ffc15 	stw	r4,-16(fp)
   1a214:	e17ffd15 	stw	r5,-12(fp)
   1a218:	e1bffe15 	stw	r6,-8(fp)
   1a21c:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
   1a220:	e0ffff17 	ldw	r3,-4(fp)
   1a224:	e0bffe17 	ldw	r2,-8(fp)
   1a228:	1885883a 	add	r2,r3,r2
   1a22c:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
   1a230:	e0c00217 	ldw	r3,8(fp)
   1a234:	e0800117 	ldw	r2,4(fp)
   1a238:	1885883a 	add	r2,r3,r2
   1a23c:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
   1a240:	e0800117 	ldw	r2,4(fp)
   1a244:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
   1a248:	e0bffe17 	ldw	r2,-8(fp)
   1a24c:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
   1a250:	00800044 	movi	r2,1
   1a254:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
   1a258:	e0bffc17 	ldw	r2,-16(fp)
   1a25c:	10800504 	addi	r2,r2,20
   1a260:	1009883a 	mov	r4,r2
   1a264:	e0bffd17 	ldw	r2,-12(fp)
   1a268:	00c00044 	movi	r3,1
   1a26c:	1884983a 	sll	r2,r3,r2
   1a270:	20800035 	stwio	r2,0(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
   1a274:	e0800317 	ldw	r2,12(fp)
   1a278:	1080008c 	andi	r2,r2,2
   1a27c:	1000051e 	bne	r2,zero,1a294 <alt_avalon_spi_command+0x90>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
   1a280:	e0bffc17 	ldw	r2,-16(fp)
   1a284:	10800304 	addi	r2,r2,12
   1a288:	1007883a 	mov	r3,r2
   1a28c:	00810004 	movi	r2,1024
   1a290:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
   1a294:	e0bffc17 	ldw	r2,-16(fp)
   1a298:	10800037 	ldwio	r2,0(r2)
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
   1a29c:	e0bffc17 	ldw	r2,-16(fp)
   1a2a0:	10800204 	addi	r2,r2,8
   1a2a4:	10800037 	ldwio	r2,0(r2)
   1a2a8:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
   1a2ac:	e0bffa17 	ldw	r2,-24(fp)
   1a2b0:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
   1a2b4:	10000226 	beq	r2,zero,1a2c0 <alt_avalon_spi_command+0xbc>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
   1a2b8:	e0bff717 	ldw	r2,-36(fp)
   1a2bc:	1000031e 	bne	r2,zero,1a2cc <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
   1a2c0:	e0bffa17 	ldw	r2,-24(fp)
   1a2c4:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
   1a2c8:	103ff426 	beq	r2,zero,1a29c <alt_avalon_spi_command+0x98>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
   1a2cc:	e0bffa17 	ldw	r2,-24(fp)
   1a2d0:	1080100c 	andi	r2,r2,64
   1a2d4:	10001e26 	beq	r2,zero,1a350 <alt_avalon_spi_command+0x14c>
   1a2d8:	e0bff717 	ldw	r2,-36(fp)
   1a2dc:	00801c0e 	bge	zero,r2,1a350 <alt_avalon_spi_command+0x14c>
    {
      credits--;
   1a2e0:	e0bff717 	ldw	r2,-36(fp)
   1a2e4:	10bfffc4 	addi	r2,r2,-1
   1a2e8:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
   1a2ec:	e0ffff17 	ldw	r3,-4(fp)
   1a2f0:	e0bff817 	ldw	r2,-32(fp)
   1a2f4:	18800a2e 	bgeu	r3,r2,1a320 <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
   1a2f8:	e0bffc17 	ldw	r2,-16(fp)
   1a2fc:	10800104 	addi	r2,r2,4
   1a300:	1009883a 	mov	r4,r2
   1a304:	e0bfff17 	ldw	r2,-4(fp)
   1a308:	10c00044 	addi	r3,r2,1
   1a30c:	e0ffff15 	stw	r3,-4(fp)
   1a310:	10800003 	ldbu	r2,0(r2)
   1a314:	10803fcc 	andi	r2,r2,255
   1a318:	20800035 	stwio	r2,0(r4)
   1a31c:	00000c06 	br	1a350 <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
   1a320:	e0bff517 	ldw	r2,-44(fp)
   1a324:	10000826 	beq	r2,zero,1a348 <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
   1a328:	e0bff517 	ldw	r2,-44(fp)
   1a32c:	10bfffc4 	addi	r2,r2,-1
   1a330:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
   1a334:	e0bffc17 	ldw	r2,-16(fp)
   1a338:	10800104 	addi	r2,r2,4
   1a33c:	0007883a 	mov	r3,zero
   1a340:	10c00035 	stwio	r3,0(r2)
   1a344:	00000206 	br	1a350 <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
   1a348:	00bf0004 	movi	r2,-1024
   1a34c:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
   1a350:	e0bffa17 	ldw	r2,-24(fp)
   1a354:	1080200c 	andi	r2,r2,128
   1a358:	10001726 	beq	r2,zero,1a3b8 <alt_avalon_spi_command+0x1b4>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
   1a35c:	e0bffc17 	ldw	r2,-16(fp)
   1a360:	10800037 	ldwio	r2,0(r2)
   1a364:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
   1a368:	e0bff617 	ldw	r2,-40(fp)
   1a36c:	10000426 	beq	r2,zero,1a380 <alt_avalon_spi_command+0x17c>
        read_ignore--;
   1a370:	e0bff617 	ldw	r2,-40(fp)
   1a374:	10bfffc4 	addi	r2,r2,-1
   1a378:	e0bff615 	stw	r2,-40(fp)
   1a37c:	00000506 	br	1a394 <alt_avalon_spi_command+0x190>
      else
        *read_data++ = (alt_u8)rxdata;
   1a380:	e0800217 	ldw	r2,8(fp)
   1a384:	10c00044 	addi	r3,r2,1
   1a388:	e0c00215 	stw	r3,8(fp)
   1a38c:	e0fffb17 	ldw	r3,-20(fp)
   1a390:	10c00005 	stb	r3,0(r2)
      credits++;
   1a394:	e0bff717 	ldw	r2,-36(fp)
   1a398:	10800044 	addi	r2,r2,1
   1a39c:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
   1a3a0:	e0bff617 	ldw	r2,-40(fp)
   1a3a4:	1000041e 	bne	r2,zero,1a3b8 <alt_avalon_spi_command+0x1b4>
   1a3a8:	e0c00217 	ldw	r3,8(fp)
   1a3ac:	e0bff917 	ldw	r2,-28(fp)
   1a3b0:	1880011e 	bne	r3,r2,1a3b8 <alt_avalon_spi_command+0x1b4>
        break;
   1a3b4:	00000106 	br	1a3bc <alt_avalon_spi_command+0x1b8>
    }
    
  }
   1a3b8:	003fb806 	br	1a29c <alt_avalon_spi_command+0x98>

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
   1a3bc:	e0bffc17 	ldw	r2,-16(fp)
   1a3c0:	10800204 	addi	r2,r2,8
   1a3c4:	10800037 	ldwio	r2,0(r2)
   1a3c8:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
   1a3cc:	e0bffa17 	ldw	r2,-24(fp)
   1a3d0:	1080080c 	andi	r2,r2,32
   1a3d4:	103ff926 	beq	r2,zero,1a3bc <alt_avalon_spi_command+0x1b8>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
   1a3d8:	e0800317 	ldw	r2,12(fp)
   1a3dc:	1080004c 	andi	r2,r2,1
   1a3e0:	1000041e 	bne	r2,zero,1a3f4 <alt_avalon_spi_command+0x1f0>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
   1a3e4:	e0bffc17 	ldw	r2,-16(fp)
   1a3e8:	10800304 	addi	r2,r2,12
   1a3ec:	0007883a 	mov	r3,zero
   1a3f0:	10c00035 	stwio	r3,0(r2)

  return read_length;
   1a3f4:	e0800117 	ldw	r2,4(fp)
}
   1a3f8:	e037883a 	mov	sp,fp
   1a3fc:	df000017 	ldw	fp,0(sp)
   1a400:	dec00104 	addi	sp,sp,4
   1a404:	f800283a 	ret

0001a408 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   1a408:	defffa04 	addi	sp,sp,-24
   1a40c:	dfc00515 	stw	ra,20(sp)
   1a410:	df000415 	stw	fp,16(sp)
   1a414:	df000404 	addi	fp,sp,16
   1a418:	e13ffe15 	stw	r4,-8(fp)
   1a41c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   1a420:	e0bfff17 	ldw	r2,-4(fp)
   1a424:	10800017 	ldw	r2,0(r2)
   1a428:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   1a42c:	e13ffe17 	ldw	r4,-8(fp)
   1a430:	0009c800 	call	9c80 <strlen>
   1a434:	10800044 	addi	r2,r2,1
   1a438:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1a43c:	00000d06 	br	1a474 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   1a440:	e0bffc17 	ldw	r2,-16(fp)
   1a444:	10c00217 	ldw	r3,8(r2)
   1a448:	e0bffd17 	ldw	r2,-12(fp)
   1a44c:	1809883a 	mov	r4,r3
   1a450:	e17ffe17 	ldw	r5,-8(fp)
   1a454:	100d883a 	mov	r6,r2
   1a458:	001a70c0 	call	1a70c <memcmp>
   1a45c:	1000021e 	bne	r2,zero,1a468 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   1a460:	e0bffc17 	ldw	r2,-16(fp)
   1a464:	00000706 	br	1a484 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   1a468:	e0bffc17 	ldw	r2,-16(fp)
   1a46c:	10800017 	ldw	r2,0(r2)
   1a470:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1a474:	e0fffc17 	ldw	r3,-16(fp)
   1a478:	e0bfff17 	ldw	r2,-4(fp)
   1a47c:	18bff01e 	bne	r3,r2,1a440 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   1a480:	0005883a 	mov	r2,zero
}
   1a484:	e037883a 	mov	sp,fp
   1a488:	dfc00117 	ldw	ra,4(sp)
   1a48c:	df000017 	ldw	fp,0(sp)
   1a490:	dec00204 	addi	sp,sp,8
   1a494:	f800283a 	ret

0001a498 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   1a498:	defffb04 	addi	sp,sp,-20
   1a49c:	dfc00415 	stw	ra,16(sp)
   1a4a0:	df000315 	stw	fp,12(sp)
   1a4a4:	df000304 	addi	fp,sp,12
   1a4a8:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   1a4ac:	008000b4 	movhi	r2,2
   1a4b0:	10b3c704 	addi	r2,r2,-12516
   1a4b4:	10800017 	ldw	r2,0(r2)
   1a4b8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   1a4bc:	00003106 	br	1a584 <alt_find_file+0xec>
  {
    len = strlen(next->name);
   1a4c0:	e0bffd17 	ldw	r2,-12(fp)
   1a4c4:	10800217 	ldw	r2,8(r2)
   1a4c8:	1009883a 	mov	r4,r2
   1a4cc:	0009c800 	call	9c80 <strlen>
   1a4d0:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   1a4d4:	e0bffd17 	ldw	r2,-12(fp)
   1a4d8:	10c00217 	ldw	r3,8(r2)
   1a4dc:	e0bffe17 	ldw	r2,-8(fp)
   1a4e0:	10bfffc4 	addi	r2,r2,-1
   1a4e4:	1885883a 	add	r2,r3,r2
   1a4e8:	10800003 	ldbu	r2,0(r2)
   1a4ec:	10803fcc 	andi	r2,r2,255
   1a4f0:	1080201c 	xori	r2,r2,128
   1a4f4:	10bfe004 	addi	r2,r2,-128
   1a4f8:	10800bd8 	cmpnei	r2,r2,47
   1a4fc:	1000031e 	bne	r2,zero,1a50c <alt_find_file+0x74>
    {
      len -= 1;
   1a500:	e0bffe17 	ldw	r2,-8(fp)
   1a504:	10bfffc4 	addi	r2,r2,-1
   1a508:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   1a50c:	e0bffe17 	ldw	r2,-8(fp)
   1a510:	e0ffff17 	ldw	r3,-4(fp)
   1a514:	1885883a 	add	r2,r3,r2
   1a518:	10800003 	ldbu	r2,0(r2)
   1a51c:	10803fcc 	andi	r2,r2,255
   1a520:	1080201c 	xori	r2,r2,128
   1a524:	10bfe004 	addi	r2,r2,-128
   1a528:	10800be0 	cmpeqi	r2,r2,47
   1a52c:	1000081e 	bne	r2,zero,1a550 <alt_find_file+0xb8>
   1a530:	e0bffe17 	ldw	r2,-8(fp)
   1a534:	e0ffff17 	ldw	r3,-4(fp)
   1a538:	1885883a 	add	r2,r3,r2
   1a53c:	10800003 	ldbu	r2,0(r2)
   1a540:	10803fcc 	andi	r2,r2,255
   1a544:	1080201c 	xori	r2,r2,128
   1a548:	10bfe004 	addi	r2,r2,-128
   1a54c:	10000a1e 	bne	r2,zero,1a578 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   1a550:	e0bffd17 	ldw	r2,-12(fp)
   1a554:	10c00217 	ldw	r3,8(r2)
   1a558:	e0bffe17 	ldw	r2,-8(fp)
   1a55c:	1809883a 	mov	r4,r3
   1a560:	e17fff17 	ldw	r5,-4(fp)
   1a564:	100d883a 	mov	r6,r2
   1a568:	001a70c0 	call	1a70c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   1a56c:	1000021e 	bne	r2,zero,1a578 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   1a570:	e0bffd17 	ldw	r2,-12(fp)
   1a574:	00000806 	br	1a598 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   1a578:	e0bffd17 	ldw	r2,-12(fp)
   1a57c:	10800017 	ldw	r2,0(r2)
   1a580:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   1a584:	e0fffd17 	ldw	r3,-12(fp)
   1a588:	008000b4 	movhi	r2,2
   1a58c:	10b3c704 	addi	r2,r2,-12516
   1a590:	18bfcb1e 	bne	r3,r2,1a4c0 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   1a594:	0005883a 	mov	r2,zero
}
   1a598:	e037883a 	mov	sp,fp
   1a59c:	dfc00117 	ldw	ra,4(sp)
   1a5a0:	df000017 	ldw	fp,0(sp)
   1a5a4:	dec00204 	addi	sp,sp,8
   1a5a8:	f800283a 	ret

0001a5ac <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   1a5ac:	defff804 	addi	sp,sp,-32
   1a5b0:	dfc00715 	stw	ra,28(sp)
   1a5b4:	df000615 	stw	fp,24(sp)
   1a5b8:	dc000515 	stw	r16,20(sp)
   1a5bc:	df000604 	addi	fp,sp,24
   1a5c0:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   1a5c4:	00bffa04 	movi	r2,-24
   1a5c8:	e0bffb15 	stw	r2,-20(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
   1a5cc:	008000b4 	movhi	r2,2
   1a5d0:	10b3fb04 	addi	r2,r2,-12308
   1a5d4:	10800017 	ldw	r2,0(r2)
   1a5d8:	e0bffc15 	stw	r2,-16(fp)
   1a5dc:	e03ffd0d 	sth	zero,-12(fp)
   1a5e0:	e0fffd0b 	ldhu	r3,-12(fp)
   1a5e4:	e0bffd84 	addi	r2,fp,-10
   1a5e8:	e13ffc17 	ldw	r4,-16(fp)
   1a5ec:	180b883a 	mov	r5,r3
   1a5f0:	100d883a 	mov	r6,r2
   1a5f4:	00143000 	call	14300 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   1a5f8:	e03ffa15 	stw	zero,-24(fp)
   1a5fc:	00002106 	br	1a684 <alt_get_fd+0xd8>
  {
    if (!alt_fd_list[i].dev)
   1a600:	040000b4 	movhi	r16,2
   1a604:	842e0f04 	addi	r16,r16,-18372
   1a608:	e0bffa17 	ldw	r2,-24(fp)
   1a60c:	1009883a 	mov	r4,r2
   1a610:	01400304 	movi	r5,12
   1a614:	000129c0 	call	129c <__mulsi3>
   1a618:	8085883a 	add	r2,r16,r2
   1a61c:	10800017 	ldw	r2,0(r2)
   1a620:	1000151e 	bne	r2,zero,1a678 <alt_get_fd+0xcc>
    {
      alt_fd_list[i].dev = dev;
   1a624:	040000b4 	movhi	r16,2
   1a628:	842e0f04 	addi	r16,r16,-18372
   1a62c:	e0bffa17 	ldw	r2,-24(fp)
   1a630:	1009883a 	mov	r4,r2
   1a634:	01400304 	movi	r5,12
   1a638:	000129c0 	call	129c <__mulsi3>
   1a63c:	8085883a 	add	r2,r16,r2
   1a640:	e0fffe17 	ldw	r3,-8(fp)
   1a644:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   1a648:	008000b4 	movhi	r2,2
   1a64c:	10b3cb04 	addi	r2,r2,-12500
   1a650:	10c00017 	ldw	r3,0(r2)
   1a654:	e0bffa17 	ldw	r2,-24(fp)
   1a658:	1880040e 	bge	r3,r2,1a66c <alt_get_fd+0xc0>
      {
        alt_max_fd = i;
   1a65c:	008000b4 	movhi	r2,2
   1a660:	10b3cb04 	addi	r2,r2,-12500
   1a664:	e0fffa17 	ldw	r3,-24(fp)
   1a668:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   1a66c:	e0bffa17 	ldw	r2,-24(fp)
   1a670:	e0bffb15 	stw	r2,-20(fp)
      goto alt_get_fd_exit;
   1a674:	00000606 	br	1a690 <alt_get_fd+0xe4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   1a678:	e0bffa17 	ldw	r2,-24(fp)
   1a67c:	10800044 	addi	r2,r2,1
   1a680:	e0bffa15 	stw	r2,-24(fp)
   1a684:	e0bffa17 	ldw	r2,-24(fp)
   1a688:	10800810 	cmplti	r2,r2,32
   1a68c:	103fdc1e 	bne	r2,zero,1a600 <alt_get_fd+0x54>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
   1a690:	008000b4 	movhi	r2,2
   1a694:	10b3fb04 	addi	r2,r2,-12308
   1a698:	10800017 	ldw	r2,0(r2)
   1a69c:	1009883a 	mov	r4,r2
   1a6a0:	00146d40 	call	146d4 <OSSemPost>

  return rc;
   1a6a4:	e0bffb17 	ldw	r2,-20(fp)
}
   1a6a8:	e6ffff04 	addi	sp,fp,-4
   1a6ac:	dfc00217 	ldw	ra,8(sp)
   1a6b0:	df000117 	ldw	fp,4(sp)
   1a6b4:	dc000017 	ldw	r16,0(sp)
   1a6b8:	dec00304 	addi	sp,sp,12
   1a6bc:	f800283a 	ret

0001a6c0 <atexit>:
   1a6c0:	200b883a 	mov	r5,r4
   1a6c4:	000d883a 	mov	r6,zero
   1a6c8:	0009883a 	mov	r4,zero
   1a6cc:	000f883a 	mov	r7,zero
   1a6d0:	001a7881 	jmpi	1a788 <__register_exitproc>

0001a6d4 <exit>:
   1a6d4:	defffe04 	addi	sp,sp,-8
   1a6d8:	000b883a 	mov	r5,zero
   1a6dc:	dc000015 	stw	r16,0(sp)
   1a6e0:	dfc00115 	stw	ra,4(sp)
   1a6e4:	2021883a 	mov	r16,r4
   1a6e8:	001a89c0 	call	1a89c <__call_exitprocs>
   1a6ec:	008000b4 	movhi	r2,2
   1a6f0:	10b3c104 	addi	r2,r2,-12540
   1a6f4:	11000017 	ldw	r4,0(r2)
   1a6f8:	20800f17 	ldw	r2,60(r4)
   1a6fc:	10000126 	beq	r2,zero,1a704 <exit+0x30>
   1a700:	103ee83a 	callr	r2
   1a704:	8009883a 	mov	r4,r16
   1a708:	001aa300 	call	1aa30 <_exit>

0001a70c <memcmp>:
   1a70c:	01c000c4 	movi	r7,3
   1a710:	3980192e 	bgeu	r7,r6,1a778 <memcmp+0x6c>
   1a714:	2144b03a 	or	r2,r4,r5
   1a718:	11c4703a 	and	r2,r2,r7
   1a71c:	10000f26 	beq	r2,zero,1a75c <memcmp+0x50>
   1a720:	20800003 	ldbu	r2,0(r4)
   1a724:	28c00003 	ldbu	r3,0(r5)
   1a728:	10c0151e 	bne	r2,r3,1a780 <memcmp+0x74>
   1a72c:	31bfff84 	addi	r6,r6,-2
   1a730:	01ffffc4 	movi	r7,-1
   1a734:	00000406 	br	1a748 <memcmp+0x3c>
   1a738:	20800003 	ldbu	r2,0(r4)
   1a73c:	28c00003 	ldbu	r3,0(r5)
   1a740:	31bfffc4 	addi	r6,r6,-1
   1a744:	10c00e1e 	bne	r2,r3,1a780 <memcmp+0x74>
   1a748:	21000044 	addi	r4,r4,1
   1a74c:	29400044 	addi	r5,r5,1
   1a750:	31fff91e 	bne	r6,r7,1a738 <memcmp+0x2c>
   1a754:	0005883a 	mov	r2,zero
   1a758:	f800283a 	ret
   1a75c:	20c00017 	ldw	r3,0(r4)
   1a760:	28800017 	ldw	r2,0(r5)
   1a764:	1880041e 	bne	r3,r2,1a778 <memcmp+0x6c>
   1a768:	31bfff04 	addi	r6,r6,-4
   1a76c:	21000104 	addi	r4,r4,4
   1a770:	29400104 	addi	r5,r5,4
   1a774:	39bff936 	bltu	r7,r6,1a75c <memcmp+0x50>
   1a778:	303fe91e 	bne	r6,zero,1a720 <memcmp+0x14>
   1a77c:	003ff506 	br	1a754 <memcmp+0x48>
   1a780:	10c5c83a 	sub	r2,r2,r3
   1a784:	f800283a 	ret

0001a788 <__register_exitproc>:
   1a788:	008000b4 	movhi	r2,2
   1a78c:	defffa04 	addi	sp,sp,-24
   1a790:	10b3c104 	addi	r2,r2,-12540
   1a794:	dc000315 	stw	r16,12(sp)
   1a798:	14000017 	ldw	r16,0(r2)
   1a79c:	dc400415 	stw	r17,16(sp)
   1a7a0:	dfc00515 	stw	ra,20(sp)
   1a7a4:	80805217 	ldw	r2,328(r16)
   1a7a8:	2023883a 	mov	r17,r4
   1a7ac:	10003626 	beq	r2,zero,1a888 <__register_exitproc+0x100>
   1a7b0:	10c00117 	ldw	r3,4(r2)
   1a7b4:	010007c4 	movi	r4,31
   1a7b8:	20c00e16 	blt	r4,r3,1a7f4 <__register_exitproc+0x6c>
   1a7bc:	1a400044 	addi	r9,r3,1
   1a7c0:	8800211e 	bne	r17,zero,1a848 <__register_exitproc+0xc0>
   1a7c4:	18c00084 	addi	r3,r3,2
   1a7c8:	18c7883a 	add	r3,r3,r3
   1a7cc:	18c7883a 	add	r3,r3,r3
   1a7d0:	12400115 	stw	r9,4(r2)
   1a7d4:	10c7883a 	add	r3,r2,r3
   1a7d8:	19400015 	stw	r5,0(r3)
   1a7dc:	0005883a 	mov	r2,zero
   1a7e0:	dfc00517 	ldw	ra,20(sp)
   1a7e4:	dc400417 	ldw	r17,16(sp)
   1a7e8:	dc000317 	ldw	r16,12(sp)
   1a7ec:	dec00604 	addi	sp,sp,24
   1a7f0:	f800283a 	ret
   1a7f4:	00800034 	movhi	r2,0
   1a7f8:	10800004 	addi	r2,r2,0
   1a7fc:	10002526 	beq	r2,zero,1a894 <__register_exitproc+0x10c>
   1a800:	01006404 	movi	r4,400
   1a804:	d9400015 	stw	r5,0(sp)
   1a808:	d9800115 	stw	r6,4(sp)
   1a80c:	d9c00215 	stw	r7,8(sp)
   1a810:	00000000 	call	0 <__alt_mem_sdram>
   1a814:	d9400017 	ldw	r5,0(sp)
   1a818:	d9800117 	ldw	r6,4(sp)
   1a81c:	d9c00217 	ldw	r7,8(sp)
   1a820:	10001c26 	beq	r2,zero,1a894 <__register_exitproc+0x10c>
   1a824:	80c05217 	ldw	r3,328(r16)
   1a828:	10000115 	stw	zero,4(r2)
   1a82c:	02400044 	movi	r9,1
   1a830:	10c00015 	stw	r3,0(r2)
   1a834:	80805215 	stw	r2,328(r16)
   1a838:	10006215 	stw	zero,392(r2)
   1a83c:	10006315 	stw	zero,396(r2)
   1a840:	0007883a 	mov	r3,zero
   1a844:	883fdf26 	beq	r17,zero,1a7c4 <__register_exitproc+0x3c>
   1a848:	18d1883a 	add	r8,r3,r3
   1a84c:	4211883a 	add	r8,r8,r8
   1a850:	1211883a 	add	r8,r2,r8
   1a854:	41802215 	stw	r6,136(r8)
   1a858:	01000044 	movi	r4,1
   1a85c:	11806217 	ldw	r6,392(r2)
   1a860:	20c8983a 	sll	r4,r4,r3
   1a864:	310cb03a 	or	r6,r6,r4
   1a868:	11806215 	stw	r6,392(r2)
   1a86c:	41c04215 	stw	r7,264(r8)
   1a870:	01800084 	movi	r6,2
   1a874:	89bfd31e 	bne	r17,r6,1a7c4 <__register_exitproc+0x3c>
   1a878:	11806317 	ldw	r6,396(r2)
   1a87c:	3108b03a 	or	r4,r6,r4
   1a880:	11006315 	stw	r4,396(r2)
   1a884:	003fcf06 	br	1a7c4 <__register_exitproc+0x3c>
   1a888:	80805304 	addi	r2,r16,332
   1a88c:	80805215 	stw	r2,328(r16)
   1a890:	003fc706 	br	1a7b0 <__register_exitproc+0x28>
   1a894:	00bfffc4 	movi	r2,-1
   1a898:	003fd106 	br	1a7e0 <__register_exitproc+0x58>

0001a89c <__call_exitprocs>:
   1a89c:	008000b4 	movhi	r2,2
   1a8a0:	10b3c104 	addi	r2,r2,-12540
   1a8a4:	10800017 	ldw	r2,0(r2)
   1a8a8:	defff404 	addi	sp,sp,-48
   1a8ac:	dd800815 	stw	r22,32(sp)
   1a8b0:	d8800015 	stw	r2,0(sp)
   1a8b4:	10805204 	addi	r2,r2,328
   1a8b8:	dd000615 	stw	r20,24(sp)
   1a8bc:	dc800415 	stw	r18,16(sp)
   1a8c0:	dfc00b15 	stw	ra,44(sp)
   1a8c4:	df000a15 	stw	fp,40(sp)
   1a8c8:	ddc00915 	stw	r23,36(sp)
   1a8cc:	dd400715 	stw	r21,28(sp)
   1a8d0:	dcc00515 	stw	r19,20(sp)
   1a8d4:	dc400315 	stw	r17,12(sp)
   1a8d8:	dc000215 	stw	r16,8(sp)
   1a8dc:	2025883a 	mov	r18,r4
   1a8e0:	2829883a 	mov	r20,r5
   1a8e4:	d8800115 	stw	r2,4(sp)
   1a8e8:	05bfffc4 	movi	r22,-1
   1a8ec:	d8800017 	ldw	r2,0(sp)
   1a8f0:	14c05217 	ldw	r19,328(r2)
   1a8f4:	98001d26 	beq	r19,zero,1a96c <__call_exitprocs+0xd0>
   1a8f8:	dd400117 	ldw	r21,4(sp)
   1a8fc:	98800117 	ldw	r2,4(r19)
   1a900:	173fffc4 	addi	fp,r2,-1
   1a904:	e0000d16 	blt	fp,zero,1a93c <__call_exitprocs+0xa0>
   1a908:	14000044 	addi	r16,r2,1
   1a90c:	8421883a 	add	r16,r16,r16
   1a910:	8421883a 	add	r16,r16,r16
   1a914:	84402004 	addi	r17,r16,128
   1a918:	9c63883a 	add	r17,r19,r17
   1a91c:	9c21883a 	add	r16,r19,r16
   1a920:	a0001e26 	beq	r20,zero,1a99c <__call_exitprocs+0x100>
   1a924:	80804017 	ldw	r2,256(r16)
   1a928:	15001c26 	beq	r2,r20,1a99c <__call_exitprocs+0x100>
   1a92c:	e73fffc4 	addi	fp,fp,-1
   1a930:	843fff04 	addi	r16,r16,-4
   1a934:	8c7fff04 	addi	r17,r17,-4
   1a938:	e5bff91e 	bne	fp,r22,1a920 <__call_exitprocs+0x84>
   1a93c:	00800034 	movhi	r2,0
   1a940:	10800004 	addi	r2,r2,0
   1a944:	10000926 	beq	r2,zero,1a96c <__call_exitprocs+0xd0>
   1a948:	98800117 	ldw	r2,4(r19)
   1a94c:	1000311e 	bne	r2,zero,1aa14 <__call_exitprocs+0x178>
   1a950:	98800017 	ldw	r2,0(r19)
   1a954:	10003426 	beq	r2,zero,1aa28 <__call_exitprocs+0x18c>
   1a958:	9809883a 	mov	r4,r19
   1a95c:	a8800015 	stw	r2,0(r21)
   1a960:	00000000 	call	0 <__alt_mem_sdram>
   1a964:	acc00017 	ldw	r19,0(r21)
   1a968:	983fe41e 	bne	r19,zero,1a8fc <__call_exitprocs+0x60>
   1a96c:	dfc00b17 	ldw	ra,44(sp)
   1a970:	df000a17 	ldw	fp,40(sp)
   1a974:	ddc00917 	ldw	r23,36(sp)
   1a978:	dd800817 	ldw	r22,32(sp)
   1a97c:	dd400717 	ldw	r21,28(sp)
   1a980:	dd000617 	ldw	r20,24(sp)
   1a984:	dcc00517 	ldw	r19,20(sp)
   1a988:	dc800417 	ldw	r18,16(sp)
   1a98c:	dc400317 	ldw	r17,12(sp)
   1a990:	dc000217 	ldw	r16,8(sp)
   1a994:	dec00c04 	addi	sp,sp,48
   1a998:	f800283a 	ret
   1a99c:	98800117 	ldw	r2,4(r19)
   1a9a0:	80c00017 	ldw	r3,0(r16)
   1a9a4:	10bfffc4 	addi	r2,r2,-1
   1a9a8:	17001526 	beq	r2,fp,1aa00 <__call_exitprocs+0x164>
   1a9ac:	80000015 	stw	zero,0(r16)
   1a9b0:	183fde26 	beq	r3,zero,1a92c <__call_exitprocs+0x90>
   1a9b4:	00800044 	movi	r2,1
   1a9b8:	1708983a 	sll	r4,r2,fp
   1a9bc:	98806217 	ldw	r2,392(r19)
   1a9c0:	9dc00117 	ldw	r23,4(r19)
   1a9c4:	2084703a 	and	r2,r4,r2
   1a9c8:	1000061e 	bne	r2,zero,1a9e4 <__call_exitprocs+0x148>
   1a9cc:	183ee83a 	callr	r3
   1a9d0:	98800117 	ldw	r2,4(r19)
   1a9d4:	15ffc51e 	bne	r2,r23,1a8ec <__call_exitprocs+0x50>
   1a9d8:	a8800017 	ldw	r2,0(r21)
   1a9dc:	14ffd326 	beq	r2,r19,1a92c <__call_exitprocs+0x90>
   1a9e0:	003fc206 	br	1a8ec <__call_exitprocs+0x50>
   1a9e4:	98806317 	ldw	r2,396(r19)
   1a9e8:	2084703a 	and	r2,r4,r2
   1a9ec:	1000061e 	bne	r2,zero,1aa08 <__call_exitprocs+0x16c>
   1a9f0:	89400017 	ldw	r5,0(r17)
   1a9f4:	9009883a 	mov	r4,r18
   1a9f8:	183ee83a 	callr	r3
   1a9fc:	003ff406 	br	1a9d0 <__call_exitprocs+0x134>
   1aa00:	9f000115 	stw	fp,4(r19)
   1aa04:	003fea06 	br	1a9b0 <__call_exitprocs+0x114>
   1aa08:	89000017 	ldw	r4,0(r17)
   1aa0c:	183ee83a 	callr	r3
   1aa10:	003fef06 	br	1a9d0 <__call_exitprocs+0x134>
   1aa14:	98800017 	ldw	r2,0(r19)
   1aa18:	982b883a 	mov	r21,r19
   1aa1c:	1027883a 	mov	r19,r2
   1aa20:	983fb61e 	bne	r19,zero,1a8fc <__call_exitprocs+0x60>
   1aa24:	003fd106 	br	1a96c <__call_exitprocs+0xd0>
   1aa28:	0005883a 	mov	r2,zero
   1aa2c:	003ffa06 	br	1aa18 <__call_exitprocs+0x17c>

0001aa30 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   1aa30:	defffd04 	addi	sp,sp,-12
   1aa34:	df000215 	stw	fp,8(sp)
   1aa38:	df000204 	addi	fp,sp,8
   1aa3c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   1aa40:	008000b4 	movhi	r2,2
   1aa44:	10b40444 	addi	r2,r2,-12271
   1aa48:	10000005 	stb	zero,0(r2)
   1aa4c:	e0bfff17 	ldw	r2,-4(fp)
   1aa50:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   1aa54:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   1aa58:	10000226 	beq	r2,zero,1aa64 <_exit+0x34>
    ALT_SIM_FAIL();
   1aa5c:	002af070 	cmpltui	zero,zero,43969
   1aa60:	00000106 	br	1aa68 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
   1aa64:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   1aa68:	003fff06 	br	1aa68 <_exit+0x38>
